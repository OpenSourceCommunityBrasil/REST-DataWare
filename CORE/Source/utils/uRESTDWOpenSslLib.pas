unit uRESTDWOpenSslLib;

{ Cross-platform unified OpenSSL 1.1.1 import and helper library unit for OpenSSL }

{$I ..\..\Source\Includes\uRESTDW.inc}

{
  REST Dataware .
  Criado por XyberX (Gilbero Rocha da Silva), o REST Dataware tem como objetivo o uso de REST/JSON
 de maneira simples, em qualquer Compilador Pascal (Delphi, Lazarus e outros...).
  O REST Dataware também tem por objetivo levar componentes compatíveis entre o Delphi e outros Compiladores
 Pascal e com compatibilidade entre sistemas operacionais.
  Desenvolvido para ser usado de Maneira RAD, o REST Dataware tem como objetivo principal você usuário que precisa
 de produtividade e flexibilidade para produção de Serviços REST/JSON, simplificando o processo para você programador.

 Membros do Grupo :

 XyberX (Gilberto Rocha)    - Admin - Criador e Administrador  do pacote.
 Alexandre Abbade           - Admin - Administrador do desenvolvimento de DEMOS, coordenador do Grupo.
 Flávio Motta               - Member Tester and DEMO Developer.
 Mobius One                 - Devel, Tester and Admin.
 Gustavo                    - Criptografia and Devel.
 Eloy                       - Devel.
 Roniery                    - Devel.
 Fernando Banhos            - Refactor Drivers REST Dataware.
}

interface

uses
   {$IFDEF MSWINDOWS}
     Windows,
   {$ENDIF}
    Types,
    SysUtils;

{$IFNDEF RESTDWLAMW}
const
  {$IF Defined(WIN32)}
  LIB_CRYPTO_110 = 'libcrypto-1_1.dll';
  LIB_SSL_110 = 'libssl-1_1.dll';

  LIB_CRYPTO_300 = 'libcrypto-3.dll';
  LIB_SSL_300 = 'libssl-3.dll';
  _PU = '';
  {$ELSEIF Defined(WIN64)}
  LIB_CRYPTO_110 = 'libcrypto-1_1-x64.dll';
  LIB_SSL_110 = 'libssl-1_1-x64.dll';

  LIB_CRYPTO_300 = 'libcrypto-3-x64.dll';
  LIB_SSL_300 = 'libssl-3-x64.dll';
  _PU = '';
  {$ELSEIF Defined(ANDROID64)}
  LIB_CRYPTO_110 = 'libcrypto-android64.a';
  LIB_SSL_110 = 'libssl-android64.a';

  LIB_CRYPTO_300 = 'libcrypto-android64.a';
  LIB_SSL_300 = 'libssl-android64.a';
  _PU = '';
  {$ELSEIF Defined(ANDROID32)}
  LIB_CRYPTO_110 = 'libcrypto-android32.a';
  LIB_SSL_110 = 'libssl-android32.a';

  LIB_CRYPTO_300 = 'libcrypto-android32.a';
  LIB_SSL_300 = 'libssl-android32.a';
  _PU = '';
  {$ELSEIF Defined(IOS)}
  LIB_CRYPTO_110 = 'libcrypto-ios.a';
  LIB_SSL_110 = 'libssl-ios.a';

  LIB_CRYPTO_300 = 'libcrypto-ios.a';
  LIB_SSL_300 = 'libssl-ios.a';
  _PU = '';
  {$ELSEIF Defined(MACOS32)}
  LIB_CRYPTO_110 = 'libssl-merged-osx32.dylib';
  LIB_SSL_110 = 'libssl-merged-osx32.dylib';

  LIB_CRYPTO_300 = 'libssl-merged-osx32.dylib';
  LIB_SSL_300 = 'libssl-merged-osx32.dylib';
  _PU = '_';
  {$ELSEIF Defined(MACOS64)}
  LIB_CRYPTO_110 = 'libcrypto-osx64.a';
  LIB_SSL_110 = 'libssl-osx64.a';

  LIB_CRYPTO_300 = 'libcrypto-osx64.a';
  LIB_SSL_300 = 'libssl-osx64.a';
  _PU = '';
  {$ELSEIF Defined(LINUX)}
  LIB_CRYPTO_110 = 'libcrypto.so';
  LIB_SSL_110 = 'libssl.so';

  LIB_CRYPTO_300 = 'libcrypto.so';
  LIB_SSL_300 = 'libssl.so';
  _PU = '';
  {$ELSE}
   {$MESSAGE Error 'Unsupported platform'}
  {$IFEND}
{$ENDIF}

const
  OPENSSL_VER_1100   = $1010000f; // 1.1.0
  OPENSSL_VER_1101   = $10101000; // 1.1.1
  OPENSSL_VER_3000   = $30000000; // 3.0.0 base
  OPENSSL_VER_1101ZZ = $10101FFF; // 1.1.1zz

  OPENSSL_VERSION_NUMBER = $1010107f;
  OPENSSL_VERSION_TEXT = 'OpenSSL 1.1.1g 21 Apr 2020';
  SHLIB_VERSION_HISTORY = '';
  SHLIB_VERSION_NUMBER = '1.1';

  OPENSSL_VER_MIN    = $0000000F;
  OPENSSL_VER_MAX    = $FFFFFFFF;

  OPENSSL_SYS_WIN32 = 1;
  OPENSSL_MIN_API = 0;
  OPENSSL_API_COMPAT = OPENSSL_MIN_API;
  _AES_ENCRYPT = 1;
  _AES_DECRYPT = 0;
  AES_MAXNR = 14;
  AES_BLOCK_SIZE = 16;
  _I64_MAX = 9223372036854775807;
  OSSL_SSIZE_MAX = _I64_MAX;
  CRYPTO_F_CMAC_CTX_NEW = 120;
  CRYPTO_F_CRYPTO_DUP_EX_DATA = 110;
  CRYPTO_F_CRYPTO_FREE_EX_DATA = 111;
  CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100;
  CRYPTO_F_CRYPTO_MEMDUP = 115;
  CRYPTO_F_CRYPTO_NEW_EX_DATA = 112;
  CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 121;
  CRYPTO_F_CRYPTO_OCB128_INIT = 122;
  CRYPTO_F_CRYPTO_SET_EX_DATA = 102;
  CRYPTO_F_FIPS_MODE_SET = 109;
  CRYPTO_F_GET_AND_LOCK = 113;
  CRYPTO_F_OPENSSL_ATEXIT = 114;
  CRYPTO_F_OPENSSL_BUF2HEXSTR = 117;
  CRYPTO_F_OPENSSL_FOPEN = 119;
  CRYPTO_F_OPENSSL_HEXSTR2BUF = 118;
  CRYPTO_F_OPENSSL_INIT_CRYPTO = 116;
  CRYPTO_F_OPENSSL_LH_NEW = 126;
  CRYPTO_F_OPENSSL_SK_DEEP_COPY = 127;
  CRYPTO_F_OPENSSL_SK_DUP = 128;
  CRYPTO_F_PKEY_HMAC_INIT = 123;
  CRYPTO_F_PKEY_POLY1305_INIT = 124;
  CRYPTO_F_PKEY_SIPHASH_INIT = 125;
  CRYPTO_F_SK_RESERVE = 129;
  CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = 101;
  CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;
  CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;
  SSLEAY_VERSION_NUMBER = OPENSSL_VERSION_NUMBER;
  //OPENSSL_VERSION = 0;
  OPENSSL_CFLAGS = 1;
  SSLEAY_CFLAGS = OPENSSL_CFLAGS;
  OPENSSL_BUILT_ON = 2;
  SSLEAY_BUILT_ON = OPENSSL_BUILT_ON;
  OPENSSL_PLATFORM = 3;
  SSLEAY_PLATFORM = OPENSSL_PLATFORM;
  OPENSSL_DIR = 4;
  SSLEAY_DIR = OPENSSL_DIR;
  CRYPTO_MEM_CHECK_OFF = $0;
  CRYPTO_MEM_CHECK_ON = $1;
  CRYPTO_MEM_CHECK_ENABLE = $2;
  CRYPTO_MEM_CHECK_DISABLE = $3;
  CRYPTO_EX_INDEX_SSL = 0;
  CRYPTO_EX_INDEX_SSL_CTX = 1;
  CRYPTO_EX_INDEX_SSL_SESSION = 2;
  CRYPTO_EX_INDEX_X509 = 3;
  CRYPTO_EX_INDEX_X509_STORE = 4;
  CRYPTO_EX_INDEX_X509_STORE_CTX = 5;
  CRYPTO_EX_INDEX_DH = 6;
  CRYPTO_EX_INDEX_DSA = 7;
  CRYPTO_EX_INDEX_EC_KEY = 8;
  CRYPTO_EX_INDEX_RSA = 9;
  CRYPTO_EX_INDEX_ENGINE = 10;
  CRYPTO_EX_INDEX_UI = 11;
  CRYPTO_EX_INDEX_BIO = 12;
  CRYPTO_EX_INDEX_APP = 13;
  CRYPTO_EX_INDEX_UI_METHOD = 14;
  CRYPTO_EX_INDEX_DRBG = 15;
  CRYPTO_EX_INDEX__COUNT = 16;
  OPENSSL_ENGINES_DIR = 5;
  CRYPTO_LOCK = 1;
  CRYPTO_UNLOCK = 2;
  CRYPTO_READ = 4;
  CRYPTO_WRITE = 8;
  OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = $00000001;
  OPENSSL_INIT_LOAD_CRYPTO_STRINGS = $00000002;
  OPENSSL_INIT_ADD_ALL_CIPHERS = $00000004;
  OPENSSL_INIT_ADD_ALL_DIGESTS = $00000008;
  OPENSSL_INIT_NO_ADD_ALL_CIPHERS = $00000010;
  OPENSSL_INIT_NO_ADD_ALL_DIGESTS = $00000020;
  OPENSSL_INIT_LOAD_CONFIG = $00000040;
  OPENSSL_INIT_NO_LOAD_CONFIG = $00000080;
  OPENSSL_INIT_ASYNC = $00000100;
  OPENSSL_INIT_ENGINE_RDRAND = $00000200;
  OPENSSL_INIT_ENGINE_DYNAMIC = $00000400;
  OPENSSL_INIT_ENGINE_OPENSSL = $00000800;
  OPENSSL_INIT_ENGINE_CRYPTODEV = $00001000;
  OPENSSL_INIT_ENGINE_CAPI = $00002000;
  OPENSSL_INIT_ENGINE_PADLOCK = $00004000;
  OPENSSL_INIT_ENGINE_AFALG = $00008000;
  OPENSSL_INIT_ATFORK = $00020000;
  OPENSSL_INIT_NO_ATEXIT = $00080000;
  OPENSSL_INIT_ENGINE_ALL_BUILTIN = (OPENSSL_INIT_ENGINE_RDRAND or OPENSSL_INIT_ENGINE_DYNAMIC or OPENSSL_INIT_ENGINE_CRYPTODEV or OPENSSL_INIT_ENGINE_CAPI or OPENSSL_INIT_ENGINE_PADLOCK);
  CRYPTO_ONCE_STATIC_INIT = 0;
  BIO_F_ACPT_STATE = 100;
  BIO_F_ADDRINFO_WRAP = 148;
  BIO_F_ADDR_STRINGS = 134;
  BIO_F_BIO_ACCEPT = 101;
  BIO_F_BIO_ACCEPT_EX = 137;
  BIO_F_BIO_ACCEPT_NEW = 152;
  BIO_F_BIO_ADDR_NEW = 144;
  BIO_F_BIO_BIND = 147;
  BIO_F_BIO_CALLBACK_CTRL = 131;
  BIO_F_BIO_CONNECT = 138;
  BIO_F_BIO_CONNECT_NEW = 153;
  BIO_F_BIO_CTRL = 103;
  BIO_F_BIO_GETS = 104;
  BIO_F_BIO_GET_HOST_IP = 106;
  BIO_F_BIO_GET_NEW_INDEX = 102;
  BIO_F_BIO_GET_PORT = 107;
  BIO_F_BIO_LISTEN = 139;
  BIO_F_BIO_LOOKUP = 135;
  BIO_F_BIO_LOOKUP_EX = 143;
  BIO_F_BIO_MAKE_PAIR = 121;
  BIO_F_BIO_METH_NEW = 146;
  BIO_F_BIO_NEW = 108;
  BIO_F_BIO_NEW_DGRAM_SCTP = 145;
  BIO_F_BIO_NEW_FILE = 109;
  BIO_F_BIO_NEW_MEM_BUF = 126;
  BIO_F_BIO_NREAD = 123;
  BIO_F_BIO_NREAD0 = 124;
  BIO_F_BIO_NWRITE = 125;
  BIO_F_BIO_NWRITE0 = 122;
  BIO_F_BIO_PARSE_HOSTSERV = 136;
  BIO_F_BIO_PUTS = 110;
  BIO_F_BIO_READ = 111;
  BIO_F_BIO_READ_EX = 105;
  BIO_F_BIO_READ_INTERN = 120;
  BIO_F_BIO_SOCKET = 140;
  BIO_F_BIO_SOCKET_NBIO = 142;
  BIO_F_BIO_SOCK_INFO = 141;
  BIO_F_BIO_SOCK_INIT = 112;
  BIO_F_BIO_WRITE = 113;
  BIO_F_BIO_WRITE_EX = 119;
  BIO_F_BIO_WRITE_INTERN = 128;
  BIO_F_BUFFER_CTRL = 114;
  BIO_F_CONN_CTRL = 127;
  BIO_F_CONN_STATE = 115;
  BIO_F_DGRAM_SCTP_NEW = 149;
  BIO_F_DGRAM_SCTP_READ = 132;
  BIO_F_DGRAM_SCTP_WRITE = 133;
  BIO_F_DOAPR_OUTCH = 150;
  BIO_F_FILE_CTRL = 116;
  BIO_F_FILE_READ = 130;
  BIO_F_LINEBUFFER_CTRL = 129;
  BIO_F_LINEBUFFER_NEW = 151;
  BIO_F_MEM_WRITE = 117;
  BIO_F_NBIOF_NEW = 154;
  BIO_F_SLG_WRITE = 155;
  BIO_F_SSL_NEW = 118;
  BIO_R_ACCEPT_ERROR = 100;
  BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141;
  BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129;
  BIO_R_BAD_FOPEN_MODE = 101;
  BIO_R_BROKEN_PIPE = 124;
  BIO_R_CONNECT_ERROR = 103;
  BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107;
  BIO_R_GETSOCKNAME_ERROR = 132;
  BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133;
  BIO_R_GETTING_SOCKTYPE = 134;
  BIO_R_INVALID_ARGUMENT = 125;
  BIO_R_INVALID_SOCKET = 135;
  BIO_R_IN_USE = 123;
  BIO_R_LENGTH_TOO_LONG = 102;
  BIO_R_LISTEN_V6_ONLY = 136;
  BIO_R_LOOKUP_RETURNED_NOTHING = 142;
  BIO_R_MALFORMED_HOST_OR_SERVICE = 130;
  BIO_R_NBIO_CONNECT_ERROR = 110;
  BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143;
  BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144;
  BIO_R_NO_PORT_DEFINED = 113;
  BIO_R_NO_SUCH_FILE = 128;
  BIO_R_NULL_PARAMETER = 115;
  BIO_R_UNABLE_TO_BIND_SOCKET = 117;
  BIO_R_UNABLE_TO_CREATE_SOCKET = 118;
  BIO_R_UNABLE_TO_KEEPALIVE = 137;
  BIO_R_UNABLE_TO_LISTEN_SOCKET = 119;
  BIO_R_UNABLE_TO_NODELAY = 138;
  BIO_R_UNABLE_TO_REUSEADDR = 139;
  BIO_R_UNAVAILABLE_IP_FAMILY = 145;
  BIO_R_UNINITIALIZED = 120;
  BIO_R_UNKNOWN_INFO_TYPE = 140;
  BIO_R_UNSUPPORTED_IP_FAMILY = 146;
  BIO_R_UNSUPPORTED_METHOD = 121;
  BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131;
  BIO_R_WRITE_TO_READ_ONLY_BIO = 126;
  BIO_R_WSASTARTUP = 122;
  BIO_TYPE_DESCRIPTOR = $0100;
  BIO_TYPE_FILTER = $0200;
  BIO_TYPE_SOURCE_SINK = $0400;
  BIO_TYPE_NONE = 0;
  BIO_TYPE_MEM = (1 or BIO_TYPE_SOURCE_SINK);
  BIO_TYPE_FILE = (2 or BIO_TYPE_SOURCE_SINK);
  BIO_TYPE_FD = (4 or BIO_TYPE_SOURCE_SINK or BIO_TYPE_DESCRIPTOR);
  BIO_TYPE_SOCKET = (5 or BIO_TYPE_SOURCE_SINK or BIO_TYPE_DESCRIPTOR);
  BIO_TYPE_NULL = (6 or BIO_TYPE_SOURCE_SINK);
  BIO_TYPE_SSL = (7 or BIO_TYPE_FILTER);
  BIO_TYPE_MD = (8 or BIO_TYPE_FILTER);
  BIO_TYPE_BUFFER = (9 or BIO_TYPE_FILTER);
  BIO_TYPE_CIPHER = (10 or BIO_TYPE_FILTER);
  BIO_TYPE_BASE64 = (11 or BIO_TYPE_FILTER);
  BIO_TYPE_CONNECT = (12 or BIO_TYPE_SOURCE_SINK or BIO_TYPE_DESCRIPTOR);
  BIO_TYPE_ACCEPT = (13 or BIO_TYPE_SOURCE_SINK or BIO_TYPE_DESCRIPTOR);
  BIO_TYPE_NBIO_TEST = (16 or BIO_TYPE_FILTER);
  BIO_TYPE_NULL_FILTER = (17 or BIO_TYPE_FILTER);
  BIO_TYPE_BIO = (19 or BIO_TYPE_SOURCE_SINK);
  BIO_TYPE_LINEBUFFER = (20 or BIO_TYPE_FILTER);
  BIO_TYPE_DGRAM = (21 or BIO_TYPE_SOURCE_SINK or BIO_TYPE_DESCRIPTOR);
  BIO_TYPE_ASN1 = (22 or BIO_TYPE_FILTER);
  BIO_TYPE_COMP = (23 or BIO_TYPE_FILTER);
  BIO_TYPE_START = 128;
  BIO_NOCLOSE = $00;
  BIO_CLOSE = $01;
  BIO_CTRL_RESET = 1;
  BIO_CTRL_EOF = 2;
  BIO_CTRL_INFO = 3;
  BIO_CTRL_SET = 4;
  BIO_CTRL_GET = 5;
  BIO_CTRL_PUSH = 6;
  BIO_CTRL_POP = 7;
  BIO_CTRL_GET_CLOSE = 8;
  BIO_CTRL_SET_CLOSE = 9;
  _BIO_CTRL_PENDING = 10;
  BIO_CTRL_FLUSH = 11;
  BIO_CTRL_DUP = 12;
  _BIO_CTRL_WPENDING = 13;
  BIO_CTRL_SET_CALLBACK = 14;
  BIO_CTRL_GET_CALLBACK = 15;
  BIO_CTRL_PEEK = 29;
  BIO_CTRL_SET_FILENAME = 30;
  BIO_CTRL_DGRAM_CONNECT = 31;
  BIO_CTRL_DGRAM_SET_CONNECTED = 32;
  BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33;
  BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34;
  BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35;
  BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36;
  BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37;
  BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38;
  BIO_CTRL_DGRAM_MTU_DISCOVER = 39;
  BIO_CTRL_DGRAM_QUERY_MTU = 40;
  BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;
  BIO_CTRL_DGRAM_GET_MTU = 41;
  BIO_CTRL_DGRAM_SET_MTU = 42;
  BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;
  BIO_CTRL_DGRAM_GET_PEER = 46;
  BIO_CTRL_DGRAM_SET_PEER = 44;
  BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45;
  BIO_CTRL_DGRAM_SET_DONT_FRAG = 48;
  BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49;
  BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50;
  BIO_CTRL_DGRAM_SET_PEEK_MODE = 71;
  BIO_FP_READ = $02;
  BIO_FP_WRITE = $04;
  BIO_FP_APPEND = $08;
  BIO_FP_TEXT = $10;
  BIO_FLAGS_READ = $01;
  BIO_FLAGS_WRITE = $02;
  BIO_FLAGS_IO_SPECIAL = $04;
  BIO_FLAGS_RWS = (BIO_FLAGS_READ or BIO_FLAGS_WRITE or BIO_FLAGS_IO_SPECIAL);
  BIO_FLAGS_SHOULD_RETRY = $08;
  BIO_FLAGS_UPLINK = 0;
  BIO_FLAGS_BASE64_NO_NL = $100;
  BIO_FLAGS_MEM_RDONLY = $200;
  BIO_FLAGS_NONCLEAR_RST = $400;
  BIO_FLAGS_IN_EOF = $800;
  BIO_RR_SSL_X509_LOOKUP = $01;
  BIO_RR_CONNECT = $02;
  BIO_RR_ACCEPT = $03;
  BIO_CB_FREE = $01;
  BIO_CB_READ = $02;
  BIO_CB_WRITE = $03;
  BIO_CB_PUTS = $04;
  BIO_CB_GETS = $05;
  BIO_CB_CTRL = $06;
  BIO_CB_RETURN = $80;
  BIO_C_SET_CONNECT = 100;
  BIO_C_DO_STATE_MACHINE = 101;
  BIO_C_SET_NBIO = 102;
  BIO_C_SET_FD = 104;
  BIO_C_GET_FD = 105;
  BIO_C_SET_FILE_PTR = 106;
  BIO_C_GET_FILE_PTR = 107;
  BIO_C_SET_FILENAME = 108;
  BIO_C_SET_SSL = 109;
  BIO_C_GET_SSL = 110;
  BIO_C_SET_MD = 111;
  BIO_C_GET_MD = 112;
  BIO_C_GET_CIPHER_STATUS = 113;
  BIO_C_SET_BUF_MEM = 114;
  BIO_C_GET_BUF_MEM_PTR = 115;
  BIO_C_GET_BUFF_NUM_LINES = 116;
  BIO_C_SET_BUFF_SIZE = 117;
  BIO_C_SET_ACCEPT = 118;
  BIO_C_SSL_MODE = 119;
  BIO_C_GET_MD_CTX = 120;
  BIO_C_SET_BUFF_READ_DATA = 122;
  BIO_C_GET_CONNECT = 123;
  BIO_C_GET_ACCEPT = 124;
  BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;
  BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;
  BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;
  BIO_C_FILE_SEEK = 128;
  BIO_C_GET_CIPHER_CTX = 129;
  BIO_C_SET_BUF_MEM_EOF_RETURN = 130;
  BIO_C_SET_BIND_MODE = 131;
  BIO_C_GET_BIND_MODE = 132;
  BIO_C_FILE_TELL = 133;
  BIO_C_GET_SOCKS = 134;
  BIO_C_SET_SOCKS = 135;
  BIO_C_SET_WRITE_BUF_SIZE = 136;
  BIO_C_GET_WRITE_BUF_SIZE = 137;
  BIO_C_MAKE_BIO_PAIR = 138;
  BIO_C_DESTROY_BIO_PAIR = 139;
  BIO_C_GET_WRITE_GUARANTEE = 140;
  BIO_C_GET_READ_REQUEST = 141;
  BIO_C_SHUTDOWN_WR = 142;
  BIO_C_NREAD0 = 143;
  BIO_C_NREAD = 144;
  BIO_C_NWRITE0 = 145;
  BIO_C_NWRITE = 146;
  BIO_C_RESET_READ_REQUEST = 147;
  BIO_C_SET_MD_CTX = 148;
  BIO_C_SET_PREFIX = 149;
  BIO_C_GET_PREFIX = 150;
  BIO_C_SET_SUFFIX = 151;
  BIO_C_GET_SUFFIX = 152;
  BIO_C_SET_EX_ARG = 153;
  BIO_C_GET_EX_ARG = 154;
  BIO_C_SET_CONNECT_MODE = 155;
  BIO_FAMILY_IPV4 = 4;
  BIO_FAMILY_IPV6 = 6;
  BIO_FAMILY_IPANY = 256;
  BIO_BIND_NORMAL = 0;
  BIO_SOCK_REUSEADDR = $01;
  BIO_BIND_REUSEADDR = BIO_SOCK_REUSEADDR;
  BIO_BIND_REUSEADDR_IF_UNUSED = BIO_SOCK_REUSEADDR;
  BIO_SOCK_V6_ONLY = $02;
  BIO_SOCK_KEEPALIVE = $04;
  BIO_SOCK_NONBLOCK = $08;
  BIO_SOCK_NODELAY = $10;
  ASN1_F_A2D_ASN1_OBJECT = 100;
  ASN1_F_A2I_ASN1_INTEGER = 102;
  ASN1_F_A2I_ASN1_STRING = 103;
  ASN1_F_APPEND_EXP = 176;
  ASN1_F_ASN1_BIO_INIT = 113;
  ASN1_F_ASN1_BIT_STRING_SET_BIT = 183;
  ASN1_F_ASN1_CB = 177;
  ASN1_F_ASN1_CHECK_TLEN = 104;
  ASN1_F_ASN1_COLLECT = 106;
  ASN1_F_ASN1_D2I_EX_PRIMITIVE = 108;
  ASN1_F_ASN1_D2I_FP = 109;
  ASN1_F_ASN1_D2I_READ_BIO = 107;
  ASN1_F_ASN1_DIGEST = 184;
  ASN1_F_ASN1_DO_ADB = 110;
  ASN1_F_ASN1_DO_LOCK = 233;
  ASN1_F_ASN1_DUP = 111;
  ASN1_F_ASN1_ENC_SAVE = 115;
  ASN1_F_ASN1_EX_C2I = 204;
  ASN1_F_ASN1_FIND_END = 190;
  ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 216;
  ASN1_F_ASN1_GENERATE_V3 = 178;
  ASN1_F_ASN1_GET_INT64 = 224;
  ASN1_F_ASN1_GET_OBJECT = 114;
  ASN1_F_ASN1_GET_UINT64 = 225;
  ASN1_F_ASN1_I2D_BIO = 116;
  ASN1_F_ASN1_I2D_FP = 117;
  ASN1_F_ASN1_ITEM_D2I_FP = 206;
  ASN1_F_ASN1_ITEM_DUP = 191;
  ASN1_F_ASN1_ITEM_EMBED_D2I = 120;
  ASN1_F_ASN1_ITEM_EMBED_NEW = 121;
  ASN1_F_ASN1_ITEM_FLAGS_I2D = 118;
  ASN1_F_ASN1_ITEM_I2D_BIO = 192;
  ASN1_F_ASN1_ITEM_I2D_FP = 193;
  ASN1_F_ASN1_ITEM_PACK = 198;
  ASN1_F_ASN1_ITEM_SIGN = 195;
  ASN1_F_ASN1_ITEM_SIGN_CTX = 220;
  ASN1_F_ASN1_ITEM_UNPACK = 199;
  ASN1_F_ASN1_ITEM_VERIFY = 197;
  ASN1_F_ASN1_MBSTRING_NCOPY = 122;
  ASN1_F_ASN1_OBJECT_NEW = 123;
  ASN1_F_ASN1_OUTPUT_DATA = 214;
  ASN1_F_ASN1_PCTX_NEW = 205;
  ASN1_F_ASN1_PRIMITIVE_NEW = 119;
  ASN1_F_ASN1_SCTX_NEW = 221;
  ASN1_F_ASN1_SIGN = 128;
  ASN1_F_ASN1_STR2TYPE = 179;
  ASN1_F_ASN1_STRING_GET_INT64 = 227;
  ASN1_F_ASN1_STRING_GET_UINT64 = 230;
  ASN1_F_ASN1_STRING_SET = 186;
  ASN1_F_ASN1_STRING_TABLE_ADD = 129;
  ASN1_F_ASN1_STRING_TO_BN = 228;
  ASN1_F_ASN1_STRING_TYPE_NEW = 130;
  ASN1_F_ASN1_TEMPLATE_EX_D2I = 132;
  ASN1_F_ASN1_TEMPLATE_NEW = 133;
  ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 131;
  ASN1_F_ASN1_TIME_ADJ = 217;
  ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 134;
  ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 135;
  ASN1_F_ASN1_UTCTIME_ADJ = 218;
  ASN1_F_ASN1_VERIFY = 137;
  ASN1_F_B64_READ_ASN1 = 209;
  ASN1_F_B64_WRITE_ASN1 = 210;
  ASN1_F_BIO_NEW_NDEF = 208;
  ASN1_F_BITSTR_CB = 180;
  ASN1_F_BN_TO_ASN1_STRING = 229;
  ASN1_F_C2I_ASN1_BIT_STRING = 189;
  ASN1_F_C2I_ASN1_INTEGER = 194;
  ASN1_F_C2I_ASN1_OBJECT = 196;
  ASN1_F_C2I_IBUF = 226;
  ASN1_F_C2I_UINT64_INT = 101;
  ASN1_F_COLLECT_DATA = 140;
  ASN1_F_D2I_ASN1_OBJECT = 147;
  ASN1_F_D2I_ASN1_UINTEGER = 150;
  ASN1_F_D2I_AUTOPRIVATEKEY = 207;
  ASN1_F_D2I_PRIVATEKEY = 154;
  ASN1_F_D2I_PUBLICKEY = 155;
  ASN1_F_DO_BUF = 142;
  ASN1_F_DO_CREATE = 124;
  ASN1_F_DO_DUMP = 125;
  ASN1_F_DO_TCREATE = 222;
  ASN1_F_I2A_ASN1_OBJECT = 126;
  ASN1_F_I2D_ASN1_BIO_STREAM = 211;
  ASN1_F_I2D_ASN1_OBJECT = 143;
  ASN1_F_I2D_DSA_PUBKEY = 161;
  ASN1_F_I2D_EC_PUBKEY = 181;
  ASN1_F_I2D_PRIVATEKEY = 163;
  ASN1_F_I2D_PUBLICKEY = 164;
  ASN1_F_I2D_RSA_PUBKEY = 165;
  ASN1_F_LONG_C2I = 166;
  ASN1_F_NDEF_PREFIX = 127;
  ASN1_F_NDEF_SUFFIX = 136;
  ASN1_F_OID_MODULE_INIT = 174;
  ASN1_F_PARSE_TAGGING = 182;
  ASN1_F_PKCS5_PBE2_SET_IV = 167;
  ASN1_F_PKCS5_PBE2_SET_SCRYPT = 231;
  ASN1_F_PKCS5_PBE_SET = 202;
  ASN1_F_PKCS5_PBE_SET0_ALGOR = 215;
  ASN1_F_PKCS5_PBKDF2_SET = 219;
  ASN1_F_PKCS5_SCRYPT_SET = 232;
  ASN1_F_SMIME_READ_ASN1 = 212;
  ASN1_F_SMIME_TEXT = 213;
  ASN1_F_STABLE_GET = 138;
  ASN1_F_STBL_MODULE_INIT = 223;
  ASN1_F_UINT32_C2I = 105;
  ASN1_F_UINT32_NEW = 139;
  ASN1_F_UINT64_C2I = 112;
  ASN1_F_UINT64_NEW = 141;
  ASN1_F_X509_CRL_ADD0_REVOKED = 169;
  ASN1_F_X509_INFO_NEW = 170;
  ASN1_F_X509_NAME_ENCODE = 203;
  ASN1_F_X509_NAME_EX_D2I = 158;
  ASN1_F_X509_NAME_EX_NEW = 171;
  ASN1_F_X509_PKEY_NEW = 173;
  ASN1_R_ADDING_OBJECT = 171;
  ASN1_R_ASN1_PARSE_ERROR = 203;
  ASN1_R_ASN1_SIG_PARSE_ERROR = 204;
  ASN1_R_AUX_ERROR = 100;
  ASN1_R_BAD_OBJECT_HEADER = 102;
  ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214;
  ASN1_R_BN_LIB = 105;
  ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;
  ASN1_R_BUFFER_TOO_SMALL = 107;
  ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108;
  ASN1_R_CONTEXT_NOT_INITIALISED = 217;
  ASN1_R_DATA_IS_WRONG = 109;
  ASN1_R_DECODE_ERROR = 110;
  ASN1_R_DEPTH_EXCEEDED = 174;
  ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198;
  ASN1_R_ENCODE_ERROR = 112;
  ASN1_R_ERROR_GETTING_TIME = 173;
  ASN1_R_ERROR_LOADING_SECTION = 172;
  ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114;
  ASN1_R_EXPECTING_AN_INTEGER = 115;
  ASN1_R_EXPECTING_AN_OBJECT = 116;
  ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;
  ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;
  ASN1_R_FIELD_MISSING = 121;
  ASN1_R_FIRST_NUM_TOO_LARGE = 122;
  ASN1_R_HEADER_TOO_LONG = 123;
  ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175;
  ASN1_R_ILLEGAL_BOOLEAN = 176;
  ASN1_R_ILLEGAL_CHARACTERS = 124;
  ASN1_R_ILLEGAL_FORMAT = 177;
  ASN1_R_ILLEGAL_HEX = 178;
  ASN1_R_ILLEGAL_IMPLICIT_TAG = 179;
  ASN1_R_ILLEGAL_INTEGER = 180;
  ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226;
  ASN1_R_ILLEGAL_NESTED_TAGGING = 181;
  ASN1_R_ILLEGAL_NULL = 125;
  ASN1_R_ILLEGAL_NULL_VALUE = 182;
  ASN1_R_ILLEGAL_OBJECT = 183;
  ASN1_R_ILLEGAL_OPTIONAL_ANY = 126;
  ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170;
  ASN1_R_ILLEGAL_PADDING = 221;
  ASN1_R_ILLEGAL_TAGGED_ANY = 127;
  ASN1_R_ILLEGAL_TIME_VALUE = 184;
  ASN1_R_ILLEGAL_ZERO_CONTENT = 222;
  ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185;
  ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128;
  ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220;
  ASN1_R_INVALID_BMPSTRING_LENGTH = 129;
  ASN1_R_INVALID_DIGIT = 130;
  ASN1_R_INVALID_MIME_TYPE = 205;
  ASN1_R_INVALID_MODIFIER = 186;
  ASN1_R_INVALID_NUMBER = 187;
  ASN1_R_INVALID_OBJECT_ENCODING = 216;
  ASN1_R_INVALID_SCRYPT_PARAMETERS = 227;
  ASN1_R_INVALID_SEPARATOR = 131;
  ASN1_R_INVALID_STRING_TABLE_VALUE = 218;
  ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133;
  ASN1_R_INVALID_UTF8STRING = 134;
  ASN1_R_INVALID_VALUE = 219;
  ASN1_R_LIST_ERROR = 188;
  ASN1_R_MIME_NO_CONTENT_TYPE = 206;
  ASN1_R_MIME_PARSE_ERROR = 207;
  ASN1_R_MIME_SIG_PARSE_ERROR = 208;
  ASN1_R_MISSING_EOC = 137;
  ASN1_R_MISSING_SECOND_NUMBER = 138;
  ASN1_R_MISSING_VALUE = 189;
  ASN1_R_MSTRING_NOT_UNIVERSAL = 139;
  ASN1_R_MSTRING_WRONG_TAG = 140;
  ASN1_R_NESTED_ASN1_STRING = 197;
  ASN1_R_NESTED_TOO_DEEP = 201;
  ASN1_R_NON_HEX_CHARACTERS = 141;
  ASN1_R_NOT_ASCII_FORMAT = 190;
  ASN1_R_NOT_ENOUGH_DATA = 142;
  ASN1_R_NO_CONTENT_TYPE = 209;
  ASN1_R_NO_MATCHING_CHOICE_TYPE = 143;
  ASN1_R_NO_MULTIPART_BODY_FAILURE = 210;
  ASN1_R_NO_MULTIPART_BOUNDARY = 211;
  ASN1_R_NO_SIG_CONTENT_TYPE = 212;
  ASN1_R_NULL_IS_WRONG_LENGTH = 144;
  ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191;
  ASN1_R_ODD_NUMBER_OF_CHARS = 145;
  ASN1_R_SECOND_NUMBER_TOO_LARGE = 147;
  ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148;
  ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149;
  ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192;
  ASN1_R_SHORT_LINE = 150;
  ASN1_R_SIG_INVALID_MIME_TYPE = 213;
  ASN1_R_STREAMING_NOT_SUPPORTED = 202;
  ASN1_R_STRING_TOO_LONG = 151;
  ASN1_R_STRING_TOO_SHORT = 152;
  ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154;
  ASN1_R_TIME_NOT_ASCII_FORMAT = 193;
  ASN1_R_TOO_LARGE = 223;
  ASN1_R_TOO_LONG = 155;
  ASN1_R_TOO_SMALL = 224;
  ASN1_R_TYPE_NOT_CONSTRUCTED = 156;
  ASN1_R_TYPE_NOT_PRIMITIVE = 195;
  ASN1_R_UNEXPECTED_EOC = 159;
  ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215;
  ASN1_R_UNKNOWN_FORMAT = 160;
  ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161;
  ASN1_R_UNKNOWN_OBJECT_TYPE = 162;
  ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163;
  ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199;
  ASN1_R_UNKNOWN_TAG = 194;
  ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164;
  ASN1_R_UNSUPPORTED_CIPHER = 228;
  ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167;
  ASN1_R_UNSUPPORTED_TYPE = 196;
  ASN1_R_WRONG_INTEGER_TYPE = 225;
  ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200;
  ASN1_R_WRONG_TAG = 168;
  BN_F_BNRAND = 127;
  BN_F_BNRAND_RANGE = 138;
  BN_F_BN_BLINDING_CONVERT_EX = 100;
  BN_F_BN_BLINDING_CREATE_PARAM = 128;
  BN_F_BN_BLINDING_INVERT_EX = 101;
  BN_F_BN_BLINDING_NEW = 102;
  BN_F_BN_BLINDING_UPDATE = 103;
  BN_F_BN_BN2DEC = 104;
  BN_F_BN_BN2HEX = 105;
  BN_F_BN_COMPUTE_WNAF = 142;
  BN_F_BN_CTX_GET = 116;
  BN_F_BN_CTX_NEW = 106;
  BN_F_BN_CTX_START = 129;
  BN_F_BN_DIV = 107;
  BN_F_BN_DIV_RECP = 130;
  BN_F_BN_EXP = 123;
  BN_F_BN_EXPAND_INTERNAL = 120;
  BN_F_BN_GENCB_NEW = 143;
  BN_F_BN_GENERATE_DSA_NONCE = 140;
  BN_F_BN_GENERATE_PRIME_EX = 141;
  BN_F_BN_GF2M_MOD = 131;
  BN_F_BN_GF2M_MOD_EXP = 132;
  BN_F_BN_GF2M_MOD_MUL = 133;
  BN_F_BN_GF2M_MOD_SOLVE_QUAD = 134;
  BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 135;
  BN_F_BN_GF2M_MOD_SQR = 136;
  BN_F_BN_GF2M_MOD_SQRT = 137;
  BN_F_BN_LSHIFT = 145;
  BN_F_BN_MOD_EXP2_MONT = 118;
  BN_F_BN_MOD_EXP_MONT = 109;
  BN_F_BN_MOD_EXP_MONT_CONSTTIME = 124;
  BN_F_BN_MOD_EXP_MONT_WORD = 117;
  BN_F_BN_MOD_EXP_RECP = 125;
  BN_F_BN_MOD_EXP_SIMPLE = 126;
  BN_F_BN_MOD_INVERSE = 110;
  BN_F_BN_MOD_INVERSE_NO_BRANCH = 139;
  BN_F_BN_MOD_LSHIFT_QUICK = 119;
  BN_F_BN_MOD_SQRT = 121;
  BN_F_BN_MONT_CTX_NEW = 149;
  BN_F_BN_MPI2BN = 112;
  BN_F_BN_NEW = 113;
  BN_F_BN_POOL_GET = 147;
  BN_F_BN_RAND = 114;
  BN_F_BN_RAND_RANGE = 122;
  BN_F_BN_RECP_CTX_NEW = 150;
  BN_F_BN_RSHIFT = 146;
  BN_F_BN_SET_WORDS = 144;
  BN_F_BN_STACK_PUSH = 148;
  BN_F_BN_USUB = 115;
  BN_R_ARG2_LT_ARG3 = 100;
  BN_R_BAD_RECIPROCAL = 101;
  BN_R_BIGNUM_TOO_LONG = 114;
  BN_R_BITS_TOO_SMALL = 118;
  BN_R_CALLED_WITH_EVEN_MODULUS = 102;
  BN_R_DIV_BY_ZERO = 103;
  BN_R_ENCODING_ERROR = 104;
  BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105;
  BN_R_INPUT_NOT_REDUCED = 110;
  BN_R_INVALID_LENGTH = 106;
  BN_R_INVALID_RANGE = 115;
  BN_R_INVALID_SHIFT = 119;
  BN_R_NOT_A_SQUARE = 111;
  BN_R_NOT_INITIALIZED = 107;
  BN_R_NO_INVERSE = 108;
  BN_R_NO_SOLUTION = 116;
  BN_R_PRIVATE_KEY_TOO_LARGE = 117;
  BN_R_P_IS_NOT_PRIME = 112;
  BN_R_TOO_MANY_ITERATIONS = 113;
  BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109;
  BN_BYTES = 4;
  BN_BITS2 = (BN_BYTES*8);
  BN_BITS = (BN_BITS2*2);
  BN_FLG_MALLOCED = $01;
  BN_FLG_STATIC_DATA = $02;
  BN_FLG_CONSTTIME = $04;
  BN_FLG_SECURE = $08;
  BN_FLG_EXP_CONSTTIME = BN_FLG_CONSTTIME;
  BN_FLG_FREE = $8000;
  BN_RAND_TOP_ANY = -1;
  BN_RAND_TOP_ONE = 0;
  BN_RAND_TOP_TWO = 1;
  BN_RAND_BOTTOM_ANY = 0;
  BN_RAND_BOTTOM_ODD = 1;
  BN_prime_checks = 0;
  BN_BLINDING_NO_UPDATE = $00000001;
  BN_BLINDING_NO_RECREATE = $00000002;
  V_ASN1_UNIVERSAL = $00;
  V_ASN1_APPLICATION = $40;
  V_ASN1_CONTEXT_SPECIFIC = $80;
  V_ASN1_PRIVATE = $c0;
  V_ASN1_CONSTRUCTED = $20;
  V_ASN1_PRIMITIVE_TAG = $1f;
  V_ASN1_PRIMATIVE_TAG = V_ASN1_PRIMITIVE_TAG; // *compat*
  V_ASN1_APP_CHOOSE = -2;
  V_ASN1_OTHER = -3;
  V_ASN1_ANY = -4;
  V_ASN1_UNDEF = -1;
  V_ASN1_EOC = 0;
  V_ASN1_BOOLEAN = 1;
  V_ASN1_INTEGER = 2;
  V_ASN1_BIT_STRING = 3;
  V_ASN1_OCTET_STRING = 4;
  V_ASN1_NULL = 5;
  V_ASN1_OBJECT = 6;
  V_ASN1_OBJECT_DESCRIPTOR = 7;
  V_ASN1_EXTERNAL = 8;
  V_ASN1_REAL = 9;
  V_ASN1_ENUMERATED = 10;
  V_ASN1_UTF8STRING = 12;
  V_ASN1_SEQUENCE = 16;
  V_ASN1_SET = 17;
  V_ASN1_NUMERICSTRING = 18;
  V_ASN1_PRINTABLESTRING = 19;
  V_ASN1_T61STRING = 20;
  V_ASN1_TELETEXSTRING = 20;
  V_ASN1_VIDEOTEXSTRING = 21;
  V_ASN1_IA5STRING = 22;
  V_ASN1_UTCTIME = 23;
  V_ASN1_GENERALIZEDTIME = 24;
  V_ASN1_GRAPHICSTRING = 25;
  V_ASN1_ISO64STRING = 26;
  V_ASN1_VISIBLESTRING = 26;
  V_ASN1_GENERALSTRING = 27;
  V_ASN1_UNIVERSALSTRING = 28;
  V_ASN1_BMPSTRING = 30;
  V_ASN1_NEG = $100;
  V_ASN1_NEG_INTEGER = (2 or V_ASN1_NEG);
  V_ASN1_NEG_ENUMERATED = (10 or V_ASN1_NEG);
  B_ASN1_NUMERICSTRING = $0001;
  B_ASN1_PRINTABLESTRING = $0002;
  B_ASN1_T61STRING = $0004;
  B_ASN1_TELETEXSTRING = $0004;
  B_ASN1_VIDEOTEXSTRING = $0008;
  B_ASN1_IA5STRING = $0010;
  B_ASN1_GRAPHICSTRING = $0020;
  B_ASN1_ISO64STRING = $0040;
  B_ASN1_VISIBLESTRING = $0040;
  B_ASN1_GENERALSTRING = $0080;
  B_ASN1_UNIVERSALSTRING = $0100;
  B_ASN1_OCTET_STRING = $0200;
  B_ASN1_BIT_STRING = $0400;
  B_ASN1_BMPSTRING = $0800;
  B_ASN1_UNKNOWN = $1000;
  B_ASN1_UTF8STRING = $2000;
  B_ASN1_UTCTIME = $4000;
  B_ASN1_GENERALIZEDTIME = $8000;
  B_ASN1_SEQUENCE = $10000;
  MBSTRING_FLAG = $1000;
  MBSTRING_UTF8 = (MBSTRING_FLAG);
  MBSTRING_ASC = (MBSTRING_FLAG or 1);
  MBSTRING_BMP = (MBSTRING_FLAG or 2);
  MBSTRING_UNIV = (MBSTRING_FLAG or 4);
  SMIME_OLDMIME = $400;
  SMIME_CRLFEOL = $800;
  SMIME_STREAM = $1000;
  ASN1_STRING_FLAG_BITS_LEFT = $08;
  ASN1_STRING_FLAG_NDEF = $010;
  ASN1_STRING_FLAG_CONT = $020;
  ASN1_STRING_FLAG_MSTRING = $040;
  ASN1_STRING_FLAG_EMBED = $080;
  ASN1_STRING_FLAG_X509_TIME = $100;
  ASN1_LONG_UNDEF = $7fffffff;
  STABLE_FLAGS_MALLOC = $01;
  STABLE_FLAGS_CLEAR = STABLE_FLAGS_MALLOC;
  STABLE_NO_MASK = $02;
  DIRSTRING_TYPE = (B_ASN1_PRINTABLESTRING or B_ASN1_T61STRING or B_ASN1_BMPSTRING or B_ASN1_UTF8STRING);
  PKCS9STRING_TYPE = (DIRSTRING_TYPE or B_ASN1_IA5STRING);
  ASN1_STRFLGS_ESC_2253 = 1;
  ASN1_STRFLGS_ESC_CTRL = 2;
  ASN1_STRFLGS_ESC_MSB = 4;
  ASN1_STRFLGS_ESC_QUOTE = 8;
  CHARTYPE_PRINTABLESTRING = $10;
  CHARTYPE_FIRST_ESC_2253 = $20;
  CHARTYPE_LAST_ESC_2253 = $40;
  ASN1_STRFLGS_UTF8_CONVERT = $10;
  ASN1_STRFLGS_IGNORE_TYPE = $20;
  ASN1_STRFLGS_SHOW_TYPE = $40;
  ASN1_STRFLGS_DUMP_ALL = $80;
  ASN1_STRFLGS_DUMP_UNKNOWN = $100;
  ASN1_STRFLGS_DUMP_DER = $200;
  ASN1_STRFLGS_ESC_2254 = $400;
  ASN1_STRFLGS_RFC2253 = (ASN1_STRFLGS_ESC_2253 or ASN1_STRFLGS_ESC_CTRL or ASN1_STRFLGS_ESC_MSB or ASN1_STRFLGS_UTF8_CONVERT or ASN1_STRFLGS_DUMP_UNKNOWN or ASN1_STRFLGS_DUMP_DER);
  B_ASN1_TIME = B_ASN1_UTCTIME or B_ASN1_GENERALIZEDTIME;
  B_ASN1_PRINTABLE = B_ASN1_NUMERICSTRING or B_ASN1_PRINTABLESTRING or B_ASN1_T61STRING or B_ASN1_IA5STRING or B_ASN1_BIT_STRING or B_ASN1_UNIVERSALSTRING or B_ASN1_BMPSTRING or B_ASN1_UTF8STRING or B_ASN1_SEQUENCE or B_ASN1_UNKNOWN;
  B_ASN1_DIRECTORYSTRING = B_ASN1_PRINTABLESTRING or B_ASN1_TELETEXSTRING or B_ASN1_BMPSTRING or B_ASN1_UNIVERSALSTRING or B_ASN1_UTF8STRING;
  B_ASN1_DISPLAYTEXT = B_ASN1_IA5STRING or B_ASN1_VISIBLESTRING or B_ASN1_BMPSTRING or B_ASN1_UTF8STRING;
  ASN1_PCTX_FLAGS_SHOW_ABSENT = $001;
  ASN1_PCTX_FLAGS_SHOW_SEQUENCE = $002;
  ASN1_PCTX_FLAGS_SHOW_SSOF = $004;
  ASN1_PCTX_FLAGS_SHOW_TYPE = $008;
  ASN1_PCTX_FLAGS_NO_ANY_TYPE = $010;
  ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = $020;
  ASN1_PCTX_FLAGS_NO_FIELD_NAME = $040;
  ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = $080;
  ASN1_PCTX_FLAGS_NO_STRUCT_NAME = $100;
  ASN1_TFLG_OPTIONAL = ($1);
  ASN1_TFLG_SET_OF = ($1 shl 1);
  ASN1_TFLG_SEQUENCE_OF = ($2 shl 1);
  ASN1_TFLG_SET_ORDER = ($3 shl 1);
  ASN1_TFLG_SK_MASK = ($3 shl 1);
  ASN1_TFLG_IMPTAG = ($1 shl 3);
  ASN1_TFLG_EXPTAG = ($2 shl 3);
  ASN1_TFLG_TAG_MASK = ($3 shl 3);
  ASN1_TFLG_CONTEXT = ($2 shl 6);
  ASN1_TFLG_IMPLICIT = (ASN1_TFLG_IMPTAG or ASN1_TFLG_CONTEXT);
  ASN1_TFLG_EXPLICIT = (ASN1_TFLG_EXPTAG or ASN1_TFLG_CONTEXT);
  ASN1_TFLG_UNIVERSAL = ($0 shl 6);
  ASN1_TFLG_APPLICATION = ($1 shl 6);
  ASN1_TFLG_PRIVATE = ($3 shl 6);
  ASN1_TFLG_TAG_CLASS = ($3 shl 6);
  ASN1_TFLG_ADB_MASK = ($3 shl 8);
  ASN1_TFLG_ADB_OID = ($1 shl 8);
  ASN1_TFLG_ADB_INT = ($1 shl 9);
  ASN1_TFLG_NDEF = ($1 shl 11);
  ASN1_TFLG_EMBED = ($1 shl 12);
  ASN1_ITYPE_PRIMITIVE = $0;
  ASN1_ITYPE_SEQUENCE = $1;
  ASN1_ITYPE_CHOICE = $2;
  ASN1_ITYPE_EXTERN = $4;
  ASN1_ITYPE_MSTRING = $5;
  ASN1_ITYPE_NDEF_SEQUENCE = $6;
  ASN1_AFLG_REFCOUNT = 1;
  ASN1_AFLG_ENCODING = 2;
  ASN1_AFLG_BROKEN = 4;
  ASN1_OP_NEW_PRE = 0;
  ASN1_OP_NEW_POST = 1;
  ASN1_OP_FREE_PRE = 2;
  ASN1_OP_FREE_POST = 3;
  ASN1_OP_D2I_PRE = 4;
  ASN1_OP_D2I_POST = 5;
  ASN1_OP_I2D_PRE = 6;
  ASN1_OP_I2D_POST = 7;
  ASN1_OP_PRINT_PRE = 8;
  ASN1_OP_PRINT_POST = 9;
  ASN1_OP_STREAM_PRE = 10;
  ASN1_OP_STREAM_POST = 11;
  ASN1_OP_DETACHED_PRE = 12;
  ASN1_OP_DETACHED_POST = 13;
  ASYNC_F_ASYNC_CTX_NEW = 100;
  ASYNC_F_ASYNC_INIT_THREAD = 101;
  ASYNC_F_ASYNC_JOB_NEW = 102;
  ASYNC_F_ASYNC_PAUSE_JOB = 103;
  ASYNC_F_ASYNC_START_FUNC = 104;
  ASYNC_F_ASYNC_START_JOB = 105;
  ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD = 106;
  ASYNC_R_FAILED_TO_SET_POOL = 101;
  ASYNC_R_FAILED_TO_SWAP_CONTEXT = 102;
  ASYNC_R_INIT_FAILED = 105;
  ASYNC_R_INVALID_POOL_SIZE = 103;
  ASYNC_ERR = 0;
  ASYNC_NO_JOBS = 1;
  ASYNC_PAUSE = 2;
  ASYNC_FINISH = 3;
  _BF_ENCRYPT = 1;
  _BF_DECRYPT = 0;
  BF_ROUNDS = 16;
  BF_BLOCK = 8;
  BUF_F_BUF_MEM_GROW = 100;
  BUF_F_BUF_MEM_GROW_CLEAN = 105;
  BUF_F_BUF_MEM_NEW = 101;
  BUF_MEM_FLAG_SECURE = $01;
  _CAMELLIA_ENCRYPT = 1;
  _CAMELLIA_DECRYPT = 0;
  CAMELLIA_BLOCK_SIZE = 16;
  CAMELLIA_TABLE_BYTE_LEN = 272;
  CAMELLIA_TABLE_WORD_LEN = (CAMELLIA_TABLE_BYTE_LEN div 4);
  _CAST_ENCRYPT = 1;
  _CAST_DECRYPT = 0;
  CAST_BLOCK = 8;
  CAST_KEY_LENGTH = 16;
  EVP_F_AESNI_INIT_KEY = 165;
  EVP_F_AESNI_XTS_INIT_KEY = 207;
  EVP_F_AES_GCM_CTRL = 196;
  EVP_F_AES_INIT_KEY = 133;
  EVP_F_AES_OCB_CIPHER = 169;
  EVP_F_AES_T4_INIT_KEY = 178;
  EVP_F_AES_T4_XTS_INIT_KEY = 208;
  EVP_F_AES_WRAP_CIPHER = 170;
  EVP_F_AES_XTS_INIT_KEY = 209;
  EVP_F_ALG_MODULE_INIT = 177;
  EVP_F_ARIA_CCM_INIT_KEY = 175;
  EVP_F_ARIA_GCM_CTRL = 197;
  EVP_F_ARIA_GCM_INIT_KEY = 176;
  EVP_F_ARIA_INIT_KEY = 185;
  EVP_F_B64_NEW = 198;
  EVP_F_CAMELLIA_INIT_KEY = 159;
  EVP_F_CHACHA20_POLY1305_CTRL = 182;
  EVP_F_CMLL_T4_INIT_KEY = 179;
  EVP_F_DES_EDE3_WRAP_CIPHER = 171;
  EVP_F_DO_SIGVER_INIT = 161;
  EVP_F_ENC_NEW = 199;
  EVP_F_EVP_CIPHERINIT_EX = 123;
  EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 204;
  EVP_F_EVP_CIPHER_CTX_COPY = 163;
  EVP_F_EVP_CIPHER_CTX_CTRL = 124;
  EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 122;
  EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 205;
  EVP_F_EVP_DECRYPTFINAL_EX = 101;
  EVP_F_EVP_DECRYPTUPDATE = 166;
  EVP_F_EVP_DIGESTFINALXOF = 174;
  EVP_F_EVP_DIGESTINIT_EX = 128;
  EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 219;
  EVP_F_EVP_ENCRYPTFINAL_EX = 127;
  EVP_F_EVP_ENCRYPTUPDATE = 167;
  EVP_F_EVP_MD_CTX_COPY_EX = 110;
  EVP_F_EVP_MD_SIZE = 162;
  EVP_F_EVP_OPENINIT = 102;
  EVP_F_EVP_PBE_ALG_ADD = 115;
  EVP_F_EVP_PBE_ALG_ADD_TYPE = 160;
  EVP_F_EVP_PBE_CIPHERINIT = 116;
  EVP_F_EVP_PBE_SCRYPT = 181;
  EVP_F_EVP_PKCS82PKEY = 111;
  EVP_F_EVP_PKEY2PKCS8 = 113;
  EVP_F_EVP_PKEY_ASN1_ADD0 = 188;
  EVP_F_EVP_PKEY_CHECK = 186;
  EVP_F_EVP_PKEY_COPY_PARAMETERS = 103;
  EVP_F_EVP_PKEY_CTX_CTRL = 137;
  EVP_F_EVP_PKEY_CTX_CTRL_STR = 150;
  EVP_F_EVP_PKEY_CTX_DUP = 156;
  EVP_F_EVP_PKEY_CTX_MD = 168;
  EVP_F_EVP_PKEY_DECRYPT = 104;
  EVP_F_EVP_PKEY_DECRYPT_INIT = 138;
  EVP_F_EVP_PKEY_DECRYPT_OLD = 151;
  EVP_F_EVP_PKEY_DERIVE = 153;
  EVP_F_EVP_PKEY_DERIVE_INIT = 154;
  EVP_F_EVP_PKEY_DERIVE_SET_PEER = 155;
  EVP_F_EVP_PKEY_ENCRYPT = 105;
  EVP_F_EVP_PKEY_ENCRYPT_INIT = 139;
  EVP_F_EVP_PKEY_ENCRYPT_OLD = 152;
  EVP_F_EVP_PKEY_GET0_DH = 119;
  EVP_F_EVP_PKEY_GET0_DSA = 120;
  EVP_F_EVP_PKEY_GET0_EC_KEY = 131;
  EVP_F_EVP_PKEY_GET0_HMAC = 183;
  EVP_F_EVP_PKEY_GET0_POLY1305 = 184;
  EVP_F_EVP_PKEY_GET0_RSA = 121;
  EVP_F_EVP_PKEY_GET0_SIPHASH = 172;
  EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 202;
  EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 203;
  EVP_F_EVP_PKEY_KEYGEN = 146;
  EVP_F_EVP_PKEY_KEYGEN_INIT = 147;
  EVP_F_EVP_PKEY_METH_ADD0 = 194;
  EVP_F_EVP_PKEY_METH_NEW = 195;
  EVP_F_EVP_PKEY_NEW = 106;
  EVP_F_EVP_PKEY_NEW_CMAC_KEY = 193;
  EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 191;
  EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 192;
  EVP_F_EVP_PKEY_PARAMGEN = 148;
  EVP_F_EVP_PKEY_PARAMGEN_INIT = 149;
  EVP_F_EVP_PKEY_PARAM_CHECK = 189;
  EVP_F_EVP_PKEY_PUBLIC_CHECK = 190;
  EVP_F_EVP_PKEY_SET1_ENGINE = 187;
  EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 206;
  EVP_F_EVP_PKEY_SIGN = 140;
  EVP_F_EVP_PKEY_SIGN_INIT = 141;
  EVP_F_EVP_PKEY_VERIFY = 142;
  EVP_F_EVP_PKEY_VERIFY_INIT = 143;
  EVP_F_EVP_PKEY_VERIFY_RECOVER = 144;
  EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 145;
  EVP_F_EVP_SIGNFINAL = 107;
  EVP_F_EVP_VERIFYFINAL = 108;
  EVP_F_INT_CTX_NEW = 157;
  EVP_F_OK_NEW = 200;
  EVP_F_PKCS5_PBE_KEYIVGEN = 117;
  EVP_F_PKCS5_V2_PBE_KEYIVGEN = 118;
  EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 164;
  EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 180;
  EVP_F_PKEY_SET_TYPE = 158;
  EVP_F_RC2_MAGIC_TO_METH = 109;
  EVP_F_RC5_CTRL = 125;
  EVP_F_R_32_12_16_INIT_KEY = 242;
  EVP_F_S390X_AES_GCM_CTRL = 201;
  EVP_F_UPDATE = 173;
  EVP_R_AES_KEY_SETUP_FAILED = 143;
  EVP_R_ARIA_KEY_SETUP_FAILED = 176;
  EVP_R_BAD_DECRYPT = 100;
  EVP_R_BAD_KEY_LENGTH = 195;
  EVP_R_BUFFER_TOO_SMALL = 155;
  EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157;
  EVP_R_CIPHER_PARAMETER_ERROR = 122;
  EVP_R_COMMAND_NOT_SUPPORTED = 147;
  EVP_R_COPY_ERROR = 173;
  EVP_R_CTRL_NOT_IMPLEMENTED = 132;
  EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133;
  EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138;
  EVP_R_DECODE_ERROR = 114;
  EVP_R_DIFFERENT_KEY_TYPES = 101;
  EVP_R_DIFFERENT_PARAMETERS = 153;
  EVP_R_ERROR_LOADING_SECTION = 165;
  EVP_R_ERROR_SETTING_FIPS_MODE = 166;
  EVP_R_EXPECTING_AN_HMAC_KEY = 174;
  EVP_R_EXPECTING_AN_RSA_KEY = 127;
  EVP_R_EXPECTING_A_DH_KEY = 128;
  EVP_R_EXPECTING_A_DSA_KEY = 129;
  EVP_R_EXPECTING_A_EC_KEY = 142;
  EVP_R_EXPECTING_A_POLY1305_KEY = 164;
  EVP_R_EXPECTING_A_SIPHASH_KEY = 175;
  EVP_R_FIPS_MODE_NOT_SUPPORTED = 167;
  EVP_R_GET_RAW_KEY_FAILED = 182;
  EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171;
  EVP_R_INITIALIZATION_ERROR = 134;
  EVP_R_INPUT_NOT_INITIALIZED = 111;
  EVP_R_INVALID_DIGEST = 152;
  EVP_R_INVALID_FIPS_MODE = 168;
  EVP_R_INVALID_IV_LENGTH = 194;
  EVP_R_INVALID_KEY = 163;
  EVP_R_INVALID_KEY_LENGTH = 130;
  EVP_R_INVALID_OPERATION = 148;
  EVP_R_KEYGEN_FAILURE = 120;
  EVP_R_KEY_SETUP_FAILED = 180;
  EVP_R_MEMORY_LIMIT_EXCEEDED = 172;
  EVP_R_MESSAGE_DIGEST_IS_NULL = 159;
  EVP_R_METHOD_NOT_SUPPORTED = 144;
  EVP_R_MISSING_PARAMETERS = 103;
  EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178;
  EVP_R_NO_CIPHER_SET = 131;
  EVP_R_NO_DEFAULT_DIGEST = 158;
  EVP_R_NO_DIGEST_SET = 139;
  EVP_R_NO_KEY_SET = 154;
  EVP_R_NO_OPERATION_SET = 149;
  EVP_R_ONLY_ONESHOT_SUPPORTED = 177;
  EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150;
  EVP_R_OPERATON_NOT_INITIALIZED = 151;
  EVP_R_PARTIALLY_OVERLAPPING = 162;
  EVP_R_PBKDF2_ERROR = 181;
  EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179;
  EVP_R_PRIVATE_KEY_DECODE_ERROR = 145;
  EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146;
  EVP_R_PUBLIC_KEY_NOT_RSA = 106;
  EVP_R_UNKNOWN_CIPHER = 160;
  EVP_R_UNKNOWN_DIGEST = 161;
  EVP_R_UNKNOWN_OPTION = 169;
  EVP_R_UNKNOWN_PBE_ALGORITHM = 121;
  EVP_R_UNSUPPORTED_ALGORITHM = 156;
  EVP_R_UNSUPPORTED_CIPHER = 107;
  EVP_R_UNSUPPORTED_KEYLENGTH = 123;
  EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124;
  EVP_R_UNSUPPORTED_KEY_SIZE = 108;
  EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135;
  EVP_R_UNSUPPORTED_PRF = 125;
  EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118;
  EVP_R_UNSUPPORTED_SALT_TYPE = 126;
  EVP_R_WRAP_MODE_NOT_ALLOWED = 170;
  EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109;
  EVP_R_XTS_DUPLICATED_KEYS = 183;
  EVP_MAX_MD_SIZE = 64;
  EVP_MAX_KEY_LENGTH = 64;
  EVP_MAX_IV_LENGTH = 16;
  EVP_MAX_BLOCK_LENGTH = 32;
  PKCS5_SALT_LEN = 8;
  PKCS5_DEFAULT_ITER = 2048;
  SN_undef = 'UNDEF';
  LN_undef = 'undefined';
  NID_undef = 0;
  OBJ_undef = 0;
  SN_itu_t = 'ITU-T';
  LN_itu_t = 'itu-t';
  NID_itu_t = 645;
  OBJ_itu_t = 0;
  NID_ccitt = 404;
  OBJ_ccitt = OBJ_itu_t;
  SN_iso = 'ISO';
  LN_iso = 'iso';
  NID_iso = 181;
  OBJ_iso = 1;
  SN_joint_iso_itu_t = 'JOINT-ISO-ITU-T';
  LN_joint_iso_itu_t = 'joint-iso-itu-t';
  NID_joint_iso_itu_t = 646;
  OBJ_joint_iso_itu_t = 2;
  NID_joint_iso_ccitt = 393;
  OBJ_joint_iso_ccitt = OBJ_joint_iso_itu_t;
  SN_member_body = 'member-body';
  LN_member_body = 'ISO Member Body';
  NID_member_body = 182;
  SN_identified_organization = 'identified-organization';
  NID_identified_organization = 676;
  SN_hmac_md5 = 'HMAC-MD5';
  LN_hmac_md5 = 'hmac-md5';
  NID_hmac_md5 = 780;
  SN_hmac_sha1 = 'HMAC-SHA1';
  LN_hmac_sha1 = 'hmac-sha1';
  NID_hmac_sha1 = 781;
  SN_x509ExtAdmission = 'x509ExtAdmission';
  LN_x509ExtAdmission = 'Professional Information or basis for Admission';
  NID_x509ExtAdmission = 1093;
  SN_certicom_arc = 'certicom-arc';
  NID_certicom_arc = 677;
  SN_ieee = 'ieee';
  NID_ieee = 1170;
  SN_ieee_siswg = 'ieee-siswg';
  LN_ieee_siswg = 'IEEE Security in Storage Working Group';
  NID_ieee_siswg = 1171;
  SN_international_organizations = 'international-organizations';
  LN_international_organizations = 'International Organizations';
  NID_international_organizations = 647;
  SN_wap = 'wap';
  NID_wap = 678;
  SN_wap_wsg = 'wap-wsg';
  NID_wap_wsg = 679;
  SN_selected_attribute_types = 'selected-attribute-types';
  LN_selected_attribute_types = 'Selected Attribute Types';
  NID_selected_attribute_types = 394;
  SN_clearance = 'clearance';
  NID_clearance = 395;
  SN_ISO_US = 'ISO-US';
  LN_ISO_US = 'ISO US Member Body';
  NID_ISO_US = 183;
  SN_X9_57 = 'X9-57';
  LN_X9_57 = 'X9.57';
  NID_X9_57 = 184;
  SN_X9cm = 'X9cm';
  LN_X9cm = 'X9.57 CM ?';
  NID_X9cm = 185;
  SN_ISO_CN = 'ISO-CN';
  LN_ISO_CN = 'ISO CN Member Body';
  NID_ISO_CN = 1140;
  SN_oscca = 'oscca';
  NID_oscca = 1141;
  SN_sm_scheme = 'sm-scheme';
  NID_sm_scheme = 1142;
  SN_dsa = 'DSA';
  LN_dsa = 'dsaEncryption';
  NID_dsa = 116;
  SN_dsaWithSHA1 = 'DSA-SHA1';
  LN_dsaWithSHA1 = 'dsaWithSHA1';
  NID_dsaWithSHA1 = 113;
  SN_ansi_X9_62 = 'ansi-X9-62';
  LN_ansi_X9_62 = 'ANSI X9.62';
  NID_ansi_X9_62 = 405;
  SN_X9_62_prime_field = 'prime-field';
  NID_X9_62_prime_field = 406;
  SN_X9_62_characteristic_two_field = 'characteristic-two-field';
  NID_X9_62_characteristic_two_field = 407;
  SN_X9_62_id_characteristic_two_basis = 'id-characteristic-two-basis';
  NID_X9_62_id_characteristic_two_basis = 680;
  SN_X9_62_onBasis = 'onBasis';
  NID_X9_62_onBasis = 681;
  SN_X9_62_tpBasis = 'tpBasis';
  NID_X9_62_tpBasis = 682;
  SN_X9_62_ppBasis = 'ppBasis';
  NID_X9_62_ppBasis = 683;
  SN_X9_62_id_ecPublicKey = 'id-ecPublicKey';
  NID_X9_62_id_ecPublicKey = 408;
  SN_X9_62_c2pnb163v1 = 'c2pnb163v1';
  NID_X9_62_c2pnb163v1 = 684;
  SN_X9_62_c2pnb163v2 = 'c2pnb163v2';
  NID_X9_62_c2pnb163v2 = 685;
  SN_X9_62_c2pnb163v3 = 'c2pnb163v3';
  NID_X9_62_c2pnb163v3 = 686;
  SN_X9_62_c2pnb176v1 = 'c2pnb176v1';
  NID_X9_62_c2pnb176v1 = 687;
  SN_X9_62_c2tnb191v1 = 'c2tnb191v1';
  NID_X9_62_c2tnb191v1 = 688;
  SN_X9_62_c2tnb191v2 = 'c2tnb191v2';
  NID_X9_62_c2tnb191v2 = 689;
  SN_X9_62_c2tnb191v3 = 'c2tnb191v3';
  NID_X9_62_c2tnb191v3 = 690;
  SN_X9_62_c2onb191v4 = 'c2onb191v4';
  NID_X9_62_c2onb191v4 = 691;
  SN_X9_62_c2onb191v5 = 'c2onb191v5';
  NID_X9_62_c2onb191v5 = 692;
  SN_X9_62_c2pnb208w1 = 'c2pnb208w1';
  NID_X9_62_c2pnb208w1 = 693;
  SN_X9_62_c2tnb239v1 = 'c2tnb239v1';
  NID_X9_62_c2tnb239v1 = 694;
  SN_X9_62_c2tnb239v2 = 'c2tnb239v2';
  NID_X9_62_c2tnb239v2 = 695;
  SN_X9_62_c2tnb239v3 = 'c2tnb239v3';
  NID_X9_62_c2tnb239v3 = 696;
  SN_X9_62_c2onb239v4 = 'c2onb239v4';
  NID_X9_62_c2onb239v4 = 697;
  SN_X9_62_c2onb239v5 = 'c2onb239v5';
  NID_X9_62_c2onb239v5 = 698;
  SN_X9_62_c2pnb272w1 = 'c2pnb272w1';
  NID_X9_62_c2pnb272w1 = 699;
  SN_X9_62_c2pnb304w1 = 'c2pnb304w1';
  NID_X9_62_c2pnb304w1 = 700;
  SN_X9_62_c2tnb359v1 = 'c2tnb359v1';
  NID_X9_62_c2tnb359v1 = 701;
  SN_X9_62_c2pnb368w1 = 'c2pnb368w1';
  NID_X9_62_c2pnb368w1 = 702;
  SN_X9_62_c2tnb431r1 = 'c2tnb431r1';
  NID_X9_62_c2tnb431r1 = 703;
  SN_X9_62_prime192v1 = 'prime192v1';
  NID_X9_62_prime192v1 = 409;
  SN_X9_62_prime192v2 = 'prime192v2';
  NID_X9_62_prime192v2 = 410;
  SN_X9_62_prime192v3 = 'prime192v3';
  NID_X9_62_prime192v3 = 411;
  SN_X9_62_prime239v1 = 'prime239v1';
  NID_X9_62_prime239v1 = 412;
  SN_X9_62_prime239v2 = 'prime239v2';
  NID_X9_62_prime239v2 = 413;
  SN_X9_62_prime239v3 = 'prime239v3';
  NID_X9_62_prime239v3 = 414;
  SN_X9_62_prime256v1 = 'prime256v1';
  NID_X9_62_prime256v1 = 415;
  SN_ecdsa_with_SHA1 = 'ecdsa-with-SHA1';
  NID_ecdsa_with_SHA1 = 416;
  SN_ecdsa_with_Recommended = 'ecdsa-with-Recommended';
  NID_ecdsa_with_Recommended = 791;
  SN_ecdsa_with_Specified = 'ecdsa-with-Specified';
  NID_ecdsa_with_Specified = 792;
  SN_ecdsa_with_SHA224 = 'ecdsa-with-SHA224';
  NID_ecdsa_with_SHA224 = 793;
  SN_ecdsa_with_SHA256 = 'ecdsa-with-SHA256';
  NID_ecdsa_with_SHA256 = 794;
  SN_ecdsa_with_SHA384 = 'ecdsa-with-SHA384';
  NID_ecdsa_with_SHA384 = 795;
  SN_ecdsa_with_SHA512 = 'ecdsa-with-SHA512';
  NID_ecdsa_with_SHA512 = 796;
  SN_secp112r1 = 'secp112r1';
  NID_secp112r1 = 704;
  SN_secp112r2 = 'secp112r2';
  NID_secp112r2 = 705;
  SN_secp128r1 = 'secp128r1';
  NID_secp128r1 = 706;
  SN_secp128r2 = 'secp128r2';
  NID_secp128r2 = 707;
  SN_secp160k1 = 'secp160k1';
  NID_secp160k1 = 708;
  SN_secp160r1 = 'secp160r1';
  NID_secp160r1 = 709;
  SN_secp160r2 = 'secp160r2';
  NID_secp160r2 = 710;
  SN_secp192k1 = 'secp192k1';
  NID_secp192k1 = 711;
  SN_secp224k1 = 'secp224k1';
  NID_secp224k1 = 712;
  SN_secp224r1 = 'secp224r1';
  NID_secp224r1 = 713;
  SN_secp256k1 = 'secp256k1';
  NID_secp256k1 = 714;
  SN_secp384r1 = 'secp384r1';
  NID_secp384r1 = 715;
  SN_secp521r1 = 'secp521r1';
  NID_secp521r1 = 716;
  SN_sect113r1 = 'sect113r1';
  NID_sect113r1 = 717;
  SN_sect113r2 = 'sect113r2';
  NID_sect113r2 = 718;
  SN_sect131r1 = 'sect131r1';
  NID_sect131r1 = 719;
  SN_sect131r2 = 'sect131r2';
  NID_sect131r2 = 720;
  SN_sect163k1 = 'sect163k1';
  NID_sect163k1 = 721;
  SN_sect163r1 = 'sect163r1';
  NID_sect163r1 = 722;
  SN_sect163r2 = 'sect163r2';
  NID_sect163r2 = 723;
  SN_sect193r1 = 'sect193r1';
  NID_sect193r1 = 724;
  SN_sect193r2 = 'sect193r2';
  NID_sect193r2 = 725;
  SN_sect233k1 = 'sect233k1';
  NID_sect233k1 = 726;
  SN_sect233r1 = 'sect233r1';
  NID_sect233r1 = 727;
  SN_sect239k1 = 'sect239k1';
  NID_sect239k1 = 728;
  SN_sect283k1 = 'sect283k1';
  NID_sect283k1 = 729;
  SN_sect283r1 = 'sect283r1';
  NID_sect283r1 = 730;
  SN_sect409k1 = 'sect409k1';
  NID_sect409k1 = 731;
  SN_sect409r1 = 'sect409r1';
  NID_sect409r1 = 732;
  SN_sect571k1 = 'sect571k1';
  NID_sect571k1 = 733;
  SN_sect571r1 = 'sect571r1';
  NID_sect571r1 = 734;
  SN_wap_wsg_idm_ecid_wtls1 = 'wap-wsg-idm-ecid-wtls1';
  NID_wap_wsg_idm_ecid_wtls1 = 735;
  SN_wap_wsg_idm_ecid_wtls3 = 'wap-wsg-idm-ecid-wtls3';
  NID_wap_wsg_idm_ecid_wtls3 = 736;
  SN_wap_wsg_idm_ecid_wtls4 = 'wap-wsg-idm-ecid-wtls4';
  NID_wap_wsg_idm_ecid_wtls4 = 737;
  SN_wap_wsg_idm_ecid_wtls5 = 'wap-wsg-idm-ecid-wtls5';
  NID_wap_wsg_idm_ecid_wtls5 = 738;
  SN_wap_wsg_idm_ecid_wtls6 = 'wap-wsg-idm-ecid-wtls6';
  NID_wap_wsg_idm_ecid_wtls6 = 739;
  SN_wap_wsg_idm_ecid_wtls7 = 'wap-wsg-idm-ecid-wtls7';
  NID_wap_wsg_idm_ecid_wtls7 = 740;
  SN_wap_wsg_idm_ecid_wtls8 = 'wap-wsg-idm-ecid-wtls8';
  NID_wap_wsg_idm_ecid_wtls8 = 741;
  SN_wap_wsg_idm_ecid_wtls9 = 'wap-wsg-idm-ecid-wtls9';
  NID_wap_wsg_idm_ecid_wtls9 = 742;
  SN_wap_wsg_idm_ecid_wtls10 = 'wap-wsg-idm-ecid-wtls10';
  NID_wap_wsg_idm_ecid_wtls10 = 743;
  SN_wap_wsg_idm_ecid_wtls11 = 'wap-wsg-idm-ecid-wtls11';
  NID_wap_wsg_idm_ecid_wtls11 = 744;
  SN_wap_wsg_idm_ecid_wtls12 = 'wap-wsg-idm-ecid-wtls12';
  NID_wap_wsg_idm_ecid_wtls12 = 745;
  SN_cast5_cbc = 'CAST5-CBC';
  LN_cast5_cbc = 'cast5-cbc';
  NID_cast5_cbc = 108;
  SN_cast5_ecb = 'CAST5-ECB';
  LN_cast5_ecb = 'cast5-ecb';
  NID_cast5_ecb = 109;
  SN_cast5_cfb64 = 'CAST5-CFB';
  LN_cast5_cfb64 = 'cast5-cfb';
  NID_cast5_cfb64 = 110;
  SN_cast5_ofb64 = 'CAST5-OFB';
  LN_cast5_ofb64 = 'cast5-ofb';
  NID_cast5_ofb64 = 111;
  LN_pbeWithMD5AndCast5_CBC = 'pbeWithMD5AndCast5CBC';
  NID_pbeWithMD5AndCast5_CBC = 112;
  SN_id_PasswordBasedMAC = 'id-PasswordBasedMAC';
  LN_id_PasswordBasedMAC = 'password based MAC';
  NID_id_PasswordBasedMAC = 782;
  SN_id_DHBasedMac = 'id-DHBasedMac';
  LN_id_DHBasedMac = 'Diffie-Hellman based MAC';
  NID_id_DHBasedMac = 783;
  SN_rsadsi = 'rsadsi';
  LN_rsadsi = 'RSA Data Security, Inc.';
  NID_rsadsi = 1;
  SN_pkcs = 'pkcs';
  LN_pkcs = 'RSA Data Security, Inc. PKCS';
  NID_pkcs = 2;
  SN_pkcs1 = 'pkcs1';
  NID_pkcs1 = 186;
  LN_rsaEncryption = 'rsaEncryption';
  NID_rsaEncryption = 6;
  SN_md2WithRSAEncryption = 'RSA-MD2';
  LN_md2WithRSAEncryption = 'md2WithRSAEncryption';
  NID_md2WithRSAEncryption = 7;
  SN_md4WithRSAEncryption = 'RSA-MD4';
  LN_md4WithRSAEncryption = 'md4WithRSAEncryption';
  NID_md4WithRSAEncryption = 396;
  SN_md5WithRSAEncryption = 'RSA-MD5';
  LN_md5WithRSAEncryption = 'md5WithRSAEncryption';
  NID_md5WithRSAEncryption = 8;
  SN_sha1WithRSAEncryption = 'RSA-SHA1';
  LN_sha1WithRSAEncryption = 'sha1WithRSAEncryption';
  NID_sha1WithRSAEncryption = 65;
  SN_rsaesOaep = 'RSAES-OAEP';
  LN_rsaesOaep = 'rsaesOaep';
  NID_rsaesOaep = 919;
  SN_mgf1 = 'MGF1';
  LN_mgf1 = 'mgf1';
  NID_mgf1 = 911;
  SN_pSpecified = 'PSPECIFIED';
  LN_pSpecified = 'pSpecified';
  NID_pSpecified = 935;
  SN_rsassaPss = 'RSASSA-PSS';
  LN_rsassaPss = 'rsassaPss';
  NID_rsassaPss = 912;
  SN_sha256WithRSAEncryption = 'RSA-SHA256';
  LN_sha256WithRSAEncryption = 'sha256WithRSAEncryption';
  NID_sha256WithRSAEncryption = 668;
  SN_sha384WithRSAEncryption = 'RSA-SHA384';
  LN_sha384WithRSAEncryption = 'sha384WithRSAEncryption';
  NID_sha384WithRSAEncryption = 669;
  SN_sha512WithRSAEncryption = 'RSA-SHA512';
  LN_sha512WithRSAEncryption = 'sha512WithRSAEncryption';
  NID_sha512WithRSAEncryption = 670;
  SN_sha224WithRSAEncryption = 'RSA-SHA224';
  LN_sha224WithRSAEncryption = 'sha224WithRSAEncryption';
  NID_sha224WithRSAEncryption = 671;
  SN_sha512_224WithRSAEncryption = 'RSA-SHA512/224';
  LN_sha512_224WithRSAEncryption = 'sha512-224WithRSAEncryption';
  NID_sha512_224WithRSAEncryption = 1145;
  SN_sha512_256WithRSAEncryption = 'RSA-SHA512/256';
  LN_sha512_256WithRSAEncryption = 'sha512-256WithRSAEncryption';
  NID_sha512_256WithRSAEncryption = 1146;
  SN_pkcs3 = 'pkcs3';
  NID_pkcs3 = 27;
  LN_dhKeyAgreement = 'dhKeyAgreement';
  NID_dhKeyAgreement = 28;
  SN_pkcs5 = 'pkcs5';
  NID_pkcs5 = 187;
  SN_pbeWithMD2AndDES_CBC = 'PBE-MD2-DES';
  LN_pbeWithMD2AndDES_CBC = 'pbeWithMD2AndDES-CBC';
  NID_pbeWithMD2AndDES_CBC = 9;
  SN_pbeWithMD5AndDES_CBC = 'PBE-MD5-DES';
  LN_pbeWithMD5AndDES_CBC = 'pbeWithMD5AndDES-CBC';
  NID_pbeWithMD5AndDES_CBC = 10;
  SN_pbeWithMD2AndRC2_CBC = 'PBE-MD2-RC2-64';
  LN_pbeWithMD2AndRC2_CBC = 'pbeWithMD2AndRC2-CBC';
  NID_pbeWithMD2AndRC2_CBC = 168;
  SN_pbeWithMD5AndRC2_CBC = 'PBE-MD5-RC2-64';
  LN_pbeWithMD5AndRC2_CBC = 'pbeWithMD5AndRC2-CBC';
  NID_pbeWithMD5AndRC2_CBC = 169;
  SN_pbeWithSHA1AndDES_CBC = 'PBE-SHA1-DES';
  LN_pbeWithSHA1AndDES_CBC = 'pbeWithSHA1AndDES-CBC';
  NID_pbeWithSHA1AndDES_CBC = 170;
  SN_pbeWithSHA1AndRC2_CBC = 'PBE-SHA1-RC2-64';
  LN_pbeWithSHA1AndRC2_CBC = 'pbeWithSHA1AndRC2-CBC';
  NID_pbeWithSHA1AndRC2_CBC = 68;
  LN_id_pbkdf2 = 'PBKDF2';
  NID_id_pbkdf2 = 69;
  LN_pbes2 = 'PBES2';
  NID_pbes2 = 161;
  LN_pbmac1 = 'PBMAC1';
  NID_pbmac1 = 162;
  SN_pkcs7 = 'pkcs7';
  NID_pkcs7 = 20;
  LN_pkcs7_data = 'pkcs7-data';
  NID_pkcs7_data = 21;
  LN_pkcs7_signed = 'pkcs7-signedData';
  NID_pkcs7_signed = 22;
  LN_pkcs7_enveloped = 'pkcs7-envelopedData';
  NID_pkcs7_enveloped = 23;
  LN_pkcs7_signedAndEnveloped = 'pkcs7-signedAndEnvelopedData';
  NID_pkcs7_signedAndEnveloped = 24;
  LN_pkcs7_digest = 'pkcs7-digestData';
  NID_pkcs7_digest = 25;
  LN_pkcs7_encrypted = 'pkcs7-encryptedData';
  NID_pkcs7_encrypted = 26;
  SN_pkcs9 = 'pkcs9';
  NID_pkcs9 = 47;
  LN_pkcs9_emailAddress = 'emailAddress';
  NID_pkcs9_emailAddress = 48;
  LN_pkcs9_unstructuredName = 'unstructuredName';
  NID_pkcs9_unstructuredName = 49;
  LN_pkcs9_contentType = 'contentType';
  NID_pkcs9_contentType = 50;
  LN_pkcs9_messageDigest = 'messageDigest';
  NID_pkcs9_messageDigest = 51;
  LN_pkcs9_signingTime = 'signingTime';
  NID_pkcs9_signingTime = 52;
  LN_pkcs9_countersignature = 'countersignature';
  NID_pkcs9_countersignature = 53;
  LN_pkcs9_challengePassword = 'challengePassword';
  NID_pkcs9_challengePassword = 54;
  LN_pkcs9_unstructuredAddress = 'unstructuredAddress';
  NID_pkcs9_unstructuredAddress = 55;
  LN_pkcs9_extCertAttributes = 'extendedCertificateAttributes';
  NID_pkcs9_extCertAttributes = 56;
  SN_ext_req = 'extReq';
  LN_ext_req = 'Extension Request';
  NID_ext_req = 172;
  SN_SMIMECapabilities = 'SMIME-CAPS';
  LN_SMIMECapabilities = 'S/MIME Capabilities';
  NID_SMIMECapabilities = 167;
  SN_SMIME = 'SMIME';
  LN_SMIME = 'S/MIME';
  NID_SMIME = 188;
  SN_id_smime_mod = 'id-smime-mod';
  NID_id_smime_mod = 189;
  SN_id_smime_ct = 'id-smime-ct';
  NID_id_smime_ct = 190;
  SN_id_smime_aa = 'id-smime-aa';
  NID_id_smime_aa = 191;
  SN_id_smime_alg = 'id-smime-alg';
  NID_id_smime_alg = 192;
  SN_id_smime_cd = 'id-smime-cd';
  NID_id_smime_cd = 193;
  SN_id_smime_spq = 'id-smime-spq';
  NID_id_smime_spq = 194;
  SN_id_smime_cti = 'id-smime-cti';
  NID_id_smime_cti = 195;
  SN_id_smime_mod_cms = 'id-smime-mod-cms';
  NID_id_smime_mod_cms = 196;
  SN_id_smime_mod_ess = 'id-smime-mod-ess';
  NID_id_smime_mod_ess = 197;
  SN_id_smime_mod_oid = 'id-smime-mod-oid';
  NID_id_smime_mod_oid = 198;
  SN_id_smime_mod_msg_v3 = 'id-smime-mod-msg-v3';
  NID_id_smime_mod_msg_v3 = 199;
  SN_id_smime_mod_ets_eSignature_88 = 'id-smime-mod-ets-eSignature-88';
  NID_id_smime_mod_ets_eSignature_88 = 200;
  SN_id_smime_mod_ets_eSignature_97 = 'id-smime-mod-ets-eSignature-97';
  NID_id_smime_mod_ets_eSignature_97 = 201;
  SN_id_smime_mod_ets_eSigPolicy_88 = 'id-smime-mod-ets-eSigPolicy-88';
  NID_id_smime_mod_ets_eSigPolicy_88 = 202;
  SN_id_smime_mod_ets_eSigPolicy_97 = 'id-smime-mod-ets-eSigPolicy-97';
  NID_id_smime_mod_ets_eSigPolicy_97 = 203;
  SN_id_smime_ct_receipt = 'id-smime-ct-receipt';
  NID_id_smime_ct_receipt = 204;
  SN_id_smime_ct_authData = 'id-smime-ct-authData';
  NID_id_smime_ct_authData = 205;
  SN_id_smime_ct_publishCert = 'id-smime-ct-publishCert';
  NID_id_smime_ct_publishCert = 206;
  SN_id_smime_ct_TSTInfo = 'id-smime-ct-TSTInfo';
  NID_id_smime_ct_TSTInfo = 207;
  SN_id_smime_ct_TDTInfo = 'id-smime-ct-TDTInfo';
  NID_id_smime_ct_TDTInfo = 208;
  SN_id_smime_ct_contentInfo = 'id-smime-ct-contentInfo';
  NID_id_smime_ct_contentInfo = 209;
  SN_id_smime_ct_DVCSRequestData = 'id-smime-ct-DVCSRequestData';
  NID_id_smime_ct_DVCSRequestData = 210;
  SN_id_smime_ct_DVCSResponseData = 'id-smime-ct-DVCSResponseData';
  NID_id_smime_ct_DVCSResponseData = 211;
  SN_id_smime_ct_compressedData = 'id-smime-ct-compressedData';
  NID_id_smime_ct_compressedData = 786;
  SN_id_smime_ct_contentCollection = 'id-smime-ct-contentCollection';
  NID_id_smime_ct_contentCollection = 1058;
  SN_id_smime_ct_authEnvelopedData = 'id-smime-ct-authEnvelopedData';
  NID_id_smime_ct_authEnvelopedData = 1059;
  SN_id_ct_asciiTextWithCRLF = 'id-ct-asciiTextWithCRLF';
  NID_id_ct_asciiTextWithCRLF = 787;
  SN_id_ct_xml = 'id-ct-xml';
  NID_id_ct_xml = 1060;
  SN_id_smime_aa_receiptRequest = 'id-smime-aa-receiptRequest';
  NID_id_smime_aa_receiptRequest = 212;
  SN_id_smime_aa_securityLabel = 'id-smime-aa-securityLabel';
  NID_id_smime_aa_securityLabel = 213;
  SN_id_smime_aa_mlExpandHistory = 'id-smime-aa-mlExpandHistory';
  NID_id_smime_aa_mlExpandHistory = 214;
  SN_id_smime_aa_contentHint = 'id-smime-aa-contentHint';
  NID_id_smime_aa_contentHint = 215;
  SN_id_smime_aa_msgSigDigest = 'id-smime-aa-msgSigDigest';
  NID_id_smime_aa_msgSigDigest = 216;
  SN_id_smime_aa_encapContentType = 'id-smime-aa-encapContentType';
  NID_id_smime_aa_encapContentType = 217;
  SN_id_smime_aa_contentIdentifier = 'id-smime-aa-contentIdentifier';
  NID_id_smime_aa_contentIdentifier = 218;
  SN_id_smime_aa_macValue = 'id-smime-aa-macValue';
  NID_id_smime_aa_macValue = 219;
  SN_id_smime_aa_equivalentLabels = 'id-smime-aa-equivalentLabels';
  NID_id_smime_aa_equivalentLabels = 220;
  SN_id_smime_aa_contentReference = 'id-smime-aa-contentReference';
  NID_id_smime_aa_contentReference = 221;
  SN_id_smime_aa_encrypKeyPref = 'id-smime-aa-encrypKeyPref';
  NID_id_smime_aa_encrypKeyPref = 222;
  SN_id_smime_aa_signingCertificate = 'id-smime-aa-signingCertificate';
  NID_id_smime_aa_signingCertificate = 223;
  SN_id_smime_aa_smimeEncryptCerts = 'id-smime-aa-smimeEncryptCerts';
  NID_id_smime_aa_smimeEncryptCerts = 224;
  SN_id_smime_aa_timeStampToken = 'id-smime-aa-timeStampToken';
  NID_id_smime_aa_timeStampToken = 225;
  SN_id_smime_aa_ets_sigPolicyId = 'id-smime-aa-ets-sigPolicyId';
  NID_id_smime_aa_ets_sigPolicyId = 226;
  SN_id_smime_aa_ets_commitmentType = 'id-smime-aa-ets-commitmentType';
  NID_id_smime_aa_ets_commitmentType = 227;
  SN_id_smime_aa_ets_signerLocation = 'id-smime-aa-ets-signerLocation';
  NID_id_smime_aa_ets_signerLocation = 228;
  SN_id_smime_aa_ets_signerAttr = 'id-smime-aa-ets-signerAttr';
  NID_id_smime_aa_ets_signerAttr = 229;
  SN_id_smime_aa_ets_otherSigCert = 'id-smime-aa-ets-otherSigCert';
  NID_id_smime_aa_ets_otherSigCert = 230;
  SN_id_smime_aa_ets_contentTimestamp = 'id-smime-aa-ets-contentTimestamp';
  NID_id_smime_aa_ets_contentTimestamp = 231;
  SN_id_smime_aa_ets_CertificateRefs = 'id-smime-aa-ets-CertificateRefs';
  NID_id_smime_aa_ets_CertificateRefs = 232;
  SN_id_smime_aa_ets_RevocationRefs = 'id-smime-aa-ets-RevocationRefs';
  NID_id_smime_aa_ets_RevocationRefs = 233;
  SN_id_smime_aa_ets_certValues = 'id-smime-aa-ets-certValues';
  NID_id_smime_aa_ets_certValues = 234;
  SN_id_smime_aa_ets_revocationValues = 'id-smime-aa-ets-revocationValues';
  NID_id_smime_aa_ets_revocationValues = 235;
  SN_id_smime_aa_ets_escTimeStamp = 'id-smime-aa-ets-escTimeStamp';
  NID_id_smime_aa_ets_escTimeStamp = 236;
  SN_id_smime_aa_ets_certCRLTimestamp = 'id-smime-aa-ets-certCRLTimestamp';
  NID_id_smime_aa_ets_certCRLTimestamp = 237;
  SN_id_smime_aa_ets_archiveTimeStamp = 'id-smime-aa-ets-archiveTimeStamp';
  NID_id_smime_aa_ets_archiveTimeStamp = 238;
  SN_id_smime_aa_signatureType = 'id-smime-aa-signatureType';
  NID_id_smime_aa_signatureType = 239;
  SN_id_smime_aa_dvcs_dvc = 'id-smime-aa-dvcs-dvc';
  NID_id_smime_aa_dvcs_dvc = 240;
  SN_id_smime_aa_signingCertificateV2 = 'id-smime-aa-signingCertificateV2';
  NID_id_smime_aa_signingCertificateV2 = 1086;
  SN_id_smime_alg_ESDHwith3DES = 'id-smime-alg-ESDHwith3DES';
  NID_id_smime_alg_ESDHwith3DES = 241;
  SN_id_smime_alg_ESDHwithRC2 = 'id-smime-alg-ESDHwithRC2';
  NID_id_smime_alg_ESDHwithRC2 = 242;
  SN_id_smime_alg_3DESwrap = 'id-smime-alg-3DESwrap';
  NID_id_smime_alg_3DESwrap = 243;
  SN_id_smime_alg_RC2wrap = 'id-smime-alg-RC2wrap';
  NID_id_smime_alg_RC2wrap = 244;
  SN_id_smime_alg_ESDH = 'id-smime-alg-ESDH';
  NID_id_smime_alg_ESDH = 245;
  SN_id_smime_alg_CMS3DESwrap = 'id-smime-alg-CMS3DESwrap';
  NID_id_smime_alg_CMS3DESwrap = 246;
  SN_id_smime_alg_CMSRC2wrap = 'id-smime-alg-CMSRC2wrap';
  NID_id_smime_alg_CMSRC2wrap = 247;
  SN_id_alg_PWRI_KEK = 'id-alg-PWRI-KEK';
  NID_id_alg_PWRI_KEK = 893;
  SN_id_smime_cd_ldap = 'id-smime-cd-ldap';
  NID_id_smime_cd_ldap = 248;
  SN_id_smime_spq_ets_sqt_uri = 'id-smime-spq-ets-sqt-uri';
  NID_id_smime_spq_ets_sqt_uri = 249;
  SN_id_smime_spq_ets_sqt_unotice = 'id-smime-spq-ets-sqt-unotice';
  NID_id_smime_spq_ets_sqt_unotice = 250;
  SN_id_smime_cti_ets_proofOfOrigin = 'id-smime-cti-ets-proofOfOrigin';
  NID_id_smime_cti_ets_proofOfOrigin = 251;
  SN_id_smime_cti_ets_proofOfReceipt = 'id-smime-cti-ets-proofOfReceipt';
  NID_id_smime_cti_ets_proofOfReceipt = 252;
  SN_id_smime_cti_ets_proofOfDelivery = 'id-smime-cti-ets-proofOfDelivery';
  NID_id_smime_cti_ets_proofOfDelivery = 253;
  SN_id_smime_cti_ets_proofOfSender = 'id-smime-cti-ets-proofOfSender';
  NID_id_smime_cti_ets_proofOfSender = 254;
  SN_id_smime_cti_ets_proofOfApproval = 'id-smime-cti-ets-proofOfApproval';
  NID_id_smime_cti_ets_proofOfApproval = 255;
  SN_id_smime_cti_ets_proofOfCreation = 'id-smime-cti-ets-proofOfCreation';
  NID_id_smime_cti_ets_proofOfCreation = 256;
  LN_friendlyName = 'friendlyName';
  NID_friendlyName = 156;
  LN_localKeyID = 'localKeyID';
  NID_localKeyID = 157;
  SN_ms_csp_name = 'CSPName';
  LN_ms_csp_name = 'Microsoft CSP Name';
  NID_ms_csp_name = 417;
  SN_LocalKeySet = 'LocalKeySet';
  LN_LocalKeySet = 'Microsoft Local Key set';
  NID_LocalKeySet = 856;
  LN_x509Certificate = 'x509Certificate';
  NID_x509Certificate = 158;
  LN_sdsiCertificate = 'sdsiCertificate';
  NID_sdsiCertificate = 159;
  LN_x509Crl = 'x509Crl';
  NID_x509Crl = 160;
  SN_pbe_WithSHA1And128BitRC4 = 'PBE-SHA1-RC4-128';
  LN_pbe_WithSHA1And128BitRC4 = 'pbeWithSHA1And128BitRC4';
  NID_pbe_WithSHA1And128BitRC4 = 144;
  SN_pbe_WithSHA1And40BitRC4 = 'PBE-SHA1-RC4-40';
  LN_pbe_WithSHA1And40BitRC4 = 'pbeWithSHA1And40BitRC4';
  NID_pbe_WithSHA1And40BitRC4 = 145;
  SN_pbe_WithSHA1And3_Key_TripleDES_CBC = 'PBE-SHA1-3DES';
  LN_pbe_WithSHA1And3_Key_TripleDES_CBC = 'pbeWithSHA1And3-KeyTripleDES-CBC';
  NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;
  SN_pbe_WithSHA1And2_Key_TripleDES_CBC = 'PBE-SHA1-2DES';
  LN_pbe_WithSHA1And2_Key_TripleDES_CBC = 'pbeWithSHA1And2-KeyTripleDES-CBC';
  NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;
  SN_pbe_WithSHA1And128BitRC2_CBC = 'PBE-SHA1-RC2-128';
  LN_pbe_WithSHA1And128BitRC2_CBC = 'pbeWithSHA1And128BitRC2-CBC';
  NID_pbe_WithSHA1And128BitRC2_CBC = 148;
  SN_pbe_WithSHA1And40BitRC2_CBC = 'PBE-SHA1-RC2-40';
  LN_pbe_WithSHA1And40BitRC2_CBC = 'pbeWithSHA1And40BitRC2-CBC';
  NID_pbe_WithSHA1And40BitRC2_CBC = 149;
  LN_keyBag = 'keyBag';
  NID_keyBag = 150;
  LN_pkcs8ShroudedKeyBag = 'pkcs8ShroudedKeyBag';
  NID_pkcs8ShroudedKeyBag = 151;
  LN_certBag = 'certBag';
  NID_certBag = 152;
  LN_crlBag = 'crlBag';
  NID_crlBag = 153;
  LN_secretBag = 'secretBag';
  NID_secretBag = 154;
  LN_safeContentsBag = 'safeContentsBag';
  NID_safeContentsBag = 155;
  SN_md2 = 'MD2';
  LN_md2 = 'md2';
  NID_md2 = 3;
  SN_md4 = 'MD4';
  LN_md4 = 'md4';
  NID_md4 = 257;
  SN_md5 = 'MD5';
  LN_md5 = 'md5';
  NID_md5 = 4;
  SN_md5_sha1 = 'MD5-SHA1';
  LN_md5_sha1 = 'md5-sha1';
  NID_md5_sha1 = 114;
  LN_hmacWithMD5 = 'hmacWithMD5';
  NID_hmacWithMD5 = 797;
  LN_hmacWithSHA1 = 'hmacWithSHA1';
  NID_hmacWithSHA1 = 163;
  SN_sm2 = 'SM2';
  LN_sm2 = 'sm2';
  NID_sm2 = 1172;
  SN_sm3 = 'SM3';
  LN_sm3 = 'sm3';
  NID_sm3 = 1143;
  SN_sm3WithRSAEncryption = 'RSA-SM3';
  LN_sm3WithRSAEncryption = 'sm3WithRSAEncryption';
  NID_sm3WithRSAEncryption = 1144;
  LN_hmacWithSHA224 = 'hmacWithSHA224';
  NID_hmacWithSHA224 = 798;
  LN_hmacWithSHA256 = 'hmacWithSHA256';
  NID_hmacWithSHA256 = 799;
  LN_hmacWithSHA384 = 'hmacWithSHA384';
  NID_hmacWithSHA384 = 800;
  LN_hmacWithSHA512 = 'hmacWithSHA512';
  NID_hmacWithSHA512 = 801;
  LN_hmacWithSHA512_224 = 'hmacWithSHA512-224';
  NID_hmacWithSHA512_224 = 1193;
  LN_hmacWithSHA512_256 = 'hmacWithSHA512-256';
  NID_hmacWithSHA512_256 = 1194;
  SN_rc2_cbc = 'RC2-CBC';
  LN_rc2_cbc = 'rc2-cbc';
  NID_rc2_cbc = 37;
  SN_rc2_ecb = 'RC2-ECB';
  LN_rc2_ecb = 'rc2-ecb';
  NID_rc2_ecb = 38;
  SN_rc2_cfb64 = 'RC2-CFB';
  LN_rc2_cfb64 = 'rc2-cfb';
  NID_rc2_cfb64 = 39;
  SN_rc2_ofb64 = 'RC2-OFB';
  LN_rc2_ofb64 = 'rc2-ofb';
  NID_rc2_ofb64 = 40;
  SN_rc2_40_cbc = 'RC2-40-CBC';
  LN_rc2_40_cbc = 'rc2-40-cbc';
  NID_rc2_40_cbc = 98;
  SN_rc2_64_cbc = 'RC2-64-CBC';
  LN_rc2_64_cbc = 'rc2-64-cbc';
  NID_rc2_64_cbc = 166;
  SN_rc4 = 'RC4';
  LN_rc4 = 'rc4';
  NID_rc4 = 5;
  SN_rc4_40 = 'RC4-40';
  LN_rc4_40 = 'rc4-40';
  NID_rc4_40 = 97;
  SN_des_ede3_cbc = 'DES-EDE3-CBC';
  LN_des_ede3_cbc = 'des-ede3-cbc';
  NID_des_ede3_cbc = 44;
  SN_rc5_cbc = 'RC5-CBC';
  LN_rc5_cbc = 'rc5-cbc';
  NID_rc5_cbc = 120;
  SN_rc5_ecb = 'RC5-ECB';
  LN_rc5_ecb = 'rc5-ecb';
  NID_rc5_ecb = 121;
  SN_rc5_cfb64 = 'RC5-CFB';
  LN_rc5_cfb64 = 'rc5-cfb';
  NID_rc5_cfb64 = 122;
  SN_rc5_ofb64 = 'RC5-OFB';
  LN_rc5_ofb64 = 'rc5-ofb';
  NID_rc5_ofb64 = 123;
  SN_ms_ext_req = 'msExtReq';
  LN_ms_ext_req = 'Microsoft Extension Request';
  NID_ms_ext_req = 171;
  SN_ms_code_ind = 'msCodeInd';
  LN_ms_code_ind = 'Microsoft Individual Code Signing';
  NID_ms_code_ind = 134;
  SN_ms_code_com = 'msCodeCom';
  LN_ms_code_com = 'Microsoft Commercial Code Signing';
  NID_ms_code_com = 135;
  SN_ms_ctl_sign = 'msCTLSign';
  LN_ms_ctl_sign = 'Microsoft Trust List Signing';
  NID_ms_ctl_sign = 136;
  SN_ms_sgc = 'msSGC';
  LN_ms_sgc = 'Microsoft Server Gated Crypto';
  NID_ms_sgc = 137;
  SN_ms_efs = 'msEFS';
  LN_ms_efs = 'Microsoft Encrypted File System';
  NID_ms_efs = 138;
  SN_ms_smartcard_login = 'msSmartcardLogin';
  LN_ms_smartcard_login = 'Microsoft Smartcard Login';
  NID_ms_smartcard_login = 648;
  SN_ms_upn = 'msUPN';
  LN_ms_upn = 'Microsoft User Principal Name';
  NID_ms_upn = 649;
  SN_idea_cbc = 'IDEA-CBC';
  LN_idea_cbc = 'idea-cbc';
  NID_idea_cbc = 34;
  SN_idea_ecb = 'IDEA-ECB';
  LN_idea_ecb = 'idea-ecb';
  NID_idea_ecb = 36;
  SN_idea_cfb64 = 'IDEA-CFB';
  LN_idea_cfb64 = 'idea-cfb';
  NID_idea_cfb64 = 35;
  SN_idea_ofb64 = 'IDEA-OFB';
  LN_idea_ofb64 = 'idea-ofb';
  NID_idea_ofb64 = 46;
  SN_bf_cbc = 'BF-CBC';
  LN_bf_cbc = 'bf-cbc';
  NID_bf_cbc = 91;
  SN_bf_ecb = 'BF-ECB';
  LN_bf_ecb = 'bf-ecb';
  NID_bf_ecb = 92;
  SN_bf_cfb64 = 'BF-CFB';
  LN_bf_cfb64 = 'bf-cfb';
  NID_bf_cfb64 = 93;
  SN_bf_ofb64 = 'BF-OFB';
  LN_bf_ofb64 = 'bf-ofb';
  NID_bf_ofb64 = 94;
  SN_id_pkix = 'PKIX';
  NID_id_pkix = 127;
  SN_id_pkix_mod = 'id-pkix-mod';
  NID_id_pkix_mod = 258;
  SN_id_pe = 'id-pe';
  NID_id_pe = 175;
  SN_id_qt = 'id-qt';
  NID_id_qt = 259;
  SN_id_kp = 'id-kp';
  NID_id_kp = 128;
  SN_id_it = 'id-it';
  NID_id_it = 260;
  SN_id_pkip = 'id-pkip';
  NID_id_pkip = 261;
  SN_id_alg = 'id-alg';
  NID_id_alg = 262;
  SN_id_cmc = 'id-cmc';
  NID_id_cmc = 263;
  SN_id_on = 'id-on';
  NID_id_on = 264;
  SN_id_pda = 'id-pda';
  NID_id_pda = 265;
  SN_id_aca = 'id-aca';
  NID_id_aca = 266;
  SN_id_qcs = 'id-qcs';
  NID_id_qcs = 267;
  SN_id_cct = 'id-cct';
  NID_id_cct = 268;
  SN_id_ppl = 'id-ppl';
  NID_id_ppl = 662;
  SN_id_ad = 'id-ad';
  NID_id_ad = 176;
  SN_id_pkix1_explicit_88 = 'id-pkix1-explicit-88';
  NID_id_pkix1_explicit_88 = 269;
  SN_id_pkix1_implicit_88 = 'id-pkix1-implicit-88';
  NID_id_pkix1_implicit_88 = 270;
  SN_id_pkix1_explicit_93 = 'id-pkix1-explicit-93';
  NID_id_pkix1_explicit_93 = 271;
  SN_id_pkix1_implicit_93 = 'id-pkix1-implicit-93';
  NID_id_pkix1_implicit_93 = 272;
  SN_id_mod_crmf = 'id-mod-crmf';
  NID_id_mod_crmf = 273;
  SN_id_mod_cmc = 'id-mod-cmc';
  NID_id_mod_cmc = 274;
  SN_id_mod_kea_profile_88 = 'id-mod-kea-profile-88';
  NID_id_mod_kea_profile_88 = 275;
  SN_id_mod_kea_profile_93 = 'id-mod-kea-profile-93';
  NID_id_mod_kea_profile_93 = 276;
  SN_id_mod_cmp = 'id-mod-cmp';
  NID_id_mod_cmp = 277;
  SN_id_mod_qualified_cert_88 = 'id-mod-qualified-cert-88';
  NID_id_mod_qualified_cert_88 = 278;
  SN_id_mod_qualified_cert_93 = 'id-mod-qualified-cert-93';
  NID_id_mod_qualified_cert_93 = 279;
  SN_id_mod_attribute_cert = 'id-mod-attribute-cert';
  NID_id_mod_attribute_cert = 280;
  SN_id_mod_timestamp_protocol = 'id-mod-timestamp-protocol';
  NID_id_mod_timestamp_protocol = 281;
  SN_id_mod_ocsp = 'id-mod-ocsp';
  NID_id_mod_ocsp = 282;
  SN_id_mod_dvcs = 'id-mod-dvcs';
  NID_id_mod_dvcs = 283;
  SN_id_mod_cmp2000 = 'id-mod-cmp2000';
  NID_id_mod_cmp2000 = 284;
  SN_info_access = 'authorityInfoAccess';
  LN_info_access = 'Authority Information Access';
  NID_info_access = 177;
  SN_biometricInfo = 'biometricInfo';
  LN_biometricInfo = 'Biometric Info';
  NID_biometricInfo = 285;
  SN_qcStatements = 'qcStatements';
  NID_qcStatements = 286;
  SN_ac_auditEntity = 'ac-auditEntity';
  NID_ac_auditEntity = 287;
  SN_ac_targeting = 'ac-targeting';
  NID_ac_targeting = 288;
  SN_aaControls = 'aaControls';
  NID_aaControls = 289;
  SN_sbgp_ipAddrBlock = 'sbgp-ipAddrBlock';
  NID_sbgp_ipAddrBlock = 290;
  SN_sbgp_autonomousSysNum = 'sbgp-autonomousSysNum';
  NID_sbgp_autonomousSysNum = 291;
  SN_sbgp_routerIdentifier = 'sbgp-routerIdentifier';
  NID_sbgp_routerIdentifier = 292;
  SN_ac_proxying = 'ac-proxying';
  NID_ac_proxying = 397;
  SN_sinfo_access = 'subjectInfoAccess';
  LN_sinfo_access = 'Subject Information Access';
  NID_sinfo_access = 398;
  SN_proxyCertInfo = 'proxyCertInfo';
  LN_proxyCertInfo = 'Proxy Certificate Information';
  NID_proxyCertInfo = 663;
  SN_tlsfeature = 'tlsfeature';
  LN_tlsfeature = 'TLS Feature';
  NID_tlsfeature = 1020;
  SN_id_qt_cps = 'id-qt-cps';
  LN_id_qt_cps = 'Policy Qualifier CPS';
  NID_id_qt_cps = 164;
  SN_id_qt_unotice = 'id-qt-unotice';
  LN_id_qt_unotice = 'Policy Qualifier User Notice';
  NID_id_qt_unotice = 165;
  SN_textNotice = 'textNotice';
  NID_textNotice = 293;
  SN_server_auth = 'serverAuth';
  LN_server_auth = 'TLS Web Server Authentication';
  NID_server_auth = 129;
  SN_client_auth = 'clientAuth';
  LN_client_auth = 'TLS Web Client Authentication';
  NID_client_auth = 130;
  SN_code_sign = 'codeSigning';
  LN_code_sign = 'Code Signing';
  NID_code_sign = 131;
  SN_email_protect = 'emailProtection';
  LN_email_protect = 'E-mail Protection';
  NID_email_protect = 132;
  SN_ipsecEndSystem = 'ipsecEndSystem';
  LN_ipsecEndSystem = 'IPSec End System';
  NID_ipsecEndSystem = 294;
  SN_ipsecTunnel = 'ipsecTunnel';
  LN_ipsecTunnel = 'IPSec Tunnel';
  NID_ipsecTunnel = 295;
  SN_ipsecUser = 'ipsecUser';
  LN_ipsecUser = 'IPSec User';
  NID_ipsecUser = 296;
  SN_time_stamp = 'timeStamping';
  LN_time_stamp = 'Time Stamping';
  NID_time_stamp = 133;
  SN_OCSP_sign = 'OCSPSigning';
  LN_OCSP_sign = 'OCSP Signing';
  NID_OCSP_sign = 180;
  SN_dvcs = 'DVCS';
  LN_dvcs = 'dvcs';
  NID_dvcs = 297;
  SN_ipsec_IKE = 'ipsecIKE';
  LN_ipsec_IKE = 'ipsec Internet Key Exchange';
  NID_ipsec_IKE = 1022;
  SN_capwapAC = 'capwapAC';
  LN_capwapAC = 'Ctrl/provision WAP Access';
  NID_capwapAC = 1023;
  SN_capwapWTP = 'capwapWTP';
  LN_capwapWTP = 'Ctrl/Provision WAP Termination';
  NID_capwapWTP = 1024;
  SN_sshClient = 'secureShellClient';
  LN_sshClient = 'SSH Client';
  NID_sshClient = 1025;
  SN_sshServer = 'secureShellServer';
  LN_sshServer = 'SSH Server';
  NID_sshServer = 1026;
  SN_sendRouter = 'sendRouter';
  LN_sendRouter = 'Send Router';
  NID_sendRouter = 1027;
  SN_sendProxiedRouter = 'sendProxiedRouter';
  LN_sendProxiedRouter = 'Send Proxied Router';
  NID_sendProxiedRouter = 1028;
  SN_sendOwner = 'sendOwner';
  LN_sendOwner = 'Send Owner';
  NID_sendOwner = 1029;
  SN_sendProxiedOwner = 'sendProxiedOwner';
  LN_sendProxiedOwner = 'Send Proxied Owner';
  NID_sendProxiedOwner = 1030;
  SN_cmcCA = 'cmcCA';
  LN_cmcCA = 'CMC Certificate Authority';
  NID_cmcCA = 1131;
  SN_cmcRA = 'cmcRA';
  LN_cmcRA = 'CMC Registration Authority';
  NID_cmcRA = 1132;
  SN_id_it_caProtEncCert = 'id-it-caProtEncCert';
  NID_id_it_caProtEncCert = 298;
  SN_id_it_signKeyPairTypes = 'id-it-signKeyPairTypes';
  NID_id_it_signKeyPairTypes = 299;
  SN_id_it_encKeyPairTypes = 'id-it-encKeyPairTypes';
  NID_id_it_encKeyPairTypes = 300;
  SN_id_it_preferredSymmAlg = 'id-it-preferredSymmAlg';
  NID_id_it_preferredSymmAlg = 301;
  SN_id_it_caKeyUpdateInfo = 'id-it-caKeyUpdateInfo';
  NID_id_it_caKeyUpdateInfo = 302;
  SN_id_it_currentCRL = 'id-it-currentCRL';
  NID_id_it_currentCRL = 303;
  SN_id_it_unsupportedOIDs = 'id-it-unsupportedOIDs';
  NID_id_it_unsupportedOIDs = 304;
  SN_id_it_subscriptionRequest = 'id-it-subscriptionRequest';
  NID_id_it_subscriptionRequest = 305;
  SN_id_it_subscriptionResponse = 'id-it-subscriptionResponse';
  NID_id_it_subscriptionResponse = 306;
  SN_id_it_keyPairParamReq = 'id-it-keyPairParamReq';
  NID_id_it_keyPairParamReq = 307;
  SN_id_it_keyPairParamRep = 'id-it-keyPairParamRep';
  NID_id_it_keyPairParamRep = 308;
  SN_id_it_revPassphrase = 'id-it-revPassphrase';
  NID_id_it_revPassphrase = 309;
  SN_id_it_implicitConfirm = 'id-it-implicitConfirm';
  NID_id_it_implicitConfirm = 310;
  SN_id_it_confirmWaitTime = 'id-it-confirmWaitTime';
  NID_id_it_confirmWaitTime = 311;
  SN_id_it_origPKIMessage = 'id-it-origPKIMessage';
  NID_id_it_origPKIMessage = 312;
  SN_id_it_suppLangTags = 'id-it-suppLangTags';
  NID_id_it_suppLangTags = 784;
  SN_id_regCtrl = 'id-regCtrl';
  NID_id_regCtrl = 313;
  SN_id_regInfo = 'id-regInfo';
  NID_id_regInfo = 314;
  SN_id_regCtrl_regToken = 'id-regCtrl-regToken';
  NID_id_regCtrl_regToken = 315;
  SN_id_regCtrl_authenticator = 'id-regCtrl-authenticator';
  NID_id_regCtrl_authenticator = 316;
  SN_id_regCtrl_pkiPublicationInfo = 'id-regCtrl-pkiPublicationInfo';
  NID_id_regCtrl_pkiPublicationInfo = 317;
  SN_id_regCtrl_pkiArchiveOptions = 'id-regCtrl-pkiArchiveOptions';
  NID_id_regCtrl_pkiArchiveOptions = 318;
  SN_id_regCtrl_oldCertID = 'id-regCtrl-oldCertID';
  NID_id_regCtrl_oldCertID = 319;
  SN_id_regCtrl_protocolEncrKey = 'id-regCtrl-protocolEncrKey';
  NID_id_regCtrl_protocolEncrKey = 320;
  SN_id_regInfo_utf8Pairs = 'id-regInfo-utf8Pairs';
  NID_id_regInfo_utf8Pairs = 321;
  SN_id_regInfo_certReq = 'id-regInfo-certReq';
  NID_id_regInfo_certReq = 322;
  SN_id_alg_des40 = 'id-alg-des40';
  NID_id_alg_des40 = 323;
  SN_id_alg_noSignature = 'id-alg-noSignature';
  NID_id_alg_noSignature = 324;
  SN_id_alg_dh_sig_hmac_sha1 = 'id-alg-dh-sig-hmac-sha1';
  NID_id_alg_dh_sig_hmac_sha1 = 325;
  SN_id_alg_dh_pop = 'id-alg-dh-pop';
  NID_id_alg_dh_pop = 326;
  SN_id_cmc_statusInfo = 'id-cmc-statusInfo';
  NID_id_cmc_statusInfo = 327;
  SN_id_cmc_identification = 'id-cmc-identification';
  NID_id_cmc_identification = 328;
  SN_id_cmc_identityProof = 'id-cmc-identityProof';
  NID_id_cmc_identityProof = 329;
  SN_id_cmc_dataReturn = 'id-cmc-dataReturn';
  NID_id_cmc_dataReturn = 330;
  SN_id_cmc_transactionId = 'id-cmc-transactionId';
  NID_id_cmc_transactionId = 331;
  SN_id_cmc_senderNonce = 'id-cmc-senderNonce';
  NID_id_cmc_senderNonce = 332;
  SN_id_cmc_recipientNonce = 'id-cmc-recipientNonce';
  NID_id_cmc_recipientNonce = 333;
  SN_id_cmc_addExtensions = 'id-cmc-addExtensions';
  NID_id_cmc_addExtensions = 334;
  SN_id_cmc_encryptedPOP = 'id-cmc-encryptedPOP';
  NID_id_cmc_encryptedPOP = 335;
  SN_id_cmc_decryptedPOP = 'id-cmc-decryptedPOP';
  NID_id_cmc_decryptedPOP = 336;
  SN_id_cmc_lraPOPWitness = 'id-cmc-lraPOPWitness';
  NID_id_cmc_lraPOPWitness = 337;
  SN_id_cmc_getCert = 'id-cmc-getCert';
  NID_id_cmc_getCert = 338;
  SN_id_cmc_getCRL = 'id-cmc-getCRL';
  NID_id_cmc_getCRL = 339;
  SN_id_cmc_revokeRequest = 'id-cmc-revokeRequest';
  NID_id_cmc_revokeRequest = 340;
  SN_id_cmc_regInfo = 'id-cmc-regInfo';
  NID_id_cmc_regInfo = 341;
  SN_id_cmc_responseInfo = 'id-cmc-responseInfo';
  NID_id_cmc_responseInfo = 342;
  SN_id_cmc_queryPending = 'id-cmc-queryPending';
  NID_id_cmc_queryPending = 343;
  SN_id_cmc_popLinkRandom = 'id-cmc-popLinkRandom';
  NID_id_cmc_popLinkRandom = 344;
  SN_id_cmc_popLinkWitness = 'id-cmc-popLinkWitness';
  NID_id_cmc_popLinkWitness = 345;
  SN_id_cmc_confirmCertAcceptance = 'id-cmc-confirmCertAcceptance';
  NID_id_cmc_confirmCertAcceptance = 346;
  SN_id_on_personalData = 'id-on-personalData';
  NID_id_on_personalData = 347;
  SN_id_on_permanentIdentifier = 'id-on-permanentIdentifier';
  LN_id_on_permanentIdentifier = 'Permanent Identifier';
  NID_id_on_permanentIdentifier = 858;
  SN_id_pda_dateOfBirth = 'id-pda-dateOfBirth';
  NID_id_pda_dateOfBirth = 348;
  SN_id_pda_placeOfBirth = 'id-pda-placeOfBirth';
  NID_id_pda_placeOfBirth = 349;
  SN_id_pda_gender = 'id-pda-gender';
  NID_id_pda_gender = 351;
  SN_id_pda_countryOfCitizenship = 'id-pda-countryOfCitizenship';
  NID_id_pda_countryOfCitizenship = 352;
  SN_id_pda_countryOfResidence = 'id-pda-countryOfResidence';
  NID_id_pda_countryOfResidence = 353;
  SN_id_aca_authenticationInfo = 'id-aca-authenticationInfo';
  NID_id_aca_authenticationInfo = 354;
  SN_id_aca_accessIdentity = 'id-aca-accessIdentity';
  NID_id_aca_accessIdentity = 355;
  SN_id_aca_chargingIdentity = 'id-aca-chargingIdentity';
  NID_id_aca_chargingIdentity = 356;
  SN_id_aca_group = 'id-aca-group';
  NID_id_aca_group = 357;
  SN_id_aca_role = 'id-aca-role';
  NID_id_aca_role = 358;
  SN_id_aca_encAttrs = 'id-aca-encAttrs';
  NID_id_aca_encAttrs = 399;
  SN_id_qcs_pkixQCSyntax_v1 = 'id-qcs-pkixQCSyntax-v1';
  NID_id_qcs_pkixQCSyntax_v1 = 359;
  SN_id_cct_crs = 'id-cct-crs';
  NID_id_cct_crs = 360;
  SN_id_cct_PKIData = 'id-cct-PKIData';
  NID_id_cct_PKIData = 361;
  SN_id_cct_PKIResponse = 'id-cct-PKIResponse';
  NID_id_cct_PKIResponse = 362;
  SN_id_ppl_anyLanguage = 'id-ppl-anyLanguage';
  LN_id_ppl_anyLanguage = 'Any language';
  NID_id_ppl_anyLanguage = 664;
  SN_id_ppl_inheritAll = 'id-ppl-inheritAll';
  LN_id_ppl_inheritAll = 'Inherit all';
  NID_id_ppl_inheritAll = 665;
  SN_Independent = 'id-ppl-independent';
  LN_Independent = 'Independent';
  NID_Independent = 667;
  SN_ad_OCSP = 'OCSP';
  LN_ad_OCSP = 'OCSP';
  NID_ad_OCSP = 178;
  SN_ad_ca_issuers = 'caIssuers';
  LN_ad_ca_issuers = 'CA Issuers';
  NID_ad_ca_issuers = 179;
  SN_ad_timeStamping = 'ad_timestamping';
  LN_ad_timeStamping = 'AD Time Stamping';
  NID_ad_timeStamping = 363;
  SN_ad_dvcs = 'AD_DVCS';
  LN_ad_dvcs = 'ad dvcs';
  NID_ad_dvcs = 364;
  SN_caRepository = 'caRepository';
  LN_caRepository = 'CA Repository';
  NID_caRepository = 785;
  SN_id_pkix_OCSP_basic = 'basicOCSPResponse';
  LN_id_pkix_OCSP_basic = 'Basic OCSP Response';
  NID_id_pkix_OCSP_basic = 365;
  SN_id_pkix_OCSP_Nonce = 'Nonce';
  LN_id_pkix_OCSP_Nonce = 'OCSP Nonce';
  NID_id_pkix_OCSP_Nonce = 366;
  SN_id_pkix_OCSP_CrlID = 'CrlID';
  LN_id_pkix_OCSP_CrlID = 'OCSP CRL ID';
  NID_id_pkix_OCSP_CrlID = 367;
  SN_id_pkix_OCSP_acceptableResponses = 'acceptableResponses';
  LN_id_pkix_OCSP_acceptableResponses = 'Acceptable OCSP Responses';
  NID_id_pkix_OCSP_acceptableResponses = 368;
  SN_id_pkix_OCSP_noCheck = 'noCheck';
  LN_id_pkix_OCSP_noCheck = 'OCSP No Check';
  NID_id_pkix_OCSP_noCheck = 369;
  SN_id_pkix_OCSP_archiveCutoff = 'archiveCutoff';
  LN_id_pkix_OCSP_archiveCutoff = 'OCSP Archive Cutoff';
  NID_id_pkix_OCSP_archiveCutoff = 370;
  SN_id_pkix_OCSP_serviceLocator = 'serviceLocator';
  LN_id_pkix_OCSP_serviceLocator = 'OCSP Service Locator';
  NID_id_pkix_OCSP_serviceLocator = 371;
  SN_id_pkix_OCSP_extendedStatus = 'extendedStatus';
  LN_id_pkix_OCSP_extendedStatus = 'Extended OCSP Status';
  NID_id_pkix_OCSP_extendedStatus = 372;
  SN_id_pkix_OCSP_valid = 'valid';
  NID_id_pkix_OCSP_valid = 373;
  SN_id_pkix_OCSP_path = 'path';
  NID_id_pkix_OCSP_path = 374;
  SN_id_pkix_OCSP_trustRoot = 'trustRoot';
  LN_id_pkix_OCSP_trustRoot = 'Trust Root';
  NID_id_pkix_OCSP_trustRoot = 375;
  SN_algorithm = 'algorithm';
  LN_algorithm = 'algorithm';
  NID_algorithm = 376;
  SN_md5WithRSA = 'RSA-NP-MD5';
  LN_md5WithRSA = 'md5WithRSA';
  NID_md5WithRSA = 104;
  SN_des_ecb = 'DES-ECB';
  LN_des_ecb = 'des-ecb';
  NID_des_ecb = 29;
  SN_des_cbc = 'DES-CBC';
  LN_des_cbc = 'des-cbc';
  NID_des_cbc = 31;
  SN_des_ofb64 = 'DES-OFB';
  LN_des_ofb64 = 'des-ofb';
  NID_des_ofb64 = 45;
  SN_des_cfb64 = 'DES-CFB';
  LN_des_cfb64 = 'des-cfb';
  NID_des_cfb64 = 30;
  SN_rsaSignature = 'rsaSignature';
  NID_rsaSignature = 377;
  SN_dsa_2 = 'DSA-old';
  LN_dsa_2 = 'dsaEncryption-old';
  NID_dsa_2 = 67;
  SN_dsaWithSHA = 'DSA-SHA';
  LN_dsaWithSHA = 'dsaWithSHA';
  NID_dsaWithSHA = 66;
  SN_shaWithRSAEncryption = 'RSA-SHA';
  LN_shaWithRSAEncryption = 'shaWithRSAEncryption';
  NID_shaWithRSAEncryption = 42;
  SN_des_ede_ecb = 'DES-EDE';
  LN_des_ede_ecb = 'des-ede';
  NID_des_ede_ecb = 32;
  SN_des_ede3_ecb = 'DES-EDE3';
  LN_des_ede3_ecb = 'des-ede3';
  NID_des_ede3_ecb = 33;
  SN_des_ede_cbc = 'DES-EDE-CBC';
  LN_des_ede_cbc = 'des-ede-cbc';
  NID_des_ede_cbc = 43;
  SN_des_ede_cfb64 = 'DES-EDE-CFB';
  LN_des_ede_cfb64 = 'des-ede-cfb';
  NID_des_ede_cfb64 = 60;
  SN_des_ede3_cfb64 = 'DES-EDE3-CFB';
  LN_des_ede3_cfb64 = 'des-ede3-cfb';
  NID_des_ede3_cfb64 = 61;
  SN_des_ede_ofb64 = 'DES-EDE-OFB';
  LN_des_ede_ofb64 = 'des-ede-ofb';
  NID_des_ede_ofb64 = 62;
  SN_des_ede3_ofb64 = 'DES-EDE3-OFB';
  LN_des_ede3_ofb64 = 'des-ede3-ofb';
  NID_des_ede3_ofb64 = 63;
  SN_desx_cbc = 'DESX-CBC';
  LN_desx_cbc = 'desx-cbc';
  NID_desx_cbc = 80;
  SN_sha = 'SHA';
  LN_sha = 'sha';
  NID_sha = 41;
  SN_sha1 = 'SHA1';
  LN_sha1 = 'sha1';
  NID_sha1 = 64;
  SN_dsaWithSHA1_2 = 'DSA-SHA1-old';
  LN_dsaWithSHA1_2 = 'dsaWithSHA1-old';
  NID_dsaWithSHA1_2 = 70;
  SN_sha1WithRSA = 'RSA-SHA1-2';
  LN_sha1WithRSA = 'sha1WithRSA';
  NID_sha1WithRSA = 115;
  SN_ripemd160 = 'RIPEMD160';
  LN_ripemd160 = 'ripemd160';
  NID_ripemd160 = 117;
  SN_ripemd160WithRSA = 'RSA-RIPEMD160';
  LN_ripemd160WithRSA = 'ripemd160WithRSA';
  NID_ripemd160WithRSA = 119;
  SN_blake2b512 = 'BLAKE2b512';
  LN_blake2b512 = 'blake2b512';
  NID_blake2b512 = 1056;
  SN_blake2s256 = 'BLAKE2s256';
  LN_blake2s256 = 'blake2s256';
  NID_blake2s256 = 1057;
  SN_sxnet = 'SXNetID';
  LN_sxnet = 'Strong Extranet ID';
  NID_sxnet = 143;
  SN_X500 = 'X500';
  LN_X500 = 'directory services (X.500)';
  NID_X500 = 11;
  SN_X509 = 'X509';
  NID_X509 = 12;
  SN_commonName = 'CN';
  LN_commonName = 'commonName';
  NID_commonName = 13;
  SN_surname = 'SN';
  LN_surname = 'surname';
  NID_surname = 100;
  LN_serialNumber = 'serialNumber';
  NID_serialNumber = 105;
  SN_countryName = 'C';
  LN_countryName = 'countryName';
  NID_countryName = 14;
  SN_localityName = 'L';
  LN_localityName = 'localityName';
  NID_localityName = 15;
  SN_stateOrProvinceName = 'ST';
  LN_stateOrProvinceName = 'stateOrProvinceName';
  NID_stateOrProvinceName = 16;
  SN_streetAddress = 'street';
  LN_streetAddress = 'streetAddress';
  NID_streetAddress = 660;
  SN_organizationName = 'O';
  LN_organizationName = 'organizationName';
  NID_organizationName = 17;
  SN_organizationalUnitName = 'OU';
  LN_organizationalUnitName = 'organizationalUnitName';
  NID_organizationalUnitName = 18;
  SN_title = 'title';
  LN_title = 'title';
  NID_title = 106;
  LN_description = 'description';
  NID_description = 107;
  LN_searchGuide = 'searchGuide';
  NID_searchGuide = 859;
  LN_businessCategory = 'businessCategory';
  NID_businessCategory = 860;
  LN_postalAddress = 'postalAddress';
  NID_postalAddress = 861;
  LN_postalCode = 'postalCode';
  NID_postalCode = 661;
  LN_postOfficeBox = 'postOfficeBox';
  NID_postOfficeBox = 862;
  LN_physicalDeliveryOfficeName = 'physicalDeliveryOfficeName';
  NID_physicalDeliveryOfficeName = 863;
  LN_telephoneNumber = 'telephoneNumber';
  NID_telephoneNumber = 864;
  LN_telexNumber = 'telexNumber';
  NID_telexNumber = 865;
  LN_teletexTerminalIdentifier = 'teletexTerminalIdentifier';
  NID_teletexTerminalIdentifier = 866;
  LN_facsimileTelephoneNumber = 'facsimileTelephoneNumber';
  NID_facsimileTelephoneNumber = 867;
  LN_x121Address = 'x121Address';
  NID_x121Address = 868;
  LN_internationaliSDNNumber = 'internationaliSDNNumber';
  NID_internationaliSDNNumber = 869;
  LN_registeredAddress = 'registeredAddress';
  NID_registeredAddress = 870;
  LN_destinationIndicator = 'destinationIndicator';
  NID_destinationIndicator = 871;
  LN_preferredDeliveryMethod = 'preferredDeliveryMethod';
  NID_preferredDeliveryMethod = 872;
  LN_presentationAddress = 'presentationAddress';
  NID_presentationAddress = 873;
  LN_supportedApplicationContext = 'supportedApplicationContext';
  NID_supportedApplicationContext = 874;
  SN_member = 'member';
  NID_member = 875;
  SN_owner = 'owner';
  NID_owner = 876;
  LN_roleOccupant = 'roleOccupant';
  NID_roleOccupant = 877;
  SN_seeAlso = 'seeAlso';
  NID_seeAlso = 878;
  LN_userPassword = 'userPassword';
  NID_userPassword = 879;
  LN_userCertificate = 'userCertificate';
  NID_userCertificate = 880;
  LN_cACertificate = 'cACertificate';
  NID_cACertificate = 881;
  LN_authorityRevocationList = 'authorityRevocationList';
  NID_authorityRevocationList = 882;
  LN_certificateRevocationList = 'certificateRevocationList';
  NID_certificateRevocationList = 883;
  LN_crossCertificatePair = 'crossCertificatePair';
  NID_crossCertificatePair = 884;
  SN_name = 'name';
  LN_name = 'name';
  NID_name = 173;
  SN_givenName = 'GN';
  LN_givenName = 'givenName';
  NID_givenName = 99;
  SN_initials = 'initials';
  LN_initials = 'initials';
  NID_initials = 101;
  LN_generationQualifier = 'generationQualifier';
  NID_generationQualifier = 509;
  LN_x500UniqueIdentifier = 'x500UniqueIdentifier';
  NID_x500UniqueIdentifier = 503;
  SN_dnQualifier = 'dnQualifier';
  LN_dnQualifier = 'dnQualifier';
  NID_dnQualifier = 174;
  LN_enhancedSearchGuide = 'enhancedSearchGuide';
  NID_enhancedSearchGuide = 885;
  LN_protocolInformation = 'protocolInformation';
  NID_protocolInformation = 886;
  LN_distinguishedName = 'distinguishedName';
  NID_distinguishedName = 887;
  LN_uniqueMember = 'uniqueMember';
  NID_uniqueMember = 888;
  LN_houseIdentifier = 'houseIdentifier';
  NID_houseIdentifier = 889;
  LN_supportedAlgorithms = 'supportedAlgorithms';
  NID_supportedAlgorithms = 890;
  LN_deltaRevocationList = 'deltaRevocationList';
  NID_deltaRevocationList = 891;
  SN_dmdName = 'dmdName';
  NID_dmdName = 892;
  LN_pseudonym = 'pseudonym';
  NID_pseudonym = 510;
  SN_role = 'role';
  LN_role = 'role';
  NID_role = 400;
  LN_organizationIdentifier = 'organizationIdentifier';
  NID_organizationIdentifier = 1089;
  SN_countryCode3c = 'c3';
  LN_countryCode3c = 'countryCode3c';
  NID_countryCode3c = 1090;
  SN_countryCode3n = 'n3';
  LN_countryCode3n = 'countryCode3n';
  NID_countryCode3n = 1091;
  LN_dnsName = 'dnsName';
  NID_dnsName = 1092;
  SN_X500algorithms = 'X500algorithms';
  LN_X500algorithms = 'directory services - algorithms';
  NID_X500algorithms = 378;
  SN_rsa = 'RSA';
  LN_rsa = 'rsa';
  NID_rsa = 19;
  SN_mdc2WithRSA = 'RSA-MDC2';
  LN_mdc2WithRSA = 'mdc2WithRSA';
  NID_mdc2WithRSA = 96;
  SN_mdc2 = 'MDC2';
  LN_mdc2 = 'mdc2';
  NID_mdc2 = 95;
  SN_id_ce = 'id-ce';
  NID_id_ce = 81;
  SN_subject_directory_attributes = 'subjectDirectoryAttributes';
  LN_subject_directory_attributes = 'X509v3 Subject Directory Attributes';
  NID_subject_directory_attributes = 769;
  SN_subject_key_identifier = 'subjectKeyIdentifier';
  LN_subject_key_identifier = 'X509v3 Subject Key Identifier';
  NID_subject_key_identifier = 82;
  SN_key_usage = 'keyUsage';
  LN_key_usage = 'X509v3 Key Usage';
  NID_key_usage = 83;
  SN_private_key_usage_period = 'privateKeyUsagePeriod';
  LN_private_key_usage_period = 'X509v3 Private Key Usage Period';
  NID_private_key_usage_period = 84;
  SN_subject_alt_name = 'subjectAltName';
  LN_subject_alt_name = 'X509v3 Subject Alternative Name';
  NID_subject_alt_name = 85;
  SN_issuer_alt_name = 'issuerAltName';
  LN_issuer_alt_name = 'X509v3 Issuer Alternative Name';
  NID_issuer_alt_name = 86;
  SN_basic_constraints = 'basicConstraints';
  LN_basic_constraints = 'X509v3 Basic Constraints';
  NID_basic_constraints = 87;
  SN_crl_number = 'crlNumber';
  LN_crl_number = 'X509v3 CRL Number';
  NID_crl_number = 88;
  SN_crl_reason = 'CRLReason';
  LN_crl_reason = 'X509v3 CRL Reason Code';
  NID_crl_reason = 141;
  SN_invalidity_date = 'invalidityDate';
  LN_invalidity_date = 'Invalidity Date';
  NID_invalidity_date = 142;
  SN_delta_crl = 'deltaCRL';
  LN_delta_crl = 'X509v3 Delta CRL Indicator';
  NID_delta_crl = 140;
  SN_issuing_distribution_point = 'issuingDistributionPoint';
  LN_issuing_distribution_point = 'X509v3 Issuing Distribution Point';
  NID_issuing_distribution_point = 770;
  SN_certificate_issuer = 'certificateIssuer';
  LN_certificate_issuer = 'X509v3 Certificate Issuer';
  NID_certificate_issuer = 771;
  SN_name_constraints = 'nameConstraints';
  LN_name_constraints = 'X509v3 Name Constraints';
  NID_name_constraints = 666;
  SN_crl_distribution_points = 'crlDistributionPoints';
  LN_crl_distribution_points = 'X509v3 CRL Distribution Points';
  NID_crl_distribution_points = 103;
  SN_certificate_policies = 'certificatePolicies';
  LN_certificate_policies = 'X509v3 Certificate Policies';
  NID_certificate_policies = 89;
  SN_any_policy = 'anyPolicy';
  LN_any_policy = 'X509v3 Any Policy';
  NID_any_policy = 746;
  SN_policy_mappings = 'policyMappings';
  LN_policy_mappings = 'X509v3 Policy Mappings';
  NID_policy_mappings = 747;
  SN_authority_key_identifier = 'authorityKeyIdentifier';
  LN_authority_key_identifier = 'X509v3 Authority Key Identifier';
  NID_authority_key_identifier = 90;
  SN_policy_constraints = 'policyConstraints';
  LN_policy_constraints = 'X509v3 Policy Constraints';
  NID_policy_constraints = 401;
  SN_ext_key_usage = 'extendedKeyUsage';
  LN_ext_key_usage = 'X509v3 Extended Key Usage';
  NID_ext_key_usage = 126;
  SN_freshest_crl = 'freshestCRL';
  LN_freshest_crl = 'X509v3 Freshest CRL';
  NID_freshest_crl = 857;
  SN_inhibit_any_policy = 'inhibitAnyPolicy';
  LN_inhibit_any_policy = 'X509v3 Inhibit Any Policy';
  NID_inhibit_any_policy = 748;
  SN_target_information = 'targetInformation';
  LN_target_information = 'X509v3 AC Targeting';
  NID_target_information = 402;
  SN_no_rev_avail = 'noRevAvail';
  LN_no_rev_avail = 'X509v3 No Revocation Available';
  NID_no_rev_avail = 403;
  SN_anyExtendedKeyUsage = 'anyExtendedKeyUsage';
  LN_anyExtendedKeyUsage = 'Any Extended Key Usage';
  NID_anyExtendedKeyUsage = 910;
  SN_netscape = 'Netscape';
  LN_netscape = 'Netscape Communications Corp.';
  NID_netscape = 57;
  SN_netscape_cert_extension = 'nsCertExt';
  LN_netscape_cert_extension = 'Netscape Certificate Extension';
  NID_netscape_cert_extension = 58;
  SN_netscape_data_type = 'nsDataType';
  LN_netscape_data_type = 'Netscape Data Type';
  NID_netscape_data_type = 59;
  SN_netscape_cert_type = 'nsCertType';
  LN_netscape_cert_type = 'Netscape Cert Type';
  NID_netscape_cert_type = 71;
  SN_netscape_base_url = 'nsBaseUrl';
  LN_netscape_base_url = 'Netscape Base Url';
  NID_netscape_base_url = 72;
  SN_netscape_revocation_url = 'nsRevocationUrl';
  LN_netscape_revocation_url = 'Netscape Revocation Url';
  NID_netscape_revocation_url = 73;
  SN_netscape_ca_revocation_url = 'nsCaRevocationUrl';
  LN_netscape_ca_revocation_url = 'Netscape CA Revocation Url';
  NID_netscape_ca_revocation_url = 74;
  SN_netscape_renewal_url = 'nsRenewalUrl';
  LN_netscape_renewal_url = 'Netscape Renewal Url';
  NID_netscape_renewal_url = 75;
  SN_netscape_ca_policy_url = 'nsCaPolicyUrl';
  LN_netscape_ca_policy_url = 'Netscape CA Policy Url';
  NID_netscape_ca_policy_url = 76;
  SN_netscape_ssl_server_name = 'nsSslServerName';
  LN_netscape_ssl_server_name = 'Netscape SSL Server Name';
  NID_netscape_ssl_server_name = 77;
  SN_netscape_comment = 'nsComment';
  LN_netscape_comment = 'Netscape Comment';
  NID_netscape_comment = 78;
  SN_netscape_cert_sequence = 'nsCertSequence';
  LN_netscape_cert_sequence = 'Netscape Certificate Sequence';
  NID_netscape_cert_sequence = 79;
  SN_ns_sgc = 'nsSGC';
  LN_ns_sgc = 'Netscape Server Gated Crypto';
  NID_ns_sgc = 139;
  SN_org = 'ORG';
  LN_org = 'org';
  NID_org = 379;
  SN_dod = 'DOD';
  LN_dod = 'dod';
  NID_dod = 380;
  SN_iana = 'IANA';
  LN_iana = 'iana';
  NID_iana = 381;
  SN_Directory = 'directory';
  LN_Directory = 'Directory';
  NID_Directory = 382;
  SN_Management = 'mgmt';
  LN_Management = 'Management';
  NID_Management = 383;
  SN_Experimental = 'experimental';
  LN_Experimental = 'Experimental';
  NID_Experimental = 384;
  SN_Private = 'private';
  LN_Private = 'Private';
  NID_Private = 385;
  SN_Security = 'security';
  LN_Security = 'Security';
  NID_Security = 386;
  SN_SNMPv2 = 'snmpv2';
  LN_SNMPv2 = 'SNMPv2';
  NID_SNMPv2 = 387;
  LN_Mail = 'Mail';
  NID_Mail = 388;
  SN_Enterprises = 'enterprises';
  LN_Enterprises = 'Enterprises';
  NID_Enterprises = 389;
  SN_dcObject = 'dcobject';
  LN_dcObject = 'dcObject';
  NID_dcObject = 390;
  SN_mime_mhs = 'mime-mhs';
  LN_mime_mhs = 'MIME MHS';
  NID_mime_mhs = 504;
  SN_mime_mhs_headings = 'mime-mhs-headings';
  LN_mime_mhs_headings = 'mime-mhs-headings';
  NID_mime_mhs_headings = 505;
  SN_mime_mhs_bodies = 'mime-mhs-bodies';
  LN_mime_mhs_bodies = 'mime-mhs-bodies';
  NID_mime_mhs_bodies = 506;
  SN_id_hex_partial_message = 'id-hex-partial-message';
  LN_id_hex_partial_message = 'id-hex-partial-message';
  NID_id_hex_partial_message = 507;
  SN_id_hex_multipart_message = 'id-hex-multipart-message';
  LN_id_hex_multipart_message = 'id-hex-multipart-message';
  NID_id_hex_multipart_message = 508;
  SN_zlib_compression = 'ZLIB';
  LN_zlib_compression = 'zlib compression';
  NID_zlib_compression = 125;
  SN_aes_128_ecb = 'AES-128-ECB';
  LN_aes_128_ecb = 'aes-128-ecb';
  NID_aes_128_ecb = 418;
  SN_aes_128_cbc = 'AES-128-CBC';
  LN_aes_128_cbc = 'aes-128-cbc';
  NID_aes_128_cbc = 419;
  SN_aes_128_ofb128 = 'AES-128-OFB';
  LN_aes_128_ofb128 = 'aes-128-ofb';
  NID_aes_128_ofb128 = 420;
  SN_aes_128_cfb128 = 'AES-128-CFB';
  LN_aes_128_cfb128 = 'aes-128-cfb';
  NID_aes_128_cfb128 = 421;
  SN_id_aes128_wrap = 'id-aes128-wrap';
  NID_id_aes128_wrap = 788;
  SN_aes_128_gcm = 'id-aes128-GCM';
  LN_aes_128_gcm = 'aes-128-gcm';
  NID_aes_128_gcm = 895;
  SN_aes_128_ccm = 'id-aes128-CCM';
  LN_aes_128_ccm = 'aes-128-ccm';
  NID_aes_128_ccm = 896;
  SN_id_aes128_wrap_pad = 'id-aes128-wrap-pad';
  NID_id_aes128_wrap_pad = 897;
  SN_aes_192_ecb = 'AES-192-ECB';
  LN_aes_192_ecb = 'aes-192-ecb';
  NID_aes_192_ecb = 422;
  SN_aes_192_cbc = 'AES-192-CBC';
  LN_aes_192_cbc = 'aes-192-cbc';
  NID_aes_192_cbc = 423;
  SN_aes_192_ofb128 = 'AES-192-OFB';
  LN_aes_192_ofb128 = 'aes-192-ofb';
  NID_aes_192_ofb128 = 424;
  SN_aes_192_cfb128 = 'AES-192-CFB';
  LN_aes_192_cfb128 = 'aes-192-cfb';
  NID_aes_192_cfb128 = 425;
  SN_id_aes192_wrap = 'id-aes192-wrap';
  NID_id_aes192_wrap = 789;
  SN_aes_192_gcm = 'id-aes192-GCM';
  LN_aes_192_gcm = 'aes-192-gcm';
  NID_aes_192_gcm = 898;
  SN_aes_192_ccm = 'id-aes192-CCM';
  LN_aes_192_ccm = 'aes-192-ccm';
  NID_aes_192_ccm = 899;
  SN_id_aes192_wrap_pad = 'id-aes192-wrap-pad';
  NID_id_aes192_wrap_pad = 900;
  SN_aes_256_ecb = 'AES-256-ECB';
  LN_aes_256_ecb = 'aes-256-ecb';
  NID_aes_256_ecb = 426;
  SN_aes_256_cbc = 'AES-256-CBC';
  LN_aes_256_cbc = 'aes-256-cbc';
  NID_aes_256_cbc = 427;
  SN_aes_256_ofb128 = 'AES-256-OFB';
  LN_aes_256_ofb128 = 'aes-256-ofb';
  NID_aes_256_ofb128 = 428;
  SN_aes_256_cfb128 = 'AES-256-CFB';
  LN_aes_256_cfb128 = 'aes-256-cfb';
  NID_aes_256_cfb128 = 429;
  SN_id_aes256_wrap = 'id-aes256-wrap';
  NID_id_aes256_wrap = 790;
  SN_aes_256_gcm = 'id-aes256-GCM';
  LN_aes_256_gcm = 'aes-256-gcm';
  NID_aes_256_gcm = 901;
  SN_aes_256_ccm = 'id-aes256-CCM';
  LN_aes_256_ccm = 'aes-256-ccm';
  NID_aes_256_ccm = 902;
  SN_id_aes256_wrap_pad = 'id-aes256-wrap-pad';
  NID_id_aes256_wrap_pad = 903;
  SN_aes_128_xts = 'AES-128-XTS';
  LN_aes_128_xts = 'aes-128-xts';
  NID_aes_128_xts = 913;
  SN_aes_256_xts = 'AES-256-XTS';
  LN_aes_256_xts = 'aes-256-xts';
  NID_aes_256_xts = 914;
  SN_aes_128_cfb1 = 'AES-128-CFB1';
  LN_aes_128_cfb1 = 'aes-128-cfb1';
  NID_aes_128_cfb1 = 650;
  SN_aes_192_cfb1 = 'AES-192-CFB1';
  LN_aes_192_cfb1 = 'aes-192-cfb1';
  NID_aes_192_cfb1 = 651;
  SN_aes_256_cfb1 = 'AES-256-CFB1';
  LN_aes_256_cfb1 = 'aes-256-cfb1';
  NID_aes_256_cfb1 = 652;
  SN_aes_128_cfb8 = 'AES-128-CFB8';
  LN_aes_128_cfb8 = 'aes-128-cfb8';
  NID_aes_128_cfb8 = 653;
  SN_aes_192_cfb8 = 'AES-192-CFB8';
  LN_aes_192_cfb8 = 'aes-192-cfb8';
  NID_aes_192_cfb8 = 654;
  SN_aes_256_cfb8 = 'AES-256-CFB8';
  LN_aes_256_cfb8 = 'aes-256-cfb8';
  NID_aes_256_cfb8 = 655;
  SN_aes_128_ctr = 'AES-128-CTR';
  LN_aes_128_ctr = 'aes-128-ctr';
  NID_aes_128_ctr = 904;
  SN_aes_192_ctr = 'AES-192-CTR';
  LN_aes_192_ctr = 'aes-192-ctr';
  NID_aes_192_ctr = 905;
  SN_aes_256_ctr = 'AES-256-CTR';
  LN_aes_256_ctr = 'aes-256-ctr';
  NID_aes_256_ctr = 906;
  SN_aes_128_ocb = 'AES-128-OCB';
  LN_aes_128_ocb = 'aes-128-ocb';
  NID_aes_128_ocb = 958;
  SN_aes_192_ocb = 'AES-192-OCB';
  LN_aes_192_ocb = 'aes-192-ocb';
  NID_aes_192_ocb = 959;
  SN_aes_256_ocb = 'AES-256-OCB';
  LN_aes_256_ocb = 'aes-256-ocb';
  NID_aes_256_ocb = 960;
  SN_des_cfb1 = 'DES-CFB1';
  LN_des_cfb1 = 'des-cfb1';
  NID_des_cfb1 = 656;
  SN_des_cfb8 = 'DES-CFB8';
  LN_des_cfb8 = 'des-cfb8';
  NID_des_cfb8 = 657;
  SN_des_ede3_cfb1 = 'DES-EDE3-CFB1';
  LN_des_ede3_cfb1 = 'des-ede3-cfb1';
  NID_des_ede3_cfb1 = 658;
  SN_des_ede3_cfb8 = 'DES-EDE3-CFB8';
  LN_des_ede3_cfb8 = 'des-ede3-cfb8';
  NID_des_ede3_cfb8 = 659;
  SN_sha256 = 'SHA256';
  LN_sha256 = 'sha256';
  NID_sha256 = 672;
  SN_sha384 = 'SHA384';
  LN_sha384 = 'sha384';
  NID_sha384 = 673;
  SN_sha512 = 'SHA512';
  LN_sha512 = 'sha512';
  NID_sha512 = 674;
  SN_sha224 = 'SHA224';
  LN_sha224 = 'sha224';
  NID_sha224 = 675;
  SN_sha512_224 = 'SHA512-224';
  LN_sha512_224 = 'sha512-224';
  NID_sha512_224 = 1094;
  SN_sha512_256 = 'SHA512-256';
  LN_sha512_256 = 'sha512-256';
  NID_sha512_256 = 1095;
  SN_sha3_224 = 'SHA3-224';
  LN_sha3_224 = 'sha3-224';
  NID_sha3_224 = 1096;
  SN_sha3_256 = 'SHA3-256';
  LN_sha3_256 = 'sha3-256';
  NID_sha3_256 = 1097;
  SN_sha3_384 = 'SHA3-384';
  LN_sha3_384 = 'sha3-384';
  NID_sha3_384 = 1098;
  SN_sha3_512 = 'SHA3-512';
  LN_sha3_512 = 'sha3-512';
  NID_sha3_512 = 1099;
  SN_shake128 = 'SHAKE128';
  LN_shake128 = 'shake128';
  NID_shake128 = 1100;
  SN_shake256 = 'SHAKE256';
  LN_shake256 = 'shake256';
  NID_shake256 = 1101;
  SN_hmac_sha3_224 = 'id-hmacWithSHA3-224';
  LN_hmac_sha3_224 = 'hmac-sha3-224';
  NID_hmac_sha3_224 = 1102;
  SN_hmac_sha3_256 = 'id-hmacWithSHA3-256';
  LN_hmac_sha3_256 = 'hmac-sha3-256';
  NID_hmac_sha3_256 = 1103;
  SN_hmac_sha3_384 = 'id-hmacWithSHA3-384';
  LN_hmac_sha3_384 = 'hmac-sha3-384';
  NID_hmac_sha3_384 = 1104;
  SN_hmac_sha3_512 = 'id-hmacWithSHA3-512';
  LN_hmac_sha3_512 = 'hmac-sha3-512';
  NID_hmac_sha3_512 = 1105;
  SN_dsa_with_SHA224 = 'dsa_with_SHA224';
  NID_dsa_with_SHA224 = 802;
  SN_dsa_with_SHA256 = 'dsa_with_SHA256';
  NID_dsa_with_SHA256 = 803;
  SN_dsa_with_SHA384 = 'id-dsa-with-sha384';
  LN_dsa_with_SHA384 = 'dsa_with_SHA384';
  NID_dsa_with_SHA384 = 1106;
  SN_dsa_with_SHA512 = 'id-dsa-with-sha512';
  LN_dsa_with_SHA512 = 'dsa_with_SHA512';
  NID_dsa_with_SHA512 = 1107;
  SN_dsa_with_SHA3_224 = 'id-dsa-with-sha3-224';
  LN_dsa_with_SHA3_224 = 'dsa_with_SHA3-224';
  NID_dsa_with_SHA3_224 = 1108;
  SN_dsa_with_SHA3_256 = 'id-dsa-with-sha3-256';
  LN_dsa_with_SHA3_256 = 'dsa_with_SHA3-256';
  NID_dsa_with_SHA3_256 = 1109;
  SN_dsa_with_SHA3_384 = 'id-dsa-with-sha3-384';
  LN_dsa_with_SHA3_384 = 'dsa_with_SHA3-384';
  NID_dsa_with_SHA3_384 = 1110;
  SN_dsa_with_SHA3_512 = 'id-dsa-with-sha3-512';
  LN_dsa_with_SHA3_512 = 'dsa_with_SHA3-512';
  NID_dsa_with_SHA3_512 = 1111;
  SN_ecdsa_with_SHA3_224 = 'id-ecdsa-with-sha3-224';
  LN_ecdsa_with_SHA3_224 = 'ecdsa_with_SHA3-224';
  NID_ecdsa_with_SHA3_224 = 1112;
  SN_ecdsa_with_SHA3_256 = 'id-ecdsa-with-sha3-256';
  LN_ecdsa_with_SHA3_256 = 'ecdsa_with_SHA3-256';
  NID_ecdsa_with_SHA3_256 = 1113;
  SN_ecdsa_with_SHA3_384 = 'id-ecdsa-with-sha3-384';
  LN_ecdsa_with_SHA3_384 = 'ecdsa_with_SHA3-384';
  NID_ecdsa_with_SHA3_384 = 1114;
  SN_ecdsa_with_SHA3_512 = 'id-ecdsa-with-sha3-512';
  LN_ecdsa_with_SHA3_512 = 'ecdsa_with_SHA3-512';
  NID_ecdsa_with_SHA3_512 = 1115;
  SN_RSA_SHA3_224 = 'id-rsassa-pkcs1-v1_5-with-sha3-224';
  LN_RSA_SHA3_224 = 'RSA-SHA3-224';
  NID_RSA_SHA3_224 = 1116;
  SN_RSA_SHA3_256 = 'id-rsassa-pkcs1-v1_5-with-sha3-256';
  LN_RSA_SHA3_256 = 'RSA-SHA3-256';
  NID_RSA_SHA3_256 = 1117;
  SN_RSA_SHA3_384 = 'id-rsassa-pkcs1-v1_5-with-sha3-384';
  LN_RSA_SHA3_384 = 'RSA-SHA3-384';
  NID_RSA_SHA3_384 = 1118;
  SN_RSA_SHA3_512 = 'id-rsassa-pkcs1-v1_5-with-sha3-512';
  LN_RSA_SHA3_512 = 'RSA-SHA3-512';
  NID_RSA_SHA3_512 = 1119;
  SN_hold_instruction_code = 'holdInstructionCode';
  LN_hold_instruction_code = 'Hold Instruction Code';
  NID_hold_instruction_code = 430;
  SN_hold_instruction_none = 'holdInstructionNone';
  LN_hold_instruction_none = 'Hold Instruction None';
  NID_hold_instruction_none = 431;
  SN_hold_instruction_call_issuer = 'holdInstructionCallIssuer';
  LN_hold_instruction_call_issuer = 'Hold Instruction Call Issuer';
  NID_hold_instruction_call_issuer = 432;
  SN_hold_instruction_reject = 'holdInstructionReject';
  LN_hold_instruction_reject = 'Hold Instruction Reject';
  NID_hold_instruction_reject = 433;
  SN_data = 'data';
  NID_data = 434;
  SN_pss = 'pss';
  NID_pss = 435;
  SN_ucl = 'ucl';
  NID_ucl = 436;
  SN_pilot = 'pilot';
  NID_pilot = 437;
  LN_pilotAttributeType = 'pilotAttributeType';
  NID_pilotAttributeType = 438;
  LN_pilotAttributeSyntax = 'pilotAttributeSyntax';
  NID_pilotAttributeSyntax = 439;
  LN_pilotObjectClass = 'pilotObjectClass';
  NID_pilotObjectClass = 440;
  LN_pilotGroups = 'pilotGroups';
  NID_pilotGroups = 441;
  LN_iA5StringSyntax = 'iA5StringSyntax';
  NID_iA5StringSyntax = 442;
  LN_caseIgnoreIA5StringSyntax = 'caseIgnoreIA5StringSyntax';
  NID_caseIgnoreIA5StringSyntax = 443;
  LN_pilotObject = 'pilotObject';
  NID_pilotObject = 444;
  LN_pilotPerson = 'pilotPerson';
  NID_pilotPerson = 445;
  SN_account = 'account';
  NID_account = 446;
  SN_document = 'document';
  NID_document = 447;
  SN_room = 'room';
  NID_room = 448;
  LN_documentSeries = 'documentSeries';
  NID_documentSeries = 449;
  SN_Domain = 'domain';
  LN_Domain = 'Domain';
  NID_Domain = 392;
  LN_rFC822localPart = 'rFC822localPart';
  NID_rFC822localPart = 450;
  LN_dNSDomain = 'dNSDomain';
  NID_dNSDomain = 451;
  LN_domainRelatedObject = 'domainRelatedObject';
  NID_domainRelatedObject = 452;
  LN_friendlyCountry = 'friendlyCountry';
  NID_friendlyCountry = 453;
  LN_simpleSecurityObject = 'simpleSecurityObject';
  NID_simpleSecurityObject = 454;
  LN_pilotOrganization = 'pilotOrganization';
  NID_pilotOrganization = 455;
  LN_pilotDSA = 'pilotDSA';
  NID_pilotDSA = 456;
  LN_qualityLabelledData = 'qualityLabelledData';
  NID_qualityLabelledData = 457;
  SN_userId = 'UID';
  LN_userId = 'userId';
  NID_userId = 458;
  LN_textEncodedORAddress = 'textEncodedORAddress';
  NID_textEncodedORAddress = 459;
  SN_rfc822Mailbox = 'mail';
  LN_rfc822Mailbox = 'rfc822Mailbox';
  NID_rfc822Mailbox = 460;
  SN_info = 'info';
  NID_info = 461;
  LN_favouriteDrink = 'favouriteDrink';
  NID_favouriteDrink = 462;
  LN_roomNumber = 'roomNumber';
  NID_roomNumber = 463;
  SN_photo = 'photo';
  NID_photo = 464;
  LN_userClass = 'userClass';
  NID_userClass = 465;
  SN_host = 'host';
  NID_host = 466;
  SN_manager = 'manager';
  NID_manager = 467;
  LN_documentIdentifier = 'documentIdentifier';
  NID_documentIdentifier = 468;
  LN_documentTitle = 'documentTitle';
  NID_documentTitle = 469;
  LN_documentVersion = 'documentVersion';
  NID_documentVersion = 470;
  LN_documentAuthor = 'documentAuthor';
  NID_documentAuthor = 471;
  LN_documentLocation = 'documentLocation';
  NID_documentLocation = 472;
  LN_homeTelephoneNumber = 'homeTelephoneNumber';
  NID_homeTelephoneNumber = 473;
  SN_secretary = 'secretary';
  NID_secretary = 474;
  LN_otherMailbox = 'otherMailbox';
  NID_otherMailbox = 475;
  LN_lastModifiedTime = 'lastModifiedTime';
  NID_lastModifiedTime = 476;
  LN_lastModifiedBy = 'lastModifiedBy';
  NID_lastModifiedBy = 477;
  SN_domainComponent = 'DC';
  LN_domainComponent = 'domainComponent';
  NID_domainComponent = 391;
  LN_aRecord = 'aRecord';
  NID_aRecord = 478;
  LN_pilotAttributeType27 = 'pilotAttributeType27';
  NID_pilotAttributeType27 = 479;
  LN_mXRecord = 'mXRecord';
  NID_mXRecord = 480;
  LN_nSRecord = 'nSRecord';
  NID_nSRecord = 481;
  LN_sOARecord = 'sOARecord';
  NID_sOARecord = 482;
  LN_cNAMERecord = 'cNAMERecord';
  NID_cNAMERecord = 483;
  LN_associatedDomain = 'associatedDomain';
  NID_associatedDomain = 484;
  LN_associatedName = 'associatedName';
  NID_associatedName = 485;
  LN_homePostalAddress = 'homePostalAddress';
  NID_homePostalAddress = 486;
  LN_personalTitle = 'personalTitle';
  NID_personalTitle = 487;
  LN_mobileTelephoneNumber = 'mobileTelephoneNumber';
  NID_mobileTelephoneNumber = 488;
  LN_pagerTelephoneNumber = 'pagerTelephoneNumber';
  NID_pagerTelephoneNumber = 489;
  LN_friendlyCountryName = 'friendlyCountryName';
  NID_friendlyCountryName = 490;
  SN_uniqueIdentifier = 'uid';
  LN_uniqueIdentifier = 'uniqueIdentifier';
  NID_uniqueIdentifier = 102;
  LN_organizationalStatus = 'organizationalStatus';
  NID_organizationalStatus = 491;
  LN_janetMailbox = 'janetMailbox';
  NID_janetMailbox = 492;
  LN_mailPreferenceOption = 'mailPreferenceOption';
  NID_mailPreferenceOption = 493;
  LN_buildingName = 'buildingName';
  NID_buildingName = 494;
  LN_dSAQuality = 'dSAQuality';
  NID_dSAQuality = 495;
  LN_singleLevelQuality = 'singleLevelQuality';
  NID_singleLevelQuality = 496;
  LN_subtreeMinimumQuality = 'subtreeMinimumQuality';
  NID_subtreeMinimumQuality = 497;
  LN_subtreeMaximumQuality = 'subtreeMaximumQuality';
  NID_subtreeMaximumQuality = 498;
  LN_personalSignature = 'personalSignature';
  NID_personalSignature = 499;
  LN_dITRedirect = 'dITRedirect';
  NID_dITRedirect = 500;
  SN_audio = 'audio';
  NID_audio = 501;
  LN_documentPublisher = 'documentPublisher';
  NID_documentPublisher = 502;
  SN_id_set = 'id-set';
  LN_id_set = 'Secure Electronic Transactions';
  NID_id_set = 512;
  SN_set_ctype = 'set-ctype';
  LN_set_ctype = 'content types';
  NID_set_ctype = 513;
  SN_set_msgExt = 'set-msgExt';
  LN_set_msgExt = 'message extensions';
  NID_set_msgExt = 514;
  SN_set_attr = 'set-attr';
  NID_set_attr = 515;
  SN_set_policy = 'set-policy';
  NID_set_policy = 516;
  SN_set_certExt = 'set-certExt';
  LN_set_certExt = 'certificate extensions';
  NID_set_certExt = 517;
  SN_set_brand = 'set-brand';
  NID_set_brand = 518;
  SN_setct_PANData = 'setct-PANData';
  NID_setct_PANData = 519;
  SN_setct_PANToken = 'setct-PANToken';
  NID_setct_PANToken = 520;
  SN_setct_PANOnly = 'setct-PANOnly';
  NID_setct_PANOnly = 521;
  SN_setct_OIData = 'setct-OIData';
  NID_setct_OIData = 522;
  SN_setct_PI = 'setct-PI';
  NID_setct_PI = 523;
  SN_setct_PIData = 'setct-PIData';
  NID_setct_PIData = 524;
  SN_setct_PIDataUnsigned = 'setct-PIDataUnsigned';
  NID_setct_PIDataUnsigned = 525;
  SN_setct_HODInput = 'setct-HODInput';
  NID_setct_HODInput = 526;
  SN_setct_AuthResBaggage = 'setct-AuthResBaggage';
  NID_setct_AuthResBaggage = 527;
  SN_setct_AuthRevReqBaggage = 'setct-AuthRevReqBaggage';
  NID_setct_AuthRevReqBaggage = 528;
  SN_setct_AuthRevResBaggage = 'setct-AuthRevResBaggage';
  NID_setct_AuthRevResBaggage = 529;
  SN_setct_CapTokenSeq = 'setct-CapTokenSeq';
  NID_setct_CapTokenSeq = 530;
  SN_setct_PInitResData = 'setct-PInitResData';
  NID_setct_PInitResData = 531;
  SN_setct_PI_TBS = 'setct-PI-TBS';
  NID_setct_PI_TBS = 532;
  SN_setct_PResData = 'setct-PResData';
  NID_setct_PResData = 533;
  SN_setct_AuthReqTBS = 'setct-AuthReqTBS';
  NID_setct_AuthReqTBS = 534;
  SN_setct_AuthResTBS = 'setct-AuthResTBS';
  NID_setct_AuthResTBS = 535;
  SN_setct_AuthResTBSX = 'setct-AuthResTBSX';
  NID_setct_AuthResTBSX = 536;
  SN_setct_AuthTokenTBS = 'setct-AuthTokenTBS';
  NID_setct_AuthTokenTBS = 537;
  SN_setct_CapTokenData = 'setct-CapTokenData';
  NID_setct_CapTokenData = 538;
  SN_setct_CapTokenTBS = 'setct-CapTokenTBS';
  NID_setct_CapTokenTBS = 539;
  SN_setct_AcqCardCodeMsg = 'setct-AcqCardCodeMsg';
  NID_setct_AcqCardCodeMsg = 540;
  SN_setct_AuthRevReqTBS = 'setct-AuthRevReqTBS';
  NID_setct_AuthRevReqTBS = 541;
  SN_setct_AuthRevResData = 'setct-AuthRevResData';
  NID_setct_AuthRevResData = 542;
  SN_setct_AuthRevResTBS = 'setct-AuthRevResTBS';
  NID_setct_AuthRevResTBS = 543;
  SN_setct_CapReqTBS = 'setct-CapReqTBS';
  NID_setct_CapReqTBS = 544;
  SN_setct_CapReqTBSX = 'setct-CapReqTBSX';
  NID_setct_CapReqTBSX = 545;
  SN_setct_CapResData = 'setct-CapResData';
  NID_setct_CapResData = 546;
  SN_setct_CapRevReqTBS = 'setct-CapRevReqTBS';
  NID_setct_CapRevReqTBS = 547;
  SN_setct_CapRevReqTBSX = 'setct-CapRevReqTBSX';
  NID_setct_CapRevReqTBSX = 548;
  SN_setct_CapRevResData = 'setct-CapRevResData';
  NID_setct_CapRevResData = 549;
  SN_setct_CredReqTBS = 'setct-CredReqTBS';
  NID_setct_CredReqTBS = 550;
  SN_setct_CredReqTBSX = 'setct-CredReqTBSX';
  NID_setct_CredReqTBSX = 551;
  SN_setct_CredResData = 'setct-CredResData';
  NID_setct_CredResData = 552;
  SN_setct_CredRevReqTBS = 'setct-CredRevReqTBS';
  NID_setct_CredRevReqTBS = 553;
  SN_setct_CredRevReqTBSX = 'setct-CredRevReqTBSX';
  NID_setct_CredRevReqTBSX = 554;
  SN_setct_CredRevResData = 'setct-CredRevResData';
  NID_setct_CredRevResData = 555;
  SN_setct_PCertReqData = 'setct-PCertReqData';
  NID_setct_PCertReqData = 556;
  SN_setct_PCertResTBS = 'setct-PCertResTBS';
  NID_setct_PCertResTBS = 557;
  SN_setct_BatchAdminReqData = 'setct-BatchAdminReqData';
  NID_setct_BatchAdminReqData = 558;
  SN_setct_BatchAdminResData = 'setct-BatchAdminResData';
  NID_setct_BatchAdminResData = 559;
  SN_setct_CardCInitResTBS = 'setct-CardCInitResTBS';
  NID_setct_CardCInitResTBS = 560;
  SN_setct_MeAqCInitResTBS = 'setct-MeAqCInitResTBS';
  NID_setct_MeAqCInitResTBS = 561;
  SN_setct_RegFormResTBS = 'setct-RegFormResTBS';
  NID_setct_RegFormResTBS = 562;
  SN_setct_CertReqData = 'setct-CertReqData';
  NID_setct_CertReqData = 563;
  SN_setct_CertReqTBS = 'setct-CertReqTBS';
  NID_setct_CertReqTBS = 564;
  SN_setct_CertResData = 'setct-CertResData';
  NID_setct_CertResData = 565;
  SN_setct_CertInqReqTBS = 'setct-CertInqReqTBS';
  NID_setct_CertInqReqTBS = 566;
  SN_setct_ErrorTBS = 'setct-ErrorTBS';
  NID_setct_ErrorTBS = 567;
  SN_setct_PIDualSignedTBE = 'setct-PIDualSignedTBE';
  NID_setct_PIDualSignedTBE = 568;
  SN_setct_PIUnsignedTBE = 'setct-PIUnsignedTBE';
  NID_setct_PIUnsignedTBE = 569;
  SN_setct_AuthReqTBE = 'setct-AuthReqTBE';
  NID_setct_AuthReqTBE = 570;
  SN_setct_AuthResTBE = 'setct-AuthResTBE';
  NID_setct_AuthResTBE = 571;
  SN_setct_AuthResTBEX = 'setct-AuthResTBEX';
  NID_setct_AuthResTBEX = 572;
  SN_setct_AuthTokenTBE = 'setct-AuthTokenTBE';
  NID_setct_AuthTokenTBE = 573;
  SN_setct_CapTokenTBE = 'setct-CapTokenTBE';
  NID_setct_CapTokenTBE = 574;
  SN_setct_CapTokenTBEX = 'setct-CapTokenTBEX';
  NID_setct_CapTokenTBEX = 575;
  SN_setct_AcqCardCodeMsgTBE = 'setct-AcqCardCodeMsgTBE';
  NID_setct_AcqCardCodeMsgTBE = 576;
  SN_setct_AuthRevReqTBE = 'setct-AuthRevReqTBE';
  NID_setct_AuthRevReqTBE = 577;
  SN_setct_AuthRevResTBE = 'setct-AuthRevResTBE';
  NID_setct_AuthRevResTBE = 578;
  SN_setct_AuthRevResTBEB = 'setct-AuthRevResTBEB';
  NID_setct_AuthRevResTBEB = 579;
  SN_setct_CapReqTBE = 'setct-CapReqTBE';
  NID_setct_CapReqTBE = 580;
  SN_setct_CapReqTBEX = 'setct-CapReqTBEX';
  NID_setct_CapReqTBEX = 581;
  SN_setct_CapResTBE = 'setct-CapResTBE';
  NID_setct_CapResTBE = 582;
  SN_setct_CapRevReqTBE = 'setct-CapRevReqTBE';
  NID_setct_CapRevReqTBE = 583;
  SN_setct_CapRevReqTBEX = 'setct-CapRevReqTBEX';
  NID_setct_CapRevReqTBEX = 584;
  SN_setct_CapRevResTBE = 'setct-CapRevResTBE';
  NID_setct_CapRevResTBE = 585;
  SN_setct_CredReqTBE = 'setct-CredReqTBE';
  NID_setct_CredReqTBE = 586;
  SN_setct_CredReqTBEX = 'setct-CredReqTBEX';
  NID_setct_CredReqTBEX = 587;
  SN_setct_CredResTBE = 'setct-CredResTBE';
  NID_setct_CredResTBE = 588;
  SN_setct_CredRevReqTBE = 'setct-CredRevReqTBE';
  NID_setct_CredRevReqTBE = 589;
  SN_setct_CredRevReqTBEX = 'setct-CredRevReqTBEX';
  NID_setct_CredRevReqTBEX = 590;
  SN_setct_CredRevResTBE = 'setct-CredRevResTBE';
  NID_setct_CredRevResTBE = 591;
  SN_setct_BatchAdminReqTBE = 'setct-BatchAdminReqTBE';
  NID_setct_BatchAdminReqTBE = 592;
  SN_setct_BatchAdminResTBE = 'setct-BatchAdminResTBE';
  NID_setct_BatchAdminResTBE = 593;
  SN_setct_RegFormReqTBE = 'setct-RegFormReqTBE';
  NID_setct_RegFormReqTBE = 594;
  SN_setct_CertReqTBE = 'setct-CertReqTBE';
  NID_setct_CertReqTBE = 595;
  SN_setct_CertReqTBEX = 'setct-CertReqTBEX';
  NID_setct_CertReqTBEX = 596;
  SN_setct_CertResTBE = 'setct-CertResTBE';
  NID_setct_CertResTBE = 597;
  SN_setct_CRLNotificationTBS = 'setct-CRLNotificationTBS';
  NID_setct_CRLNotificationTBS = 598;
  SN_setct_CRLNotificationResTBS = 'setct-CRLNotificationResTBS';
  NID_setct_CRLNotificationResTBS = 599;
  SN_setct_BCIDistributionTBS = 'setct-BCIDistributionTBS';
  NID_setct_BCIDistributionTBS = 600;
  SN_setext_genCrypt = 'setext-genCrypt';
  LN_setext_genCrypt = 'generic cryptogram';
  NID_setext_genCrypt = 601;
  SN_setext_miAuth = 'setext-miAuth';
  LN_setext_miAuth = 'merchant initiated auth';
  NID_setext_miAuth = 602;
  SN_setext_pinSecure = 'setext-pinSecure';
  NID_setext_pinSecure = 603;
  SN_setext_pinAny = 'setext-pinAny';
  NID_setext_pinAny = 604;
  SN_setext_track2 = 'setext-track2';
  NID_setext_track2 = 605;
  SN_setext_cv = 'setext-cv';
  LN_setext_cv = 'additional verification';
  NID_setext_cv = 606;
  SN_set_policy_root = 'set-policy-root';
  NID_set_policy_root = 607;
  SN_setCext_hashedRoot = 'setCext-hashedRoot';
  NID_setCext_hashedRoot = 608;
  SN_setCext_certType = 'setCext-certType';
  NID_setCext_certType = 609;
  SN_setCext_merchData = 'setCext-merchData';
  NID_setCext_merchData = 610;
  SN_setCext_cCertRequired = 'setCext-cCertRequired';
  NID_setCext_cCertRequired = 611;
  SN_setCext_tunneling = 'setCext-tunneling';
  NID_setCext_tunneling = 612;
  SN_setCext_setExt = 'setCext-setExt';
  NID_setCext_setExt = 613;
  SN_setCext_setQualf = 'setCext-setQualf';
  NID_setCext_setQualf = 614;
  SN_setCext_PGWYcapabilities = 'setCext-PGWYcapabilities';
  NID_setCext_PGWYcapabilities = 615;
  SN_setCext_TokenIdentifier = 'setCext-TokenIdentifier';
  NID_setCext_TokenIdentifier = 616;
  SN_setCext_Track2Data = 'setCext-Track2Data';
  NID_setCext_Track2Data = 617;
  SN_setCext_TokenType = 'setCext-TokenType';
  NID_setCext_TokenType = 618;
  SN_setCext_IssuerCapabilities = 'setCext-IssuerCapabilities';
  NID_setCext_IssuerCapabilities = 619;
  SN_setAttr_Cert = 'setAttr-Cert';
  NID_setAttr_Cert = 620;
  SN_setAttr_PGWYcap = 'setAttr-PGWYcap';
  LN_setAttr_PGWYcap = 'payment gateway capabilities';
  NID_setAttr_PGWYcap = 621;
  SN_setAttr_TokenType = 'setAttr-TokenType';
  NID_setAttr_TokenType = 622;
  SN_setAttr_IssCap = 'setAttr-IssCap';
  LN_setAttr_IssCap = 'issuer capabilities';
  NID_setAttr_IssCap = 623;
  SN_set_rootKeyThumb = 'set-rootKeyThumb';
  NID_set_rootKeyThumb = 624;
  SN_set_addPolicy = 'set-addPolicy';
  NID_set_addPolicy = 625;
  SN_setAttr_Token_EMV = 'setAttr-Token-EMV';
  NID_setAttr_Token_EMV = 626;
  SN_setAttr_Token_B0Prime = 'setAttr-Token-B0Prime';
  NID_setAttr_Token_B0Prime = 627;
  SN_setAttr_IssCap_CVM = 'setAttr-IssCap-CVM';
  NID_setAttr_IssCap_CVM = 628;
  SN_setAttr_IssCap_T2 = 'setAttr-IssCap-T2';
  NID_setAttr_IssCap_T2 = 629;
  SN_setAttr_IssCap_Sig = 'setAttr-IssCap-Sig';
  NID_setAttr_IssCap_Sig = 630;
  SN_setAttr_GenCryptgrm = 'setAttr-GenCryptgrm';
  LN_setAttr_GenCryptgrm = 'generate cryptogram';
  NID_setAttr_GenCryptgrm = 631;
  SN_setAttr_T2Enc = 'setAttr-T2Enc';
  LN_setAttr_T2Enc = 'encrypted track 2';
  NID_setAttr_T2Enc = 632;
  SN_setAttr_T2cleartxt = 'setAttr-T2cleartxt';
  LN_setAttr_T2cleartxt = 'cleartext track 2';
  NID_setAttr_T2cleartxt = 633;
  SN_setAttr_TokICCsig = 'setAttr-TokICCsig';
  LN_setAttr_TokICCsig = 'ICC or token signature';
  NID_setAttr_TokICCsig = 634;
  SN_setAttr_SecDevSig = 'setAttr-SecDevSig';
  LN_setAttr_SecDevSig = 'secure device signature';
  NID_setAttr_SecDevSig = 635;
  SN_set_brand_IATA_ATA = 'set-brand-IATA-ATA';
  NID_set_brand_IATA_ATA = 636;
  SN_set_brand_Diners = 'set-brand-Diners';
  NID_set_brand_Diners = 637;
  SN_set_brand_AmericanExpress = 'set-brand-AmericanExpress';
  NID_set_brand_AmericanExpress = 638;
  SN_set_brand_JCB = 'set-brand-JCB';
  NID_set_brand_JCB = 639;
  SN_set_brand_Visa = 'set-brand-Visa';
  NID_set_brand_Visa = 640;
  SN_set_brand_MasterCard = 'set-brand-MasterCard';
  NID_set_brand_MasterCard = 641;
  SN_set_brand_Novus = 'set-brand-Novus';
  NID_set_brand_Novus = 642;
  SN_des_cdmf = 'DES-CDMF';
  LN_des_cdmf = 'des-cdmf';
  NID_des_cdmf = 643;
  SN_rsaOAEPEncryptionSET = 'rsaOAEPEncryptionSET';
  NID_rsaOAEPEncryptionSET = 644;
  SN_ipsec3 = 'Oakley-EC2N-3';
  LN_ipsec3 = 'ipsec3';
  NID_ipsec3 = 749;
  SN_ipsec4 = 'Oakley-EC2N-4';
  LN_ipsec4 = 'ipsec4';
  NID_ipsec4 = 750;
  SN_whirlpool = 'whirlpool';
  NID_whirlpool = 804;
  SN_cryptopro = 'cryptopro';
  NID_cryptopro = 805;
  SN_cryptocom = 'cryptocom';
  NID_cryptocom = 806;
  SN_id_tc26 = 'id-tc26';
  NID_id_tc26 = 974;
  SN_id_GostR3411_94_with_GostR3410_2001 = 'id-GostR3411-94-with-GostR3410-2001';
  LN_id_GostR3411_94_with_GostR3410_2001 = 'GOST R 34.11-94 with GOST R 34.10-2001';
  NID_id_GostR3411_94_with_GostR3410_2001 = 807;
  SN_id_GostR3411_94_with_GostR3410_94 = 'id-GostR3411-94-with-GostR3410-94';
  LN_id_GostR3411_94_with_GostR3410_94 = 'GOST R 34.11-94 with GOST R 34.10-94';
  NID_id_GostR3411_94_with_GostR3410_94 = 808;
  SN_id_GostR3411_94 = 'md_gost94';
  LN_id_GostR3411_94 = 'GOST R 34.11-94';
  NID_id_GostR3411_94 = 809;
  SN_id_HMACGostR3411_94 = 'id-HMACGostR3411-94';
  LN_id_HMACGostR3411_94 = 'HMAC GOST 34.11-94';
  NID_id_HMACGostR3411_94 = 810;
  SN_id_GostR3410_2001 = 'gost2001';
  LN_id_GostR3410_2001 = 'GOST R 34.10-2001';
  NID_id_GostR3410_2001 = 811;
  SN_id_GostR3410_94 = 'gost94';
  LN_id_GostR3410_94 = 'GOST R 34.10-94';
  NID_id_GostR3410_94 = 812;
  SN_id_Gost28147_89 = 'gost89';
  LN_id_Gost28147_89 = 'GOST 28147-89';
  NID_id_Gost28147_89 = 813;
  SN_gost89_cnt = 'gost89-cnt';
  NID_gost89_cnt = 814;
  SN_gost89_cnt_12 = 'gost89-cnt-12';
  NID_gost89_cnt_12 = 975;
  SN_gost89_cbc = 'gost89-cbc';
  NID_gost89_cbc = 1009;
  SN_gost89_ecb = 'gost89-ecb';
  NID_gost89_ecb = 1010;
  SN_gost89_ctr = 'gost89-ctr';
  NID_gost89_ctr = 1011;
  SN_id_Gost28147_89_MAC = 'gost-mac';
  LN_id_Gost28147_89_MAC = 'GOST 28147-89 MAC';
  NID_id_Gost28147_89_MAC = 815;
  SN_gost_mac_12 = 'gost-mac-12';
  NID_gost_mac_12 = 976;
  SN_id_GostR3411_94_prf = 'prf-gostr3411-94';
  LN_id_GostR3411_94_prf = 'GOST R 34.11-94 PRF';
  NID_id_GostR3411_94_prf = 816;
  SN_id_GostR3410_2001DH = 'id-GostR3410-2001DH';
  LN_id_GostR3410_2001DH = 'GOST R 34.10-2001 DH';
  NID_id_GostR3410_2001DH = 817;
  SN_id_GostR3410_94DH = 'id-GostR3410-94DH';
  LN_id_GostR3410_94DH = 'GOST R 34.10-94 DH';
  NID_id_GostR3410_94DH = 818;
  SN_id_Gost28147_89_CryptoPro_KeyMeshing = 'id-Gost28147-89-CryptoPro-KeyMeshing';
  NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;
  SN_id_Gost28147_89_None_KeyMeshing = 'id-Gost28147-89-None-KeyMeshing';
  NID_id_Gost28147_89_None_KeyMeshing = 820;
  SN_id_GostR3411_94_TestParamSet = 'id-GostR3411-94-TestParamSet';
  NID_id_GostR3411_94_TestParamSet = 821;
  SN_id_GostR3411_94_CryptoProParamSet = 'id-GostR3411-94-CryptoProParamSet';
  NID_id_GostR3411_94_CryptoProParamSet = 822;
  SN_id_Gost28147_89_TestParamSet = 'id-Gost28147-89-TestParamSet';
  NID_id_Gost28147_89_TestParamSet = 823;
  SN_id_Gost28147_89_CryptoPro_A_ParamSet = 'id-Gost28147-89-CryptoPro-A-ParamSet';
  NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;
  SN_id_Gost28147_89_CryptoPro_B_ParamSet = 'id-Gost28147-89-CryptoPro-B-ParamSet';
  NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;
  SN_id_Gost28147_89_CryptoPro_C_ParamSet = 'id-Gost28147-89-CryptoPro-C-ParamSet';
  NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;
  SN_id_Gost28147_89_CryptoPro_D_ParamSet = 'id-Gost28147-89-CryptoPro-D-ParamSet';
  NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;
  SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet';
  NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;
  SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet';
  NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;
  SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 'id-Gost28147-89-CryptoPro-RIC-1-ParamSet';
  NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;
  SN_id_GostR3410_94_TestParamSet = 'id-GostR3410-94-TestParamSet';
  NID_id_GostR3410_94_TestParamSet = 831;
  SN_id_GostR3410_94_CryptoPro_A_ParamSet = 'id-GostR3410-94-CryptoPro-A-ParamSet';
  NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;
  SN_id_GostR3410_94_CryptoPro_B_ParamSet = 'id-GostR3410-94-CryptoPro-B-ParamSet';
  NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;
  SN_id_GostR3410_94_CryptoPro_C_ParamSet = 'id-GostR3410-94-CryptoPro-C-ParamSet';
  NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;
  SN_id_GostR3410_94_CryptoPro_D_ParamSet = 'id-GostR3410-94-CryptoPro-D-ParamSet';
  NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;
  SN_id_GostR3410_94_CryptoPro_XchA_ParamSet = 'id-GostR3410-94-CryptoPro-XchA-ParamSet';
  NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;
  SN_id_GostR3410_94_CryptoPro_XchB_ParamSet = 'id-GostR3410-94-CryptoPro-XchB-ParamSet';
  NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;
  SN_id_GostR3410_94_CryptoPro_XchC_ParamSet = 'id-GostR3410-94-CryptoPro-XchC-ParamSet';
  NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;
  SN_id_GostR3410_2001_TestParamSet = 'id-GostR3410-2001-TestParamSet';
  NID_id_GostR3410_2001_TestParamSet = 839;
  SN_id_GostR3410_2001_CryptoPro_A_ParamSet = 'id-GostR3410-2001-CryptoPro-A-ParamSet';
  NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;
  SN_id_GostR3410_2001_CryptoPro_B_ParamSet = 'id-GostR3410-2001-CryptoPro-B-ParamSet';
  NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;
  SN_id_GostR3410_2001_CryptoPro_C_ParamSet = 'id-GostR3410-2001-CryptoPro-C-ParamSet';
  NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;
  SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 'id-GostR3410-2001-CryptoPro-XchA-ParamSet';
  NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;
  SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 'id-GostR3410-2001-CryptoPro-XchB-ParamSet';
  NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;
  SN_id_GostR3410_94_a = 'id-GostR3410-94-a';
  NID_id_GostR3410_94_a = 845;
  SN_id_GostR3410_94_aBis = 'id-GostR3410-94-aBis';
  NID_id_GostR3410_94_aBis = 846;
  SN_id_GostR3410_94_b = 'id-GostR3410-94-b';
  NID_id_GostR3410_94_b = 847;
  SN_id_GostR3410_94_bBis = 'id-GostR3410-94-bBis';
  NID_id_GostR3410_94_bBis = 848;
  SN_id_Gost28147_89_cc = 'id-Gost28147-89-cc';
  LN_id_Gost28147_89_cc = 'GOST 28147-89 Cryptocom ParamSet';
  NID_id_Gost28147_89_cc = 849;
  SN_id_GostR3410_94_cc = 'gost94cc';
  LN_id_GostR3410_94_cc = 'GOST 34.10-94 Cryptocom';
  NID_id_GostR3410_94_cc = 850;
  SN_id_GostR3410_2001_cc = 'gost2001cc';
  LN_id_GostR3410_2001_cc = 'GOST 34.10-2001 Cryptocom';
  NID_id_GostR3410_2001_cc = 851;
  SN_id_GostR3411_94_with_GostR3410_94_cc = 'id-GostR3411-94-with-GostR3410-94-cc';
  LN_id_GostR3411_94_with_GostR3410_94_cc = 'GOST R 34.11-94 with GOST R 34.10-94 Cryptocom';
  NID_id_GostR3411_94_with_GostR3410_94_cc = 852;
  SN_id_GostR3411_94_with_GostR3410_2001_cc = 'id-GostR3411-94-with-GostR3410-2001-cc';
  LN_id_GostR3411_94_with_GostR3410_2001_cc = 'GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom';
  NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;
  SN_id_GostR3410_2001_ParamSet_cc = 'id-GostR3410-2001-ParamSet-cc';
  LN_id_GostR3410_2001_ParamSet_cc = 'GOST R 3410-2001 Parameter Set Cryptocom';
  NID_id_GostR3410_2001_ParamSet_cc = 854;
  SN_id_tc26_algorithms = 'id-tc26-algorithms';
  NID_id_tc26_algorithms = 977;
  SN_id_tc26_sign = 'id-tc26-sign';
  NID_id_tc26_sign = 978;
  SN_id_GostR3410_2012_256 = 'gost2012_256';
  LN_id_GostR3410_2012_256 = 'GOST R 34.10-2012 with 256 bit modulus';
  NID_id_GostR3410_2012_256 = 979;
  SN_id_GostR3410_2012_512 = 'gost2012_512';
  LN_id_GostR3410_2012_512 = 'GOST R 34.10-2012 with 512 bit modulus';
  NID_id_GostR3410_2012_512 = 980;
  SN_id_tc26_digest = 'id-tc26-digest';
  NID_id_tc26_digest = 981;
  SN_id_GostR3411_2012_256 = 'md_gost12_256';
  LN_id_GostR3411_2012_256 = 'GOST R 34.11-2012 with 256 bit hash';
  NID_id_GostR3411_2012_256 = 982;
  SN_id_GostR3411_2012_512 = 'md_gost12_512';
  LN_id_GostR3411_2012_512 = 'GOST R 34.11-2012 with 512 bit hash';
  NID_id_GostR3411_2012_512 = 983;
  SN_id_tc26_signwithdigest = 'id-tc26-signwithdigest';
  NID_id_tc26_signwithdigest = 984;
  SN_id_tc26_signwithdigest_gost3410_2012_256 = 'id-tc26-signwithdigest-gost3410-2012-256';
  LN_id_tc26_signwithdigest_gost3410_2012_256 = 'GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)';
  NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;
  SN_id_tc26_signwithdigest_gost3410_2012_512 = 'id-tc26-signwithdigest-gost3410-2012-512';
  LN_id_tc26_signwithdigest_gost3410_2012_512 = 'GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)';
  NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;
  SN_id_tc26_mac = 'id-tc26-mac';
  NID_id_tc26_mac = 987;
  SN_id_tc26_hmac_gost_3411_2012_256 = 'id-tc26-hmac-gost-3411-2012-256';
  LN_id_tc26_hmac_gost_3411_2012_256 = 'HMAC GOST 34.11-2012 256 bit';
  NID_id_tc26_hmac_gost_3411_2012_256 = 988;
  SN_id_tc26_hmac_gost_3411_2012_512 = 'id-tc26-hmac-gost-3411-2012-512';
  LN_id_tc26_hmac_gost_3411_2012_512 = 'HMAC GOST 34.11-2012 512 bit';
  NID_id_tc26_hmac_gost_3411_2012_512 = 989;
  SN_id_tc26_cipher = 'id-tc26-cipher';
  NID_id_tc26_cipher = 990;
  SN_id_tc26_cipher_gostr3412_2015_magma = 'id-tc26-cipher-gostr3412-2015-magma';
  NID_id_tc26_cipher_gostr3412_2015_magma = 1173;
  SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 'id-tc26-cipher-gostr3412-2015-magma-ctracpkm';
  NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;
  SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 'id-tc26-cipher-gostr3412-2015-magma-ctracpkm-omac';
  NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;
  SN_id_tc26_cipher_gostr3412_2015_kuznyechik = 'id-tc26-cipher-gostr3412-2015-kuznyechik';
  NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;
  SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 'id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm';
  NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;
  SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 'id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm-omac';
  NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;
  SN_id_tc26_agreement = 'id-tc26-agreement';
  NID_id_tc26_agreement = 991;
  SN_id_tc26_agreement_gost_3410_2012_256 = 'id-tc26-agreement-gost-3410-2012-256';
  NID_id_tc26_agreement_gost_3410_2012_256 = 992;
  SN_id_tc26_agreement_gost_3410_2012_512 = 'id-tc26-agreement-gost-3410-2012-512';
  NID_id_tc26_agreement_gost_3410_2012_512 = 993;
  SN_id_tc26_wrap = 'id-tc26-wrap';
  NID_id_tc26_wrap = 1179;
  SN_id_tc26_wrap_gostr3412_2015_magma = 'id-tc26-wrap-gostr3412-2015-magma';
  NID_id_tc26_wrap_gostr3412_2015_magma = 1180;
  SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 'id-tc26-wrap-gostr3412-2015-magma-kexp15';
  NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;
  SN_id_tc26_wrap_gostr3412_2015_kuznyechik = 'id-tc26-wrap-gostr3412-2015-kuznyechik';
  NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;
  SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 'id-tc26-wrap-gostr3412-2015-kuznyechik-kexp15';
  NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;
  SN_id_tc26_constants = 'id-tc26-constants';
  NID_id_tc26_constants = 994;
  SN_id_tc26_sign_constants = 'id-tc26-sign-constants';
  NID_id_tc26_sign_constants = 995;
  SN_id_tc26_gost_3410_2012_256_constants = 'id-tc26-gost-3410-2012-256-constants';
  NID_id_tc26_gost_3410_2012_256_constants = 1147;
  SN_id_tc26_gost_3410_2012_256_paramSetA = 'id-tc26-gost-3410-2012-256-paramSetA';
  LN_id_tc26_gost_3410_2012_256_paramSetA = 'GOST R 34.10-2012 (256 bit) ParamSet A';
  NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;
  SN_id_tc26_gost_3410_2012_256_paramSetB = 'id-tc26-gost-3410-2012-256-paramSetB';
  LN_id_tc26_gost_3410_2012_256_paramSetB = 'GOST R 34.10-2012 (256 bit) ParamSet B';
  NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;
  SN_id_tc26_gost_3410_2012_256_paramSetC = 'id-tc26-gost-3410-2012-256-paramSetC';
  LN_id_tc26_gost_3410_2012_256_paramSetC = 'GOST R 34.10-2012 (256 bit) ParamSet C';
  NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;
  SN_id_tc26_gost_3410_2012_256_paramSetD = 'id-tc26-gost-3410-2012-256-paramSetD';
  LN_id_tc26_gost_3410_2012_256_paramSetD = 'GOST R 34.10-2012 (256 bit) ParamSet D';
  NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;
  SN_id_tc26_gost_3410_2012_512_constants = 'id-tc26-gost-3410-2012-512-constants';
  NID_id_tc26_gost_3410_2012_512_constants = 996;
  SN_id_tc26_gost_3410_2012_512_paramSetTest = 'id-tc26-gost-3410-2012-512-paramSetTest';
  LN_id_tc26_gost_3410_2012_512_paramSetTest = 'GOST R 34.10-2012 (512 bit) testing parameter set';
  NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;
  SN_id_tc26_gost_3410_2012_512_paramSetA = 'id-tc26-gost-3410-2012-512-paramSetA';
  LN_id_tc26_gost_3410_2012_512_paramSetA = 'GOST R 34.10-2012 (512 bit) ParamSet A';
  NID_id_tc26_gost_3410_2012_512_paramSetA = 998;
  SN_id_tc26_gost_3410_2012_512_paramSetB = 'id-tc26-gost-3410-2012-512-paramSetB';
  LN_id_tc26_gost_3410_2012_512_paramSetB = 'GOST R 34.10-2012 (512 bit) ParamSet B';
  NID_id_tc26_gost_3410_2012_512_paramSetB = 999;
  SN_id_tc26_gost_3410_2012_512_paramSetC = 'id-tc26-gost-3410-2012-512-paramSetC';
  LN_id_tc26_gost_3410_2012_512_paramSetC = 'GOST R 34.10-2012 (512 bit) ParamSet C';
  NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;
  SN_id_tc26_digest_constants = 'id-tc26-digest-constants';
  NID_id_tc26_digest_constants = 1000;
  SN_id_tc26_cipher_constants = 'id-tc26-cipher-constants';
  NID_id_tc26_cipher_constants = 1001;
  SN_id_tc26_gost_28147_constants = 'id-tc26-gost-28147-constants';
  NID_id_tc26_gost_28147_constants = 1002;
  SN_id_tc26_gost_28147_param_Z = 'id-tc26-gost-28147-param-Z';
  LN_id_tc26_gost_28147_param_Z = 'GOST 28147-89 TC26 parameter set';
  NID_id_tc26_gost_28147_param_Z = 1003;
  SN_INN = 'INN';
  LN_INN = 'INN';
  NID_INN = 1004;
  SN_OGRN = 'OGRN';
  LN_OGRN = 'OGRN';
  NID_OGRN = 1005;
  SN_SNILS = 'SNILS';
  LN_SNILS = 'SNILS';
  NID_SNILS = 1006;
  SN_subjectSignTool = 'subjectSignTool';
  LN_subjectSignTool = 'Signing Tool of Subject';
  NID_subjectSignTool = 1007;
  SN_issuerSignTool = 'issuerSignTool';
  LN_issuerSignTool = 'Signing Tool of Issuer';
  NID_issuerSignTool = 1008;
  SN_grasshopper_ecb = 'grasshopper-ecb';
  NID_grasshopper_ecb = 1012;
  SN_grasshopper_ctr = 'grasshopper-ctr';
  NID_grasshopper_ctr = 1013;
  SN_grasshopper_ofb = 'grasshopper-ofb';
  NID_grasshopper_ofb = 1014;
  SN_grasshopper_cbc = 'grasshopper-cbc';
  NID_grasshopper_cbc = 1015;
  SN_grasshopper_cfb = 'grasshopper-cfb';
  NID_grasshopper_cfb = 1016;
  SN_grasshopper_mac = 'grasshopper-mac';
  NID_grasshopper_mac = 1017;
  SN_magma_ecb = 'magma-ecb';
  NID_magma_ecb = 1187;
  SN_magma_ctr = 'magma-ctr';
  NID_magma_ctr = 1188;
  SN_magma_ofb = 'magma-ofb';
  NID_magma_ofb = 1189;
  SN_magma_cbc = 'magma-cbc';
  NID_magma_cbc = 1190;
  SN_magma_cfb = 'magma-cfb';
  NID_magma_cfb = 1191;
  SN_magma_mac = 'magma-mac';
  NID_magma_mac = 1192;
  SN_camellia_128_cbc = 'CAMELLIA-128-CBC';
  LN_camellia_128_cbc = 'camellia-128-cbc';
  NID_camellia_128_cbc = 751;
  SN_camellia_192_cbc = 'CAMELLIA-192-CBC';
  LN_camellia_192_cbc = 'camellia-192-cbc';
  NID_camellia_192_cbc = 752;
  SN_camellia_256_cbc = 'CAMELLIA-256-CBC';
  LN_camellia_256_cbc = 'camellia-256-cbc';
  NID_camellia_256_cbc = 753;
  SN_id_camellia128_wrap = 'id-camellia128-wrap';
  NID_id_camellia128_wrap = 907;
  SN_id_camellia192_wrap = 'id-camellia192-wrap';
  NID_id_camellia192_wrap = 908;
  SN_id_camellia256_wrap = 'id-camellia256-wrap';
  NID_id_camellia256_wrap = 909;
  SN_camellia_128_ecb = 'CAMELLIA-128-ECB';
  LN_camellia_128_ecb = 'camellia-128-ecb';
  NID_camellia_128_ecb = 754;
  SN_camellia_128_ofb128 = 'CAMELLIA-128-OFB';
  LN_camellia_128_ofb128 = 'camellia-128-ofb';
  NID_camellia_128_ofb128 = 766;
  SN_camellia_128_cfb128 = 'CAMELLIA-128-CFB';
  LN_camellia_128_cfb128 = 'camellia-128-cfb';
  NID_camellia_128_cfb128 = 757;
  SN_camellia_128_gcm = 'CAMELLIA-128-GCM';
  LN_camellia_128_gcm = 'camellia-128-gcm';
  NID_camellia_128_gcm = 961;
  SN_camellia_128_ccm = 'CAMELLIA-128-CCM';
  LN_camellia_128_ccm = 'camellia-128-ccm';
  NID_camellia_128_ccm = 962;
  SN_camellia_128_ctr = 'CAMELLIA-128-CTR';
  LN_camellia_128_ctr = 'camellia-128-ctr';
  NID_camellia_128_ctr = 963;
  SN_camellia_128_cmac = 'CAMELLIA-128-CMAC';
  LN_camellia_128_cmac = 'camellia-128-cmac';
  NID_camellia_128_cmac = 964;
  SN_camellia_192_ecb = 'CAMELLIA-192-ECB';
  LN_camellia_192_ecb = 'camellia-192-ecb';
  NID_camellia_192_ecb = 755;
  SN_camellia_192_ofb128 = 'CAMELLIA-192-OFB';
  LN_camellia_192_ofb128 = 'camellia-192-ofb';
  NID_camellia_192_ofb128 = 767;
  SN_camellia_192_cfb128 = 'CAMELLIA-192-CFB';
  LN_camellia_192_cfb128 = 'camellia-192-cfb';
  NID_camellia_192_cfb128 = 758;
  SN_camellia_192_gcm = 'CAMELLIA-192-GCM';
  LN_camellia_192_gcm = 'camellia-192-gcm';
  NID_camellia_192_gcm = 965;
  SN_camellia_192_ccm = 'CAMELLIA-192-CCM';
  LN_camellia_192_ccm = 'camellia-192-ccm';
  NID_camellia_192_ccm = 966;
  SN_camellia_192_ctr = 'CAMELLIA-192-CTR';
  LN_camellia_192_ctr = 'camellia-192-ctr';
  NID_camellia_192_ctr = 967;
  SN_camellia_192_cmac = 'CAMELLIA-192-CMAC';
  LN_camellia_192_cmac = 'camellia-192-cmac';
  NID_camellia_192_cmac = 968;
  SN_camellia_256_ecb = 'CAMELLIA-256-ECB';
  LN_camellia_256_ecb = 'camellia-256-ecb';
  NID_camellia_256_ecb = 756;
  SN_camellia_256_ofb128 = 'CAMELLIA-256-OFB';
  LN_camellia_256_ofb128 = 'camellia-256-ofb';
  NID_camellia_256_ofb128 = 768;
  SN_camellia_256_cfb128 = 'CAMELLIA-256-CFB';
  LN_camellia_256_cfb128 = 'camellia-256-cfb';
  NID_camellia_256_cfb128 = 759;
  SN_camellia_256_gcm = 'CAMELLIA-256-GCM';
  LN_camellia_256_gcm = 'camellia-256-gcm';
  NID_camellia_256_gcm = 969;
  SN_camellia_256_ccm = 'CAMELLIA-256-CCM';
  LN_camellia_256_ccm = 'camellia-256-ccm';
  NID_camellia_256_ccm = 970;
  SN_camellia_256_ctr = 'CAMELLIA-256-CTR';
  LN_camellia_256_ctr = 'camellia-256-ctr';
  NID_camellia_256_ctr = 971;
  SN_camellia_256_cmac = 'CAMELLIA-256-CMAC';
  LN_camellia_256_cmac = 'camellia-256-cmac';
  NID_camellia_256_cmac = 972;
  SN_camellia_128_cfb1 = 'CAMELLIA-128-CFB1';
  LN_camellia_128_cfb1 = 'camellia-128-cfb1';
  NID_camellia_128_cfb1 = 760;
  SN_camellia_192_cfb1 = 'CAMELLIA-192-CFB1';
  LN_camellia_192_cfb1 = 'camellia-192-cfb1';
  NID_camellia_192_cfb1 = 761;
  SN_camellia_256_cfb1 = 'CAMELLIA-256-CFB1';
  LN_camellia_256_cfb1 = 'camellia-256-cfb1';
  NID_camellia_256_cfb1 = 762;
  SN_camellia_128_cfb8 = 'CAMELLIA-128-CFB8';
  LN_camellia_128_cfb8 = 'camellia-128-cfb8';
  NID_camellia_128_cfb8 = 763;
  SN_camellia_192_cfb8 = 'CAMELLIA-192-CFB8';
  LN_camellia_192_cfb8 = 'camellia-192-cfb8';
  NID_camellia_192_cfb8 = 764;
  SN_camellia_256_cfb8 = 'CAMELLIA-256-CFB8';
  LN_camellia_256_cfb8 = 'camellia-256-cfb8';
  NID_camellia_256_cfb8 = 765;
  SN_aria_128_ecb = 'ARIA-128-ECB';
  LN_aria_128_ecb = 'aria-128-ecb';
  NID_aria_128_ecb = 1065;
  SN_aria_128_cbc = 'ARIA-128-CBC';
  LN_aria_128_cbc = 'aria-128-cbc';
  NID_aria_128_cbc = 1066;
  SN_aria_128_cfb128 = 'ARIA-128-CFB';
  LN_aria_128_cfb128 = 'aria-128-cfb';
  NID_aria_128_cfb128 = 1067;
  SN_aria_128_ofb128 = 'ARIA-128-OFB';
  LN_aria_128_ofb128 = 'aria-128-ofb';
  NID_aria_128_ofb128 = 1068;
  SN_aria_128_ctr = 'ARIA-128-CTR';
  LN_aria_128_ctr = 'aria-128-ctr';
  NID_aria_128_ctr = 1069;
  SN_aria_192_ecb = 'ARIA-192-ECB';
  LN_aria_192_ecb = 'aria-192-ecb';
  NID_aria_192_ecb = 1070;
  SN_aria_192_cbc = 'ARIA-192-CBC';
  LN_aria_192_cbc = 'aria-192-cbc';
  NID_aria_192_cbc = 1071;
  SN_aria_192_cfb128 = 'ARIA-192-CFB';
  LN_aria_192_cfb128 = 'aria-192-cfb';
  NID_aria_192_cfb128 = 1072;
  SN_aria_192_ofb128 = 'ARIA-192-OFB';
  LN_aria_192_ofb128 = 'aria-192-ofb';
  NID_aria_192_ofb128 = 1073;
  SN_aria_192_ctr = 'ARIA-192-CTR';
  LN_aria_192_ctr = 'aria-192-ctr';
  NID_aria_192_ctr = 1074;
  SN_aria_256_ecb = 'ARIA-256-ECB';
  LN_aria_256_ecb = 'aria-256-ecb';
  NID_aria_256_ecb = 1075;
  SN_aria_256_cbc = 'ARIA-256-CBC';
  LN_aria_256_cbc = 'aria-256-cbc';
  NID_aria_256_cbc = 1076;
  SN_aria_256_cfb128 = 'ARIA-256-CFB';
  LN_aria_256_cfb128 = 'aria-256-cfb';
  NID_aria_256_cfb128 = 1077;
  SN_aria_256_ofb128 = 'ARIA-256-OFB';
  LN_aria_256_ofb128 = 'aria-256-ofb';
  NID_aria_256_ofb128 = 1078;
  SN_aria_256_ctr = 'ARIA-256-CTR';
  LN_aria_256_ctr = 'aria-256-ctr';
  NID_aria_256_ctr = 1079;
  SN_aria_128_cfb1 = 'ARIA-128-CFB1';
  LN_aria_128_cfb1 = 'aria-128-cfb1';
  NID_aria_128_cfb1 = 1080;
  SN_aria_192_cfb1 = 'ARIA-192-CFB1';
  LN_aria_192_cfb1 = 'aria-192-cfb1';
  NID_aria_192_cfb1 = 1081;
  SN_aria_256_cfb1 = 'ARIA-256-CFB1';
  LN_aria_256_cfb1 = 'aria-256-cfb1';
  NID_aria_256_cfb1 = 1082;
  SN_aria_128_cfb8 = 'ARIA-128-CFB8';
  LN_aria_128_cfb8 = 'aria-128-cfb8';
  NID_aria_128_cfb8 = 1083;
  SN_aria_192_cfb8 = 'ARIA-192-CFB8';
  LN_aria_192_cfb8 = 'aria-192-cfb8';
  NID_aria_192_cfb8 = 1084;
  SN_aria_256_cfb8 = 'ARIA-256-CFB8';
  LN_aria_256_cfb8 = 'aria-256-cfb8';
  NID_aria_256_cfb8 = 1085;
  SN_aria_128_ccm = 'ARIA-128-CCM';
  LN_aria_128_ccm = 'aria-128-ccm';
  NID_aria_128_ccm = 1120;
  SN_aria_192_ccm = 'ARIA-192-CCM';
  LN_aria_192_ccm = 'aria-192-ccm';
  NID_aria_192_ccm = 1121;
  SN_aria_256_ccm = 'ARIA-256-CCM';
  LN_aria_256_ccm = 'aria-256-ccm';
  NID_aria_256_ccm = 1122;
  SN_aria_128_gcm = 'ARIA-128-GCM';
  LN_aria_128_gcm = 'aria-128-gcm';
  NID_aria_128_gcm = 1123;
  SN_aria_192_gcm = 'ARIA-192-GCM';
  LN_aria_192_gcm = 'aria-192-gcm';
  NID_aria_192_gcm = 1124;
  SN_aria_256_gcm = 'ARIA-256-GCM';
  LN_aria_256_gcm = 'aria-256-gcm';
  NID_aria_256_gcm = 1125;
  SN_kisa = 'KISA';
  LN_kisa = 'kisa';
  NID_kisa = 773;
  SN_seed_ecb = 'SEED-ECB';
  LN_seed_ecb = 'seed-ecb';
  NID_seed_ecb = 776;
  SN_seed_cbc = 'SEED-CBC';
  LN_seed_cbc = 'seed-cbc';
  NID_seed_cbc = 777;
  SN_seed_cfb128 = 'SEED-CFB';
  LN_seed_cfb128 = 'seed-cfb';
  NID_seed_cfb128 = 779;
  SN_seed_ofb128 = 'SEED-OFB';
  LN_seed_ofb128 = 'seed-ofb';
  NID_seed_ofb128 = 778;
  SN_sm4_ecb = 'SM4-ECB';
  LN_sm4_ecb = 'sm4-ecb';
  NID_sm4_ecb = 1133;
  SN_sm4_cbc = 'SM4-CBC';
  LN_sm4_cbc = 'sm4-cbc';
  NID_sm4_cbc = 1134;
  SN_sm4_ofb128 = 'SM4-OFB';
  LN_sm4_ofb128 = 'sm4-ofb';
  NID_sm4_ofb128 = 1135;
  SN_sm4_cfb128 = 'SM4-CFB';
  LN_sm4_cfb128 = 'sm4-cfb';
  NID_sm4_cfb128 = 1137;
  SN_sm4_cfb1 = 'SM4-CFB1';
  LN_sm4_cfb1 = 'sm4-cfb1';
  NID_sm4_cfb1 = 1136;
  SN_sm4_cfb8 = 'SM4-CFB8';
  LN_sm4_cfb8 = 'sm4-cfb8';
  NID_sm4_cfb8 = 1138;
  SN_sm4_ctr = 'SM4-CTR';
  LN_sm4_ctr = 'sm4-ctr';
  NID_sm4_ctr = 1139;
  SN_hmac = 'HMAC';
  LN_hmac = 'hmac';
  NID_hmac = 855;
  SN_cmac = 'CMAC';
  LN_cmac = 'cmac';
  NID_cmac = 894;
  SN_rc4_hmac_md5 = 'RC4-HMAC-MD5';
  LN_rc4_hmac_md5 = 'rc4-hmac-md5';
  NID_rc4_hmac_md5 = 915;
  SN_aes_128_cbc_hmac_sha1 = 'AES-128-CBC-HMAC-SHA1';
  LN_aes_128_cbc_hmac_sha1 = 'aes-128-cbc-hmac-sha1';
  NID_aes_128_cbc_hmac_sha1 = 916;
  SN_aes_192_cbc_hmac_sha1 = 'AES-192-CBC-HMAC-SHA1';
  LN_aes_192_cbc_hmac_sha1 = 'aes-192-cbc-hmac-sha1';
  NID_aes_192_cbc_hmac_sha1 = 917;
  SN_aes_256_cbc_hmac_sha1 = 'AES-256-CBC-HMAC-SHA1';
  LN_aes_256_cbc_hmac_sha1 = 'aes-256-cbc-hmac-sha1';
  NID_aes_256_cbc_hmac_sha1 = 918;
  SN_aes_128_cbc_hmac_sha256 = 'AES-128-CBC-HMAC-SHA256';
  LN_aes_128_cbc_hmac_sha256 = 'aes-128-cbc-hmac-sha256';
  NID_aes_128_cbc_hmac_sha256 = 948;
  SN_aes_192_cbc_hmac_sha256 = 'AES-192-CBC-HMAC-SHA256';
  LN_aes_192_cbc_hmac_sha256 = 'aes-192-cbc-hmac-sha256';
  NID_aes_192_cbc_hmac_sha256 = 949;
  SN_aes_256_cbc_hmac_sha256 = 'AES-256-CBC-HMAC-SHA256';
  LN_aes_256_cbc_hmac_sha256 = 'aes-256-cbc-hmac-sha256';
  NID_aes_256_cbc_hmac_sha256 = 950;
  SN_chacha20_poly1305 = 'ChaCha20-Poly1305';
  LN_chacha20_poly1305 = 'chacha20-poly1305';
  NID_chacha20_poly1305 = 1018;
  SN_chacha20 = 'ChaCha20';
  LN_chacha20 = 'chacha20';
  NID_chacha20 = 1019;
  SN_dhpublicnumber = 'dhpublicnumber';
  LN_dhpublicnumber = 'X9.42 DH';
  NID_dhpublicnumber = 920;
  SN_brainpoolP160r1 = 'brainpoolP160r1';
  NID_brainpoolP160r1 = 921;
  SN_brainpoolP160t1 = 'brainpoolP160t1';
  NID_brainpoolP160t1 = 922;
  SN_brainpoolP192r1 = 'brainpoolP192r1';
  NID_brainpoolP192r1 = 923;
  SN_brainpoolP192t1 = 'brainpoolP192t1';
  NID_brainpoolP192t1 = 924;
  SN_brainpoolP224r1 = 'brainpoolP224r1';
  NID_brainpoolP224r1 = 925;
  SN_brainpoolP224t1 = 'brainpoolP224t1';
  NID_brainpoolP224t1 = 926;
  SN_brainpoolP256r1 = 'brainpoolP256r1';
  NID_brainpoolP256r1 = 927;
  SN_brainpoolP256t1 = 'brainpoolP256t1';
  NID_brainpoolP256t1 = 928;
  SN_brainpoolP320r1 = 'brainpoolP320r1';
  NID_brainpoolP320r1 = 929;
  SN_brainpoolP320t1 = 'brainpoolP320t1';
  NID_brainpoolP320t1 = 930;
  SN_brainpoolP384r1 = 'brainpoolP384r1';
  NID_brainpoolP384r1 = 931;
  SN_brainpoolP384t1 = 'brainpoolP384t1';
  NID_brainpoolP384t1 = 932;
  SN_brainpoolP512r1 = 'brainpoolP512r1';
  NID_brainpoolP512r1 = 933;
  SN_brainpoolP512t1 = 'brainpoolP512t1';
  NID_brainpoolP512t1 = 934;
  SN_dhSinglePass_stdDH_sha1kdf_scheme = 'dhSinglePass-stdDH-sha1kdf-scheme';
  NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;
  SN_dhSinglePass_stdDH_sha224kdf_scheme = 'dhSinglePass-stdDH-sha224kdf-scheme';
  NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;
  SN_dhSinglePass_stdDH_sha256kdf_scheme = 'dhSinglePass-stdDH-sha256kdf-scheme';
  NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;
  SN_dhSinglePass_stdDH_sha384kdf_scheme = 'dhSinglePass-stdDH-sha384kdf-scheme';
  NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;
  SN_dhSinglePass_stdDH_sha512kdf_scheme = 'dhSinglePass-stdDH-sha512kdf-scheme';
  NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;
  SN_dhSinglePass_cofactorDH_sha1kdf_scheme = 'dhSinglePass-cofactorDH-sha1kdf-scheme';
  NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;
  SN_dhSinglePass_cofactorDH_sha224kdf_scheme = 'dhSinglePass-cofactorDH-sha224kdf-scheme';
  NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;
  SN_dhSinglePass_cofactorDH_sha256kdf_scheme = 'dhSinglePass-cofactorDH-sha256kdf-scheme';
  NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;
  SN_dhSinglePass_cofactorDH_sha384kdf_scheme = 'dhSinglePass-cofactorDH-sha384kdf-scheme';
  NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;
  SN_dhSinglePass_cofactorDH_sha512kdf_scheme = 'dhSinglePass-cofactorDH-sha512kdf-scheme';
  NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;
  SN_dh_std_kdf = 'dh-std-kdf';
  NID_dh_std_kdf = 946;
  SN_dh_cofactor_kdf = 'dh-cofactor-kdf';
  NID_dh_cofactor_kdf = 947;
  SN_ct_precert_scts = 'ct_precert_scts';
  LN_ct_precert_scts = 'CT Precertificate SCTs';
  NID_ct_precert_scts = 951;
  SN_ct_precert_poison = 'ct_precert_poison';
  LN_ct_precert_poison = 'CT Precertificate Poison';
  NID_ct_precert_poison = 952;
  SN_ct_precert_signer = 'ct_precert_signer';
  LN_ct_precert_signer = 'CT Precertificate Signer';
  NID_ct_precert_signer = 953;
  SN_ct_cert_scts = 'ct_cert_scts';
  LN_ct_cert_scts = 'CT Certificate SCTs';
  NID_ct_cert_scts = 954;
  SN_jurisdictionLocalityName = 'jurisdictionL';
  LN_jurisdictionLocalityName = 'jurisdictionLocalityName';
  NID_jurisdictionLocalityName = 955;
  SN_jurisdictionStateOrProvinceName = 'jurisdictionST';
  LN_jurisdictionStateOrProvinceName = 'jurisdictionStateOrProvinceName';
  NID_jurisdictionStateOrProvinceName = 956;
  SN_jurisdictionCountryName = 'jurisdictionC';
  LN_jurisdictionCountryName = 'jurisdictionCountryName';
  NID_jurisdictionCountryName = 957;
  SN_id_scrypt = 'id-scrypt';
  LN_id_scrypt = 'scrypt';
  NID_id_scrypt = 973;
  SN_tls1_prf = 'TLS1-PRF';
  LN_tls1_prf = 'tls1-prf';
  NID_tls1_prf = 1021;
  SN_hkdf = 'HKDF';
  LN_hkdf = 'hkdf';
  NID_hkdf = 1036;
  SN_id_pkinit = 'id-pkinit';
  NID_id_pkinit = 1031;
  SN_pkInitClientAuth = 'pkInitClientAuth';
  LN_pkInitClientAuth = 'PKINIT Client Auth';
  NID_pkInitClientAuth = 1032;
  SN_pkInitKDC = 'pkInitKDC';
  LN_pkInitKDC = 'Signing KDC Response';
  NID_pkInitKDC = 1033;
  SN_X25519 = 'X25519';
  NID_X25519 = 1034;
  SN_X448 = 'X448';
  NID_X448 = 1035;
  SN_ED25519 = 'ED25519';
  NID_ED25519 = 1087;
  SN_ED448 = 'ED448';
  NID_ED448 = 1088;
  SN_kx_rsa = 'KxRSA';
  LN_kx_rsa = 'kx-rsa';
  NID_kx_rsa = 1037;
  SN_kx_ecdhe = 'KxECDHE';
  LN_kx_ecdhe = 'kx-ecdhe';
  NID_kx_ecdhe = 1038;
  SN_kx_dhe = 'KxDHE';
  LN_kx_dhe = 'kx-dhe';
  NID_kx_dhe = 1039;
  SN_kx_ecdhe_psk = 'KxECDHE-PSK';
  LN_kx_ecdhe_psk = 'kx-ecdhe-psk';
  NID_kx_ecdhe_psk = 1040;
  SN_kx_dhe_psk = 'KxDHE-PSK';
  LN_kx_dhe_psk = 'kx-dhe-psk';
  NID_kx_dhe_psk = 1041;
  SN_kx_rsa_psk = 'KxRSA_PSK';
  LN_kx_rsa_psk = 'kx-rsa-psk';
  NID_kx_rsa_psk = 1042;
  SN_kx_psk = 'KxPSK';
  LN_kx_psk = 'kx-psk';
  NID_kx_psk = 1043;
  SN_kx_srp = 'KxSRP';
  LN_kx_srp = 'kx-srp';
  NID_kx_srp = 1044;
  SN_kx_gost = 'KxGOST';
  LN_kx_gost = 'kx-gost';
  NID_kx_gost = 1045;
  SN_kx_any = 'KxANY';
  LN_kx_any = 'kx-any';
  NID_kx_any = 1063;
  SN_auth_rsa = 'AuthRSA';
  LN_auth_rsa = 'auth-rsa';
  NID_auth_rsa = 1046;
  SN_auth_ecdsa = 'AuthECDSA';
  LN_auth_ecdsa = 'auth-ecdsa';
  NID_auth_ecdsa = 1047;
  SN_auth_psk = 'AuthPSK';
  LN_auth_psk = 'auth-psk';
  NID_auth_psk = 1048;
  SN_auth_dss = 'AuthDSS';
  LN_auth_dss = 'auth-dss';
  NID_auth_dss = 1049;
  SN_auth_gost01 = 'AuthGOST01';
  LN_auth_gost01 = 'auth-gost01';
  NID_auth_gost01 = 1050;
  SN_auth_gost12 = 'AuthGOST12';
  LN_auth_gost12 = 'auth-gost12';
  NID_auth_gost12 = 1051;
  SN_auth_srp = 'AuthSRP';
  LN_auth_srp = 'auth-srp';
  NID_auth_srp = 1052;
  SN_auth_null = 'AuthNULL';
  LN_auth_null = 'auth-null';
  NID_auth_null = 1053;
  SN_auth_any = 'AuthANY';
  LN_auth_any = 'auth-any';
  NID_auth_any = 1064;
  SN_poly1305 = 'Poly1305';
  LN_poly1305 = 'poly1305';
  NID_poly1305 = 1061;
  SN_siphash = 'SipHash';
  LN_siphash = 'siphash';
  NID_siphash = 1062;
  SN_ffdhe2048 = 'ffdhe2048';
  NID_ffdhe2048 = 1126;
  SN_ffdhe3072 = 'ffdhe3072';
  NID_ffdhe3072 = 1127;
  SN_ffdhe4096 = 'ffdhe4096';
  NID_ffdhe4096 = 1128;
  SN_ffdhe6144 = 'ffdhe6144';
  NID_ffdhe6144 = 1129;
  SN_ffdhe8192 = 'ffdhe8192';
  NID_ffdhe8192 = 1130;
  SN_ISO_UA = 'ISO-UA';
  NID_ISO_UA = 1150;
  SN_ua_pki = 'ua-pki';
  NID_ua_pki = 1151;
  SN_dstu28147 = 'dstu28147';
  LN_dstu28147 = 'DSTU Gost 28147-2009';
  NID_dstu28147 = 1152;
  SN_dstu28147_ofb = 'dstu28147-ofb';
  LN_dstu28147_ofb = 'DSTU Gost 28147-2009 OFB mode';
  NID_dstu28147_ofb = 1153;
  SN_dstu28147_cfb = 'dstu28147-cfb';
  LN_dstu28147_cfb = 'DSTU Gost 28147-2009 CFB mode';
  NID_dstu28147_cfb = 1154;
  SN_dstu28147_wrap = 'dstu28147-wrap';
  LN_dstu28147_wrap = 'DSTU Gost 28147-2009 key wrap';
  NID_dstu28147_wrap = 1155;
  SN_hmacWithDstu34311 = 'hmacWithDstu34311';
  LN_hmacWithDstu34311 = 'HMAC DSTU Gost 34311-95';
  NID_hmacWithDstu34311 = 1156;
  SN_dstu34311 = 'dstu34311';
  LN_dstu34311 = 'DSTU Gost 34311-95';
  NID_dstu34311 = 1157;
  SN_dstu4145le = 'dstu4145le';
  LN_dstu4145le = 'DSTU 4145-2002 little endian';
  NID_dstu4145le = 1158;
  SN_dstu4145be = 'dstu4145be';
  LN_dstu4145be = 'DSTU 4145-2002 big endian';
  NID_dstu4145be = 1159;
  SN_uacurve0 = 'uacurve0';
  LN_uacurve0 = 'DSTU curve 0';
  NID_uacurve0 = 1160;
  SN_uacurve1 = 'uacurve1';
  LN_uacurve1 = 'DSTU curve 1';
  NID_uacurve1 = 1161;
  SN_uacurve2 = 'uacurve2';
  LN_uacurve2 = 'DSTU curve 2';
  NID_uacurve2 = 1162;
  SN_uacurve3 = 'uacurve3';
  LN_uacurve3 = 'DSTU curve 3';
  NID_uacurve3 = 1163;
  SN_uacurve4 = 'uacurve4';
  LN_uacurve4 = 'DSTU curve 4';
  NID_uacurve4 = 1164;
  SN_uacurve5 = 'uacurve5';
  LN_uacurve5 = 'DSTU curve 5';
  NID_uacurve5 = 1165;
  SN_uacurve6 = 'uacurve6';
  LN_uacurve6 = 'DSTU curve 6';
  NID_uacurve6 = 1166;
  SN_uacurve7 = 'uacurve7';
  LN_uacurve7 = 'DSTU curve 7';
  NID_uacurve7 = 1167;
  SN_uacurve8 = 'uacurve8';
  LN_uacurve8 = 'DSTU curve 8';
  NID_uacurve8 = 1168;
  SN_uacurve9 = 'uacurve9';
  LN_uacurve9 = 'DSTU curve 9';
  NID_uacurve9 = 1169;
  OBJ_F_OBJ_ADD_OBJECT = 105;
  OBJ_F_OBJ_ADD_SIGID = 107;
  OBJ_F_OBJ_CREATE = 100;
  OBJ_F_OBJ_DUP = 101;
  OBJ_F_OBJ_NAME_NEW_INDEX = 106;
  OBJ_F_OBJ_NID2LN = 102;
  OBJ_F_OBJ_NID2OBJ = 103;
  OBJ_F_OBJ_NID2SN = 104;
  OBJ_F_OBJ_TXT2OBJ = 108;
  OBJ_R_OID_EXISTS = 102;
  OBJ_R_UNKNOWN_NID = 101;
  OBJ_NAME_TYPE_UNDEF = $00;
  OBJ_NAME_TYPE_MD_METH = $01;
  OBJ_NAME_TYPE_CIPHER_METH = $02;
  OBJ_NAME_TYPE_PKEY_METH = $03;
  OBJ_NAME_TYPE_COMP_METH = $04;
  OBJ_NAME_TYPE_NUM = $05;
  OBJ_NAME_ALIAS = $8000;
  OBJ_BSEARCH_VALUE_ON_NOMATCH = $01;
  OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = $02;
  EVP_PK_RSA = $0001;
  EVP_PK_DSA = $0002;
  EVP_PK_DH = $0004;
  EVP_PK_EC = $0008;
  EVP_PKT_SIGN = $0010;
  EVP_PKT_ENC = $0020;
  EVP_PKT_EXCH = $0040;
  EVP_PKS_RSA = $0100;
  EVP_PKS_DSA = $0200;
  EVP_PKS_EC = $0400;
  EVP_PKEY_NONE = NID_undef;
  EVP_PKEY_RSA = NID_rsaEncryption;
  EVP_PKEY_RSA2 = NID_rsa;
  EVP_PKEY_RSA_PSS = NID_rsassaPss;
  EVP_PKEY_DSA = NID_dsa;
  EVP_PKEY_DSA1 = NID_dsa_2;
  EVP_PKEY_DSA2 = NID_dsaWithSHA;
  EVP_PKEY_DSA3 = NID_dsaWithSHA1;
  EVP_PKEY_DSA4 = NID_dsaWithSHA1_2;
  EVP_PKEY_DH = NID_dhKeyAgreement;
  EVP_PKEY_DHX = NID_dhpublicnumber;
  EVP_PKEY_EC = NID_X9_62_id_ecPublicKey;
  EVP_PKEY_SM2 = NID_sm2;
  EVP_PKEY_HMAC = NID_hmac;
  EVP_PKEY_CMAC = NID_cmac;
  EVP_PKEY_SCRYPT = NID_id_scrypt;
  EVP_PKEY_TLS1_PRF = NID_tls1_prf;
  EVP_PKEY_HKDF = NID_hkdf;
  EVP_PKEY_POLY1305 = NID_poly1305;
  EVP_PKEY_SIPHASH = NID_siphash;
  EVP_PKEY_X25519 = NID_X25519;
  EVP_PKEY_ED25519 = NID_ED25519;
  EVP_PKEY_X448 = NID_X448;
  EVP_PKEY_ED448 = NID_ED448;
  EVP_PKEY_MO_SIGN = $0001;
  EVP_PKEY_MO_VERIFY = $0002;
  EVP_PKEY_MO_ENCRYPT = $0004;
  EVP_PKEY_MO_DECRYPT = $0008;
  EVP_MD_FLAG_ONESHOT = $0001;
  EVP_MD_FLAG_XOF = $0002;
  EVP_MD_FLAG_DIGALGID_MASK = $0018;
  EVP_MD_FLAG_DIGALGID_NULL = $0000;
  EVP_MD_FLAG_DIGALGID_ABSENT = $0008;
  EVP_MD_FLAG_DIGALGID_CUSTOM = $0018;
  EVP_MD_FLAG_FIPS = $0400;
  EVP_MD_CTRL_DIGALGID = $1;
  EVP_MD_CTRL_MICALG = $2;
  EVP_MD_CTRL_XOF_LEN = $3;
  EVP_MD_CTRL_ALG_CTRL = $1000;
  EVP_MD_CTX_FLAG_ONESHOT = $0001;
  EVP_MD_CTX_FLAG_CLEANED = $0002;
  EVP_MD_CTX_FLAG_REUSE = $0004;
  EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = $0008;
  EVP_MD_CTX_FLAG_PAD_MASK = $F0;
  EVP_MD_CTX_FLAG_PAD_PKCS1 = $00;
  EVP_MD_CTX_FLAG_PAD_X931 = $10;
  EVP_MD_CTX_FLAG_PAD_PSS = $20;
  EVP_MD_CTX_FLAG_NO_INIT = $0100;
  EVP_MD_CTX_FLAG_FINALISE = $0200;
  EVP_CIPH_STREAM_CIPHER = $0;
  EVP_CIPH_ECB_MODE = $1;
  EVP_CIPH_CBC_MODE = $2;
  EVP_CIPH_CFB_MODE = $3;
  EVP_CIPH_OFB_MODE = $4;
  EVP_CIPH_CTR_MODE = $5;
  EVP_CIPH_GCM_MODE = $6;
  EVP_CIPH_CCM_MODE = $7;
  EVP_CIPH_XTS_MODE = $10001;
  EVP_CIPH_WRAP_MODE = $10002;
  EVP_CIPH_OCB_MODE = $10003;
  EVP_CIPH_MODE = $F0007;
  EVP_CIPH_VARIABLE_LENGTH = $8;
  EVP_CIPH_CUSTOM_IV = $10;
  EVP_CIPH_ALWAYS_CALL_INIT = $20;
  EVP_CIPH_CTRL_INIT = $40;
  EVP_CIPH_CUSTOM_KEY_LENGTH = $80;
  EVP_CIPH_NO_PADDING = $100;
  EVP_CIPH_RAND_KEY = $200;
  EVP_CIPH_CUSTOM_COPY = $400;
  EVP_CIPH_CUSTOM_IV_LENGTH = $800;
  EVP_CIPH_FLAG_DEFAULT_ASN1 = $1000;
  EVP_CIPH_FLAG_LENGTH_BITS = $2000;
  EVP_CIPH_FLAG_FIPS = $4000;
  EVP_CIPH_FLAG_NON_FIPS_ALLOW = $8000;
  EVP_CIPH_FLAG_CUSTOM_CIPHER = $100000;
  EVP_CIPH_FLAG_AEAD_CIPHER = $200000;
  EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = $400000;
  EVP_CIPH_FLAG_PIPELINE = $800000;
  EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = $1;
  EVP_CTRL_INIT = $0;
  EVP_CTRL_SET_KEY_LENGTH = $1;
  EVP_CTRL_GET_RC2_KEY_BITS = $2;
  EVP_CTRL_SET_RC2_KEY_BITS = $3;
  EVP_CTRL_GET_RC5_ROUNDS = $4;
  EVP_CTRL_SET_RC5_ROUNDS = $5;
  EVP_CTRL_RAND_KEY = $6;
  EVP_CTRL_PBE_PRF_NID = $7;
  EVP_CTRL_COPY = $8;
  EVP_CTRL_AEAD_SET_IVLEN = $9;
  EVP_CTRL_AEAD_GET_TAG = $10;
  EVP_CTRL_AEAD_SET_TAG = $11;
  EVP_CTRL_AEAD_SET_IV_FIXED = $12;
  EVP_CTRL_GCM_SET_IVLEN = EVP_CTRL_AEAD_SET_IVLEN;
  EVP_CTRL_GCM_GET_TAG = EVP_CTRL_AEAD_GET_TAG;
  EVP_CTRL_GCM_SET_TAG = EVP_CTRL_AEAD_SET_TAG;
  EVP_CTRL_GCM_SET_IV_FIXED = EVP_CTRL_AEAD_SET_IV_FIXED;
  EVP_CTRL_GCM_IV_GEN = $13;
  EVP_CTRL_CCM_SET_IVLEN = EVP_CTRL_AEAD_SET_IVLEN;
  EVP_CTRL_CCM_GET_TAG = EVP_CTRL_AEAD_GET_TAG;
  EVP_CTRL_CCM_SET_TAG = EVP_CTRL_AEAD_SET_TAG;
  EVP_CTRL_CCM_SET_IV_FIXED = EVP_CTRL_AEAD_SET_IV_FIXED;
  EVP_CTRL_CCM_SET_L = $14;
  EVP_CTRL_CCM_SET_MSGLEN = $15;
  EVP_CTRL_AEAD_TLS1_AAD = $16;
  EVP_CTRL_AEAD_SET_MAC_KEY = $17;
  EVP_CTRL_GCM_SET_IV_INV = $18;
  EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = $19;
  EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = $1a;
  EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = $1b;
  EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = $1c;
  EVP_CTRL_SSL3_MASTER_SECRET = $1d;
  EVP_CTRL_SET_SBOX = $1e;
  EVP_CTRL_SBOX_USED = $1f;
  EVP_CTRL_KEY_MESH = $20;
  EVP_CTRL_BLOCK_PADDING_MODE = $21;
  EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = $22;
  EVP_CTRL_SET_PIPELINE_INPUT_BUFS = $23;
  EVP_CTRL_SET_PIPELINE_INPUT_LENS = $24;
  EVP_CTRL_GET_IVLEN = $25;
  EVP_PADDING_PKCS7 = 1;
  EVP_PADDING_ISO7816_4 = 2;
  EVP_PADDING_ANSI923 = 3;
  EVP_PADDING_ISO10126 = 4;
  EVP_PADDING_ZERO = 5;
  EVP_AEAD_TLS1_AAD_LEN = 13;
  EVP_GCM_TLS_FIXED_IV_LEN = 4;
  EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;
  EVP_GCM_TLS_TAG_LEN = 16;
  EVP_CCM_TLS_FIXED_IV_LEN = 4;
  EVP_CCM_TLS_EXPLICIT_IV_LEN = 8;
  EVP_CCM_TLS_IV_LEN = 12;
  EVP_CCM_TLS_TAG_LEN = 16;
  EVP_CCM8_TLS_TAG_LEN = 8;
  EVP_CHACHAPOLY_TLS_TAG_LEN = 16;
  EVP_PBE_TYPE_OUTER = $0;
  EVP_PBE_TYPE_PRF = $1;
  EVP_PBE_TYPE_KDF = $2;
  ASN1_PKEY_ALIAS = $1;
  ASN1_PKEY_DYNAMIC = $2;
  ASN1_PKEY_SIGPARAM_NULL = $4;
  ASN1_PKEY_CTRL_PKCS7_SIGN = $1;
  ASN1_PKEY_CTRL_PKCS7_ENCRYPT = $2;
  ASN1_PKEY_CTRL_DEFAULT_MD_NID = $3;
  ASN1_PKEY_CTRL_CMS_SIGN = $5;
  ASN1_PKEY_CTRL_CMS_ENVELOPE = $7;
  ASN1_PKEY_CTRL_CMS_RI_TYPE = $8;
  ASN1_PKEY_CTRL_SET1_TLS_ENCPT = $9;
  ASN1_PKEY_CTRL_GET1_TLS_ENCPT = $a;
  EVP_PKEY_OP_UNDEFINED = 0;
  EVP_PKEY_OP_PARAMGEN = (1 shl 1);
  EVP_PKEY_OP_KEYGEN = (1 shl 2);
  EVP_PKEY_OP_SIGN = (1 shl 3);
  EVP_PKEY_OP_VERIFY = (1 shl 4);
  EVP_PKEY_OP_VERIFYRECOVER = (1 shl 5);
  EVP_PKEY_OP_SIGNCTX = (1 shl 6);
  EVP_PKEY_OP_VERIFYCTX = (1 shl 7);
  EVP_PKEY_OP_ENCRYPT = (1 shl 8);
  EVP_PKEY_OP_DECRYPT = (1 shl 9);
  EVP_PKEY_OP_DERIVE = (1 shl 10);
  EVP_PKEY_OP_TYPE_SIG = (EVP_PKEY_OP_SIGN or EVP_PKEY_OP_VERIFY or EVP_PKEY_OP_VERIFYRECOVER or EVP_PKEY_OP_SIGNCTX or EVP_PKEY_OP_VERIFYCTX);
  EVP_PKEY_OP_TYPE_CRYPT = (EVP_PKEY_OP_ENCRYPT or EVP_PKEY_OP_DECRYPT);
  EVP_PKEY_OP_TYPE_NOGEN = (EVP_PKEY_OP_TYPE_SIG or EVP_PKEY_OP_TYPE_CRYPT or EVP_PKEY_OP_DERIVE);
  EVP_PKEY_OP_TYPE_GEN = (EVP_PKEY_OP_PARAMGEN or EVP_PKEY_OP_KEYGEN);
  EVP_PKEY_CTRL_MD = 1;
  EVP_PKEY_CTRL_PEER_KEY = 2;
  EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3;
  EVP_PKEY_CTRL_PKCS7_DECRYPT = 4;
  EVP_PKEY_CTRL_PKCS7_SIGN = 5;
  EVP_PKEY_CTRL_SET_MAC_KEY = 6;
  EVP_PKEY_CTRL_DIGESTINIT = 7;
  EVP_PKEY_CTRL_SET_IV = 8;
  EVP_PKEY_CTRL_CMS_ENCRYPT = 9;
  EVP_PKEY_CTRL_CMS_DECRYPT = 10;
  EVP_PKEY_CTRL_CMS_SIGN = 11;
  EVP_PKEY_CTRL_CIPHER = 12;
  EVP_PKEY_CTRL_GET_MD = 13;
  EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14;
  EVP_PKEY_ALG_CTRL = $1000;
  EVP_PKEY_FLAG_AUTOARGLEN = 2;
  EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4;
  EC_F_BN_TO_FELEM = 224;
  EC_F_D2I_ECPARAMETERS = 144;
  EC_F_D2I_ECPKPARAMETERS = 145;
  EC_F_D2I_ECPRIVATEKEY = 146;
  EC_F_DO_EC_KEY_PRINT = 221;
  EC_F_ECDH_CMS_DECRYPT = 238;
  EC_F_ECDH_CMS_SET_SHARED_INFO = 239;
  EC_F_ECDH_COMPUTE_KEY = 246;
  EC_F_ECDH_SIMPLE_COMPUTE_KEY = 257;
  EC_F_ECDSA_DO_SIGN_EX = 251;
  EC_F_ECDSA_DO_VERIFY = 252;
  EC_F_ECDSA_SIGN_EX = 254;
  EC_F_ECDSA_SIGN_SETUP = 248;
  EC_F_ECDSA_SIG_NEW = 265;
  EC_F_ECDSA_VERIFY = 253;
  EC_F_ECD_ITEM_VERIFY = 270;
  EC_F_ECKEY_PARAM2TYPE = 223;
  EC_F_ECKEY_PARAM_DECODE = 212;
  EC_F_ECKEY_PRIV_DECODE = 213;
  EC_F_ECKEY_PRIV_ENCODE = 214;
  EC_F_ECKEY_PUB_DECODE = 215;
  EC_F_ECKEY_PUB_ENCODE = 216;
  EC_F_ECKEY_TYPE2PARAM = 220;
  EC_F_ECPARAMETERS_PRINT = 147;
  EC_F_ECPARAMETERS_PRINT_FP = 148;
  EC_F_ECPKPARAMETERS_PRINT = 149;
  EC_F_ECPKPARAMETERS_PRINT_FP = 150;
  EC_F_ECP_NISTZ256_GET_AFFINE = 240;
  EC_F_ECP_NISTZ256_INV_MOD_ORD = 275;
  EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = 243;
  EC_F_ECP_NISTZ256_POINTS_MUL = 241;
  EC_F_ECP_NISTZ256_PRE_COMP_NEW = 244;
  EC_F_ECP_NISTZ256_WINDOWED_MUL = 242;
  EC_F_ECX_KEY_OP = 266;
  EC_F_ECX_PRIV_ENCODE = 267;
  EC_F_ECX_PUB_ENCODE = 268;
  EC_F_EC_ASN1_GROUP2CURVE = 153;
  EC_F_EC_ASN1_GROUP2FIELDID = 154;
  EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 208;
  EC_F_EC_GF2M_SIMPLE_FIELD_INV = 296;
  EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 159;
  EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 195;
  EC_F_EC_GF2M_SIMPLE_LADDER_POST = 285;
  EC_F_EC_GF2M_SIMPLE_LADDER_PRE = 288;
  EC_F_EC_GF2M_SIMPLE_OCT2POINT = 160;
  EC_F_EC_GF2M_SIMPLE_POINT2OCT = 161;
  EC_F_EC_GF2M_SIMPLE_POINTS_MUL = 289;
  EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 162;
  EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 163;
  EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 164;
  EC_F_EC_GFP_MONT_FIELD_DECODE = 133;
  EC_F_EC_GFP_MONT_FIELD_ENCODE = 134;
  EC_F_EC_GFP_MONT_FIELD_INV = 297;
  EC_F_EC_GFP_MONT_FIELD_MUL = 131;
  EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 209;
  EC_F_EC_GFP_MONT_FIELD_SQR = 132;
  EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 189;
  EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = 225;
  EC_F_EC_GFP_NISTP224_POINTS_MUL = 228;
  EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = 226;
  EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = 230;
  EC_F_EC_GFP_NISTP256_POINTS_MUL = 231;
  EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = 232;
  EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = 233;
  EC_F_EC_GFP_NISTP521_POINTS_MUL = 234;
  EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = 235;
  EC_F_EC_GFP_NIST_FIELD_MUL = 200;
  EC_F_EC_GFP_NIST_FIELD_SQR = 201;
  EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 202;
  EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = 287;
  EC_F_EC_GFP_SIMPLE_FIELD_INV = 298;
  EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 165;
  EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 166;
  EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 102;
  EC_F_EC_GFP_SIMPLE_OCT2POINT = 103;
  EC_F_EC_GFP_SIMPLE_POINT2OCT = 104;
  EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 137;
  EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 167;
  EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 168;
  EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 169;
  EC_F_EC_GROUP_CHECK = 170;
  EC_F_EC_GROUP_CHECK_DISCRIMINANT = 171;
  EC_F_EC_GROUP_COPY = 106;
  EC_F_EC_GROUP_GET_CURVE = 291;
  EC_F_EC_GROUP_GET_CURVE_GF2M = 172;
  EC_F_EC_GROUP_GET_CURVE_GFP = 130;
  EC_F_EC_GROUP_GET_DEGREE = 173;
  EC_F_EC_GROUP_GET_ECPARAMETERS = 261;
  EC_F_EC_GROUP_GET_ECPKPARAMETERS = 262;
  EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 193;
  EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 194;
  EC_F_EC_GROUP_NEW = 108;
  EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 174;
  EC_F_EC_GROUP_NEW_FROM_DATA = 175;
  EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = 263;
  EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = 264;
  EC_F_EC_GROUP_SET_CURVE = 292;
  EC_F_EC_GROUP_SET_CURVE_GF2M = 176;
  EC_F_EC_GROUP_SET_CURVE_GFP = 109;
  EC_F_EC_GROUP_SET_GENERATOR = 111;
  EC_F_EC_GROUP_SET_SEED = 286;
  EC_F_EC_KEY_CHECK_KEY = 177;
  EC_F_EC_KEY_COPY = 178;
  EC_F_EC_KEY_GENERATE_KEY = 179;
  EC_F_EC_KEY_NEW = 182;
  EC_F_EC_KEY_NEW_METHOD = 245;
  EC_F_EC_KEY_OCT2PRIV = 255;
  EC_F_EC_KEY_PRINT = 180;
  EC_F_EC_KEY_PRINT_FP = 181;
  EC_F_EC_KEY_PRIV2BUF = 279;
  EC_F_EC_KEY_PRIV2OCT = 256;
  EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = 229;
  EC_F_EC_KEY_SIMPLE_CHECK_KEY = 258;
  EC_F_EC_KEY_SIMPLE_OCT2PRIV = 259;
  EC_F_EC_KEY_SIMPLE_PRIV2OCT = 260;
  EC_F_EC_PKEY_CHECK = 273;
  EC_F_EC_PKEY_PARAM_CHECK = 274;
  EC_F_EC_POINTS_MAKE_AFFINE = 136;
  EC_F_EC_POINTS_MUL = 290;
  EC_F_EC_POINT_ADD = 112;
  EC_F_EC_POINT_BN2POINT = 280;
  EC_F_EC_POINT_CMP = 113;
  EC_F_EC_POINT_COPY = 114;
  EC_F_EC_POINT_DBL = 115;
  EC_F_EC_POINT_GET_AFFINE_COORDINATES = 293;
  EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 183;
  EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 116;
  EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 117;
  EC_F_EC_POINT_INVERT = 210;
  EC_F_EC_POINT_IS_AT_INFINITY = 118;
  EC_F_EC_POINT_IS_ON_CURVE = 119;
  EC_F_EC_POINT_MAKE_AFFINE = 120;
  EC_F_EC_POINT_NEW = 121;
  EC_F_EC_POINT_OCT2POINT = 122;
  EC_F_EC_POINT_POINT2BUF = 281;
  EC_F_EC_POINT_POINT2OCT = 123;
  EC_F_EC_POINT_SET_AFFINE_COORDINATES = 294;
  EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 185;
  EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 124;
  EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = 295;
  EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 186;
  EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 125;
  EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 126;
  EC_F_EC_POINT_SET_TO_INFINITY = 127;
  EC_F_EC_PRE_COMP_NEW = 196;
  EC_F_EC_SCALAR_MUL_LADDER = 284;
  EC_F_EC_WNAF_MUL = 187;
  EC_F_EC_WNAF_PRECOMPUTE_MULT = 188;
  EC_F_I2D_ECPARAMETERS = 190;
  EC_F_I2D_ECPKPARAMETERS = 191;
  EC_F_I2D_ECPRIVATEKEY = 192;
  EC_F_I2O_ECPUBLICKEY = 151;
  EC_F_NISTP224_PRE_COMP_NEW = 227;
  EC_F_NISTP256_PRE_COMP_NEW = 236;
  EC_F_NISTP521_PRE_COMP_NEW = 237;
  EC_F_O2I_ECPUBLICKEY = 152;
  EC_F_OLD_EC_PRIV_DECODE = 222;
  EC_F_OSSL_ECDH_COMPUTE_KEY = 247;
  EC_F_OSSL_ECDSA_SIGN_SIG = 249;
  EC_F_OSSL_ECDSA_VERIFY_SIG = 250;
  EC_F_PKEY_ECD_CTRL = 271;
  EC_F_PKEY_ECD_DIGESTSIGN = 272;
  EC_F_PKEY_ECD_DIGESTSIGN25519 = 276;
  EC_F_PKEY_ECD_DIGESTSIGN448 = 277;
  EC_F_PKEY_ECX_DERIVE = 269;
  EC_F_PKEY_EC_CTRL = 197;
  EC_F_PKEY_EC_CTRL_STR = 198;
  EC_F_PKEY_EC_DERIVE = 217;
  EC_F_PKEY_EC_INIT = 282;
  EC_F_PKEY_EC_KDF_DERIVE = 283;
  EC_F_PKEY_EC_KEYGEN = 199;
  EC_F_PKEY_EC_PARAMGEN = 219;
  EC_F_PKEY_EC_SIGN = 218;
  EC_F_VALIDATE_ECX_DERIVE = 278;
  EC_R_ASN1_ERROR = 115;
  EC_R_BAD_SIGNATURE = 156;
  EC_R_BIGNUM_OUT_OF_RANGE = 144;
  EC_R_BUFFER_TOO_SMALL = 100;
  EC_R_CANNOT_INVERT = 165;
  EC_R_COORDINATES_OUT_OF_RANGE = 146;
  EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = 160;
  EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = 159;
  EC_R_D2I_ECPKPARAMETERS_FAILURE = 117;
  EC_R_DECODE_ERROR = 142;
  EC_R_DISCRIMINANT_IS_ZERO = 118;
  EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 119;
  EC_R_FIELD_TOO_LARGE = 143;
  EC_R_GF2M_NOT_SUPPORTED = 147;
  EC_R_GROUP2PKPARAMETERS_FAILURE = 120;
  EC_R_I2D_ECPKPARAMETERS_FAILURE = 121;
  EC_R_INCOMPATIBLE_OBJECTS = 101;
  EC_R_INVALID_ARGUMENT = 112;
  EC_R_INVALID_COMPRESSED_POINT = 110;
  EC_R_INVALID_COMPRESSION_BIT = 109;
  EC_R_INVALID_CURVE = 141;
  EC_R_INVALID_DIGEST = 151;
  EC_R_INVALID_DIGEST_TYPE = 138;
  EC_R_INVALID_ENCODING = 102;
  EC_R_INVALID_FIELD = 103;
  EC_R_INVALID_FORM = 104;
  EC_R_INVALID_GROUP_ORDER = 122;
  EC_R_INVALID_KEY = 116;
  EC_R_INVALID_OUTPUT_LENGTH = 161;
  EC_R_INVALID_PEER_KEY = 133;
  EC_R_INVALID_PENTANOMIAL_BASIS = 132;
  EC_R_INVALID_PRIVATE_KEY = 123;
  EC_R_INVALID_TRINOMIAL_BASIS = 137;
  EC_R_KDF_PARAMETER_ERROR = 148;
  EC_R_KEYS_NOT_SET = 140;
  EC_R_LADDER_POST_FAILURE = 136;
  EC_R_LADDER_PRE_FAILURE = 153;
  EC_R_LADDER_STEP_FAILURE = 162;
  EC_R_MISSING_PARAMETERS = 124;
  EC_R_MISSING_PRIVATE_KEY = 125;
  EC_R_NEED_NEW_SETUP_VALUES = 157;
  EC_R_NOT_A_NIST_PRIME = 135;
  EC_R_NOT_IMPLEMENTED = 126;
  EC_R_NOT_INITIALIZED = 111;
  EC_R_NO_PARAMETERS_SET = 139;
  EC_R_NO_PRIVATE_VALUE = 154;
  EC_R_OPERATION_NOT_SUPPORTED = 152;
  EC_R_PASSED_NULL_PARAMETER = 134;
  EC_R_PEER_KEY_ERROR = 149;
  EC_R_PKPARAMETERS2GROUP_FAILURE = 127;
  EC_R_POINT_ARITHMETIC_FAILURE = 155;
  EC_R_POINT_AT_INFINITY = 106;
  EC_R_POINT_COORDINATES_BLIND_FAILURE = 163;
  EC_R_POINT_IS_NOT_ON_CURVE = 107;
  EC_R_RANDOM_NUMBER_GENERATION_FAILED = 158;
  EC_R_SHARED_INFO_ERROR = 150;
  EC_R_SLOT_FULL = 108;
  EC_R_UNDEFINED_GENERATOR = 113;
  EC_R_UNDEFINED_ORDER = 128;
  EC_R_UNKNOWN_COFACTOR = 164;
  EC_R_UNKNOWN_GROUP = 129;
  EC_R_UNKNOWN_ORDER = 114;
  EC_R_UNSUPPORTED_FIELD = 131;
  EC_R_WRONG_CURVE_PARAMETERS = 145;
  EC_R_WRONG_ORDER = 130;
  OPENSSL_ECC_MAX_FIELD_BITS = 661;
  OPENSSL_EC_EXPLICIT_CURVE = $000;
  OPENSSL_EC_NAMED_CURVE = $001;
  EC_PKEY_NO_PARAMETERS = $001;
  EC_PKEY_NO_PUBKEY = $002;
  EC_FLAG_NON_FIPS_ALLOW = $1;
  EC_FLAG_FIPS_CHECKED = $2;
  EC_FLAG_COFACTOR_ECDH = $1000;
  EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = (EVP_PKEY_ALG_CTRL+1);
  EVP_PKEY_CTRL_EC_PARAM_ENC = (EVP_PKEY_ALG_CTRL+2);
  EVP_PKEY_CTRL_EC_ECDH_COFACTOR = (EVP_PKEY_ALG_CTRL+3);
  EVP_PKEY_CTRL_EC_KDF_TYPE = (EVP_PKEY_ALG_CTRL+4);
  EVP_PKEY_CTRL_EC_KDF_MD = (EVP_PKEY_ALG_CTRL+5);
  EVP_PKEY_CTRL_GET_EC_KDF_MD = (EVP_PKEY_ALG_CTRL+6);
  EVP_PKEY_CTRL_EC_KDF_OUTLEN = (EVP_PKEY_ALG_CTRL+7);
  EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = (EVP_PKEY_ALG_CTRL+8);
  EVP_PKEY_CTRL_EC_KDF_UKM = (EVP_PKEY_ALG_CTRL+9);
  EVP_PKEY_CTRL_GET_EC_KDF_UKM = (EVP_PKEY_ALG_CTRL+10);
  EVP_PKEY_CTRL_SET1_ID = (EVP_PKEY_ALG_CTRL+11);
  EVP_PKEY_CTRL_GET1_ID = (EVP_PKEY_ALG_CTRL+12);
  EVP_PKEY_CTRL_GET1_ID_LEN = (EVP_PKEY_ALG_CTRL+13);
  EVP_PKEY_ECDH_KDF_NONE = 1;
  EVP_PKEY_ECDH_KDF_X9_63 = 2;
  EVP_PKEY_ECDH_KDF_X9_62 = EVP_PKEY_ECDH_KDF_X9_63;
  RSA_F_CHECK_PADDING_MD = 140;
  RSA_F_ENCODE_PKCS1 = 146;
  RSA_F_INT_RSA_VERIFY = 145;
  RSA_F_OLD_RSA_PRIV_DECODE = 147;
  RSA_F_PKEY_PSS_INIT = 165;
  RSA_F_PKEY_RSA_CTRL = 143;
  RSA_F_PKEY_RSA_CTRL_STR = 144;
  RSA_F_PKEY_RSA_SIGN = 142;
  RSA_F_PKEY_RSA_VERIFY = 149;
  RSA_F_PKEY_RSA_VERIFYRECOVER = 141;
  RSA_F_RSA_ALGOR_TO_MD = 156;
  RSA_F_RSA_BUILTIN_KEYGEN = 129;
  RSA_F_RSA_CHECK_KEY = 123;
  RSA_F_RSA_CHECK_KEY_EX = 160;
  RSA_F_RSA_CMS_DECRYPT = 159;
  RSA_F_RSA_CMS_VERIFY = 158;
  RSA_F_RSA_ITEM_VERIFY = 148;
  RSA_F_RSA_METH_DUP = 161;
  RSA_F_RSA_METH_NEW = 162;
  RSA_F_RSA_METH_SET1_NAME = 163;
  RSA_F_RSA_MGF1_TO_MD = 157;
  RSA_F_RSA_MULTIP_INFO_NEW = 166;
  RSA_F_RSA_NEW_METHOD = 106;
  RSA_F_RSA_NULL = 124;
  RSA_F_RSA_NULL_PRIVATE_DECRYPT = 132;
  RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 133;
  RSA_F_RSA_NULL_PUBLIC_DECRYPT = 134;
  RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 135;
  RSA_F_RSA_OSSL_PRIVATE_DECRYPT = 101;
  RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = 102;
  RSA_F_RSA_OSSL_PUBLIC_DECRYPT = 103;
  RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = 104;
  RSA_F_RSA_PADDING_ADD_NONE = 107;
  RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 121;
  RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = 154;
  RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 125;
  RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = 152;
  RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 108;
  RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 109;
  RSA_F_RSA_PADDING_ADD_SSLV23 = 110;
  RSA_F_RSA_PADDING_ADD_X931 = 127;
  RSA_F_RSA_PADDING_CHECK_NONE = 111;
  RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 122;
  RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = 153;
  RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 112;
  RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 113;
  RSA_F_RSA_PADDING_CHECK_SSLV23 = 114;
  RSA_F_RSA_PADDING_CHECK_X931 = 128;
  RSA_F_RSA_PARAM_DECODE = 164;
  RSA_F_RSA_PRINT = 115;
  RSA_F_RSA_PRINT_FP = 116;
  RSA_F_RSA_PRIV_DECODE = 150;
  RSA_F_RSA_PRIV_ENCODE = 138;
  RSA_F_RSA_PSS_GET_PARAM = 151;
  RSA_F_RSA_PSS_TO_CTX = 155;
  RSA_F_RSA_PUB_DECODE = 139;
  RSA_F_RSA_SETUP_BLINDING = 136;
  RSA_F_RSA_SIGN = 117;
  RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 118;
  RSA_F_RSA_VERIFY = 119;
  RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 120;
  RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = 126;
  RSA_F_SETUP_TBUF = 167;
  RSA_R_ALGORITHM_MISMATCH = 100;
  RSA_R_BAD_E_VALUE = 101;
  RSA_R_BAD_FIXED_HEADER_DECRYPT = 102;
  RSA_R_BAD_PAD_BYTE_COUNT = 103;
  RSA_R_BAD_SIGNATURE = 104;
  RSA_R_BLOCK_TYPE_IS_NOT_01 = 106;
  RSA_R_BLOCK_TYPE_IS_NOT_02 = 107;
  RSA_R_DATA_GREATER_THAN_MOD_LEN = 108;
  RSA_R_DATA_TOO_LARGE = 109;
  RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 110;
  RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 132;
  RSA_R_DATA_TOO_SMALL = 111;
  RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 122;
  RSA_R_DIGEST_DOES_NOT_MATCH = 158;
  RSA_R_DIGEST_NOT_ALLOWED = 145;
  RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 112;
  RSA_R_DMP1_NOT_CONGRUENT_TO_D = 124;
  RSA_R_DMQ1_NOT_CONGRUENT_TO_D = 125;
  RSA_R_D_E_NOT_CONGRUENT_TO_1 = 123;
  RSA_R_FIRST_OCTET_INVALID = 133;
  RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = 144;
  RSA_R_INVALID_DIGEST = 157;
  RSA_R_INVALID_DIGEST_LENGTH = 143;
  RSA_R_INVALID_HEADER = 137;
  RSA_R_INVALID_LABEL = 160;
  RSA_R_INVALID_MESSAGE_LENGTH = 131;
  RSA_R_INVALID_MGF1_MD = 156;
  RSA_R_INVALID_MULTI_PRIME_KEY = 167;
  RSA_R_INVALID_OAEP_PARAMETERS = 161;
  RSA_R_INVALID_PADDING = 138;
  RSA_R_INVALID_PADDING_MODE = 141;
  RSA_R_INVALID_PSS_PARAMETERS = 149;
  RSA_R_INVALID_PSS_SALTLEN = 146;
  RSA_R_INVALID_SALT_LENGTH = 150;
  RSA_R_INVALID_TRAILER = 139;
  RSA_R_INVALID_X931_DIGEST = 142;
  RSA_R_IQMP_NOT_INVERSE_OF_Q = 126;
  RSA_R_KEY_PRIME_NUM_INVALID = 165;
  RSA_R_KEY_SIZE_TOO_SMALL = 120;
  RSA_R_LAST_OCTET_INVALID = 134;
  RSA_R_MISSING_PRIVATE_KEY = 179;
  RSA_R_MGF1_DIGEST_NOT_ALLOWED = 152;
  RSA_R_MODULUS_TOO_LARGE = 105;
  RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R = 168;
  RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D = 169;
  RSA_R_MP_R_NOT_PRIME = 170;
  RSA_R_NO_PUBLIC_EXPONENT = 140;
  RSA_R_NULL_BEFORE_BLOCK_MISSING = 113;
  RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES = 172;
  RSA_R_N_DOES_NOT_EQUAL_P_Q = 127;
  RSA_R_OAEP_DECODING_ERROR = 121;
  RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 148;
  RSA_R_PADDING_CHECK_FAILED = 114;
  RSA_R_PKCS_DECODING_ERROR = 159;
  RSA_R_PSS_SALTLEN_TOO_SMALL = 164;
  RSA_R_P_NOT_PRIME = 128;
  RSA_R_Q_NOT_PRIME = 129;
  RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = 130;
  RSA_R_SLEN_CHECK_FAILED = 136;
  RSA_R_SLEN_RECOVERY_FAILED = 135;
  RSA_R_SSLV3_ROLLBACK_ATTACK = 115;
  RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 116;
  RSA_R_UNKNOWN_ALGORITHM_TYPE = 117;
  RSA_R_UNKNOWN_DIGEST = 166;
  RSA_R_UNKNOWN_MASK_DIGEST = 151;
  RSA_R_UNKNOWN_PADDING_TYPE = 118;
  RSA_R_UNSUPPORTED_ENCRYPTION_TYPE = 162;
  RSA_R_UNSUPPORTED_LABEL_SOURCE = 163;
  RSA_R_UNSUPPORTED_MASK_ALGORITHM = 153;
  RSA_R_UNSUPPORTED_MASK_PARAMETER = 154;
  RSA_R_UNSUPPORTED_SIGNATURE_TYPE = 155;
  RSA_R_VALUE_MISSING = 147;
  RSA_R_WRONG_SIGNATURE_LENGTH = 119;
  OPENSSL_RSA_MAX_MODULUS_BITS = 16384;
  OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = 1024;
  OPENSSL_RSA_SMALL_MODULUS_BITS = 3072;
  OPENSSL_RSA_MAX_PUBEXP_BITS = 64;
  RSA_3 = $3;
  RSA_F4 = $10001;
  RSA_ASN1_VERSION_DEFAULT = 0;
  RSA_ASN1_VERSION_MULTI = 1;
  RSA_DEFAULT_PRIME_NUM = 2;
  RSA_METHOD_FLAG_NO_CHECK = $0001;
  RSA_FLAG_CACHE_PUBLIC = $0002;
  RSA_FLAG_CACHE_PRIVATE = $0004;
  RSA_FLAG_BLINDING = $0008;
  RSA_FLAG_THREAD_SAFE = $0010;
  RSA_FLAG_EXT_PKEY = $0020;
  RSA_FLAG_NO_BLINDING = $0080;
  RSA_FLAG_NO_CONSTTIME = $0000;
  RSA_FLAG_NO_EXP_CONSTTIME = RSA_FLAG_NO_CONSTTIME;
  RSA_PSS_SALTLEN_DIGEST = -1;
  RSA_PSS_SALTLEN_AUTO = -2;
  RSA_PSS_SALTLEN_MAX = -3;
  RSA_PSS_SALTLEN_MAX_SIGN = -2;
  EVP_PKEY_CTRL_RSA_PADDING = (EVP_PKEY_ALG_CTRL+1);
  EVP_PKEY_CTRL_RSA_PSS_SALTLEN = (EVP_PKEY_ALG_CTRL+2);
  EVP_PKEY_CTRL_RSA_KEYGEN_BITS = (EVP_PKEY_ALG_CTRL+3);
  EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP = (EVP_PKEY_ALG_CTRL+4);
  EVP_PKEY_CTRL_RSA_MGF1_MD = (EVP_PKEY_ALG_CTRL+5);
  EVP_PKEY_CTRL_GET_RSA_PADDING = (EVP_PKEY_ALG_CTRL+6);
  EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN = (EVP_PKEY_ALG_CTRL+7);
  EVP_PKEY_CTRL_GET_RSA_MGF1_MD = (EVP_PKEY_ALG_CTRL+8);
  EVP_PKEY_CTRL_RSA_OAEP_MD = (EVP_PKEY_ALG_CTRL+9);
  EVP_PKEY_CTRL_RSA_OAEP_LABEL = (EVP_PKEY_ALG_CTRL+10);
  EVP_PKEY_CTRL_GET_RSA_OAEP_MD = (EVP_PKEY_ALG_CTRL+11);
  EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL = (EVP_PKEY_ALG_CTRL+12);
  EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES = (EVP_PKEY_ALG_CTRL+13);
  RSA_PKCS1_PADDING = 1;
  RSA_SSLV23_PADDING = 2;
  RSA_NO_PADDING = 3;
  RSA_PKCS1_OAEP_PADDING = 4;
  RSA_X931_PADDING = 5;
  RSA_PKCS1_PSS_PADDING = 6;
  RSA_PKCS1_PADDING_SIZE = 11;
  RSA_FLAG_FIPS_METHOD = $0400;
  RSA_FLAG_NON_FIPS_ALLOW = $0400;
  RSA_FLAG_CHECKED = $0800;
  DH_F_COMPUTE_KEY = 102;
  DH_F_DHPARAMS_PRINT_FP = 101;
  DH_F_DH_BUILTIN_GENPARAMS = 106;
  DH_F_DH_CHECK_EX = 121;
  DH_F_DH_CHECK_PARAMS_EX = 122;
  DH_F_DH_CHECK_PUB_KEY_EX = 123;
  DH_F_DH_CMS_DECRYPT = 114;
  DH_F_DH_CMS_SET_PEERKEY = 115;
  DH_F_DH_CMS_SET_SHARED_INFO = 116;
  DH_F_DH_METH_DUP = 117;
  DH_F_DH_METH_NEW = 118;
  DH_F_DH_METH_SET1_NAME = 119;
  DH_F_DH_NEW_BY_NID = 104;
  DH_F_DH_NEW_METHOD = 105;
  DH_F_DH_PARAM_DECODE = 107;
  DH_F_DH_PKEY_PUBLIC_CHECK = 124;
  DH_F_DH_PRIV_DECODE = 110;
  DH_F_DH_PRIV_ENCODE = 111;
  DH_F_DH_PUB_DECODE = 108;
  DH_F_DH_PUB_ENCODE = 109;
  DH_F_DO_DH_PRINT = 100;
  DH_F_GENERATE_KEY = 103;
  DH_F_PKEY_DH_CTRL_STR = 120;
  DH_F_PKEY_DH_DERIVE = 112;
  DH_F_PKEY_DH_INIT = 125;
  DH_F_PKEY_DH_KEYGEN = 113;
  DH_R_BAD_GENERATOR = 101;
  DH_R_BN_DECODE_ERROR = 109;
  DH_R_BN_ERROR = 106;
  DH_R_CHECK_INVALID_J_VALUE = 115;
  DH_R_CHECK_INVALID_Q_VALUE = 116;
  DH_R_CHECK_PUBKEY_INVALID = 122;
  DH_R_CHECK_PUBKEY_TOO_LARGE = 123;
  DH_R_CHECK_PUBKEY_TOO_SMALL = 124;
  DH_R_CHECK_P_NOT_PRIME = 117;
  DH_R_CHECK_P_NOT_SAFE_PRIME = 118;
  DH_R_CHECK_Q_NOT_PRIME = 119;
  DH_R_DECODE_ERROR = 104;
  DH_R_INVALID_PARAMETER_NAME = 110;
  DH_R_INVALID_PARAMETER_NID = 114;
  DH_R_INVALID_PUBKEY = 102;
  DH_R_KDF_PARAMETER_ERROR = 112;
  DH_R_KEYS_NOT_SET = 108;
  DH_R_MISSING_PUBKEY = 125;
  DH_R_MODULUS_TOO_LARGE = 103;
  DH_R_NOT_SUITABLE_GENERATOR = 120;
  DH_R_NO_PARAMETERS_SET = 107;
  DH_R_NO_PRIVATE_VALUE = 100;
  DH_R_PARAMETER_ENCODING_ERROR = 105;
  DH_R_PEER_KEY_ERROR = 111;
  DH_R_SHARED_INFO_ERROR = 113;
  DH_R_UNABLE_TO_CHECK_GENERATOR = 121;
  OPENSSL_DH_MAX_MODULUS_BITS = 10000;
  OPENSSL_DH_FIPS_MIN_MODULUS_BITS = 1024;
  DH_FLAG_CACHE_MONT_P = $01;
  DH_FLAG_NO_EXP_CONSTTIME = $00;
  DH_FLAG_FIPS_METHOD = $0400;
  DH_FLAG_NON_FIPS_ALLOW = $0400;
  DH_GENERATOR_2 = 2;
  DH_GENERATOR_5 = 5;
  DH_CHECK_P_NOT_PRIME = $01;
  DH_CHECK_P_NOT_SAFE_PRIME = $02;
  DH_UNABLE_TO_CHECK_GENERATOR = $04;
  DH_NOT_SUITABLE_GENERATOR = $08;
  DH_CHECK_Q_NOT_PRIME = $10;
  DH_CHECK_INVALID_Q_VALUE = $20;
  DH_CHECK_INVALID_J_VALUE = $40;
  DH_CHECK_PUBKEY_TOO_SMALL = $01;
  DH_CHECK_PUBKEY_TOO_LARGE = $02;
  DH_CHECK_PUBKEY_INVALID = $04;
  DH_CHECK_P_NOT_STRONG_PRIME = DH_CHECK_P_NOT_SAFE_PRIME;
  EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN = (EVP_PKEY_ALG_CTRL+1);
  EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR = (EVP_PKEY_ALG_CTRL+2);
  EVP_PKEY_CTRL_DH_RFC5114 = (EVP_PKEY_ALG_CTRL+3);
  EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN = (EVP_PKEY_ALG_CTRL+4);
  EVP_PKEY_CTRL_DH_PARAMGEN_TYPE = (EVP_PKEY_ALG_CTRL+5);
  EVP_PKEY_CTRL_DH_KDF_TYPE = (EVP_PKEY_ALG_CTRL+6);
  EVP_PKEY_CTRL_DH_KDF_MD = (EVP_PKEY_ALG_CTRL+7);
  EVP_PKEY_CTRL_GET_DH_KDF_MD = (EVP_PKEY_ALG_CTRL+8);
  EVP_PKEY_CTRL_DH_KDF_OUTLEN = (EVP_PKEY_ALG_CTRL+9);
  EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN = (EVP_PKEY_ALG_CTRL+10);
  EVP_PKEY_CTRL_DH_KDF_UKM = (EVP_PKEY_ALG_CTRL+11);
  EVP_PKEY_CTRL_GET_DH_KDF_UKM = (EVP_PKEY_ALG_CTRL+12);
  EVP_PKEY_CTRL_DH_KDF_OID = (EVP_PKEY_ALG_CTRL+13);
  EVP_PKEY_CTRL_GET_DH_KDF_OID = (EVP_PKEY_ALG_CTRL+14);
  EVP_PKEY_CTRL_DH_NID = (EVP_PKEY_ALG_CTRL+15);
  EVP_PKEY_CTRL_DH_PAD = (EVP_PKEY_ALG_CTRL+16);
  EVP_PKEY_DH_KDF_NONE = 1;
  EVP_PKEY_DH_KDF_X9_42 = 2;
  DSA_F_DSAPARAMS_PRINT = 100;
  DSA_F_DSAPARAMS_PRINT_FP = 101;
  DSA_F_DSA_BUILTIN_PARAMGEN = 125;
  DSA_F_DSA_BUILTIN_PARAMGEN2 = 126;
  DSA_F_DSA_DO_SIGN = 112;
  DSA_F_DSA_DO_VERIFY = 113;
  DSA_F_DSA_METH_DUP = 127;
  DSA_F_DSA_METH_NEW = 128;
  DSA_F_DSA_METH_SET1_NAME = 129;
  DSA_F_DSA_NEW_METHOD = 103;
  DSA_F_DSA_PARAM_DECODE = 119;
  DSA_F_DSA_PRINT_FP = 105;
  DSA_F_DSA_PRIV_DECODE = 115;
  DSA_F_DSA_PRIV_ENCODE = 116;
  DSA_F_DSA_PUB_DECODE = 117;
  DSA_F_DSA_PUB_ENCODE = 118;
  DSA_F_DSA_SIGN = 106;
  DSA_F_DSA_SIGN_SETUP = 107;
  DSA_F_DSA_SIG_NEW = 102;
  DSA_F_OLD_DSA_PRIV_DECODE = 122;
  DSA_F_PKEY_DSA_CTRL = 120;
  DSA_F_PKEY_DSA_CTRL_STR = 104;
  DSA_F_PKEY_DSA_KEYGEN = 121;
  DSA_R_BAD_Q_VALUE = 102;
  DSA_R_BN_DECODE_ERROR = 108;
  DSA_R_BN_ERROR = 109;
  DSA_R_DECODE_ERROR = 104;
  DSA_R_INVALID_DIGEST_TYPE = 106;
  DSA_R_INVALID_PARAMETERS = 112;
  DSA_R_MISSING_PARAMETERS = 101;
  DSA_R_MISSING_PRIVATE_KEY = 111;
  DSA_R_MODULUS_TOO_LARGE = 103;
  DSA_R_NO_PARAMETERS_SET = 107;
  DSA_R_PARAMETER_ENCODING_ERROR = 105;
  DSA_R_Q_NOT_PRIME = 113;
  DSA_R_SEED_LEN_SMALL = 110;
  OPENSSL_DSA_MAX_MODULUS_BITS = 10000;
  OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = 1024;
  DSA_FLAG_CACHE_MONT_P = $01;
  DSA_FLAG_NO_EXP_CONSTTIME = $00;
  DSA_FLAG_FIPS_METHOD = $0400;
  DSA_FLAG_NON_FIPS_ALLOW = $0400;
  DSA_FLAG_FIPS_CHECKED = $0800;
  DSS_prime_checks = 64;
  EVP_PKEY_CTRL_DSA_PARAMGEN_BITS = (EVP_PKEY_ALG_CTRL+1);
  EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS = (EVP_PKEY_ALG_CTRL+2);
  EVP_PKEY_CTRL_DSA_PARAMGEN_MD = (EVP_PKEY_ALG_CTRL+3);
  SHA_LBLOCK = 16;
  SHA_CBLOCK = (SHA_LBLOCK*4);
  SHA_LAST_BLOCK = (SHA_CBLOCK-8);
  SHA_DIGEST_LENGTH = 20;
  SHA256_CBLOCK = (SHA_LBLOCK*4);
  SHA224_DIGEST_LENGTH = 28;
  SHA256_DIGEST_LENGTH = 32;
  SHA384_DIGEST_LENGTH = 48;
  SHA512_DIGEST_LENGTH = 64;
  SHA512_CBLOCK = (SHA_LBLOCK*8);
  X509_F_ADD_CERT_DIR = 100;
  X509_F_BUILD_CHAIN = 106;
  X509_F_BY_FILE_CTRL = 101;
  X509_F_CHECK_NAME_CONSTRAINTS = 149;
  X509_F_CHECK_POLICY = 145;
  X509_F_DANE_I2D = 107;
  X509_F_DIR_CTRL = 102;
  X509_F_GET_CERT_BY_SUBJECT = 103;
  X509_F_I2D_X509_AUX = 151;
  X509_F_LOOKUP_CERTS_SK = 152;
  X509_F_NETSCAPE_SPKI_B64_DECODE = 129;
  X509_F_NETSCAPE_SPKI_B64_ENCODE = 130;
  X509_F_NEW_DIR = 153;
  X509_F_X509AT_ADD1_ATTR = 135;
  X509_F_X509V3_ADD_EXT = 104;
  X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 136;
  X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 137;
  X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 140;
  X509_F_X509_ATTRIBUTE_GET0_DATA = 139;
  X509_F_X509_ATTRIBUTE_SET1_DATA = 138;
  X509_F_X509_CHECK_PRIVATE_KEY = 128;
  X509_F_X509_CRL_DIFF = 105;
  X509_F_X509_CRL_METHOD_NEW = 154;
  X509_F_X509_CRL_PRINT_FP = 147;
  X509_F_X509_EXTENSION_CREATE_BY_NID = 108;
  X509_F_X509_EXTENSION_CREATE_BY_OBJ = 109;
  X509_F_X509_GET_PUBKEY_PARAMETERS = 110;
  X509_F_X509_LOAD_CERT_CRL_FILE = 132;
  X509_F_X509_LOAD_CERT_FILE = 111;
  X509_F_X509_LOAD_CRL_FILE = 112;
  X509_F_X509_LOOKUP_METH_NEW = 160;
  X509_F_X509_LOOKUP_NEW = 155;
  X509_F_X509_NAME_ADD_ENTRY = 113;
  X509_F_X509_NAME_CANON = 156;
  X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 114;
  X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 131;
  X509_F_X509_NAME_ENTRY_SET_OBJECT = 115;
  X509_F_X509_NAME_ONELINE = 116;
  X509_F_X509_NAME_PRINT = 117;
  X509_F_X509_OBJECT_NEW = 150;
  X509_F_X509_PRINT_EX_FP = 118;
  X509_F_X509_PUBKEY_DECODE = 148;
  X509_F_X509_PUBKEY_GET0 = 119;
  X509_F_X509_PUBKEY_SET = 120;
  X509_F_X509_REQ_CHECK_PRIVATE_KEY = 144;
  X509_F_X509_REQ_PRINT_EX = 121;
  X509_F_X509_REQ_PRINT_FP = 122;
  X509_F_X509_REQ_TO_X509 = 123;
  X509_F_X509_STORE_ADD_CERT = 124;
  X509_F_X509_STORE_ADD_CRL = 125;
  X509_F_X509_STORE_ADD_LOOKUP = 157;
  X509_F_X509_STORE_CTX_GET1_ISSUER = 146;
  X509_F_X509_STORE_CTX_INIT = 143;
  X509_F_X509_STORE_CTX_NEW = 142;
  X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 134;
  X509_F_X509_STORE_NEW = 158;
  X509_F_X509_TO_X509_REQ = 126;
  X509_F_X509_TRUST_ADD = 133;
  X509_F_X509_TRUST_SET = 141;
  X509_F_X509_VERIFY_CERT = 127;
  X509_F_X509_VERIFY_PARAM_NEW = 159;
  X509_R_AKID_MISMATCH = 110;
  X509_R_BAD_SELECTOR = 133;
  X509_R_BAD_X509_FILETYPE = 100;
  X509_R_BASE64_DECODE_ERROR = 118;
  X509_R_CANT_CHECK_DH_KEY = 114;
  X509_R_CERT_ALREADY_IN_HASH_TABLE = 101;
  X509_R_CRL_ALREADY_DELTA = 127;
  X509_R_CRL_VERIFY_FAILURE = 131;
  X509_R_IDP_MISMATCH = 128;
  X509_R_INVALID_ATTRIBUTES = 138;
  X509_R_INVALID_DIRECTORY = 113;
  X509_R_INVALID_FIELD_NAME = 119;
  X509_R_INVALID_TRUST = 123;
  X509_R_ISSUER_MISMATCH = 129;
  X509_R_KEY_TYPE_MISMATCH = 115;
  X509_R_KEY_VALUES_MISMATCH = 116;
  X509_R_LOADING_CERT_DIR = 103;
  X509_R_LOADING_DEFAULTS = 104;
  X509_R_METHOD_NOT_SUPPORTED = 124;
  X509_R_NAME_TOO_LONG = 134;
  X509_R_NEWER_CRL_NOT_NEWER = 132;
  X509_R_NO_CERTIFICATE_FOUND = 135;
  X509_R_NO_CERTIFICATE_OR_CRL_FOUND = 136;
  X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 105;
  X509_R_NO_CRL_FOUND = 137;
  X509_R_NO_CRL_NUMBER = 130;
  X509_R_PUBLIC_KEY_DECODE_ERROR = 125;
  X509_R_PUBLIC_KEY_ENCODE_ERROR = 126;
  X509_R_SHOULD_RETRY = 106;
  X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = 107;
  X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = 108;
  X509_R_UNKNOWN_KEY_TYPE = 117;
  X509_R_UNKNOWN_NID = 109;
  X509_R_UNKNOWN_PURPOSE_ID = 121;
  X509_R_UNKNOWN_TRUST_ID = 120;
  X509_R_UNSUPPORTED_ALGORITHM = 111;
  X509_R_WRONG_LOOKUP_TYPE = 112;
  X509_R_WRONG_TYPE = 122;
  X509_SIG_INFO_VALID = $1;
  X509_SIG_INFO_TLS = $2;
  X509_FILETYPE_PEM = 1;
  X509_FILETYPE_ASN1 = 2;
  X509_FILETYPE_DEFAULT = 3;
  X509v3_KU_DIGITAL_SIGNATURE = $0080;
  X509v3_KU_NON_REPUDIATION = $0040;
  X509v3_KU_KEY_ENCIPHERMENT = $0020;
  X509v3_KU_DATA_ENCIPHERMENT = $0010;
  X509v3_KU_KEY_AGREEMENT = $0008;
  X509v3_KU_KEY_CERT_SIGN = $0004;
  X509v3_KU_CRL_SIGN = $0002;
  X509v3_KU_ENCIPHER_ONLY = $0001;
  X509v3_KU_DECIPHER_ONLY = $8000;
  X509v3_KU_UNDEF = $ffff;
  X509_EX_V_NETSCAPE_HACK = $8000;
  X509_EX_V_INIT = $0001;
  X509_TRUST_DEFAULT = 0;
  X509_TRUST_COMPAT = 1;
  X509_TRUST_SSL_CLIENT = 2;
  X509_TRUST_SSL_SERVER = 3;
  X509_TRUST_EMAIL = 4;
  X509_TRUST_OBJECT_SIGN = 5;
  X509_TRUST_OCSP_SIGN = 6;
  X509_TRUST_OCSP_REQUEST = 7;
  X509_TRUST_TSA = 8;
  X509_TRUST_MIN = 1;
  X509_TRUST_MAX = 8;
  X509_TRUST_DYNAMIC = (1 shl 0);
  X509_TRUST_DYNAMIC_NAME = (1 shl 1);
  X509_TRUST_NO_SS_COMPAT = (1 shl 2);
  X509_TRUST_DO_SS_COMPAT = (1 shl 3);
  X509_TRUST_OK_ANY_EKU = (1 shl 4);
  X509_TRUST_TRUSTED = 1;
  X509_TRUST_REJECTED = 2;
  X509_TRUST_UNTRUSTED = 3;
  X509_FLAG_COMPAT = 0;
  X509_FLAG_NO_HEADER = 1;
  X509_FLAG_NO_VERSION = (1 shl 1);
  X509_FLAG_NO_SERIAL = (1 shl 2);
  X509_FLAG_NO_SIGNAME = (1 shl 3);
  X509_FLAG_NO_ISSUER = (1 shl 4);
  X509_FLAG_NO_VALIDITY = (1 shl 5);
  X509_FLAG_NO_SUBJECT = (1 shl 6);
  X509_FLAG_NO_PUBKEY = (1 shl 7);
  X509_FLAG_NO_EXTENSIONS = (1 shl 8);
  X509_FLAG_NO_SIGDUMP = (1 shl 9);
  X509_FLAG_NO_AUX = (1 shl 10);
  X509_FLAG_NO_ATTRIBUTES = (1 shl 11);
  X509_FLAG_NO_IDS = (1 shl 12);
  XN_FLAG_SEP_MASK = ($f shl 16);
  XN_FLAG_COMPAT = 0;
  XN_FLAG_SEP_COMMA_PLUS = (1 shl 16);
  XN_FLAG_SEP_CPLUS_SPC = (2 shl 16);
  XN_FLAG_SEP_SPLUS_SPC = (3 shl 16);
  XN_FLAG_SEP_MULTILINE = (4 shl 16);
  XN_FLAG_DN_REV = (1 shl 20);
  XN_FLAG_FN_MASK = ($3 shl 21);
  XN_FLAG_FN_SN = 0;
  XN_FLAG_FN_LN = (1 shl 21);
  XN_FLAG_FN_OID = (2 shl 21);
  XN_FLAG_FN_NONE = (3 shl 21);
  XN_FLAG_SPC_EQ = (1 shl 23);
  XN_FLAG_DUMP_UNKNOWN_FIELDS = (1 shl 24);
  XN_FLAG_FN_ALIGN = (1 shl 25);
  XN_FLAG_RFC2253 = (ASN1_STRFLGS_RFC2253 or XN_FLAG_SEP_COMMA_PLUS or XN_FLAG_DN_REV or XN_FLAG_FN_SN or XN_FLAG_DUMP_UNKNOWN_FIELDS);
  XN_FLAG_ONELINE = (ASN1_STRFLGS_RFC2253 or ASN1_STRFLGS_ESC_QUOTE or XN_FLAG_SEP_CPLUS_SPC or XN_FLAG_SPC_EQ or XN_FLAG_FN_SN);
  XN_FLAG_MULTILINE = (ASN1_STRFLGS_ESC_CTRL or ASN1_STRFLGS_ESC_MSB or XN_FLAG_SEP_MULTILINE or XN_FLAG_SPC_EQ or XN_FLAG_FN_LN or XN_FLAG_FN_ALIGN);
  LH_LOAD_MULT = 256;
//  _LHASH = OPENSSL_LHASH;
//  LHASH_NODE = OPENSSL_LH_NODE;
  X509_LU_RETRY = -1;
  X509_LU_FAIL = 0;
  X509_L_FILE_LOAD = 1;
  X509_L_ADD_DIR = 2;
  X509_V_OK = 0;
  X509_V_ERR_UNSPECIFIED = 1;
  X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2;
  X509_V_ERR_UNABLE_TO_GET_CRL = 3;
  X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4;
  X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5;
  X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6;
  X509_V_ERR_CERT_SIGNATURE_FAILURE = 7;
  X509_V_ERR_CRL_SIGNATURE_FAILURE = 8;
  X509_V_ERR_CERT_NOT_YET_VALID = 9;
  X509_V_ERR_CERT_HAS_EXPIRED = 10;
  X509_V_ERR_CRL_NOT_YET_VALID = 11;
  X509_V_ERR_CRL_HAS_EXPIRED = 12;
  X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13;
  X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14;
  X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15;
  X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16;
  X509_V_ERR_OUT_OF_MEM = 17;
  X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18;
  X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19;
  X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20;
  X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21;
  X509_V_ERR_CERT_CHAIN_TOO_LONG = 22;
  X509_V_ERR_CERT_REVOKED = 23;
  X509_V_ERR_INVALID_CA = 24;
  X509_V_ERR_PATH_LENGTH_EXCEEDED = 25;
  X509_V_ERR_INVALID_PURPOSE = 26;
  X509_V_ERR_CERT_UNTRUSTED = 27;
  X509_V_ERR_CERT_REJECTED = 28;
  X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29;
  X509_V_ERR_AKID_SKID_MISMATCH = 30;
  X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31;
  X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32;
  X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33;
  X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34;
  X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35;
  X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36;
  X509_V_ERR_INVALID_NON_CA = 37;
  X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38;
  X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39;
  X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40;
  X509_V_ERR_INVALID_EXTENSION = 41;
  X509_V_ERR_INVALID_POLICY_EXTENSION = 42;
  X509_V_ERR_NO_EXPLICIT_POLICY = 43;
  X509_V_ERR_DIFFERENT_CRL_SCOPE = 44;
  X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 45;
  X509_V_ERR_UNNESTED_RESOURCE = 46;
  X509_V_ERR_PERMITTED_VIOLATION = 47;
  X509_V_ERR_EXCLUDED_VIOLATION = 48;
  X509_V_ERR_SUBTREE_MINMAX = 49;
  X509_V_ERR_APPLICATION_VERIFICATION = 50;
  X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 51;
  X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 52;
  X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 53;
  X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 54;
  X509_V_ERR_PATH_LOOP = 55;
  X509_V_ERR_SUITE_B_INVALID_VERSION = 56;
  X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 57;
  X509_V_ERR_SUITE_B_INVALID_CURVE = 58;
  X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 59;
  X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 60;
  X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 61;
  X509_V_ERR_HOSTNAME_MISMATCH = 62;
  X509_V_ERR_EMAIL_MISMATCH = 63;
  X509_V_ERR_IP_ADDRESS_MISMATCH = 64;
  X509_V_ERR_DANE_NO_MATCH = 65;
  X509_V_ERR_EE_KEY_TOO_SMALL = 66;
  X509_V_ERR_CA_KEY_TOO_SMALL = 67;
  X509_V_ERR_CA_MD_TOO_WEAK = 68;
  X509_V_ERR_INVALID_CALL = 69;
  X509_V_ERR_STORE_LOOKUP = 70;
  X509_V_ERR_NO_VALID_SCTS = 71;
  X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION = 72;
  X509_V_ERR_OCSP_VERIFY_NEEDED = 73;
  X509_V_ERR_OCSP_VERIFY_FAILED = 74;
  X509_V_ERR_OCSP_CERT_UNKNOWN = 75;
  X509_V_FLAG_CB_ISSUER_CHECK = $0;
  X509_V_FLAG_USE_CHECK_TIME = $2;
  X509_V_FLAG_CRL_CHECK = $4;
  X509_V_FLAG_CRL_CHECK_ALL = $8;
  X509_V_FLAG_IGNORE_CRITICAL = $10;
  X509_V_FLAG_X509_STRICT = $20;
  X509_V_FLAG_ALLOW_PROXY_CERTS = $40;
  X509_V_FLAG_POLICY_CHECK = $80;
  X509_V_FLAG_EXPLICIT_POLICY = $100;
  X509_V_FLAG_INHIBIT_ANY = $200;
  X509_V_FLAG_INHIBIT_MAP = $400;
  X509_V_FLAG_NOTIFY_POLICY = $800;
  X509_V_FLAG_EXTENDED_CRL_SUPPORT = $1000;
  X509_V_FLAG_USE_DELTAS = $2000;
  X509_V_FLAG_CHECK_SS_SIGNATURE = $4000;
  X509_V_FLAG_TRUSTED_FIRST = $8000;
  X509_V_FLAG_SUITEB_128_LOS_ONLY = $10000;
  X509_V_FLAG_SUITEB_192_LOS = $20000;
  X509_V_FLAG_SUITEB_128_LOS = $30000;
  X509_V_FLAG_PARTIAL_CHAIN = $80000;
  X509_V_FLAG_NO_ALT_CHAINS = $100000;
  X509_V_FLAG_NO_CHECK_TIME = $200000;
  X509_VP_FLAG_DEFAULT = $1;
  X509_VP_FLAG_OVERWRITE = $2;
  X509_VP_FLAG_RESET_FLAGS = $4;
  X509_VP_FLAG_LOCKED = $8;
  X509_VP_FLAG_ONCE = $10;
  X509_V_FLAG_POLICY_MASK = (X509_V_FLAG_POLICY_CHECK or X509_V_FLAG_EXPLICIT_POLICY or X509_V_FLAG_INHIBIT_ANY or X509_V_FLAG_INHIBIT_MAP);
  DANE_FLAG_NO_DANE_EE_NAMECHECKS = (1 shl 0);
  X509_PCY_TREE_FAILURE = -2;
  X509_PCY_TREE_INVALID = -1;
  X509_PCY_TREE_INTERNAL = 0;
  X509_PCY_TREE_VALID = 1;
  X509_PCY_TREE_EMPTY = 2;
  X509_PCY_TREE_EXPLICIT = 4;
  PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = 136;
  PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = 135;
  PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 118;
  PKCS7_F_PKCS7_ADD_CERTIFICATE = 100;
  PKCS7_F_PKCS7_ADD_CRL = 101;
  PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 102;
  PKCS7_F_PKCS7_ADD_SIGNATURE = 131;
  PKCS7_F_PKCS7_ADD_SIGNER = 103;
  PKCS7_F_PKCS7_BIO_ADD_DIGEST = 125;
  PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = 138;
  PKCS7_F_PKCS7_CTRL = 104;
  PKCS7_F_PKCS7_DATADECODE = 112;
  PKCS7_F_PKCS7_DATAFINAL = 128;
  PKCS7_F_PKCS7_DATAINIT = 105;
  PKCS7_F_PKCS7_DATAVERIFY = 107;
  PKCS7_F_PKCS7_DECRYPT = 114;
  PKCS7_F_PKCS7_DECRYPT_RINFO = 133;
  PKCS7_F_PKCS7_ENCODE_RINFO = 132;
  PKCS7_F_PKCS7_ENCRYPT = 115;
  PKCS7_F_PKCS7_FINAL = 134;
  PKCS7_F_PKCS7_FIND_DIGEST = 127;
  PKCS7_F_PKCS7_GET0_SIGNERS = 124;
  PKCS7_F_PKCS7_RECIP_INFO_SET = 130;
  PKCS7_F_PKCS7_SET_CIPHER = 108;
  PKCS7_F_PKCS7_SET_CONTENT = 109;
  PKCS7_F_PKCS7_SET_DIGEST = 126;
  PKCS7_F_PKCS7_SET_TYPE = 110;
  PKCS7_F_PKCS7_SIGN = 116;
  PKCS7_F_PKCS7_SIGNATUREVERIFY = 113;
  PKCS7_F_PKCS7_SIGNER_INFO_SET = 129;
  PKCS7_F_PKCS7_SIGNER_INFO_SIGN = 139;
  PKCS7_F_PKCS7_SIGN_ADD_SIGNER = 137;
  PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 119;
  PKCS7_F_PKCS7_VERIFY = 117;
  PKCS7_R_CERTIFICATE_VERIFY_ERROR = 117;
  PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 144;
  PKCS7_R_CIPHER_NOT_INITIALIZED = 116;
  PKCS7_R_CONTENT_AND_DATA_PRESENT = 118;
  PKCS7_R_CTRL_ERROR = 152;
  PKCS7_R_DECRYPT_ERROR = 119;
  PKCS7_R_DIGEST_FAILURE = 101;
  PKCS7_R_ENCRYPTION_CTRL_FAILURE = 149;
  PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 150;
  PKCS7_R_ERROR_ADDING_RECIPIENT = 120;
  PKCS7_R_ERROR_SETTING_CIPHER = 121;
  PKCS7_R_INVALID_NULL_POINTER = 143;
  PKCS7_R_INVALID_SIGNED_DATA_TYPE = 155;
  PKCS7_R_NO_CONTENT = 122;
  PKCS7_R_NO_DEFAULT_DIGEST = 151;
  PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND = 154;
  PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = 115;
  PKCS7_R_NO_SIGNATURES_ON_DATA = 123;
  PKCS7_R_NO_SIGNERS = 142;
  PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = 104;
  PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = 124;
  PKCS7_R_PKCS7_ADD_SIGNER_ERROR = 153;
  PKCS7_R_PKCS7_DATASIGN = 145;
  PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 127;
  PKCS7_R_SIGNATURE_FAILURE = 105;
  PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = 128;
  PKCS7_R_SIGNING_CTRL_FAILURE = 147;
  PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 148;
  PKCS7_R_SMIME_TEXT_ERROR = 129;
  PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = 106;
  PKCS7_R_UNABLE_TO_FIND_MEM_BIO = 107;
  PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = 108;
  PKCS7_R_UNKNOWN_DIGEST_TYPE = 109;
  PKCS7_R_UNKNOWN_OPERATION = 110;
  PKCS7_R_UNSUPPORTED_CIPHER_TYPE = 111;
  PKCS7_R_UNSUPPORTED_CONTENT_TYPE = 112;
  PKCS7_R_WRONG_CONTENT_TYPE = 113;
  PKCS7_R_WRONG_PKCS7_TYPE = 114;
  PKCS7_S_HEADER = 0;
  PKCS7_S_BODY = 1;
  PKCS7_S_TAIL = 2;
  PKCS7_OP_SET_DETACHED_SIGNATURE = 1;
  PKCS7_OP_GET_DETACHED_SIGNATURE = 2;
  PKCS7_TEXT = $1;
  PKCS7_NOCERTS = $2;
  PKCS7_NOSIGS = $4;
  PKCS7_NOCHAIN = $8;
  PKCS7_NOINTERN = $10;
  PKCS7_NOVERIFY = $20;
  PKCS7_DETACHED = $40;
  PKCS7_BINARY = $80;
  PKCS7_NOATTR = $100;
  PKCS7_NOSMIMECAP = $200;
  PKCS7_NOOLDMIMETYPE = $400;
  PKCS7_CRLFEOL = $800;
  _PKCS7_STREAM = $1000;
  PKCS7_NOCRL = $2000;
  PKCS7_PARTIAL = $4000;
  PKCS7_REUSE_DIGEST = $8000;
  PKCS7_NO_DUAL_CONTENT = $10000;
  _SMIME_TEXT = PKCS7_TEXT;
  SMIME_NOCERTS = PKCS7_NOCERTS;
  SMIME_NOSIGS = PKCS7_NOSIGS;
  SMIME_NOCHAIN = PKCS7_NOCHAIN;
  SMIME_NOINTERN = PKCS7_NOINTERN;
  SMIME_NOVERIFY = PKCS7_NOVERIFY;
  SMIME_DETACHED = PKCS7_DETACHED;
  SMIME_BINARY = PKCS7_BINARY;
  SMIME_NOATTR = PKCS7_NOATTR;
  SMIME_ASCIICRLF = $80000;
  X509_EXT_PACK_UNKNOWN = 1;
  X509_EXT_PACK_STRING = 2;
  CONF_F_CONF_DUMP_FP = 104;
  CONF_F_CONF_LOAD = 100;
  CONF_F_CONF_LOAD_FP = 103;
  CONF_F_CONF_PARSE_LIST = 119;
  CONF_F_DEF_LOAD = 120;
  CONF_F_DEF_LOAD_BIO = 121;
  CONF_F_GET_NEXT_FILE = 107;
  CONF_F_MODULE_ADD = 122;
  CONF_F_MODULE_INIT = 115;
  CONF_F_MODULE_LOAD_DSO = 117;
  CONF_F_MODULE_RUN = 118;
  CONF_F_NCONF_DUMP_BIO = 105;
  CONF_F_NCONF_DUMP_FP = 106;
  CONF_F_NCONF_GET_NUMBER_E = 112;
  CONF_F_NCONF_GET_SECTION = 108;
  CONF_F_NCONF_GET_STRING = 109;
  CONF_F_NCONF_LOAD = 113;
  CONF_F_NCONF_LOAD_BIO = 110;
  CONF_F_NCONF_LOAD_FP = 114;
  CONF_F_NCONF_NEW = 111;
  CONF_F_PROCESS_INCLUDE = 116;
  CONF_F_SSL_MODULE_INIT = 123;
  CONF_F_STR_COPY = 101;
  CONF_R_ERROR_LOADING_DSO = 110;
  CONF_R_LIST_CANNOT_BE_NULL = 115;
  CONF_R_MISSING_CLOSE_SQUARE_BRACKET = 100;
  CONF_R_MISSING_EQUAL_SIGN = 101;
  CONF_R_MISSING_INIT_FUNCTION = 112;
  CONF_R_MODULE_INITIALIZATION_ERROR = 109;
  CONF_R_NO_CLOSE_BRACE = 102;
  CONF_R_NO_CONF = 105;
  CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE = 106;
  CONF_R_NO_SECTION = 107;
  CONF_R_NO_SUCH_FILE = 114;
  CONF_R_NO_VALUE = 108;
  CONF_R_NUMBER_TOO_LARGE = 121;
  CONF_R_RECURSIVE_DIRECTORY_INCLUDE = 111;
  CONF_R_SSL_COMMAND_SECTION_EMPTY = 117;
  CONF_R_SSL_COMMAND_SECTION_NOT_FOUND = 118;
  CONF_R_SSL_SECTION_EMPTY = 119;
  CONF_R_SSL_SECTION_NOT_FOUND = 120;
  CONF_R_UNABLE_TO_CREATE_NEW_SECTION = 103;
  CONF_R_UNKNOWN_MODULE_NAME = 113;
  CONF_R_VARIABLE_EXPANSION_TOO_LONG = 116;
  CONF_R_VARIABLE_HAS_NO_VALUE = 104;
  CONF_MFLAGS_IGNORE_ERRORS = $1;
  CONF_MFLAGS_IGNORE_RETURN_CODES = $2;
  CONF_MFLAGS_SILENT = $4;
  CONF_MFLAGS_NO_DSO = $8;
  CONF_MFLAGS_IGNORE_MISSING_FILE = $10;
  CONF_MFLAGS_DEFAULT_SECTION = $20;
  X509V3_F_A2I_GENERAL_NAME = 164;
  X509V3_F_ADDR_VALIDATE_PATH_INTERNAL = 166;
  X509V3_F_ASIDENTIFIERCHOICE_CANONIZE = 161;
  X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL = 162;
  X509V3_F_BIGNUM_TO_STRING = 167;
  X509V3_F_COPY_EMAIL = 122;
  X509V3_F_COPY_ISSUER = 123;
  X509V3_F_DO_DIRNAME = 144;
  X509V3_F_DO_EXT_I2D = 135;
  X509V3_F_DO_EXT_NCONF = 151;
  X509V3_F_GNAMES_FROM_SECTNAME = 156;
  X509V3_F_I2S_ASN1_ENUMERATED = 121;
  X509V3_F_I2S_ASN1_IA5STRING = 149;
  X509V3_F_I2S_ASN1_INTEGER = 120;
  X509V3_F_I2V_AUTHORITY_INFO_ACCESS = 138;
  X509V3_F_LEVEL_ADD_NODE = 168;
  X509V3_F_NOTICE_SECTION = 132;
  X509V3_F_NREF_NOS = 133;
  X509V3_F_POLICY_CACHE_CREATE = 169;
  X509V3_F_POLICY_CACHE_NEW = 170;
  X509V3_F_POLICY_DATA_NEW = 171;
  X509V3_F_POLICY_SECTION = 131;
  X509V3_F_PROCESS_PCI_VALUE = 150;
  X509V3_F_R2I_CERTPOL = 130;
  X509V3_F_R2I_PCI = 155;
  X509V3_F_S2I_ASN1_IA5STRING = 100;
  X509V3_F_S2I_ASN1_INTEGER = 108;
  X509V3_F_S2I_ASN1_OCTET_STRING = 112;
  X509V3_F_S2I_SKEY_ID = 115;
  X509V3_F_SET_DIST_POINT_NAME = 158;
  X509V3_F_SXNET_ADD_ID_ASC = 125;
  X509V3_F_SXNET_ADD_ID_INTEGER = 126;
  X509V3_F_SXNET_ADD_ID_ULONG = 127;
  X509V3_F_SXNET_GET_ID_ASC = 128;
  X509V3_F_SXNET_GET_ID_ULONG = 129;
  X509V3_F_TREE_INIT = 172;
  X509V3_F_V2I_ASIDENTIFIERS = 163;
  X509V3_F_V2I_ASN1_BIT_STRING = 101;
  X509V3_F_V2I_AUTHORITY_INFO_ACCESS = 139;
  X509V3_F_V2I_AUTHORITY_KEYID = 119;
  X509V3_F_V2I_BASIC_CONSTRAINTS = 102;
  X509V3_F_V2I_CRLD = 134;
  X509V3_F_V2I_EXTENDED_KEY_USAGE = 103;
  X509V3_F_V2I_GENERAL_NAMES = 118;
  X509V3_F_V2I_GENERAL_NAME_EX = 117;
  X509V3_F_V2I_IDP = 157;
  X509V3_F_V2I_IPADDRBLOCKS = 159;
  X509V3_F_V2I_ISSUER_ALT = 153;
  X509V3_F_V2I_NAME_CONSTRAINTS = 147;
  X509V3_F_V2I_POLICY_CONSTRAINTS = 146;
  X509V3_F_V2I_POLICY_MAPPINGS = 145;
  X509V3_F_V2I_SUBJECT_ALT = 154;
  X509V3_F_V2I_TLS_FEATURE = 165;
  X509V3_F_V3_GENERIC_EXTENSION = 116;
  X509V3_F_X509V3_ADD1_I2D = 140;
  X509V3_F_X509V3_ADD_VALUE = 105;
  X509V3_F_X509V3_EXT_ADD = 104;
  X509V3_F_X509V3_EXT_ADD_ALIAS = 106;
  X509V3_F_X509V3_EXT_I2D = 136;
  X509V3_F_X509V3_EXT_NCONF = 152;
  X509V3_F_X509V3_GET_SECTION = 142;
  X509V3_F_X509V3_GET_STRING = 143;
  X509V3_F_X509V3_GET_VALUE_BOOL = 110;
  X509V3_F_X509V3_PARSE_LIST = 109;
  X509V3_F_X509_PURPOSE_ADD = 137;
  X509V3_F_X509_PURPOSE_SET = 141;
  X509V3_R_BAD_IP_ADDRESS = 118;
  X509V3_R_BAD_OBJECT = 119;
  X509V3_R_BN_DEC2BN_ERROR = 100;
  X509V3_R_BN_TO_ASN1_INTEGER_ERROR = 101;
  X509V3_R_DIRNAME_ERROR = 149;
  X509V3_R_DISTPOINT_ALREADY_SET = 160;
  X509V3_R_DUPLICATE_ZONE_ID = 133;
  X509V3_R_ERROR_CONVERTING_ZONE = 131;
  X509V3_R_ERROR_CREATING_EXTENSION = 144;
  X509V3_R_ERROR_IN_EXTENSION = 128;
  X509V3_R_EXPECTED_A_SECTION_NAME = 137;
  X509V3_R_EXTENSION_EXISTS = 145;
  X509V3_R_EXTENSION_NAME_ERROR = 115;
  X509V3_R_EXTENSION_NOT_FOUND = 102;
  X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED = 103;
  X509V3_R_EXTENSION_VALUE_ERROR = 116;
  X509V3_R_ILLEGAL_EMPTY_EXTENSION = 151;
  X509V3_R_INCORRECT_POLICY_SYNTAX_TAG = 152;
  X509V3_R_INVALID_ASNUMBER = 162;
  X509V3_R_INVALID_ASRANGE = 163;
  X509V3_R_INVALID_BOOLEAN_STRING = 104;
  X509V3_R_INVALID_EXTENSION_STRING = 105;
  X509V3_R_INVALID_INHERITANCE = 165;
  X509V3_R_INVALID_IPADDRESS = 166;
  X509V3_R_INVALID_MULTIPLE_RDNS = 161;
  X509V3_R_INVALID_NAME = 106;
  X509V3_R_INVALID_NULL_ARGUMENT = 107;
  X509V3_R_INVALID_NULL_NAME = 108;
  X509V3_R_INVALID_NULL_VALUE = 109;
  X509V3_R_INVALID_NUMBER = 140;
  X509V3_R_INVALID_NUMBERS = 141;
  X509V3_R_INVALID_OBJECT_IDENTIFIER = 110;
  X509V3_R_INVALID_OPTION = 138;
  X509V3_R_INVALID_POLICY_IDENTIFIER = 134;
  X509V3_R_INVALID_PROXY_POLICY_SETTING = 153;
  X509V3_R_INVALID_PURPOSE = 146;
  X509V3_R_INVALID_SAFI = 164;
  X509V3_R_INVALID_SECTION = 135;
  X509V3_R_INVALID_SYNTAX = 143;
  X509V3_R_ISSUER_DECODE_ERROR = 126;
  X509V3_R_MISSING_VALUE = 124;
  X509V3_R_NEED_ORGANIZATION_AND_NUMBERS = 142;
  X509V3_R_NO_CONFIG_DATABASE = 136;
  X509V3_R_NO_ISSUER_CERTIFICATE = 121;
  X509V3_R_NO_ISSUER_DETAILS = 127;
  X509V3_R_NO_POLICY_IDENTIFIER = 139;
  X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED = 154;
  X509V3_R_NO_PUBLIC_KEY = 114;
  X509V3_R_NO_SUBJECT_DETAILS = 125;
  X509V3_R_OPERATION_NOT_DEFINED = 148;
  X509V3_R_OTHERNAME_ERROR = 147;
  X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED = 155;
  X509V3_R_POLICY_PATH_LENGTH = 156;
  X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED = 157;
  X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY = 159;
  X509V3_R_SECTION_NOT_FOUND = 150;
  X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS = 122;
  X509V3_R_UNABLE_TO_GET_ISSUER_KEYID = 123;
  X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT = 111;
  X509V3_R_UNKNOWN_EXTENSION = 129;
  X509V3_R_UNKNOWN_EXTENSION_NAME = 130;
  X509V3_R_UNKNOWN_OPTION = 120;
  X509V3_R_UNSUPPORTED_OPTION = 117;
  X509V3_R_UNSUPPORTED_TYPE = 167;
  X509V3_R_USER_TOO_LONG = 132;
  CTX_TEST = $1;
  X509V3_CTX_REPLACE = $2;
  X509V3_EXT_DYNAMIC = $1;
  X509V3_EXT_CTX_DEP = $2;
  X509V3_EXT_MULTILINE = $4;
  GEN_OTHERNAME = 0;
  GEN_EMAIL = 1;
  GEN_DNS = 2;
  GEN_X400 = 3;
  GEN_DIRNAME = 4;
  GEN_EDIPARTY = 5;
  GEN_URI = 6;
  GEN_IPADD = 7;
  GEN_RID = 8;
  CRLDP_ALL_REASONS = $807f;
  CRL_REASON_NONE = -1;
  CRL_REASON_UNSPECIFIED = 0;
  CRL_REASON_KEY_COMPROMISE = 1;
  CRL_REASON_CA_COMPROMISE = 2;
  CRL_REASON_AFFILIATION_CHANGED = 3;
  CRL_REASON_SUPERSEDED = 4;
  CRL_REASON_CESSATION_OF_OPERATION = 5;
  CRL_REASON_CERTIFICATE_HOLD = 6;
  CRL_REASON_REMOVE_FROM_CRL = 8;
  CRL_REASON_PRIVILEGE_WITHDRAWN = 9;
  CRL_REASON_AA_COMPROMISE = 10;
  IDP_PRESENT = $1;
  IDP_INVALID = $2;
  IDP_ONLYUSER = $4;
  IDP_ONLYCA = $8;
  IDP_ONLYATTR = $10;
  IDP_INDIRECT = $20;
  IDP_REASONS = $40;
  EXFLAG_BCONS = $1;
  EXFLAG_KUSAGE = $2;
  EXFLAG_XKUSAGE = $4;
  EXFLAG_NSCERT = $8;
  EXFLAG_CA = $10;
  EXFLAG_SI = $20;
  EXFLAG_V1 = $40;
  EXFLAG_INVALID = $80;
  EXFLAG_SET = $100;
  EXFLAG_CRITICAL = $200;
  EXFLAG_PROXY = $400;
  EXFLAG_INVALID_POLICY = $800;
  EXFLAG_FRESHEST = $1000;
  EXFLAG_SS = $2000;
  KU_DIGITAL_SIGNATURE = $0080;
  KU_NON_REPUDIATION = $0040;
  KU_KEY_ENCIPHERMENT = $0020;
  KU_DATA_ENCIPHERMENT = $0010;
  KU_KEY_AGREEMENT = $0008;
  KU_KEY_CERT_SIGN = $0004;
  KU_CRL_SIGN = $0002;
  KU_ENCIPHER_ONLY = $0001;
  KU_DECIPHER_ONLY = $8000;
  NS_SSL_CLIENT = $80;
  NS_SSL_SERVER = $40;
  NS_SMIME = $20;
  NS_OBJSIGN = $10;
  NS_SSL_CA = $04;
  NS_SMIME_CA = $02;
  NS_OBJSIGN_CA = $01;
  NS_ANY_CA = (NS_SSL_CA or NS_SMIME_CA or NS_OBJSIGN_CA);
  XKU_SSL_SERVER = $1;
  XKU_SSL_CLIENT = $2;
  XKU_SMIME = $4;
  XKU_CODE_SIGN = $8;
  XKU_SGC = $10;
  XKU_OCSP_SIGN = $20;
  XKU_TIMESTAMP = $40;
  XKU_DVCS = $80;
  XKU_ANYEKU = $100;
  X509_PURPOSE_DYNAMIC = $1;
  X509_PURPOSE_DYNAMIC_NAME = $2;
  X509_PURPOSE_SSL_CLIENT = 1;
  X509_PURPOSE_SSL_SERVER = 2;
  X509_PURPOSE_NS_SSL_SERVER = 3;
  X509_PURPOSE_SMIME_SIGN = 4;
  X509_PURPOSE_SMIME_ENCRYPT = 5;
  X509_PURPOSE_CRL_SIGN = 6;
  X509_PURPOSE_ANY = 7;
  X509_PURPOSE_OCSP_HELPER = 8;
  X509_PURPOSE_TIMESTAMP_SIGN = 9;
  X509_PURPOSE_MIN = 1;
  X509_PURPOSE_MAX = 9;
  X509V3_EXT_UNKNOWN_MASK = ($f shl 16);
  X509V3_EXT_DEFAULT = 0;
  X509V3_EXT_ERROR_UNKNOWN = (1 shl 16);
  X509V3_EXT_PARSE_UNKNOWN = (2 shl 16);
  X509V3_EXT_DUMP_UNKNOWN = (3 shl 16);
  X509V3_ADD_OP_MASK = $f;
  X509V3_ADD_DEFAULT = 0;
  X509V3_ADD_APPEND = 1;
  X509V3_ADD_REPLACE = 2;
  X509V3_ADD_REPLACE_EXISTING = 3;
  X509V3_ADD_KEEP_EXISTING = 4;
  X509V3_ADD_DELETE = 5;
  X509V3_ADD_SILENT = $10;
  X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT = $1;
  X509_CHECK_FLAG_NO_WILDCARDS = $2;
  X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS = $4;
  X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS = $8;
  X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS = $10;
  X509_CHECK_FLAG_NEVER_CHECK_SUBJECT = $20;
  _X509_CHECK_FLAG_DOT_SUBDOMAINS = $8000;
  ASIdOrRange_id = 0;
  ASIdOrRange_range = 1;
  ASIdentifierChoice_inherit = 0;
  ASIdentifierChoice_asIdsOrRanges = 1;
  IPAddressOrRange_addressPrefix = 0;
  IPAddressOrRange_addressRange = 1;
  IPAddressChoice_inherit = 0;
  IPAddressChoice_addressesOrRanges = 1;
  V3_ASID_ASNUM = 0;
  V3_ASID_RDI = 1;
  IANA_AFI_IPV4 = 1;
  IANA_AFI_IPV6 = 2;
  CMS_F_CHECK_CONTENT = 99;
  CMS_F_CMS_ADD0_CERT = 164;
  CMS_F_CMS_ADD0_RECIPIENT_KEY = 100;
  CMS_F_CMS_ADD0_RECIPIENT_PASSWORD = 165;
  CMS_F_CMS_ADD1_RECEIPTREQUEST = 158;
  CMS_F_CMS_ADD1_RECIPIENT_CERT = 101;
  CMS_F_CMS_ADD1_SIGNER = 102;
  CMS_F_CMS_ADD1_SIGNINGTIME = 103;
  CMS_F_CMS_COMPRESS = 104;
  CMS_F_CMS_COMPRESSEDDATA_CREATE = 105;
  CMS_F_CMS_COMPRESSEDDATA_INIT_BIO = 106;
  CMS_F_CMS_COPY_CONTENT = 107;
  CMS_F_CMS_COPY_MESSAGEDIGEST = 108;
  CMS_F_CMS_DATA = 109;
  CMS_F_CMS_DATAFINAL = 110;
  CMS_F_CMS_DATAINIT = 111;
  CMS_F_CMS_DECRYPT = 112;
  CMS_F_CMS_DECRYPT_SET1_KEY = 113;
  CMS_F_CMS_DECRYPT_SET1_PASSWORD = 166;
  CMS_F_CMS_DECRYPT_SET1_PKEY = 114;
  CMS_F_CMS_DIGESTALGORITHM_FIND_CTX = 115;
  CMS_F_CMS_DIGESTALGORITHM_INIT_BIO = 116;
  CMS_F_CMS_DIGESTEDDATA_DO_FINAL = 117;
  CMS_F_CMS_DIGEST_VERIFY = 118;
  CMS_F_CMS_ENCODE_RECEIPT = 161;
  CMS_F_CMS_ENCRYPT = 119;
  CMS_F_CMS_ENCRYPTEDCONTENT_INIT = 179;
  CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO = 120;
  CMS_F_CMS_ENCRYPTEDDATA_DECRYPT = 121;
  CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT = 122;
  CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY = 123;
  CMS_F_CMS_ENVELOPEDDATA_CREATE = 124;
  CMS_F_CMS_ENVELOPEDDATA_INIT_BIO = 125;
  CMS_F_CMS_ENVELOPED_DATA_INIT = 126;
  CMS_F_CMS_ENV_ASN1_CTRL = 171;
  CMS_F_CMS_FINAL = 127;
  CMS_F_CMS_GET0_CERTIFICATE_CHOICES = 128;
  CMS_F_CMS_GET0_CONTENT = 129;
  CMS_F_CMS_GET0_ECONTENT_TYPE = 130;
  CMS_F_CMS_GET0_ENVELOPED = 131;
  CMS_F_CMS_GET0_REVOCATION_CHOICES = 132;
  CMS_F_CMS_GET0_SIGNED = 133;
  CMS_F_CMS_MSGSIGDIGEST_ADD1 = 162;
  CMS_F_CMS_RECEIPTREQUEST_CREATE0 = 159;
  CMS_F_CMS_RECEIPT_VERIFY = 160;
  CMS_F_CMS_RECIPIENTINFO_DECRYPT = 134;
  CMS_F_CMS_RECIPIENTINFO_ENCRYPT = 169;
  CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT = 178;
  CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG = 175;
  CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID = 173;
  CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS = 172;
  CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP = 174;
  CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT = 135;
  CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT = 136;
  CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID = 137;
  CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP = 138;
  CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP = 139;
  CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT = 140;
  CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT = 141;
  CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS = 142;
  CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID = 143;
  CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT = 167;
  CMS_F_CMS_RECIPIENTINFO_SET0_KEY = 144;
  CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD = 168;
  CMS_F_CMS_RECIPIENTINFO_SET0_PKEY = 145;
  CMS_F_CMS_SD_ASN1_CTRL = 170;
  CMS_F_CMS_SET1_IAS = 176;
  CMS_F_CMS_SET1_KEYID = 177;
  CMS_F_CMS_SET1_SIGNERIDENTIFIER = 146;
  CMS_F_CMS_SET_DETACHED = 147;
  CMS_F_CMS_SIGN = 148;
  CMS_F_CMS_SIGNED_DATA_INIT = 149;
  CMS_F_CMS_SIGNERINFO_CONTENT_SIGN = 150;
  CMS_F_CMS_SIGNERINFO_SIGN = 151;
  CMS_F_CMS_SIGNERINFO_VERIFY = 152;
  CMS_F_CMS_SIGNERINFO_VERIFY_CERT = 153;
  CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT = 154;
  CMS_F_CMS_SIGN_RECEIPT = 163;
  CMS_F_CMS_SI_CHECK_ATTRIBUTES = 183;
  CMS_F_CMS_STREAM = 155;
  CMS_F_CMS_UNCOMPRESS = 156;
  CMS_F_CMS_VERIFY = 157;
  CMS_F_KEK_UNWRAP_KEY = 180;
  CMS_R_ADD_SIGNER_ERROR = 99;
  CMS_R_ATTRIBUTE_ERROR = 161;
  CMS_R_CERTIFICATE_ALREADY_PRESENT = 175;
  CMS_R_CERTIFICATE_HAS_NO_KEYID = 160;
  CMS_R_CERTIFICATE_VERIFY_ERROR = 100;
  CMS_R_CIPHER_INITIALISATION_ERROR = 101;
  CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR = 102;
  CMS_R_CMS_DATAFINAL_ERROR = 103;
  CMS_R_CMS_LIB = 104;
  CMS_R_CONTENTIDENTIFIER_MISMATCH = 170;
  CMS_R_CONTENT_NOT_FOUND = 105;
  CMS_R_CONTENT_TYPE_MISMATCH = 171;
  CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA = 106;
  CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA = 107;
  CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA = 108;
  CMS_R_CONTENT_VERIFY_ERROR = 109;
  CMS_R_CTRL_ERROR = 110;
  CMS_R_CTRL_FAILURE = 111;
  CMS_R_DECRYPT_ERROR = 112;
  CMS_R_ERROR_GETTING_PUBLIC_KEY = 113;
  CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE = 114;
  CMS_R_ERROR_SETTING_KEY = 115;
  CMS_R_ERROR_SETTING_RECIPIENTINFO = 116;
  CMS_R_INVALID_ENCRYPTED_KEY_LENGTH = 117;
  CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER = 176;
  CMS_R_INVALID_KEY_LENGTH = 118;
  CMS_R_MD_BIO_INIT_ERROR = 119;
  CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH = 120;
  CMS_R_MESSAGEDIGEST_WRONG_LENGTH = 121;
  CMS_R_MSGSIGDIGEST_ERROR = 172;
  CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE = 162;
  CMS_R_MSGSIGDIGEST_WRONG_LENGTH = 163;
  CMS_R_NEED_ONE_SIGNER = 164;
  CMS_R_NOT_A_SIGNED_RECEIPT = 165;
  CMS_R_NOT_ENCRYPTED_DATA = 122;
  CMS_R_NOT_KEK = 123;
  CMS_R_NOT_KEY_AGREEMENT = 181;
  CMS_R_NOT_KEY_TRANSPORT = 124;
  CMS_R_NOT_PWRI = 177;
  CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 125;
  CMS_R_NO_CIPHER = 126;
  CMS_R_NO_CONTENT = 127;
  CMS_R_NO_CONTENT_TYPE = 173;
  CMS_R_NO_DEFAULT_DIGEST = 128;
  CMS_R_NO_DIGEST_SET = 129;
  CMS_R_NO_KEY = 130;
  CMS_R_NO_KEY_OR_CERT = 174;
  CMS_R_NO_MATCHING_DIGEST = 131;
  CMS_R_NO_MATCHING_RECIPIENT = 132;
  CMS_R_NO_MATCHING_SIGNATURE = 166;
  CMS_R_NO_MSGSIGDIGEST = 167;
  CMS_R_NO_PASSWORD = 178;
  CMS_R_NO_PRIVATE_KEY = 133;
  CMS_R_NO_PUBLIC_KEY = 134;
  CMS_R_NO_RECEIPT_REQUEST = 168;
  CMS_R_NO_SIGNERS = 135;
  CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 136;
  CMS_R_RECEIPT_DECODE_ERROR = 169;
  CMS_R_RECIPIENT_ERROR = 137;
  CMS_R_SIGNER_CERTIFICATE_NOT_FOUND = 138;
  CMS_R_SIGNFINAL_ERROR = 139;
  CMS_R_SMIME_TEXT_ERROR = 140;
  CMS_R_STORE_INIT_ERROR = 141;
  CMS_R_TYPE_NOT_COMPRESSED_DATA = 142;
  CMS_R_TYPE_NOT_DATA = 143;
  CMS_R_TYPE_NOT_DIGESTED_DATA = 144;
  CMS_R_TYPE_NOT_ENCRYPTED_DATA = 145;
  CMS_R_TYPE_NOT_ENVELOPED_DATA = 146;
  CMS_R_UNABLE_TO_FINALIZE_CONTEXT = 147;
  CMS_R_UNKNOWN_CIPHER = 148;
  CMS_R_UNKNOWN_DIGEST_ALGORITHM = 149;
  CMS_R_UNKNOWN_ID = 150;
  CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 151;
  CMS_R_UNSUPPORTED_CONTENT_TYPE = 152;
  CMS_R_UNSUPPORTED_KEK_ALGORITHM = 153;
  CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM = 179;
  CMS_R_UNSUPPORTED_RECIPIENTINFO_TYPE = 155;
  CMS_R_UNSUPPORTED_RECIPIENT_TYPE = 154;
  CMS_R_UNSUPPORTED_TYPE = 156;
  CMS_R_UNWRAP_ERROR = 157;
  CMS_R_UNWRAP_FAILURE = 180;
  CMS_R_VERIFICATION_FAILURE = 158;
  CMS_R_WRAP_ERROR = 159;
  CMS_SIGNERINFO_ISSUER_SERIAL = 0;
  CMS_SIGNERINFO_KEYIDENTIFIER = 1;
  CMS_RECIPINFO_NONE = -1;
  CMS_RECIPINFO_TRANS = 0;
  CMS_RECIPINFO_AGREE = 1;
  CMS_RECIPINFO_KEK = 2;
  CMS_RECIPINFO_PASS = 3;
  CMS_RECIPINFO_OTHER = 4;
  CMS_TEXT = $1;
  CMS_NOCERTS = $2;
  CMS_NO_CONTENT_VERIFY = $4;
  CMS_NO_ATTR_VERIFY = $8;
  CMS_NOSIGS = (CMS_NO_CONTENT_VERIFY or CMS_NO_ATTR_VERIFY);
  CMS_NOINTERN = $10;
  CMS_NO_SIGNER_CERT_VERIFY = $20;
  CMS_NOVERIFY = $20;
  CMS_DETACHED = $40;
  CMS_BINARY = $80;
  CMS_NOATTR = $100;
  CMS_NOSMIMECAP = $200;
  CMS_NOOLDMIMETYPE = $400;
  CMS_CRLFEOL = $800;
  _CMS_STREAM = $1000;
  CMS_NOCRL = $2000;
  CMS_PARTIAL = $4000;
  CMS_REUSE_DIGEST = $8000;
  CMS_USE_KEYID = $10000;
  CMS_DEBUG_DECRYPT = $20000;
  CMS_KEY_PARAM = $40000;
  CMS_ASCIICRLF = $80000;
  CMS_R_UNKNOWN_DIGEST_ALGORITM = CMS_R_UNKNOWN_DIGEST_ALGORITHM;
  CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE = CMS_R_UNSUPPORTED_RECIPIENTINFO_TYPE;
  COMP_F_BIO_ZLIB_FLUSH = 99;
  COMP_F_BIO_ZLIB_NEW = 100;
  COMP_F_BIO_ZLIB_READ = 101;
  COMP_F_BIO_ZLIB_WRITE = 102;
  COMP_F_COMP_CTX_NEW = 103;
  COMP_R_ZLIB_DEFLATE_ERROR = 99;
  COMP_R_ZLIB_INFLATE_ERROR = 100;
  COMP_R_ZLIB_NOT_SUPPORTED = 101;
  CT_F_CTLOG_NEW = 117;
  CT_F_CTLOG_NEW_FROM_BASE64 = 118;
  CT_F_CTLOG_NEW_FROM_CONF = 119;
  CT_F_CTLOG_STORE_LOAD_CTX_NEW = 122;
  CT_F_CTLOG_STORE_LOAD_FILE = 123;
  CT_F_CTLOG_STORE_LOAD_LOG = 130;
  CT_F_CTLOG_STORE_NEW = 131;
  CT_F_CT_BASE64_DECODE = 124;
  CT_F_CT_POLICY_EVAL_CTX_NEW = 133;
  CT_F_CT_V1_LOG_ID_FROM_PKEY = 125;
  CT_F_I2O_SCT = 107;
  CT_F_I2O_SCT_LIST = 108;
  CT_F_I2O_SCT_SIGNATURE = 109;
  CT_F_O2I_SCT = 110;
  CT_F_O2I_SCT_LIST = 111;
  CT_F_O2I_SCT_SIGNATURE = 112;
  CT_F_SCT_CTX_NEW = 126;
  CT_F_SCT_CTX_VERIFY = 128;
  CT_F_SCT_NEW = 100;
  CT_F_SCT_NEW_FROM_BASE64 = 127;
  CT_F_SCT_SET0_LOG_ID = 101;
  CT_F_SCT_SET1_EXTENSIONS = 114;
  CT_F_SCT_SET1_LOG_ID = 115;
  CT_F_SCT_SET1_SIGNATURE = 116;
  CT_F_SCT_SET_LOG_ENTRY_TYPE = 102;
  CT_F_SCT_SET_SIGNATURE_NID = 103;
  CT_F_SCT_SET_VERSION = 104;
  CT_R_BASE64_DECODE_ERROR = 108;
  CT_R_INVALID_LOG_ID_LENGTH = 100;
  CT_R_LOG_CONF_INVALID = 109;
  CT_R_LOG_CONF_INVALID_KEY = 110;
  CT_R_LOG_CONF_MISSING_DESCRIPTION = 111;
  CT_R_LOG_CONF_MISSING_KEY = 112;
  CT_R_LOG_KEY_INVALID = 113;
  CT_R_SCT_FUTURE_TIMESTAMP = 116;
  CT_R_SCT_INVALID = 104;
  CT_R_SCT_INVALID_SIGNATURE = 107;
  CT_R_SCT_LIST_INVALID = 105;
  CT_R_SCT_LOG_ID_MISMATCH = 114;
  CT_R_SCT_NOT_SET = 106;
  CT_R_SCT_UNSUPPORTED_VERSION = 115;
  CT_R_UNRECOGNIZED_SIGNATURE_NID = 101;
  CT_R_UNSUPPORTED_ENTRY_TYPE = 102;
  CT_R_UNSUPPORTED_VERSION = 103;
  SCT_MIN_RSA_BITS = 2048;
  CT_V1_HASHLEN = SHA256_DIGEST_LENGTH;
  DES_ENCRYPT = 1;
  DES_DECRYPT = 0;
  DES_CBC_MODE = 0;
  DES_PCBC_MODE = 1;
  DTLS1_VERSION = $FEFF;
  DTLS1_2_VERSION = $FEFD;
  DTLS_MIN_VERSION = DTLS1_VERSION;
  DTLS_MAX_VERSION = DTLS1_2_VERSION;
  DTLS1_VERSION_MAJOR = $FE;
  DTLS1_BAD_VER = $0100;
  DTLS_ANY_VERSION = $1FFFF;
  DTLS1_COOKIE_LENGTH = 256;
  DTLS1_RT_HEADER_LENGTH = 13;
  DTLS1_HM_HEADER_LENGTH = 12;
  DTLS1_HM_BAD_FRAGMENT = -2;
  DTLS1_HM_FRAGMENT_RETRY = -3;
  DTLS1_CCS_HEADER_LENGTH = 1;
  DTLS1_AL_HEADER_LENGTH = 2;
  DTLS1_TMO_READ_COUNT = 2;
  DTLS1_TMO_WRITE_COUNT = 2;
  DTLS1_TMO_ALERT_COUNT = 12;
  RAND_F_DATA_COLLECT_METHOD = 127;
  RAND_F_DRBG_BYTES = 101;
  RAND_F_DRBG_GET_ENTROPY = 105;
  RAND_F_DRBG_SETUP = 117;
  RAND_F_GET_ENTROPY = 106;
  RAND_F_RAND_BYTES = 100;
  RAND_F_RAND_DRBG_ENABLE_LOCKING = 119;
  RAND_F_RAND_DRBG_GENERATE = 107;
  RAND_F_RAND_DRBG_GET_ENTROPY = 120;
  RAND_F_RAND_DRBG_GET_NONCE = 123;
  RAND_F_RAND_DRBG_INSTANTIATE = 108;
  RAND_F_RAND_DRBG_NEW = 109;
  RAND_F_RAND_DRBG_RESEED = 110;
  RAND_F_RAND_DRBG_RESTART = 102;
  RAND_F_RAND_DRBG_SET = 104;
  RAND_F_RAND_DRBG_SET_DEFAULTS = 121;
  RAND_F_RAND_DRBG_UNINSTANTIATE = 118;
  RAND_F_RAND_LOAD_FILE = 111;
  RAND_F_RAND_POOL_ACQUIRE_ENTROPY = 122;
  RAND_F_RAND_POOL_ADD = 103;
  RAND_F_RAND_POOL_ADD_BEGIN = 113;
  RAND_F_RAND_POOL_ADD_END = 114;
  RAND_F_RAND_POOL_ATTACH = 124;
  RAND_F_RAND_POOL_BYTES_NEEDED = 115;
  RAND_F_RAND_POOL_GROW = 125;
  RAND_F_RAND_POOL_NEW = 116;
  RAND_F_RAND_PSEUDO_BYTES = 126;
  RAND_F_RAND_WRITE_FILE = 112;
  RAND_R_ADDITIONAL_INPUT_TOO_LONG = 102;
  RAND_R_ALREADY_INSTANTIATED = 103;
  RAND_R_ARGUMENT_OUT_OF_RANGE = 105;
  RAND_R_CANNOT_OPEN_FILE = 121;
  RAND_R_DRBG_ALREADY_INITIALIZED = 129;
  RAND_R_DRBG_NOT_INITIALISED = 104;
  RAND_R_ENTROPY_INPUT_TOO_LONG = 106;
  RAND_R_ENTROPY_OUT_OF_RANGE = 124;
  RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED = 127;
  RAND_R_ERROR_INITIALISING_DRBG = 107;
  RAND_R_ERROR_INSTANTIATING_DRBG = 108;
  RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT = 109;
  RAND_R_ERROR_RETRIEVING_ENTROPY = 110;
  RAND_R_ERROR_RETRIEVING_NONCE = 111;
  RAND_R_FAILED_TO_CREATE_LOCK = 126;
  RAND_R_FUNC_NOT_IMPLEMENTED = 101;
  RAND_R_FWRITE_ERROR = 123;
  RAND_R_GENERATE_ERROR = 112;
  RAND_R_INTERNAL_ERROR = 113;
  RAND_R_IN_ERROR_STATE = 114;
  RAND_R_NOT_A_REGULAR_FILE = 122;
  RAND_R_NOT_INSTANTIATED = 115;
  RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED = 128;
  RAND_R_PARENT_LOCKING_NOT_ENABLED = 130;
  RAND_R_PARENT_STRENGTH_TOO_WEAK = 131;
  RAND_R_PERSONALISATION_STRING_TOO_LONG = 116;
  RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED = 133;
  RAND_R_PRNG_NOT_SEEDED = 100;
  RAND_R_RANDOM_POOL_OVERFLOW = 125;
  RAND_R_RANDOM_POOL_UNDERFLOW = 134;
  RAND_R_REQUEST_TOO_LARGE_FOR_DRBG = 117;
  RAND_R_RESEED_ERROR = 118;
  RAND_R_SELFTEST_FAILURE = 119;
  RAND_R_TOO_LITTLE_NONCE_REQUESTED = 135;
  RAND_R_TOO_MUCH_NONCE_REQUESTED = 136;
  RAND_R_UNSUPPORTED_DRBG_FLAGS = 132;
  RAND_R_UNSUPPORTED_DRBG_TYPE = 120;
  PEM_F_B2I_DSS = 127;
  PEM_F_B2I_PVK_BIO = 128;
  PEM_F_B2I_RSA = 129;
  PEM_F_CHECK_BITLEN_DSA = 130;
  PEM_F_CHECK_BITLEN_RSA = 131;
  PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 120;
  PEM_F_D2I_PKCS8PRIVATEKEY_FP = 121;
  PEM_F_DO_B2I = 132;
  PEM_F_DO_B2I_BIO = 133;
  PEM_F_DO_BLOB_HEADER = 134;
  PEM_F_DO_I2B = 146;
  PEM_F_DO_PK8PKEY = 126;
  PEM_F_DO_PK8PKEY_FP = 125;
  PEM_F_DO_PVK_BODY = 135;
  PEM_F_DO_PVK_HEADER = 136;
  PEM_F_GET_HEADER_AND_DATA = 143;
  PEM_F_GET_NAME = 144;
  PEM_F_I2B_PVK = 137;
  PEM_F_I2B_PVK_BIO = 138;
  PEM_F_LOAD_IV = 101;
  PEM_F_PEM_ASN1_READ = 102;
  PEM_F_PEM_ASN1_READ_BIO = 103;
  PEM_F_PEM_ASN1_WRITE = 104;
  PEM_F_PEM_ASN1_WRITE_BIO = 105;
  PEM_F_PEM_DEF_CALLBACK = 100;
  PEM_F_PEM_DO_HEADER = 106;
  PEM_F_PEM_GET_EVP_CIPHER_INFO = 107;
  PEM_F_PEM_READ = 108;
  PEM_F_PEM_READ_BIO = 109;
  PEM_F_PEM_READ_BIO_DHPARAMS = 141;
  PEM_F_PEM_READ_BIO_EX = 145;
  PEM_F_PEM_READ_BIO_PARAMETERS = 140;
  PEM_F_PEM_READ_BIO_PRIVATEKEY = 123;
  PEM_F_PEM_READ_DHPARAMS = 142;
  PEM_F_PEM_READ_PRIVATEKEY = 124;
  PEM_F_PEM_SIGNFINAL = 112;
  PEM_F_PEM_WRITE = 113;
  PEM_F_PEM_WRITE_BIO = 114;
  PEM_F_PEM_WRITE_PRIVATEKEY = 139;
  PEM_F_PEM_X509_INFO_READ = 115;
  PEM_F_PEM_X509_INFO_READ_BIO = 116;
  PEM_F_PEM_X509_INFO_WRITE_BIO = 117;
  PEM_R_BAD_BASE64_DECODE = 100;
  PEM_R_BAD_DECRYPT = 101;
  PEM_R_BAD_END_LINE = 102;
  PEM_R_BAD_IV_CHARS = 103;
  PEM_R_BAD_MAGIC_NUMBER = 116;
  PEM_R_BAD_PASSWORD_READ = 104;
  PEM_R_BAD_VERSION_NUMBER = 117;
  PEM_R_BIO_WRITE_FAILURE = 118;
  PEM_R_CIPHER_IS_NULL = 127;
  PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 115;
  PEM_R_EXPECTING_PRIVATE_KEY_BLOB = 119;
  PEM_R_EXPECTING_PUBLIC_KEY_BLOB = 120;
  PEM_R_HEADER_TOO_LONG = 128;
  PEM_R_INCONSISTENT_HEADER = 121;
  PEM_R_KEYBLOB_HEADER_PARSE_ERROR = 122;
  PEM_R_KEYBLOB_TOO_SHORT = 123;
  PEM_R_MISSING_DEK_IV = 129;
  PEM_R_NOT_DEK_INFO = 105;
  PEM_R_NOT_ENCRYPTED = 106;
  PEM_R_NOT_PROC_TYPE = 107;
  PEM_R_NO_START_LINE = 108;
  PEM_R_PROBLEMS_GETTING_PASSWORD = 109;
  PEM_R_PVK_DATA_TOO_SHORT = 124;
  PEM_R_PVK_TOO_SHORT = 125;
  PEM_R_READ_KEY = 111;
  PEM_R_SHORT_HEADER = 112;
  PEM_R_UNEXPECTED_DEK_IV = 130;
  PEM_R_UNSUPPORTED_CIPHER = 113;
  PEM_R_UNSUPPORTED_ENCRYPTION = 114;
  PEM_R_UNSUPPORTED_KEY_COMPONENTS = 126;
  PEM_BUFSIZE = 1024;
  PEM_STRING_X509_OLD = 'X509 CERTIFICATE';
  PEM_STRING_X509 = 'CERTIFICATE';
  PEM_STRING_X509_TRUSTED = 'TRUSTED CERTIFICATE';
  PEM_STRING_X509_REQ_OLD = 'NEW CERTIFICATE REQUEST';
  PEM_STRING_X509_REQ = 'CERTIFICATE REQUEST';
  PEM_STRING_X509_CRL = 'X509 CRL';
  PEM_STRING_EVP_PKEY = 'ANY PRIVATE KEY';
  PEM_STRING_PUBLIC = 'PUBLIC KEY';
  PEM_STRING_RSA = 'RSA PRIVATE KEY';
  PEM_STRING_RSA_PUBLIC = 'RSA PUBLIC KEY';
  PEM_STRING_DSA = 'DSA PRIVATE KEY';
  PEM_STRING_DSA_PUBLIC = 'DSA PUBLIC KEY';
  PEM_STRING_PKCS7 = 'PKCS7';
  PEM_STRING_PKCS7_SIGNED = 'PKCS #7 SIGNED DATA';
  PEM_STRING_PKCS8 = 'ENCRYPTED PRIVATE KEY';
  PEM_STRING_PKCS8INF = 'PRIVATE KEY';
  PEM_STRING_DHPARAMS = 'DH PARAMETERS';
  PEM_STRING_DHXPARAMS = 'X9.42 DH PARAMETERS';
  PEM_STRING_SSL_SESSION = 'SSL SESSION PARAMETERS';
  PEM_STRING_DSAPARAMS = 'DSA PARAMETERS';
  PEM_STRING_ECDSA_PUBLIC = 'ECDSA PUBLIC KEY';
  PEM_STRING_ECPARAMETERS = 'EC PARAMETERS';
  PEM_STRING_ECPRIVATEKEY = 'EC PRIVATE KEY';
  PEM_STRING_PARAMETERS = 'PARAMETERS';
  PEM_STRING_CMS = 'CMS';
  PEM_TYPE_ENCRYPTED = 10;
  PEM_TYPE_MIC_ONLY = 20;
  PEM_TYPE_MIC_CLEAR = 30;
  PEM_TYPE_CLEAR = 40;
  PEM_FLAG_SECURE = $1;
  PEM_FLAG_EAY_COMPATIBLE = $2;
  PEM_FLAG_ONLY_B64 = $4;
  UI_F_CLOSE_CONSOLE = 115;
  UI_F_ECHO_CONSOLE = 116;
  UI_F_GENERAL_ALLOCATE_BOOLEAN = 108;
  UI_F_GENERAL_ALLOCATE_PROMPT = 109;
  UI_F_NOECHO_CONSOLE = 117;
  UI_F_OPEN_CONSOLE = 114;
  UI_F_UI_CONSTRUCT_PROMPT = 121;
  UI_F_UI_CREATE_METHOD = 112;
  UI_F_UI_CTRL = 111;
  UI_F_UI_DUP_ERROR_STRING = 101;
  UI_F_UI_DUP_INFO_STRING = 102;
  UI_F_UI_DUP_INPUT_BOOLEAN = 110;
  UI_F_UI_DUP_INPUT_STRING = 103;
  UI_F_UI_DUP_USER_DATA = 118;
  UI_F_UI_DUP_VERIFY_STRING = 106;
  UI_F_UI_GET0_RESULT = 107;
  UI_F_UI_GET_RESULT_LENGTH = 119;
  UI_F_UI_NEW_METHOD = 104;
  UI_F_UI_PROCESS = 113;
  UI_F_UI_SET_RESULT = 105;
  UI_F_UI_SET_RESULT_EX = 120;
  UI_R_COMMON_OK_AND_CANCEL_CHARACTERS = 104;
  UI_R_INDEX_TOO_LARGE = 102;
  UI_R_INDEX_TOO_SMALL = 103;
  UI_R_NO_RESULT_BUFFER = 105;
  UI_R_PROCESSING_ERROR = 107;
  UI_R_RESULT_TOO_LARGE = 100;
  UI_R_RESULT_TOO_SMALL = 101;
  UI_R_SYSASSIGN_ERROR = 109;
  UI_R_SYSDASSGN_ERROR = 110;
  UI_R_SYSQIOW_ERROR = 111;
  UI_R_UNKNOWN_CONTROL_COMMAND = 106;
  UI_R_UNKNOWN_TTYGET_ERRNO_VALUE = 108;
  UI_R_USER_DATA_DUPLICATION_UNSUPPORTED = 112;
  UI_INPUT_FLAG_ECHO = $01;
  UI_INPUT_FLAG_DEFAULT_PWD = $02;
  UI_INPUT_FLAG_USER_BASE = 16;
  UI_CTRL_PRINT_ERRORS = 1;
  UI_CTRL_IS_REDOABLE = 2;
  ERR_TXT_MALLOCED = $01;
  ERR_TXT_STRING = $02;
  ERR_FLAG_MARK = $01;
  ERR_FLAG_CLEAR = $02;
  ERR_NUM_ERRORS = 16;
  ERR_LIB_NONE = 1;
  ERR_LIB_SYS = 2;
  ERR_LIB_BN = 3;
  ERR_LIB_RSA = 4;
  ERR_LIB_DH = 5;
  ERR_LIB_EVP = 6;
  ERR_LIB_BUF = 7;
  ERR_LIB_OBJ = 8;
  ERR_LIB_PEM = 9;
  ERR_LIB_DSA = 10;
  ERR_LIB_X509 = 11;
  ERR_LIB_ASN1 = 13;
  ERR_LIB_CONF = 14;
  ERR_LIB_CRYPTO = 15;
  ERR_LIB_EC = 16;
  ERR_LIB_SSL = 20;
  ERR_LIB_BIO = 32;
  ERR_LIB_PKCS7 = 33;
  ERR_LIB_X509V3 = 34;
  ERR_LIB_PKCS12 = 35;
  ERR_LIB_RAND = 36;
  ERR_LIB_DSO = 37;
  ERR_LIB_ENGINE = 38;
  ERR_LIB_OCSP = 39;
  ERR_LIB_UI = 40;
  ERR_LIB_COMP = 41;
  ERR_LIB_ECDSA = 42;
  ERR_LIB_ECDH = 43;
  ERR_LIB_OSSL_STORE = 44;
  ERR_LIB_FIPS = 45;
  ERR_LIB_CMS = 46;
  ERR_LIB_TS = 47;
  ERR_LIB_HMAC = 48;
  ERR_LIB_CT = 50;
  ERR_LIB_ASYNC = 51;
  ERR_LIB_KDF = 52;
  ERR_LIB_SM2 = 53;
  ERR_LIB_USER = 128;
  SYS_F_FOPEN = 1;
  SYS_F_CONNECT = 2;
  SYS_F_GETSERVBYNAME = 3;
  SYS_F_SOCKET = 4;
  SYS_F_IOCTLSOCKET = 5;
  SYS_F_BIND = 6;
  SYS_F_LISTEN = 7;
  SYS_F_ACCEPT = 8;
  SYS_F_WSASTARTUP = 9;
  SYS_F_OPENDIR = 10;
  SYS_F_FREAD = 11;
  SYS_F_GETADDRINFO = 12;
  SYS_F_GETNAMEINFO = 13;
  SYS_F_SETSOCKOPT = 14;
  SYS_F_GETSOCKOPT = 15;
  SYS_F_GETSOCKNAME = 16;
  SYS_F_GETHOSTBYNAME = 17;
  SYS_F_FFLUSH = 18;
  SYS_F_OPEN = 19;
  SYS_F_CLOSE = 20;
  SYS_F_IOCTL = 21;
  SYS_F_STAT = 22;
  SYS_F_FCNTL = 23;
  SYS_F_FSTAT = 24;
  ERR_R_SYS_LIB = ERR_LIB_SYS;
  ERR_R_BN_LIB = ERR_LIB_BN;
  ERR_R_RSA_LIB = ERR_LIB_RSA;
  ERR_R_DH_LIB = ERR_LIB_DH;
  ERR_R_EVP_LIB = ERR_LIB_EVP;
  ERR_R_BUF_LIB = ERR_LIB_BUF;
  ERR_R_OBJ_LIB = ERR_LIB_OBJ;
  ERR_R_PEM_LIB = ERR_LIB_PEM;
  ERR_R_DSA_LIB = ERR_LIB_DSA;
  ERR_R_X509_LIB = ERR_LIB_X509;
  ERR_R_ASN1_LIB = ERR_LIB_ASN1;
  ERR_R_EC_LIB = ERR_LIB_EC;
  ERR_R_BIO_LIB = ERR_LIB_BIO;
  ERR_R_PKCS7_LIB = ERR_LIB_PKCS7;
  ERR_R_X509V3_LIB = ERR_LIB_X509V3;
  ERR_R_ENGINE_LIB = ERR_LIB_ENGINE;
  ERR_R_UI_LIB = ERR_LIB_UI;
  ERR_R_ECDSA_LIB = ERR_LIB_ECDSA;
  ERR_R_OSSL_STORE_LIB = ERR_LIB_OSSL_STORE;
  ERR_R_NESTED_ASN1_ERROR = 58;
  ERR_R_MISSING_ASN1_EOS = 63;
  ERR_R_FATAL = 64;
  ERR_R_MALLOC_FAILURE = (1 or ERR_R_FATAL);
  ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = (2 or ERR_R_FATAL);
  ERR_R_PASSED_NULL_PARAMETER = (3 or ERR_R_FATAL);
  ERR_R_INTERNAL_ERROR = (4 or ERR_R_FATAL);
  ERR_R_DISABLED = (5 or ERR_R_FATAL);
  ERR_R_INIT_FAIL = (6 or ERR_R_FATAL);
  ERR_R_PASSED_INVALID_ARGUMENT = (7);
  ERR_R_OPERATION_FAIL = (8 or ERR_R_FATAL);
  ENGINE_F_DIGEST_UPDATE = 198;
  ENGINE_F_DYNAMIC_CTRL = 180;
  ENGINE_F_DYNAMIC_GET_DATA_CTX = 181;
  ENGINE_F_DYNAMIC_LOAD = 182;
  ENGINE_F_DYNAMIC_SET_DATA_CTX = 183;
  ENGINE_F_ENGINE_ADD = 105;
  ENGINE_F_ENGINE_BY_ID = 106;
  ENGINE_F_ENGINE_CMD_IS_EXECUTABLE = 170;
  ENGINE_F_ENGINE_CTRL = 142;
  ENGINE_F_ENGINE_CTRL_CMD = 178;
  ENGINE_F_ENGINE_CTRL_CMD_STRING = 171;
  ENGINE_F_ENGINE_FINISH = 107;
  ENGINE_F_ENGINE_GET_CIPHER = 185;
  ENGINE_F_ENGINE_GET_DIGEST = 186;
  ENGINE_F_ENGINE_GET_FIRST = 195;
  ENGINE_F_ENGINE_GET_LAST = 196;
  ENGINE_F_ENGINE_GET_NEXT = 115;
  ENGINE_F_ENGINE_GET_PKEY_ASN1_METH = 193;
  ENGINE_F_ENGINE_GET_PKEY_METH = 192;
  ENGINE_F_ENGINE_GET_PREV = 116;
  ENGINE_F_ENGINE_INIT = 119;
  ENGINE_F_ENGINE_LIST_ADD = 120;
  ENGINE_F_ENGINE_LIST_REMOVE = 121;
  ENGINE_F_ENGINE_LOAD_PRIVATE_KEY = 150;
  ENGINE_F_ENGINE_LOAD_PUBLIC_KEY = 151;
  ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT = 194;
  ENGINE_F_ENGINE_NEW = 122;
  ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR = 197;
  ENGINE_F_ENGINE_REMOVE = 123;
  ENGINE_F_ENGINE_SET_DEFAULT_STRING = 189;
  ENGINE_F_ENGINE_SET_ID = 129;
  ENGINE_F_ENGINE_SET_NAME = 130;
  ENGINE_F_ENGINE_TABLE_REGISTER = 184;
  ENGINE_F_ENGINE_UNLOCKED_FINISH = 191;
  ENGINE_F_ENGINE_UP_REF = 190;
  ENGINE_F_INT_CLEANUP_ITEM = 199;
  ENGINE_F_INT_CTRL_HELPER = 172;
  ENGINE_F_INT_ENGINE_CONFIGURE = 188;
  ENGINE_F_INT_ENGINE_MODULE_INIT = 187;
  ENGINE_F_OSSL_HMAC_INIT = 200;
  ENGINE_R_ALREADY_LOADED = 100;
  ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER = 133;
  ENGINE_R_CMD_NOT_EXECUTABLE = 134;
  ENGINE_R_COMMAND_TAKES_INPUT = 135;
  ENGINE_R_COMMAND_TAKES_NO_INPUT = 136;
  ENGINE_R_CONFLICTING_ENGINE_ID = 103;
  ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED = 119;
  ENGINE_R_DSO_FAILURE = 104;
  ENGINE_R_DSO_NOT_FOUND = 132;
  ENGINE_R_ENGINES_SECTION_ERROR = 148;
  ENGINE_R_ENGINE_CONFIGURATION_ERROR = 102;
  ENGINE_R_ENGINE_IS_NOT_IN_LIST = 105;
  ENGINE_R_ENGINE_SECTION_ERROR = 149;
  ENGINE_R_FAILED_LOADING_PRIVATE_KEY = 128;
  ENGINE_R_FAILED_LOADING_PUBLIC_KEY = 129;
  ENGINE_R_FINISH_FAILED = 106;
  ENGINE_R_ID_OR_NAME_MISSING = 108;
  ENGINE_R_INIT_FAILED = 109;
  ENGINE_R_INTERNAL_LIST_ERROR = 110;
  ENGINE_R_INVALID_ARGUMENT = 143;
  ENGINE_R_INVALID_CMD_NAME = 137;
  ENGINE_R_INVALID_CMD_NUMBER = 138;
  ENGINE_R_INVALID_INIT_VALUE = 151;
  ENGINE_R_INVALID_STRING = 150;
  ENGINE_R_NOT_INITIALISED = 117;
  ENGINE_R_NOT_LOADED = 112;
  ENGINE_R_NO_CONTROL_FUNCTION = 120;
  ENGINE_R_NO_INDEX = 144;
  ENGINE_R_NO_LOAD_FUNCTION = 125;
  ENGINE_R_NO_REFERENCE = 130;
  ENGINE_R_NO_SUCH_ENGINE = 116;
  ENGINE_R_UNIMPLEMENTED_CIPHER = 146;
  ENGINE_R_UNIMPLEMENTED_DIGEST = 147;
  ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD = 101;
  ENGINE_R_VERSION_INCOMPATIBILITY = 145;
  ENGINE_CTRL_SET_LOGSTREAM = 1;
  ENGINE_CTRL_SET_PASSWORD_CALLBACK = 2;
  ENGINE_CTRL_HUP = 3;
  ENGINE_CTRL_SET_USER_INTERFACE = 4;
  ENGINE_CTRL_SET_CALLBACK_DATA = 5;
  ENGINE_CTRL_LOAD_CONFIGURATION = 6;
  ENGINE_CTRL_LOAD_SECTION = 7;
  ENGINE_CTRL_HAS_CTRL_FUNCTION = 10;
  ENGINE_CTRL_GET_FIRST_CMD_TYPE = 11;
  ENGINE_CTRL_GET_NEXT_CMD_TYPE = 12;
  ENGINE_CTRL_GET_CMD_FROM_NAME = 13;
  ENGINE_CTRL_GET_NAME_LEN_FROM_CMD = 14;
  ENGINE_CTRL_GET_NAME_FROM_CMD = 15;
  ENGINE_CTRL_GET_DESC_LEN_FROM_CMD = 16;
  ENGINE_CTRL_GET_DESC_FROM_CMD = 17;
  ENGINE_CTRL_GET_CMD_FLAGS = 18;
  ENGINE_CMD_BASE = 200;
  ENGINE_CTRL_CHIL_SET_FORKCHECK = 100;
  ENGINE_CTRL_CHIL_NO_LOCKING = 101;
  HMAC_MAX_MD_CBLOCK = 128;
  _IDEA_ENCRYPT = 1;
  IDEA_DECRYPT = 0;
  IDEA_BLOCK = 8;
  IDEA_KEY_LENGTH = 16;
  KDF_F_PKEY_HKDF_CTRL_STR = 103;
  KDF_F_PKEY_HKDF_DERIVE = 102;
  KDF_F_PKEY_HKDF_INIT = 108;
  KDF_F_PKEY_SCRYPT_CTRL_STR = 104;
  KDF_F_PKEY_SCRYPT_CTRL_UINT64 = 105;
  KDF_F_PKEY_SCRYPT_DERIVE = 109;
  KDF_F_PKEY_SCRYPT_INIT = 106;
  KDF_F_PKEY_SCRYPT_SET_MEMBUF = 107;
  KDF_F_PKEY_TLS1_PRF_CTRL_STR = 100;
  KDF_F_PKEY_TLS1_PRF_DERIVE = 101;
  KDF_F_PKEY_TLS1_PRF_INIT = 110;
  KDF_F_TLS1_PRF_ALG = 111;
  KDF_R_INVALID_DIGEST = 100;
  KDF_R_MISSING_ITERATION_COUNT = 109;
  KDF_R_MISSING_KEY = 104;
  KDF_R_MISSING_MESSAGE_DIGEST = 105;
  KDF_R_MISSING_PARAMETER = 101;
  KDF_R_MISSING_PASS = 110;
  KDF_R_MISSING_SALT = 111;
  KDF_R_MISSING_SECRET = 107;
  KDF_R_MISSING_SEED = 106;
  KDF_R_UNKNOWN_PARAMETER_TYPE = 103;
  KDF_R_VALUE_ERROR = 108;
  KDF_R_VALUE_MISSING = 102;
  EVP_PKEY_CTRL_TLS_MD = (EVP_PKEY_ALG_CTRL);
  EVP_PKEY_CTRL_TLS_SECRET = (EVP_PKEY_ALG_CTRL+1);
  EVP_PKEY_CTRL_TLS_SEED = (EVP_PKEY_ALG_CTRL+2);
  EVP_PKEY_CTRL_HKDF_MD = (EVP_PKEY_ALG_CTRL+3);
  EVP_PKEY_CTRL_HKDF_SALT = (EVP_PKEY_ALG_CTRL+4);
  EVP_PKEY_CTRL_HKDF_KEY = (EVP_PKEY_ALG_CTRL+5);
  EVP_PKEY_CTRL_HKDF_INFO = (EVP_PKEY_ALG_CTRL+6);
  EVP_PKEY_CTRL_HKDF_MODE = (EVP_PKEY_ALG_CTRL+7);
  EVP_PKEY_CTRL_PASS = (EVP_PKEY_ALG_CTRL+8);
  EVP_PKEY_CTRL_SCRYPT_SALT = (EVP_PKEY_ALG_CTRL+9);
  EVP_PKEY_CTRL_SCRYPT_N = (EVP_PKEY_ALG_CTRL+10);
  EVP_PKEY_CTRL_SCRYPT_R = (EVP_PKEY_ALG_CTRL+11);
  EVP_PKEY_CTRL_SCRYPT_P = (EVP_PKEY_ALG_CTRL+12);
  EVP_PKEY_CTRL_SCRYPT_MAXMEM_BYTES = (EVP_PKEY_ALG_CTRL+13);
  EVP_PKEY_HKDEF_MODE_EXTRACT_AND_EXPAND = 0;
  EVP_PKEY_HKDEF_MODE_EXTRACT_ONLY = 1;
  EVP_PKEY_HKDEF_MODE_EXPAND_ONLY = 2;
  MD4_CBLOCK = 64;
  MD4_LBLOCK = (MD4_CBLOCK div 4);
  MD4_DIGEST_LENGTH = 16;
  MD5_CBLOCK = 64;
  MD5_LBLOCK = (MD5_CBLOCK div 4);
  MD5_DIGEST_LENGTH = 16;
  MDC2_BLOCK = 8;
  MDC2_DIGEST_LENGTH = 16;
  OCSP_REVOKED_STATUS_NOSTATUS = -1;
  OCSP_REVOKED_STATUS_UNSPECIFIED = 0;
  OCSP_REVOKED_STATUS_KEYCOMPROMISE = 1;
  OCSP_REVOKED_STATUS_CACOMPROMISE = 2;
  OCSP_REVOKED_STATUS_AFFILIATIONCHANGED = 3;
  OCSP_REVOKED_STATUS_SUPERSEDED = 4;
  OCSP_REVOKED_STATUS_CESSATIONOFOPERATION = 5;
  OCSP_REVOKED_STATUS_CERTIFICATEHOLD = 6;
  OCSP_REVOKED_STATUS_REMOVEFROMCRL = 8;
  OCSP_F_D2I_OCSP_NONCE = 102;
  OCSP_F_OCSP_BASIC_ADD1_STATUS = 103;
  OCSP_F_OCSP_BASIC_SIGN = 104;
  OCSP_F_OCSP_BASIC_SIGN_CTX = 119;
  OCSP_F_OCSP_BASIC_VERIFY = 105;
  OCSP_F_OCSP_CERT_ID_NEW = 101;
  OCSP_F_OCSP_CHECK_DELEGATED = 106;
  OCSP_F_OCSP_CHECK_IDS = 107;
  OCSP_F_OCSP_CHECK_ISSUER = 108;
  OCSP_F_OCSP_CHECK_VALIDITY = 115;
  OCSP_F_OCSP_MATCH_ISSUERID = 109;
  OCSP_F_OCSP_PARSE_URL = 114;
  OCSP_F_OCSP_REQUEST_SIGN = 110;
  OCSP_F_OCSP_REQUEST_VERIFY = 116;
  OCSP_F_OCSP_RESPONSE_GET1_BASIC = 111;
  OCSP_F_PARSE_HTTP_LINE1 = 118;
  OCSP_R_CERTIFICATE_VERIFY_ERROR = 101;
  OCSP_R_DIGEST_ERR = 102;
  OCSP_R_ERROR_IN_NEXTUPDATE_FIELD = 122;
  OCSP_R_ERROR_IN_THISUPDATE_FIELD = 123;
  OCSP_R_ERROR_PARSING_URL = 121;
  OCSP_R_MISSING_OCSPSIGNING_USAGE = 103;
  OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE = 124;
  OCSP_R_NOT_BASIC_RESPONSE = 104;
  OCSP_R_NO_CERTIFICATES_IN_CHAIN = 105;
  OCSP_R_NO_RESPONSE_DATA = 108;
  OCSP_R_NO_REVOKED_TIME = 109;
  OCSP_R_NO_SIGNER_KEY = 130;
  OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 110;
  OCSP_R_REQUEST_NOT_SIGNED = 128;
  OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA = 111;
  OCSP_R_ROOT_CA_NOT_TRUSTED = 112;
  OCSP_R_SERVER_RESPONSE_ERROR = 114;
  OCSP_R_SERVER_RESPONSE_PARSE_ERROR = 115;
  OCSP_R_SIGNATURE_FAILURE = 117;
  OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND = 118;
  OCSP_R_STATUS_EXPIRED = 125;
  OCSP_R_STATUS_NOT_YET_VALID = 126;
  OCSP_R_STATUS_TOO_OLD = 127;
  OCSP_R_UNKNOWN_MESSAGE_DIGEST = 119;
  OCSP_R_UNKNOWN_NID = 120;
  OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE = 129;
  OCSP_DEFAULT_NONCE_LENGTH = 16;
  OCSP_NOCERTS = $1;
  OCSP_NOINTERN = $2;
  OCSP_NOSIGS = $4;
  OCSP_NOCHAIN = $8;
  OCSP_NOVERIFY = $10;
  OCSP_NOEXPLICIT = $20;
  OCSP_NOCASIGN = $40;
  OCSP_NODELEGATED = $80;
  OCSP_NOCHECKS = $100;
  OCSP_TRUSTOTHER = $200;
  OCSP_RESPID_KEY = $400;
  OCSP_NOTIME = $800;
  OCSP_RESPONSE_STATUS_SUCCESSFUL = 0;
  OCSP_RESPONSE_STATUS_MALFORMEDREQUEST = 1;
  OCSP_RESPONSE_STATUS_INTERNALERROR = 2;
  OCSP_RESPONSE_STATUS_TRYLATER = 3;
  OCSP_RESPONSE_STATUS_SIGREQUIRED = 5;
  OCSP_RESPONSE_STATUS_UNAUTHORIZED = 6;
  V_OCSP_RESPID_NAME = 0;
  V_OCSP_RESPID_KEY = 1;
  V_OCSP_CERTSTATUS_GOOD = 0;
  V_OCSP_CERTSTATUS_REVOKED = 1;
  V_OCSP_CERTSTATUS_UNKNOWN = 2;
  PEM_STRING_OCSP_REQUEST = 'OCSP REQUEST';
  PEM_STRING_OCSP_RESPONSE = 'OCSP RESPONSE';
  PKCS12_F_OPENSSL_ASC2UNI = 121;
  PKCS12_F_OPENSSL_UNI2ASC = 124;
  PKCS12_F_OPENSSL_UNI2UTF8 = 127;
  PKCS12_F_OPENSSL_UTF82UNI = 129;
  PKCS12_F_PKCS12_CREATE = 105;
  PKCS12_F_PKCS12_GEN_MAC = 107;
  PKCS12_F_PKCS12_INIT = 109;
  PKCS12_F_PKCS12_ITEM_DECRYPT_D2I = 106;
  PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT = 108;
  PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG = 117;
  PKCS12_F_PKCS12_KEY_GEN_ASC = 110;
  PKCS12_F_PKCS12_KEY_GEN_UNI = 111;
  PKCS12_F_PKCS12_KEY_GEN_UTF8 = 116;
  PKCS12_F_PKCS12_NEWPASS = 128;
  PKCS12_F_PKCS12_PACK_P7DATA = 114;
  PKCS12_F_PKCS12_PACK_P7ENCDATA = 115;
  PKCS12_F_PKCS12_PARSE = 118;
  PKCS12_F_PKCS12_PBE_CRYPT = 119;
  PKCS12_F_PKCS12_PBE_KEYIVGEN = 120;
  PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF = 112;
  PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8 = 113;
  PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT = 133;
  PKCS12_F_PKCS12_SETUP_MAC = 122;
  PKCS12_F_PKCS12_SET_MAC = 123;
  PKCS12_F_PKCS12_UNPACK_AUTHSAFES = 130;
  PKCS12_F_PKCS12_UNPACK_P7DATA = 131;
  PKCS12_F_PKCS12_VERIFY_MAC = 126;
  PKCS12_F_PKCS8_ENCRYPT = 125;
  PKCS12_F_PKCS8_SET0_PBE = 132;
  PKCS12_R_CANT_PACK_STRUCTURE = 100;
  PKCS12_R_CONTENT_TYPE_NOT_DATA = 121;
  PKCS12_R_DECODE_ERROR = 101;
  PKCS12_R_ENCODE_ERROR = 102;
  PKCS12_R_ENCRYPT_ERROR = 103;
  PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE = 120;
  PKCS12_R_INVALID_NULL_ARGUMENT = 104;
  PKCS12_R_INVALID_NULL_PKCS12_POINTER = 105;
  PKCS12_R_IV_GEN_ERROR = 106;
  PKCS12_R_KEY_GEN_ERROR = 107;
  PKCS12_R_MAC_ABSENT = 108;
  PKCS12_R_MAC_GENERATION_ERROR = 109;
  PKCS12_R_MAC_SETUP_ERROR = 110;
  PKCS12_R_MAC_STRING_SET_ERROR = 111;
  PKCS12_R_MAC_VERIFY_FAILURE = 113;
  PKCS12_R_PARSE_ERROR = 114;
  PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR = 115;
  PKCS12_R_PKCS12_CIPHERFINAL_ERROR = 116;
  PKCS12_R_PKCS12_PBE_CRYPT_ERROR = 117;
  PKCS12_R_UNKNOWN_DIGEST_ALGORITHM = 118;
  PKCS12_R_UNSUPPORTED_PKCS12_MODE = 119;
  PKCS12_KEY_ID = 1;
  PKCS12_IV_ID = 2;
  PKCS12_MAC_ID = 3;
  PKCS12_DEFAULT_ITER = PKCS5_DEFAULT_ITER;
  PKCS12_MAC_KEY_LENGTH = 20;
  PKCS12_SALT_LEN = 8;
  KEY_EX = $10;
  KEY_SIG = $80;
  PKCS12_ERROR = 0;
  PKCS12_OK = 1;
  RAND_DRBG_FLAG_CTR_NO_DF = $1;
  RAND_DRBG_USED_FLAGS = (RAND_DRBG_FLAG_CTR_NO_DF);
  RAND_DRBG_STRENGTH = 256;
  RAND_DRBG_TYPE = NID_aes_256_ctr;
  RAND_DRBG_FLAGS = 0;
  _RC2_ENCRYPT = 1;
  _RC2_DECRYPT = 0;
  RC2_BLOCK = 8;
  RC2_KEY_LENGTH = 16;
  RIPEMD160_CBLOCK = 64;
  RIPEMD160_LBLOCK = (RIPEMD160_CBLOCK div 4);
  RIPEMD160_DIGEST_LENGTH = 20;
  SEED_BLOCK_SIZE = 16;
  SEED_KEY_LENGTH = 16;
  SRP_NO_ERROR = 0;
  SRP_ERR_VBASE_INCOMPLETE_FILE = 1;
  SRP_ERR_VBASE_BN_LIB = 2;
  SRP_ERR_OPEN_FILE = 3;
  SRP_ERR_MEMORY = 4;
  DB_srptype = 0;
  DB_srpverifier = 1;
  DB_srpsalt = 2;
  DB_srpid = 3;
  DB_srpgN = 4;
  DB_srpinfo = 5;
  DB_NUMBER = 6;
  DB_SRP_INDEX = 'I';
  DB_SRP_VALID = 'V';
  DB_SRP_REVOKED = 'R';
  DB_SRP_MODIF = 'v';
  SRP_MINIMAL_N = 1024;
  SSL_F_ADD_CLIENT_KEY_SHARE_EXT = 438;
  SSL_F_ADD_KEY_SHARE = 512;
  SSL_F_BYTES_TO_CIPHER_LIST = 519;
  SSL_F_CHECK_SUITEB_CIPHER_LIST = 331;
  SSL_F_CIPHERSUITE_CB = 622;
  SSL_F_CONSTRUCT_CA_NAMES = 552;
  SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS = 553;
  SSL_F_CONSTRUCT_STATEFUL_TICKET = 636;
  SSL_F_CONSTRUCT_STATELESS_TICKET = 637;
  SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH = 539;
  SSL_F_CREATE_TICKET_PREQUEL = 638;
  SSL_F_CT_MOVE_SCTS = 345;
  SSL_F_CT_STRICT = 349;
  SSL_F_CUSTOM_EXT_ADD = 554;
  SSL_F_CUSTOM_EXT_PARSE = 555;
  SSL_F_D2I_SSL_SESSION = 103;
  SSL_F_DANE_CTX_ENABLE = 347;
  SSL_F_DANE_MTYPE_SET = 393;
  SSL_F_DANE_TLSA_ADD = 394;
  SSL_F_DERIVE_SECRET_KEY_AND_IV = 514;
  SSL_F_DO_DTLS1_WRITE = 245;
  SSL_F_DO_SSL3_WRITE = 104;
  SSL_F_DTLS1_BUFFER_RECORD = 247;
  SSL_F_DTLS1_CHECK_TIMEOUT_NUM = 318;
  SSL_F_DTLS1_HEARTBEAT = 305;
  SSL_F_DTLS1_HM_FRAGMENT_NEW = 623;
  SSL_F_DTLS1_PREPROCESS_FRAGMENT = 288;
  SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS = 424;
  SSL_F_DTLS1_PROCESS_RECORD = 257;
  SSL_F_DTLS1_READ_BYTES = 258;
  SSL_F_DTLS1_READ_FAILED = 339;
  SSL_F_DTLS1_RETRANSMIT_MESSAGE = 390;
  SSL_F_DTLS1_WRITE_APP_DATA_BYTES = 268;
  SSL_F_DTLS1_WRITE_BYTES = 545;
  SSL_F_DTLSV1_LISTEN = 350;
  SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 371;
  SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST = 385;
  SSL_F_DTLS_GET_REASSEMBLED_MESSAGE = 370;
  SSL_F_DTLS_PROCESS_HELLO_VERIFY = 386;
  SSL_F_DTLS_RECORD_LAYER_NEW = 635;
  SSL_F_DTLS_WAIT_FOR_DRY = 592;
  SSL_F_EARLY_DATA_COUNT_OK = 532;
  SSL_F_FINAL_EARLY_DATA = 556;
  SSL_F_FINAL_EC_PT_FORMATS = 485;
  SSL_F_FINAL_EMS = 486;
  SSL_F_FINAL_KEY_SHARE = 503;
  SSL_F_FINAL_MAXFRAGMENTLEN = 557;
  SSL_F_FINAL_RENEGOTIATE = 483;
  SSL_F_FINAL_SERVER_NAME = 558;
  SSL_F_FINAL_SIG_ALGS = 497;
  SSL_F_GET_CERT_VERIFY_TBS_DATA = 588;
  SSL_F_NSS_KEYLOG_INT = 500;
  SSL_F_OPENSSL_INIT_SSL = 342;
  SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION = 436;
  SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION = 598;
  SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE = 430;
  SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE = 593;
  SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE = 594;
  SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION = 417;
  SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION = 599;
  SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION = 437;
  SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION = 600;
  SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE = 431;
  SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE = 601;
  SSL_F_OSSL_STATEM_SERVER_POST_WORK = 602;
  SSL_F_OSSL_STATEM_SERVER_PRE_WORK = 640;
  SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE = 603;
  SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION = 418;
  SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION = 604;
  SSL_F_PARSE_CA_NAMES = 541;
  SSL_F_PITEM_NEW = 624;
  SSL_F_PQUEUE_NEW = 625;
  SSL_F_PROCESS_KEY_SHARE_EXT = 439;
  SSL_F_READ_STATE_MACHINE = 352;
  SSL_F_SET_CLIENT_CIPHERSUITE = 540;
  SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET = 595;
  SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET = 589;
  SSL_F_SRP_VERIFY_SERVER_PARAM = 596;
  SSL_F_SSL3_CHANGE_CIPHER_STATE = 129;
  SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM = 130;
  SSL_F_SSL3_CTRL = 213;
  SSL_F_SSL3_CTX_CTRL = 133;
  SSL_F_SSL3_DIGEST_CACHED_RECORDS = 293;
  SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC = 292;
  SSL_F_SSL3_ENC = 608;
  SSL_F_SSL3_FINAL_FINISH_MAC = 285;
  SSL_F_SSL3_FINISH_MAC = 587;
  SSL_F_SSL3_GENERATE_KEY_BLOCK = 238;
  SSL_F_SSL3_GENERATE_MASTER_SECRET = 388;
  SSL_F_SSL3_GET_RECORD = 143;
  SSL_F_SSL3_INIT_FINISHED_MAC = 397;
  SSL_F_SSL3_OUTPUT_CERT_CHAIN = 147;
  SSL_F_SSL3_READ_BYTES = 148;
  SSL_F_SSL3_READ_N = 149;
  SSL_F_SSL3_SETUP_KEY_BLOCK = 157;
  SSL_F_SSL3_SETUP_READ_BUFFER = 156;
  SSL_F_SSL3_SETUP_WRITE_BUFFER = 291;
  SSL_F_SSL3_WRITE_BYTES = 158;
  SSL_F_SSL3_WRITE_PENDING = 159;
  SSL_F_SSL_ADD_CERT_CHAIN = 316;
  SSL_F_SSL_ADD_CERT_TO_BUF = 319;
  SSL_F_SSL_ADD_CERT_TO_WPACKET = 493;
  SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT = 298;
  SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT = 277;
  SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT = 307;
  SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK = 215;
  SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK = 216;
  SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT = 299;
  SSL_F_SSL_ADD_SERVERHELLO_TLSEXT = 278;
  SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT = 308;
  SSL_F_SSL_BAD_METHOD = 160;
  SSL_F_SSL_BUILD_CERT_CHAIN = 332;
  SSL_F_SSL_BYTES_TO_CIPHER_LIST = 161;
  SSL_F_SSL_CACHE_CIPHERLIST = 520;
  SSL_F_SSL_CERT_ADD0_CHAIN_CERT = 346;
  SSL_F_SSL_CERT_DUP = 221;
  SSL_F_SSL_CERT_NEW = 162;
  SSL_F_SSL_CERT_SET0_CHAIN = 340;
  SSL_F_SSL_CHECK_PRIVATE_KEY = 163;
  SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT = 280;
  SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO = 606;
  SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG = 279;
  SSL_F_SSL_CHOOSE_CLIENT_VERSION = 607;
  SSL_F_SSL_CIPHER_DESCRIPTION = 626;
  SSL_F_SSL_CIPHER_LIST_TO_BYTES = 425;
  SSL_F_SSL_CIPHER_PROCESS_RULESTR = 230;
  SSL_F_SSL_CIPHER_STRENGTH_SORT = 231;
  SSL_F_SSL_CLEAR = 164;
  SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT = 627;
  SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD = 165;
  SSL_F_SSL_CONF_CMD = 334;
  SSL_F_SSL_CREATE_CIPHER_LIST = 166;
  SSL_F_SSL_CTRL = 232;
  SSL_F_SSL_CTX_CHECK_PRIVATE_KEY = 168;
  SSL_F_SSL_CTX_ENABLE_CT = 398;
  SSL_F_SSL_CTX_MAKE_PROFILES = 309;
  SSL_F_SSL_CTX_NEW = 169;
  SSL_F_SSL_CTX_SET_ALPN_PROTOS = 343;
  SSL_F_SSL_CTX_SET_CIPHER_LIST = 269;
  SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE = 290;
  SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK = 396;
  SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT = 219;
  SSL_F_SSL_CTX_SET_SSL_VERSION = 170;
  SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 551;
  SSL_F_SSL_CTX_USE_CERTIFICATE = 171;
  SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1 = 172;
  SSL_F_SSL_CTX_USE_CERTIFICATE_FILE = 173;
  SSL_F_SSL_CTX_USE_PRIVATEKEY = 174;
  SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1 = 175;
  SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE = 176;
  SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT = 272;
  SSL_F_SSL_CTX_USE_RSAPRIVATEKEY = 177;
  SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1 = 178;
  SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE = 179;
  SSL_F_SSL_CTX_USE_SERVERINFO = 336;
  SSL_F_SSL_CTX_USE_SERVERINFO_EX = 543;
  SSL_F_SSL_CTX_USE_SERVERINFO_FILE = 337;
  SSL_F_SSL_DANE_DUP = 403;
  SSL_F_SSL_DANE_ENABLE = 395;
  SSL_F_SSL_DERIVE = 590;
  SSL_F_SSL_DO_CONFIG = 391;
  SSL_F_SSL_DO_HANDSHAKE = 180;
  SSL_F_SSL_DUP_CA_LIST = 408;
  SSL_F_SSL_ENABLE_CT = 402;
  SSL_F_SSL_GENERATE_PKEY_GROUP = 559;
  SSL_F_SSL_GENERATE_SESSION_ID = 547;
  SSL_F_SSL_GET_NEW_SESSION = 181;
  SSL_F_SSL_GET_PREV_SESSION = 217;
  SSL_F_SSL_GET_SERVER_CERT_INDEX = 322;
  SSL_F_SSL_GET_SIGN_PKEY = 183;
  SSL_F_SSL_HANDSHAKE_HASH = 560;
  SSL_F_SSL_INIT_WBIO_BUFFER = 184;
  SSL_F_SSL_KEY_UPDATE = 515;
  SSL_F_SSL_LOAD_CLIENT_CA_FILE = 185;
  SSL_F_SSL_LOG_MASTER_SECRET = 498;
  SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE = 499;
  SSL_F_SSL_MODULE_INIT = 392;
  SSL_F_SSL_NEW = 186;
  SSL_F_SSL_NEXT_PROTO_VALIDATE = 565;
  SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT = 300;
  SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT = 302;
  SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT = 310;
  SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT = 301;
  SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT = 303;
  SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT = 311;
  SSL_F_SSL_PEEK = 270;
  SSL_F_SSL_PEEK_EX = 432;
  SSL_F_SSL_PEEK_INTERNAL = 522;
  SSL_F_SSL_READ = 223;
  SSL_F_SSL_READ_EARLY_DATA = 529;
  SSL_F_SSL_READ_EX = 434;
  SSL_F_SSL_READ_INTERNAL = 523;
  SSL_F_SSL_RENEGOTIATE = 516;
  SSL_F_SSL_RENEGOTIATE_ABBREVIATED = 546;
  SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT = 320;
  SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT = 321;
  SSL_F_SSL_SESSION_DUP = 348;
  SSL_F_SSL_SESSION_NEW = 189;
  SSL_F_SSL_SESSION_PRINT_FP = 190;
  SSL_F_SSL_SESSION_SET1_ID = 423;
  SSL_F_SSL_SESSION_SET1_ID_CONTEXT = 312;
  SSL_F_SSL_SET_ALPN_PROTOS = 344;
  SSL_F_SSL_SET_CERT = 191;
  SSL_F_SSL_SET_CERT_AND_KEY = 621;
  SSL_F_SSL_SET_CIPHER_LIST = 271;
  SSL_F_SSL_SET_CT_VALIDATION_CALLBACK = 399;
  SSL_F_SSL_SET_FD = 192;
  SSL_F_SSL_SET_PKEY = 193;
  SSL_F_SSL_SET_RFD = 194;
  SSL_F_SSL_SET_SESSION = 195;
  SSL_F_SSL_SET_SESSION_ID_CONTEXT = 218;
  SSL_F_SSL_SET_SESSION_TICKET_EXT = 294;
  SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 550;
  SSL_F_SSL_SET_WFD = 196;
  SSL_F_SSL_SHUTDOWN = 224;
  SSL_F_SSL_SRP_CTX_INIT = 313;
  SSL_F_SSL_START_ASYNC_JOB = 389;
  SSL_F_SSL_UNDEFINED_FUNCTION = 197;
  SSL_F_SSL_UNDEFINED_VOID_FUNCTION = 244;
  SSL_F_SSL_USE_CERTIFICATE = 198;
  SSL_F_SSL_USE_CERTIFICATE_ASN1 = 199;
  SSL_F_SSL_USE_CERTIFICATE_FILE = 200;
  SSL_F_SSL_USE_PRIVATEKEY = 201;
  SSL_F_SSL_USE_PRIVATEKEY_ASN1 = 202;
  SSL_F_SSL_USE_PRIVATEKEY_FILE = 203;
  SSL_F_SSL_USE_PSK_IDENTITY_HINT = 273;
  SSL_F_SSL_USE_RSAPRIVATEKEY = 204;
  SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1 = 205;
  SSL_F_SSL_USE_RSAPRIVATEKEY_FILE = 206;
  SSL_F_SSL_VALIDATE_CT = 400;
  SSL_F_SSL_VERIFY_CERT_CHAIN = 207;
  SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE = 616;
  SSL_F_SSL_WRITE = 208;
  SSL_F_SSL_WRITE_EARLY_DATA = 526;
  SSL_F_SSL_WRITE_EARLY_FINISH = 527;
  SSL_F_SSL_WRITE_EX = 433;
  SSL_F_SSL_WRITE_INTERNAL = 524;
  SSL_F_STATE_MACHINE = 353;
  SSL_F_TLS12_CHECK_PEER_SIGALG = 333;
  SSL_F_TLS12_COPY_SIGALGS = 533;
  SSL_F_TLS13_CHANGE_CIPHER_STATE = 440;
  SSL_F_TLS13_ENC = 609;
  SSL_F_TLS13_FINAL_FINISH_MAC = 605;
  SSL_F_TLS13_GENERATE_SECRET = 591;
  SSL_F_TLS13_HKDF_EXPAND = 561;
  SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA = 617;
  SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA = 618;
  SSL_F_TLS13_SETUP_KEY_BLOCK = 441;
  SSL_F_TLS1_CHANGE_CIPHER_STATE = 209;
  SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS = 341;
  SSL_F_TLS1_ENC = 401;
  SSL_F_TLS1_EXPORT_KEYING_MATERIAL = 314;
  SSL_F_TLS1_GET_CURVELIST = 338;
  SSL_F_TLS1_PRF = 284;
  SSL_F_TLS1_SAVE_U16 = 628;
  SSL_F_TLS1_SETUP_KEY_BLOCK = 211;
  SSL_F_TLS1_SET_GROUPS = 629;
  SSL_F_TLS1_SET_RAW_SIGALGS = 630;
  SSL_F_TLS1_SET_SERVER_SIGALGS = 335;
  SSL_F_TLS1_SET_SHARED_SIGALGS = 631;
  SSL_F_TLS1_SET_SIGALGS = 632;
  SSL_F_TLS_CHOOSE_SIGALG = 513;
  SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK = 354;
  SSL_F_TLS_COLLECT_EXTENSIONS = 435;
  SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES = 542;
  SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST = 372;
  SSL_F_TLS_CONSTRUCT_CERT_STATUS = 429;
  SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY = 494;
  SSL_F_TLS_CONSTRUCT_CERT_VERIFY = 496;
  SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 427;
  SSL_F_TLS_CONSTRUCT_CKE_DHE = 404;
  SSL_F_TLS_CONSTRUCT_CKE_ECDHE = 405;
  SSL_F_TLS_CONSTRUCT_CKE_GOST = 406;
  SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE = 407;
  SSL_F_TLS_CONSTRUCT_CKE_RSA = 409;
  SSL_F_TLS_CONSTRUCT_CKE_SRP = 410;
  SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE = 484;
  SSL_F_TLS_CONSTRUCT_CLIENT_HELLO = 487;
  SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE = 488;
  SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY = 489;
  SSL_F_TLS_CONSTRUCT_CTOS_ALPN = 466;
  SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE = 355;
  SSL_F_TLS_CONSTRUCT_CTOS_COOKIE = 535;
  SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA = 530;
  SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS = 467;
  SSL_F_TLS_CONSTRUCT_CTOS_EMS = 468;
  SSL_F_TLS_CONSTRUCT_CTOS_ETM = 469;
  SSL_F_TLS_CONSTRUCT_CTOS_HELLO = 356;
  SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE = 357;
  SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE = 470;
  SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN = 549;
  SSL_F_TLS_CONSTRUCT_CTOS_NPN = 471;
  SSL_F_TLS_CONSTRUCT_CTOS_PADDING = 472;
  SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH = 619;
  SSL_F_TLS_CONSTRUCT_CTOS_PSK = 501;
  SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES = 509;
  SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE = 473;
  SSL_F_TLS_CONSTRUCT_CTOS_SCT = 474;
  SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME = 475;
  SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET = 476;
  SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS = 477;
  SSL_F_TLS_CONSTRUCT_CTOS_SRP = 478;
  SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST = 479;
  SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS = 480;
  SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS = 481;
  SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP = 482;
  SSL_F_TLS_CONSTRUCT_CTOS_VERIFY = 358;
  SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS = 443;
  SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA = 536;
  SSL_F_TLS_CONSTRUCT_EXTENSIONS = 447;
  SSL_F_TLS_CONSTRUCT_FINISHED = 359;
  SSL_F_TLS_CONSTRUCT_HELLO_REQUEST = 373;
  SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST = 510;
  SSL_F_TLS_CONSTRUCT_KEY_UPDATE = 517;
  SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET = 428;
  SSL_F_TLS_CONSTRUCT_NEXT_PROTO = 426;
  SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE = 490;
  SSL_F_TLS_CONSTRUCT_SERVER_HELLO = 491;
  SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE = 492;
  SSL_F_TLS_CONSTRUCT_STOC_ALPN = 451;
  SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE = 374;
  SSL_F_TLS_CONSTRUCT_STOC_COOKIE = 613;
  SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG = 452;
  SSL_F_TLS_CONSTRUCT_STOC_DONE = 375;
  SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA = 531;
  SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO = 525;
  SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS = 453;
  SSL_F_TLS_CONSTRUCT_STOC_EMS = 454;
  SSL_F_TLS_CONSTRUCT_STOC_ETM = 455;
  SSL_F_TLS_CONSTRUCT_STOC_HELLO = 376;
  SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE = 377;
  SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE = 456;
  SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN = 548;
  SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG = 457;
  SSL_F_TLS_CONSTRUCT_STOC_PSK = 504;
  SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE = 458;
  SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME = 459;
  SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET = 460;
  SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST = 461;
  SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS = 544;
  SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS = 611;
  SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP = 462;
  SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO = 521;
  SSL_F_TLS_FINISH_HANDSHAKE = 597;
  SSL_F_TLS_GET_MESSAGE_BODY = 351;
  SSL_F_TLS_GET_MESSAGE_HEADER = 387;
  SSL_F_TLS_HANDLE_ALPN = 562;
  SSL_F_TLS_HANDLE_STATUS_REQUEST = 563;
  SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES = 566;
  SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT = 449;
  SSL_F_TLS_PARSE_CTOS_ALPN = 567;
  SSL_F_TLS_PARSE_CTOS_COOKIE = 614;
  SSL_F_TLS_PARSE_CTOS_EARLY_DATA = 568;
  SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS = 569;
  SSL_F_TLS_PARSE_CTOS_EMS = 570;
  SSL_F_TLS_PARSE_CTOS_KEY_SHARE = 463;
  SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN = 571;
  SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH = 620;
  SSL_F_TLS_PARSE_CTOS_PSK = 505;
  SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES = 572;
  SSL_F_TLS_PARSE_CTOS_RENEGOTIATE = 464;
  SSL_F_TLS_PARSE_CTOS_SERVER_NAME = 573;
  SSL_F_TLS_PARSE_CTOS_SESSION_TICKET = 574;
  SSL_F_TLS_PARSE_CTOS_SIG_ALGS = 575;
  SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT = 615;
  SSL_F_TLS_PARSE_CTOS_SRP = 576;
  SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST = 577;
  SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS = 578;
  SSL_F_TLS_PARSE_CTOS_USE_SRTP = 465;
  SSL_F_TLS_PARSE_STOC_ALPN = 579;
  SSL_F_TLS_PARSE_STOC_COOKIE = 534;
  SSL_F_TLS_PARSE_STOC_EARLY_DATA = 538;
  SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO = 528;
  SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS = 580;
  SSL_F_TLS_PARSE_STOC_KEY_SHARE = 445;
  SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN = 581;
  SSL_F_TLS_PARSE_STOC_NPN = 582;
  SSL_F_TLS_PARSE_STOC_PSK = 502;
  SSL_F_TLS_PARSE_STOC_RENEGOTIATE = 448;
  SSL_F_TLS_PARSE_STOC_SCT = 564;
  SSL_F_TLS_PARSE_STOC_SERVER_NAME = 583;
  SSL_F_TLS_PARSE_STOC_SESSION_TICKET = 584;
  SSL_F_TLS_PARSE_STOC_STATUS_REQUEST = 585;
  SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS = 612;
  SSL_F_TLS_PARSE_STOC_USE_SRTP = 446;
  SSL_F_TLS_POST_PROCESS_CLIENT_HELLO = 378;
  SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE = 384;
  SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE = 360;
  SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST = 610;
  SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST = 361;
  SSL_F_TLS_PROCESS_CERT_STATUS = 362;
  SSL_F_TLS_PROCESS_CERT_STATUS_BODY = 495;
  SSL_F_TLS_PROCESS_CERT_VERIFY = 379;
  SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC = 363;
  SSL_F_TLS_PROCESS_CKE_DHE = 411;
  SSL_F_TLS_PROCESS_CKE_ECDHE = 412;
  SSL_F_TLS_PROCESS_CKE_GOST = 413;
  SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE = 414;
  SSL_F_TLS_PROCESS_CKE_RSA = 415;
  SSL_F_TLS_PROCESS_CKE_SRP = 416;
  SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE = 380;
  SSL_F_TLS_PROCESS_CLIENT_HELLO = 381;
  SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE = 382;
  SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS = 444;
  SSL_F_TLS_PROCESS_END_OF_EARLY_DATA = 537;
  SSL_F_TLS_PROCESS_FINISHED = 364;
  SSL_F_TLS_PROCESS_HELLO_REQ = 507;
  SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST = 511;
  SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT = 442;
  SSL_F_TLS_PROCESS_KEY_EXCHANGE = 365;
  SSL_F_TLS_PROCESS_KEY_UPDATE = 518;
  SSL_F_TLS_PROCESS_NEW_SESSION_TICKET = 366;
  SSL_F_TLS_PROCESS_NEXT_PROTO = 383;
  SSL_F_TLS_PROCESS_SERVER_CERTIFICATE = 367;
  SSL_F_TLS_PROCESS_SERVER_DONE = 368;
  SSL_F_TLS_PROCESS_SERVER_HELLO = 369;
  SSL_F_TLS_PROCESS_SKE_DHE = 419;
  SSL_F_TLS_PROCESS_SKE_ECDHE = 420;
  SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE = 421;
  SSL_F_TLS_PROCESS_SKE_SRP = 422;
  SSL_F_TLS_PSK_DO_BINDER = 506;
  SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT = 450;
  SSL_F_TLS_SETUP_HANDSHAKE = 508;
  SSL_F_USE_CERTIFICATE_CHAIN_FILE = 220;
  SSL_F_WPACKET_INTERN_INIT_LEN = 633;
  SSL_F_WPACKET_START_SUB_PACKET_LEN__ = 634;
  SSL_F_WRITE_STATE_MACHINE = 586;
  SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY = 291;
  SSL_R_APP_DATA_IN_HANDSHAKE = 100;
  SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT = 272;
  SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE = 143;
  SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE = 158;
  SSL_R_BAD_CHANGE_CIPHER_SPEC = 103;
  SSL_R_BAD_CIPHER = 186;
  SSL_R_BAD_DATA = 390;
  SSL_R_BAD_DATA_RETURNED_BY_CALLBACK = 106;
  SSL_R_BAD_DECOMPRESSION = 107;
  SSL_R_BAD_DH_VALUE = 102;
  SSL_R_BAD_DIGEST_LENGTH = 111;
  SSL_R_BAD_EARLY_DATA = 233;
  SSL_R_BAD_ECC_CERT = 304;
  SSL_R_BAD_ECPOINT = 306;
  SSL_R_BAD_EXTENSION = 110;
  SSL_R_BAD_HANDSHAKE_LENGTH = 332;
  SSL_R_BAD_HANDSHAKE_STATE = 236;
  SSL_R_BAD_HELLO_REQUEST = 105;
  SSL_R_BAD_HRR_VERSION = 263;
  SSL_R_BAD_KEY_SHARE = 108;
  SSL_R_BAD_KEY_UPDATE = 122;
  SSL_R_BAD_LEGACY_VERSION = 292;
  SSL_R_BAD_LENGTH = 271;
  SSL_R_BAD_PACKET = 240;
  SSL_R_BAD_PACKET_LENGTH = 115;
  SSL_R_BAD_PROTOCOL_VERSION_NUMBER = 116;
  SSL_R_BAD_PSK = 219;
  SSL_R_BAD_PSK_IDENTITY = 114;
  SSL_R_BAD_RECORD_TYPE = 443;
  SSL_R_BAD_RSA_ENCRYPT = 119;
  SSL_R_BAD_SIGNATURE = 123;
  SSL_R_BAD_SRP_A_LENGTH = 347;
  SSL_R_BAD_SRP_PARAMETERS = 371;
  SSL_R_BAD_SRTP_MKI_VALUE = 352;
  SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST = 353;
  SSL_R_BAD_SSL_FILETYPE = 124;
  SSL_R_BAD_VALUE = 384;
  SSL_R_BAD_WRITE_RETRY = 127;
  SSL_R_BINDER_DOES_NOT_VERIFY = 253;
  SSL_R_BIO_NOT_SET = 128;
  SSL_R_BLOCK_CIPHER_PAD_IS_WRONG = 129;
  SSL_R_BN_LIB = 130;
  SSL_R_CALLBACK_FAILED = 234;
  SSL_R_CANNOT_CHANGE_CIPHER = 109;
  SSL_R_CA_DN_LENGTH_MISMATCH = 131;
  SSL_R_CA_KEY_TOO_SMALL = 397;
  SSL_R_CA_MD_TOO_WEAK = 398;
  SSL_R_CCS_RECEIVED_EARLY = 133;
  SSL_R_CERTIFICATE_VERIFY_FAILED = 134;
  SSL_R_CERT_CB_ERROR = 377;
  SSL_R_CERT_LENGTH_MISMATCH = 135;
  SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED = 218;
  SSL_R_CIPHER_CODE_WRONG_LENGTH = 137;
  SSL_R_CIPHER_OR_HASH_UNAVAILABLE = 138;
  SSL_R_CLIENTHELLO_TLSEXT = 226;
  SSL_R_COMPRESSED_LENGTH_TOO_LONG = 140;
  SSL_R_COMPRESSION_DISABLED = 343;
  SSL_R_COMPRESSION_FAILURE = 141;
  SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE = 307;
  SSL_R_COMPRESSION_LIBRARY_ERROR = 142;
  SSL_R_CONNECTION_TYPE_NOT_SET = 144;
  SSL_R_CONTEXT_NOT_DANE_ENABLED = 167;
  SSL_R_COOKIE_GEN_CALLBACK_FAILURE = 400;
  SSL_R_COOKIE_MISMATCH = 308;
  SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED = 206;
  SSL_R_DANE_ALREADY_ENABLED = 172;
  SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL = 173;
  SSL_R_DANE_NOT_ENABLED = 175;
  SSL_R_DANE_TLSA_BAD_CERTIFICATE = 180;
  SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE = 184;
  SSL_R_DANE_TLSA_BAD_DATA_LENGTH = 189;
  SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH = 192;
  SSL_R_DANE_TLSA_BAD_MATCHING_TYPE = 200;
  SSL_R_DANE_TLSA_BAD_PUBLIC_KEY = 201;
  SSL_R_DANE_TLSA_BAD_SELECTOR = 202;
  SSL_R_DANE_TLSA_NULL_DATA = 203;
  SSL_R_DATA_BETWEEN_CCS_AND_FINISHED = 145;
  SSL_R_DATA_LENGTH_TOO_LONG = 146;
  SSL_R_DECRYPTION_FAILED = 147;
  SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC = 281;
  SSL_R_DH_KEY_TOO_SMALL = 394;
  SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG = 148;
  SSL_R_DIGEST_CHECK_FAILED = 149;
  SSL_R_DTLS_MESSAGE_TOO_BIG = 334;
  SSL_R_DUPLICATE_COMPRESSION_ID = 309;
  SSL_R_ECC_CERT_NOT_FOR_SIGNING = 318;
  SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE = 374;
  SSL_R_EE_KEY_TOO_SMALL = 399;
  SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST = 354;
  SSL_R_ENCRYPTED_LENGTH_TOO_LONG = 150;
  SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST = 151;
  SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN = 204;
  SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE = 194;
  SSL_R_EXCESSIVE_MESSAGE_SIZE = 152;
  SSL_R_EXTENSION_NOT_RECEIVED = 279;
  SSL_R_EXTRA_DATA_IN_MESSAGE = 153;
  SSL_R_EXT_LENGTH_MISMATCH = 163;
  SSL_R_FAILED_TO_INIT_ASYNC = 405;
  SSL_R_FRAGMENTED_CLIENT_HELLO = 401;
  SSL_R_GOT_A_FIN_BEFORE_A_CCS = 154;
  SSL_R_HTTPS_PROXY_REQUEST = 155;
  SSL_R_HTTP_REQUEST = 156;
  SSL_R_ILLEGAL_POINT_COMPRESSION = 162;
  SSL_R_ILLEGAL_SUITEB_DIGEST = 380;
  SSL_R_INAPPROPRIATE_FALLBACK = 373;
  SSL_R_INCONSISTENT_COMPRESSION = 340;
  SSL_R_INCONSISTENT_EARLY_DATA_ALPN = 222;
  SSL_R_INCONSISTENT_EARLY_DATA_SNI = 231;
  SSL_R_INCONSISTENT_EXTMS = 104;
  SSL_R_INSUFFICIENT_SECURITY = 241;
  SSL_R_INVALID_ALERT = 205;
  SSL_R_INVALID_CCS_MESSAGE = 260;
  SSL_R_INVALID_CERTIFICATE_OR_ALG = 238;
  SSL_R_INVALID_COMMAND = 280;
  SSL_R_INVALID_COMPRESSION_ALGORITHM = 341;
  SSL_R_INVALID_CONFIG = 283;
  SSL_R_INVALID_CONFIGURATION_NAME = 113;
  SSL_R_INVALID_CONTEXT = 282;
  SSL_R_INVALID_CT_VALIDATION_TYPE = 212;
  SSL_R_INVALID_KEY_UPDATE_TYPE = 120;
  SSL_R_INVALID_MAX_EARLY_DATA = 174;
  SSL_R_INVALID_NULL_CMD_NAME = 385;
  SSL_R_INVALID_SEQUENCE_NUMBER = 402;
  SSL_R_INVALID_SERVERINFO_DATA = 388;
  SSL_R_INVALID_SESSION_ID = 999;
  SSL_R_INVALID_SRP_USERNAME = 357;
  SSL_R_INVALID_STATUS_RESPONSE = 328;
  SSL_R_INVALID_TICKET_KEYS_LENGTH = 325;
  SSL_R_LENGTH_MISMATCH = 159;
  SSL_R_LENGTH_TOO_LONG = 404;
  SSL_R_LENGTH_TOO_SHORT = 160;
  SSL_R_LIBRARY_BUG = 274;
  SSL_R_LIBRARY_HAS_NO_CIPHERS = 161;
  SSL_R_MISSING_DSA_SIGNING_CERT = 165;
  SSL_R_MISSING_ECDSA_SIGNING_CERT = 381;
  SSL_R_MISSING_FATAL = 256;
  SSL_R_MISSING_PARAMETERS = 290;
  SSL_R_MISSING_RSA_CERTIFICATE = 168;
  SSL_R_MISSING_RSA_ENCRYPTING_CERT = 169;
  SSL_R_MISSING_RSA_SIGNING_CERT = 170;
  SSL_R_MISSING_SIGALGS_EXTENSION = 112;
  SSL_R_MISSING_SIGNING_CERT = 221;
  SSL_R_MISSING_SRP_PARAM = 358;
  SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION = 209;
  SSL_R_MISSING_TMP_DH_KEY = 171;
  SSL_R_MISSING_TMP_ECDH_KEY = 311;
  SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA = 293;
  SSL_R_NOT_ON_RECORD_BOUNDARY = 182;
  SSL_R_NOT_REPLACING_CERTIFICATE = 289;
  SSL_R_NOT_SERVER = 284;
  SSL_R_NO_APPLICATION_PROTOCOL = 235;
  SSL_R_NO_CERTIFICATES_RETURNED = 176;
  SSL_R_NO_CERTIFICATE_ASSIGNED = 177;
  SSL_R_NO_CERTIFICATE_SET = 179;
  SSL_R_NO_CHANGE_FOLLOWING_HRR = 214;
  SSL_R_NO_CIPHERS_AVAILABLE = 181;
  SSL_R_NO_CIPHERS_SPECIFIED = 183;
  SSL_R_NO_CIPHER_MATCH = 185;
  SSL_R_NO_CLIENT_CERT_METHOD = 331;
  SSL_R_NO_COMPRESSION_SPECIFIED = 187;
  SSL_R_NO_COOKIE_CALLBACK_SET = 287;
  SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER = 330;
  SSL_R_NO_METHOD_SPECIFIED = 188;
  SSL_R_NO_PEM_EXTENSIONS = 389;
  SSL_R_NO_PRIVATE_KEY_ASSIGNED = 190;
  SSL_R_NO_PROTOCOLS_AVAILABLE = 191;
  SSL_R_NO_RENEGOTIATION = 339;
  SSL_R_NO_REQUIRED_DIGEST = 324;
  SSL_R_NO_SHARED_CIPHER = 193;
  SSL_R_NO_SHARED_GROUPS = 410;
  SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS = 376;
  SSL_R_NO_SRTP_PROFILES = 359;
  SSL_R_NO_SUITABLE_KEY_SHARE = 101;
  SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM = 118;
  SSL_R_NO_VALID_SCTS = 216;
  SSL_R_NO_VERIFY_COOKIE_CALLBACK = 403;
  SSL_R_NULL_SSL_CTX = 195;
  SSL_R_NULL_SSL_METHOD_PASSED = 196;
  SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED = 197;
  SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED = 344;
  SSL_R_OVERFLOW_ERROR = 237;
  SSL_R_PACKET_LENGTH_TOO_LONG = 198;
  SSL_R_PARSE_TLSEXT = 227;
  SSL_R_PATH_TOO_LONG = 270;
  SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE = 199;
  SSL_R_PEM_NAME_BAD_PREFIX = 391;
  SSL_R_PEM_NAME_TOO_SHORT = 392;
  SSL_R_PIPELINE_FAILURE = 406;
  SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR = 278;
  SSL_R_PRIVATE_KEY_MISMATCH = 288;
  SSL_R_PROTOCOL_IS_SHUTDOWN = 207;
  SSL_R_PSK_IDENTITY_NOT_FOUND = 223;
  SSL_R_PSK_NO_CLIENT_CB = 224;
  SSL_R_PSK_NO_SERVER_CB = 225;
  SSL_R_READ_BIO_NOT_SET = 211;
  SSL_R_READ_TIMEOUT_EXPIRED = 312;
  SSL_R_RECORD_LENGTH_MISMATCH = 213;
  SSL_R_RECORD_TOO_SMALL = 298;
  SSL_R_RENEGOTIATE_EXT_TOO_LONG = 335;
  SSL_R_RENEGOTIATION_ENCODING_ERR = 336;
  SSL_R_RENEGOTIATION_MISMATCH = 337;
  SSL_R_REQUEST_PENDING = 285;
  SSL_R_REQUEST_SENT = 286;
  SSL_R_REQUIRED_CIPHER_MISSING = 215;
  SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING = 342;
  SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING = 345;
  SSL_R_SCT_VERIFICATION_FAILED = 208;
  SSL_R_SERVERHELLO_TLSEXT = 275;
  SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED = 277;
  SSL_R_SHUTDOWN_WHILE_IN_INIT = 407;
  SSL_R_SIGNATURE_ALGORITHMS_ERROR = 360;
  SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE = 220;
  SSL_R_SRP_A_CALC = 361;
  SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES = 362;
  SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG = 363;
  SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE = 364;
  SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH = 232;
  SSL_R_SSL3_EXT_INVALID_SERVERNAME = 319;
  SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE = 320;
  SSL_R_SSL3_SESSION_ID_TOO_LONG = 300;
  SSL_R_SSLV3_ALERT_BAD_CERTIFICATE = 1042;
  SSL_R_SSLV3_ALERT_BAD_RECORD_MAC = 1020;
  SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED = 1045;
  SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED = 1044;
  SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN = 1046;
  SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE = 1030;
  SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE = 1040;
  SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER = 1047;
  SSL_R_SSLV3_ALERT_NO_CERTIFICATE = 1041;
  SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE = 1010;
  SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE = 1043;
  SSL_R_SSL_COMMAND_SECTION_EMPTY = 117;
  SSL_R_SSL_COMMAND_SECTION_NOT_FOUND = 125;
  SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION = 228;
  SSL_R_SSL_HANDSHAKE_FAILURE = 229;
  SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS = 230;
  SSL_R_SSL_NEGATIVE_LENGTH = 372;
  SSL_R_SSL_SECTION_EMPTY = 126;
  SSL_R_SSL_SECTION_NOT_FOUND = 136;
  SSL_R_SSL_SESSION_ID_CALLBACK_FAILED = 301;
  SSL_R_SSL_SESSION_ID_CONFLICT = 302;
  SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG = 273;
  SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH = 303;
  SSL_R_SSL_SESSION_ID_TOO_LONG = 408;
  SSL_R_SSL_SESSION_VERSION_MISMATCH = 210;
  SSL_R_STILL_IN_INIT = 121;
  SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED = 1116;
  SSL_R_TLSV13_ALERT_MISSING_EXTENSION = 1109;
  SSL_R_TLSV1_ALERT_ACCESS_DENIED = 1049;
  SSL_R_TLSV1_ALERT_DECODE_ERROR = 1050;
  SSL_R_TLSV1_ALERT_DECRYPTION_FAILED = 1021;
  SSL_R_TLSV1_ALERT_DECRYPT_ERROR = 1051;
  SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION = 1060;
  SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK = 1086;
  SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY = 1071;
  SSL_R_TLSV1_ALERT_INTERNAL_ERROR = 1080;
  SSL_R_TLSV1_ALERT_NO_RENEGOTIATION = 1100;
  SSL_R_TLSV1_ALERT_PROTOCOL_VERSION = 1070;
  SSL_R_TLSV1_ALERT_RECORD_OVERFLOW = 1022;
  SSL_R_TLSV1_ALERT_UNKNOWN_CA = 1048;
  SSL_R_TLSV1_ALERT_USER_CANCELLED = 1090;
  SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE = 1114;
  SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE = 1113;
  SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE = 1111;
  SSL_R_TLSV1_UNRECOGNIZED_NAME = 1112;
  SSL_R_TLSV1_UNSUPPORTED_EXTENSION = 1110;
  SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT = 365;
  SSL_R_TLS_HEARTBEAT_PENDING = 366;
  SSL_R_TLS_ILLEGAL_EXPORTER_LABEL = 367;
  SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST = 157;
  SSL_R_TOO_MANY_KEY_UPDATES = 132;
  SSL_R_TOO_MANY_WARN_ALERTS = 409;
  SSL_R_TOO_MUCH_EARLY_DATA = 164;
  SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS = 314;
  SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS = 239;
  SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES = 242;
  SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES = 243;
  SSL_R_UNEXPECTED_CCS_MESSAGE = 262;
  SSL_R_UNEXPECTED_END_OF_EARLY_DATA = 178;
  SSL_R_UNEXPECTED_MESSAGE = 244;
  SSL_R_UNEXPECTED_RECORD = 245;
  SSL_R_UNINITIALIZED = 276;
  SSL_R_UNKNOWN_ALERT_TYPE = 246;
  SSL_R_UNKNOWN_CERTIFICATE_TYPE = 247;
  SSL_R_UNKNOWN_CIPHER_RETURNED = 248;
  SSL_R_UNKNOWN_CIPHER_TYPE = 249;
  SSL_R_UNKNOWN_CMD_NAME = 386;
  SSL_R_UNKNOWN_COMMAND = 139;
  SSL_R_UNKNOWN_DIGEST = 368;
  SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE = 250;
  SSL_R_UNKNOWN_PKEY_TYPE = 251;
  SSL_R_UNKNOWN_PROTOCOL = 252;
  SSL_R_UNKNOWN_SSL_VERSION = 254;
  SSL_R_UNKNOWN_STATE = 255;
  SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED = 338;
  SSL_R_UNSOLICITED_EXTENSION = 217;
  SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 257;
  SSL_R_UNSUPPORTED_ELLIPTIC_CURVE = 315;
  SSL_R_UNSUPPORTED_PROTOCOL = 258;
  SSL_R_UNSUPPORTED_SSL_VERSION = 259;
  SSL_R_UNSUPPORTED_STATUS_TYPE = 329;
  SSL_R_USE_SRTP_NOT_NEGOTIATED = 369;
  SSL_R_VERSION_TOO_HIGH = 166;
  SSL_R_VERSION_TOO_LOW = 396;
  SSL_R_WRONG_CERTIFICATE_TYPE = 383;
  SSL_R_WRONG_CIPHER_RETURNED = 261;
  SSL_R_WRONG_CURVE = 378;
  SSL_R_WRONG_SIGNATURE_LENGTH = 264;
  SSL_R_WRONG_SIGNATURE_SIZE = 265;
  SSL_R_WRONG_SIGNATURE_TYPE = 370;
  SSL_R_WRONG_SSL_VERSION = 266;
  SSL_R_WRONG_VERSION_NUMBER = 267;
  SSL_R_X509_LIB = 268;
  SSL_R_X509_VERIFICATION_SETUP_PROBLEMS = 269;
  SSL_SESSION_ASN1_VERSION = $0001;
  SSL_MAX_SSL_SESSION_ID_LENGTH = 32;
  SSL_MAX_SID_CTX_LENGTH = 32;
  SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES = (512 div 8);
  SSL_MAX_KEY_ARG_LENGTH = 8;
  SSL_MAX_MASTER_KEY_LENGTH = 48;
  SSL_MAX_PIPELINES = 32;
  SSL_TXT_LOW = 'LOW';
  SSL_TXT_MEDIUM = 'MEDIUM';
  SSL_TXT_HIGH = 'HIGH';
  SSL_TXT_FIPS = 'FIPS';
  SSL_TXT_aNULL = 'aNULL';
  SSL_TXT_eNULL = 'eNULL';
  SSL_TXT_NULL = 'NULL';
  SSL_TXT_kRSA = 'kRSA';
  SSL_TXT_kDHr = 'kDHr';
  SSL_TXT_kDHd = 'kDHd';
  SSL_TXT_kDH = 'kDH';
  SSL_TXT_kEDH = 'kEDH';
  SSL_TXT_kDHE = 'kDHE';
  SSL_TXT_kECDHr = 'kECDHr';
  SSL_TXT_kECDHe = 'kECDHe';
  SSL_TXT_kECDH = 'kECDH';
  SSL_TXT_kEECDH = 'kEECDH';
//  SSL_TXT_kECDHE = 'kECDHE';
  SSL_TXT_kPSK = 'kPSK';
  SSL_TXT_kRSAPSK = 'kRSAPSK';
  SSL_TXT_kECDHEPSK = 'kECDHEPSK';
  SSL_TXT_kDHEPSK = 'kDHEPSK';
  SSL_TXT_kGOST = 'kGOST';
  SSL_TXT_kSRP = 'kSRP';
  SSL_TXT_aRSA = 'aRSA';
  SSL_TXT_aDSS = 'aDSS';
  SSL_TXT_aDH = 'aDH';
  SSL_TXT_aECDH = 'aECDH';
  SSL_TXT_aECDSA = 'aECDSA';
  SSL_TXT_aPSK = 'aPSK';
  SSL_TXT_aGOST94 = 'aGOST94';
  SSL_TXT_aGOST01 = 'aGOST01';
  SSL_TXT_aGOST12 = 'aGOST12';
  SSL_TXT_aGOST = 'aGOST';
  SSL_TXT_aSRP = 'aSRP';
  SSL_TXT_DSS = 'DSS';
  SSL_TXT_DH = 'DH';
  SSL_TXT_DHE = 'DHE';
  SSL_TXT_EDH = 'EDH';
//  SSL_TXT_ADH = 'ADH';
  SSL_TXT_RSA = 'RSA';
  SSL_TXT_ECDH = 'ECDH';
  SSL_TXT_EECDH = 'EECDH';
  SSL_TXT_ECDHE = 'ECDHE';
//  SSL_TXT_AECDH = 'AECDH';
  SSL_TXT_ECDSA = 'ECDSA';
  SSL_TXT_PSK = 'PSK';
  SSL_TXT_SRP = 'SRP';
  SSL_TXT_DES = 'DES';
  SSL_TXT_3DES = '3DES';
  SSL_TXT_RC4 = 'RC4';
  SSL_TXT_RC2 = 'RC2';
  SSL_TXT_IDEA = 'IDEA';
  SSL_TXT_SEED = 'SEED';
  SSL_TXT_AES128 = 'AES128';
  SSL_TXT_AES256 = 'AES256';
  SSL_TXT_AES = 'AES';
  SSL_TXT_AES_GCM = 'AESGCM';
  SSL_TXT_AES_CCM = 'AESCCM';
  SSL_TXT_AES_CCM_8 = 'AESCCM8';
  SSL_TXT_CAMELLIA128 = 'CAMELLIA128';
  SSL_TXT_CAMELLIA256 = 'CAMELLIA256';
  SSL_TXT_CAMELLIA = 'CAMELLIA';
  SSL_TXT_CHACHA20 = 'CHACHA20';
  SSL_TXT_GOST = 'GOST89';
  SSL_TXT_ARIA = 'ARIA';
  SSL_TXT_ARIA_GCM = 'ARIAGCM';
  SSL_TXT_ARIA128 = 'ARIA128';
  SSL_TXT_ARIA256 = 'ARIA256';
  SSL_TXT_MD5 = 'MD5';
  SSL_TXT_SHA1 = 'SHA1';
  SSL_TXT_SHA = 'SHA';
  SSL_TXT_GOST94 = 'GOST94';
  SSL_TXT_GOST89MAC = 'GOST89MAC';
  SSL_TXT_GOST12 = 'GOST12';
  SSL_TXT_GOST89MAC12 = 'GOST89MAC12';
  SSL_TXT_SHA256 = 'SHA256';
  SSL_TXT_SHA384 = 'SHA384';
  SSL_TXT_SSLV3 = 'SSLv3';
  SSL_TXT_TLSV1 = 'TLSv1';
  SSL_TXT_TLSV1_1 = 'TLSv1.1';
  SSL_TXT_TLSV1_2 = 'TLSv1.2';
  SSL_TXT_ALL = 'ALL';
  SSL_TXT_CMPALL = 'COMPLEMENTOFALL';
  SSL_TXT_CMPDEF = 'COMPLEMENTOFDEFAULT';
  SSL_DEFAULT_CIPHER_LIST = 'ALL:!COMPLEMENTOFDEFAULT:!eNULL';
  TLS_DEFAULT_CIPHERSUITES = 'TLS_AES_256_GCM_SHA384:' + 'TLS_CHACHA20_POLY1305_SHA256:' + 'TLS_AES_128_GCM_SHA256';
  SSL_SENT_SHUTDOWN = 1;
  SSL_RECEIVED_SHUTDOWN = 2;
  SSL_FILETYPE_ASN1 = X509_FILETYPE_ASN1;
  SSL_FILETYPE_PEM = X509_FILETYPE_PEM;
  SSL_EXT_TLS_ONLY = $0001;
  SSL_EXT_DTLS_ONLY = $0002;
  SSL_EXT_TLS_IMPLEMENTATION_ONLY = $0004;
  SSL_EXT_SSL3_ALLOWED = $0008;
  SSL_EXT_TLS1_2_AND_BELOW_ONLY = $0010;
  SSL_EXT_TLS1_3_ONLY = $0020;
  SSL_EXT_IGNORE_ON_RESUMPTION = $0040;
  SSL_EXT_CLIENT_HELLO = $0080;
  SSL_EXT_TLS1_2_SERVER_HELLO = $0100;
  SSL_EXT_TLS1_3_SERVER_HELLO = $0200;
  SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS = $0400;
  SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST = $0800;
  SSL_EXT_TLS1_3_CERTIFICATE = $1000;
  SSL_EXT_TLS1_3_NEW_SESSION_TICKET = $2000;
  SSL_EXT_TLS1_3_CERTIFICATE_REQUEST = $4000;
  SSL_OP_LEGACY_SERVER_CONNECT = $00000004;
  SSL_OP_TLSEXT_PADDING = $00000010;
  SSL_OP_SAFARI_ECDHE_ECDSA_BUG = $00000040;
  SSL_OP_ALLOW_NO_DHE_KEX = $00000400;
  SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = $00000800;
  SSL_OP_NO_QUERY_MTU = $00001000;
  SSL_OP_COOKIE_EXCHANGE = $00002000;
  SSL_OP_NO_TICKET = $00004000;
  SSL_OP_CISCO_ANYCONNECT = $00008000;
  SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = $00010000;
  SSL_OP_NO_COMPRESSION = $00020000;
  SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = $00040000;
  SSL_OP_NO_ENCRYPT_THEN_MAC = $00080000;
  SSL_OP_ENABLE_MIDDLEBOX_COMPAT = $00100000;
  SSL_OP_PRIORITIZE_CHACHA = $00200000;
  SSL_OP_CIPHER_SERVER_PREFERENCE = $00400000;
  SSL_OP_TLS_ROLLBACK_BUG = $00800000;
  SSL_OP_NO_ANTI_REPLAY = $01000000;
  SSL_OP_NO_SSLv3 = $02000000;
  SSL_OP_NO_TLSv1 = $04000000;
  SSL_OP_NO_TLSv1_2 = $08000000;
  SSL_OP_NO_TLSv1_1 = $10000000;
  SSL_OP_NO_TLSv1_3 = $20000000;
  SSL_OP_NO_DTLSv1 = $04000000;
  SSL_OP_NO_DTLSv1_2 = $08000000;
  SSL_OP_NO_SSL_MASK = (SSL_OP_NO_SSLv3 or SSL_OP_NO_TLSv1 or SSL_OP_NO_TLSv1_1 or SSL_OP_NO_TLSv1_2 or SSL_OP_NO_TLSv1_3);
  SSL_OP_NO_DTLS_MASK = (SSL_OP_NO_DTLSv1 or SSL_OP_NO_DTLSv1_2);
  SSL_OP_NO_RENEGOTIATION = $40000000;
  SSL_OP_CRYPTOPRO_TLSEXT_BUG = $80000000;
  SSL_OP_ALL = (SSL_OP_CRYPTOPRO_TLSEXT_BUG or SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS or SSL_OP_LEGACY_SERVER_CONNECT or SSL_OP_TLSEXT_PADDING or SSL_OP_SAFARI_ECDHE_ECDSA_BUG);
  SSL_OP_MICROSOFT_SESS_ID_BUG = $0;
  SSL_OP_NETSCAPE_CHALLENGE_BUG = $0;
  SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = $0;
  SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = $0;
  SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = $0;
  SSL_OP_MSIE_SSLV2_RSA_PADDING = $0;
  SSL_OP_SSLEAY_080_CLIENT_DH_BUG = $0;
  SSL_OP_TLS_D5_BUG = $0;
  SSL_OP_TLS_BLOCK_PADDING_BUG = $0;
  SSL_OP_SINGLE_ECDH_USE = $0;
  SSL_OP_SINGLE_DH_USE = $0;
  SSL_OP_EPHEMERAL_RSA = $0;
  SSL_OP_NO_SSLv2 = $0;
  SSL_OP_PKCS1_CHECK_1 = $0;
  SSL_OP_PKCS1_CHECK_2 = $0;
  SSL_OP_NETSCAPE_CA_DN_BUG = $0;
  SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = $0;
  SSL_MODE_ENABLE_PARTIAL_WRITE = $00000001;
  SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = $00000002;
  SSL_MODE_AUTO_RETRY = $00000004;
  SSL_MODE_NO_AUTO_CHAIN = $00000008;
  SSL_MODE_RELEASE_BUFFERS = $00000010;
  SSL_MODE_SEND_CLIENTHELLO_TIME = $00000020;
  SSL_MODE_SEND_SERVERHELLO_TIME = $00000040;
  SSL_MODE_SEND_FALLBACK_SCSV = $00000080;
  SSL_MODE_ASYNC = $00000100;
  SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG = $00000400;
  SSL_CERT_FLAG_TLS_STRICT = $00000001;
  SSL_CERT_FLAG_SUITEB_128_LOS_ONLY = $10000;
  SSL_CERT_FLAG_SUITEB_192_LOS = $20000;
  SSL_CERT_FLAG_SUITEB_128_LOS = $30000;
  SSL_CERT_FLAG_BROKEN_PROTOCOL = $10000000;
  SSL_BUILD_CHAIN_FLAG_UNTRUSTED = $1;
  SSL_BUILD_CHAIN_FLAG_NO_ROOT = $2;
  SSL_BUILD_CHAIN_FLAG_CHECK = $4;
  SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR = $8;
  SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR = $10;
  CERT_PKEY_VALID = $1;
  CERT_PKEY_SIGN = $2;
  CERT_PKEY_EE_SIGNATURE = $10;
  CERT_PKEY_CA_SIGNATURE = $20;
  CERT_PKEY_EE_PARAM = $40;
  CERT_PKEY_CA_PARAM = $80;
  CERT_PKEY_EXPLICIT_SIGN = $100;
  CERT_PKEY_ISSUER_NAME = $200;
  CERT_PKEY_CERT_TYPE = $400;
  CERT_PKEY_SUITEB = $800;
  SSL_CONF_FLAG_CMDLINE = $1;
  SSL_CONF_FLAG_FILE = $2;
  SSL_CONF_FLAG_CLIENT = $4;
  SSL_CONF_FLAG_SERVER = $8;
  SSL_CONF_FLAG_SHOW_ERRORS = $10;
  SSL_CONF_FLAG_CERTIFICATE = $20;
  SSL_CONF_FLAG_REQUIRE_PRIVATE = $40;
  SSL_CONF_TYPE_UNKNOWN = $0;
  SSL_CONF_TYPE_STRING = $1;
  SSL_CONF_TYPE_FILE = $2;
  SSL_CONF_TYPE_DIR = $3;
  SSL_CONF_TYPE_NONE = $4;
  SSL_COOKIE_LENGTH = 4096;
  SSL_MAX_CERT_LIST_DEFAULT = 1024*100;
  SSL_SESSION_CACHE_MAX_SIZE_DEFAULT = (1024*20);
  SSL_SESS_CACHE_OFF = $0000;
  SSL_SESS_CACHE_CLIENT = $0001;
  SSL_SESS_CACHE_SERVER = $0002;
  SSL_SESS_CACHE_BOTH = (SSL_SESS_CACHE_CLIENT or SSL_SESS_CACHE_SERVER);
  SSL_SESS_CACHE_NO_AUTO_CLEAR = $0080;
  SSL_SESS_CACHE_NO_INTERNAL_LOOKUP = $0100;
  SSL_SESS_CACHE_NO_INTERNAL_STORE = $0200;
  SSL_SESS_CACHE_NO_INTERNAL = (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP or SSL_SESS_CACHE_NO_INTERNAL_STORE);
  OPENSSL_NPN_UNSUPPORTED = 0;
  OPENSSL_NPN_NEGOTIATED = 1;
  OPENSSL_NPN_NO_OVERLAP = 2;
  PSK_MAX_IDENTITY_LEN = 128;
  PSK_MAX_PSK_LEN = 256;
  SSL_NOTHING = 1;
  SSL_WRITING = 2;
  SSL_READING = 3;
  SSL_X509_LOOKUP = 4;
  SSL_ASYNC_PAUSED = 5;
  SSL_ASYNC_NO_JOBS = 6;
  SSL_CLIENT_HELLO_CB = 7;
  SSL_MAC_FLAG_READ_MAC_STREAM = 1;
  SSL_MAC_FLAG_WRITE_MAC_STREAM = 2;
  SSL2_VERSION = $0002;
  SSL2_MT_CLIENT_HELLO = 1;
  SSL3_CK_SCSV = $030000FF;
  SSL3_CK_FALLBACK_SCSV = $03005600;
  SSL3_CK_RSA_NULL_MD5 = $03000001;
  SSL3_CK_RSA_NULL_SHA = $03000002;
  SSL3_CK_RSA_RC4_40_MD5 = $03000003;
  SSL3_CK_RSA_RC4_128_MD5 = $03000004;
  SSL3_CK_RSA_RC4_128_SHA = $03000005;
  SSL3_CK_RSA_RC2_40_MD5 = $03000006;
  SSL3_CK_RSA_IDEA_128_SHA = $03000007;
  SSL3_CK_RSA_DES_40_CBC_SHA = $03000008;
  SSL3_CK_RSA_DES_64_CBC_SHA = $03000009;
  SSL3_CK_RSA_DES_192_CBC3_SHA = $0300000A;
  SSL3_CK_DH_DSS_DES_40_CBC_SHA = $0300000B;
  SSL3_CK_DH_DSS_DES_64_CBC_SHA = $0300000C;
  SSL3_CK_DH_DSS_DES_192_CBC3_SHA = $0300000D;
  SSL3_CK_DH_RSA_DES_40_CBC_SHA = $0300000E;
  SSL3_CK_DH_RSA_DES_64_CBC_SHA = $0300000F;
  SSL3_CK_DH_RSA_DES_192_CBC3_SHA = $03000010;
  SSL3_CK_DHE_DSS_DES_40_CBC_SHA = $03000011;
  SSL3_CK_EDH_DSS_DES_40_CBC_SHA = SSL3_CK_DHE_DSS_DES_40_CBC_SHA;
  SSL3_CK_DHE_DSS_DES_64_CBC_SHA = $03000012;
  SSL3_CK_EDH_DSS_DES_64_CBC_SHA = SSL3_CK_DHE_DSS_DES_64_CBC_SHA;
  SSL3_CK_DHE_DSS_DES_192_CBC3_SHA = $03000013;
  SSL3_CK_EDH_DSS_DES_192_CBC3_SHA = SSL3_CK_DHE_DSS_DES_192_CBC3_SHA;
  SSL3_CK_DHE_RSA_DES_40_CBC_SHA = $03000014;
  SSL3_CK_EDH_RSA_DES_40_CBC_SHA = SSL3_CK_DHE_RSA_DES_40_CBC_SHA;
  SSL3_CK_DHE_RSA_DES_64_CBC_SHA = $03000015;
  SSL3_CK_EDH_RSA_DES_64_CBC_SHA = SSL3_CK_DHE_RSA_DES_64_CBC_SHA;
  SSL3_CK_DHE_RSA_DES_192_CBC3_SHA = $03000016;
  SSL3_CK_EDH_RSA_DES_192_CBC3_SHA = SSL3_CK_DHE_RSA_DES_192_CBC3_SHA;
  SSL3_CK_ADH_RC4_40_MD5 = $03000017;
  SSL3_CK_ADH_RC4_128_MD5 = $03000018;
  SSL3_CK_ADH_DES_40_CBC_SHA = $03000019;
  SSL3_CK_ADH_DES_64_CBC_SHA = $0300001A;
  SSL3_CK_ADH_DES_192_CBC_SHA = $0300001B;
  SSL3_RFC_RSA_NULL_MD5 = 'TLS_RSA_WITH_NULL_MD5';
  SSL3_RFC_RSA_NULL_SHA = 'TLS_RSA_WITH_NULL_SHA';
  SSL3_RFC_RSA_DES_192_CBC3_SHA = 'TLS_RSA_WITH_3DES_EDE_CBC_SHA';
  SSL3_RFC_DHE_DSS_DES_192_CBC3_SHA = 'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA';
  SSL3_RFC_DHE_RSA_DES_192_CBC3_SHA = 'TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA';
  SSL3_RFC_ADH_DES_192_CBC_SHA = 'TLS_DH_anon_WITH_3DES_EDE_CBC_SHA';
  SSL3_RFC_RSA_IDEA_128_SHA = 'TLS_RSA_WITH_IDEA_CBC_SHA';
  SSL3_RFC_RSA_RC4_128_MD5 = 'TLS_RSA_WITH_RC4_128_MD5';
  SSL3_RFC_RSA_RC4_128_SHA = 'TLS_RSA_WITH_RC4_128_SHA';
  SSL3_RFC_ADH_RC4_128_MD5 = 'TLS_DH_anon_WITH_RC4_128_MD5';
  SSL3_TXT_RSA_NULL_MD5 = 'NULL-MD5';
  SSL3_TXT_RSA_NULL_SHA = 'NULL-SHA';
  SSL3_TXT_RSA_RC4_40_MD5 = 'EXP-RC4-MD5';
  SSL3_TXT_RSA_RC4_128_MD5 = 'RC4-MD5';
  SSL3_TXT_RSA_RC4_128_SHA = 'RC4-SHA';
  SSL3_TXT_RSA_RC2_40_MD5 = 'EXP-RC2-CBC-MD5';
  SSL3_TXT_RSA_IDEA_128_SHA = 'IDEA-CBC-SHA';
  SSL3_TXT_RSA_DES_40_CBC_SHA = 'EXP-DES-CBC-SHA';
  SSL3_TXT_RSA_DES_64_CBC_SHA = 'DES-CBC-SHA';
  SSL3_TXT_RSA_DES_192_CBC3_SHA = 'DES-CBC3-SHA';
  SSL3_TXT_DH_DSS_DES_40_CBC_SHA = 'EXP-DH-DSS-DES-CBC-SHA';
  SSL3_TXT_DH_DSS_DES_64_CBC_SHA = 'DH-DSS-DES-CBC-SHA';
  SSL3_TXT_DH_DSS_DES_192_CBC3_SHA = 'DH-DSS-DES-CBC3-SHA';
  SSL3_TXT_DH_RSA_DES_40_CBC_SHA = 'EXP-DH-RSA-DES-CBC-SHA';
  SSL3_TXT_DH_RSA_DES_64_CBC_SHA = 'DH-RSA-DES-CBC-SHA';
  SSL3_TXT_DH_RSA_DES_192_CBC3_SHA = 'DH-RSA-DES-CBC3-SHA';
  SSL3_TXT_DHE_DSS_DES_40_CBC_SHA = 'EXP-DHE-DSS-DES-CBC-SHA';
  SSL3_TXT_DHE_DSS_DES_64_CBC_SHA = 'DHE-DSS-DES-CBC-SHA';
  SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA = 'DHE-DSS-DES-CBC3-SHA';
  SSL3_TXT_DHE_RSA_DES_40_CBC_SHA = 'EXP-DHE-RSA-DES-CBC-SHA';
  SSL3_TXT_DHE_RSA_DES_64_CBC_SHA = 'DHE-RSA-DES-CBC-SHA';
  SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA = 'DHE-RSA-DES-CBC3-SHA';
  SSL3_TXT_EDH_DSS_DES_40_CBC_SHA = 'EXP-EDH-DSS-DES-CBC-SHA';
  SSL3_TXT_EDH_DSS_DES_64_CBC_SHA = 'EDH-DSS-DES-CBC-SHA';
  SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA = 'EDH-DSS-DES-CBC3-SHA';
  SSL3_TXT_EDH_RSA_DES_40_CBC_SHA = 'EXP-EDH-RSA-DES-CBC-SHA';
  SSL3_TXT_EDH_RSA_DES_64_CBC_SHA = 'EDH-RSA-DES-CBC-SHA';
  SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA = 'EDH-RSA-DES-CBC3-SHA';
  SSL3_TXT_ADH_RC4_40_MD5 = 'EXP-ADH-RC4-MD5';
  SSL3_TXT_ADH_RC4_128_MD5 = 'ADH-RC4-MD5';
  SSL3_TXT_ADH_DES_40_CBC_SHA = 'EXP-ADH-DES-CBC-SHA';
  SSL3_TXT_ADH_DES_64_CBC_SHA = 'ADH-DES-CBC-SHA';
  SSL3_TXT_ADH_DES_192_CBC_SHA = 'ADH-DES-CBC3-SHA';
  SSL3_SSL_SESSION_ID_LENGTH = 32;
  SSL3_MAX_SSL_SESSION_ID_LENGTH = 32;
  SSL3_MASTER_SECRET_SIZE = 48;
  SSL3_RANDOM_SIZE = 32;
  SSL3_SESSION_ID_SIZE = 32;
  SSL3_RT_HEADER_LENGTH = 5;
  SSL3_HM_HEADER_LENGTH = 4;
  SSL3_ALIGN_PAYLOAD = 8;
  SSL3_RT_MAX_MD_SIZE = 64;
  SSL_RT_MAX_CIPHER_BLOCK_SIZE = 16;
  SSL3_RT_MAX_EXTRA = (16384);
  SSL3_RT_MAX_PLAIN_LENGTH = 16384;
  SSL3_RT_MAX_COMPRESSED_OVERHEAD = 1024;
  SSL3_RT_MAX_ENCRYPTED_OVERHEAD = (256+SSL3_RT_MAX_MD_SIZE);
  SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD = 256;
  SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD = (SSL_RT_MAX_CIPHER_BLOCK_SIZE+SSL3_RT_MAX_MD_SIZE);
  SSL3_RT_MAX_COMPRESSED_LENGTH = (SSL3_RT_MAX_PLAIN_LENGTH+SSL3_RT_MAX_COMPRESSED_OVERHEAD);
  SSL3_RT_MAX_ENCRYPTED_LENGTH = (SSL3_RT_MAX_ENCRYPTED_OVERHEAD+SSL3_RT_MAX_COMPRESSED_LENGTH);
  SSL3_RT_MAX_TLS13_ENCRYPTED_LENGTH = (SSL3_RT_MAX_PLAIN_LENGTH+SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD);
  SSL3_RT_MAX_PACKET_SIZE = (SSL3_RT_MAX_ENCRYPTED_LENGTH+SSL3_RT_HEADER_LENGTH);
  SSL3_MD_CLIENT_FINISHED_CONST = #67''#76''#78''#84;
  SSL3_MD_SERVER_FINISHED_CONST = #83''#82''#86''#82;
  SSL3_VERSION = $0300;
  SSL3_VERSION_MAJOR = $03;
  SSL3_VERSION_MINOR = $00;
  SSL3_RT_CHANGE_CIPHER_SPEC = 20;
  SSL3_RT_ALERT = 21;
  SSL3_RT_HANDSHAKE = 22;
  SSL3_RT_APPLICATION_DATA = 23;
  DTLS1_RT_HEARTBEAT = 24;
  TLS1_RT_CRYPTO = $1000;
  TLS1_RT_CRYPTO_PREMASTER = (TLS1_RT_CRYPTO or $1);
  TLS1_RT_CRYPTO_CLIENT_RANDOM = (TLS1_RT_CRYPTO or $2);
  TLS1_RT_CRYPTO_SERVER_RANDOM = (TLS1_RT_CRYPTO or $3);
  TLS1_RT_CRYPTO_MASTER = (TLS1_RT_CRYPTO or $4);
  TLS1_RT_CRYPTO_READ = $0000;
  TLS1_RT_CRYPTO_WRITE = $0100;
  TLS1_RT_CRYPTO_MAC = (TLS1_RT_CRYPTO or $5);
  TLS1_RT_CRYPTO_KEY = (TLS1_RT_CRYPTO or $6);
  TLS1_RT_CRYPTO_IV = (TLS1_RT_CRYPTO or $7);
  TLS1_RT_CRYPTO_FIXED_IV = (TLS1_RT_CRYPTO or $8);
  SSL3_RT_HEADER = $100;
  SSL3_RT_INNER_CONTENT_TYPE = $101;
  SSL3_AL_WARNING = 1;
  SSL3_AL_FATAL = 2;
  SSL3_AD_CLOSE_NOTIFY = 0;
  SSL3_AD_UNEXPECTED_MESSAGE = 10;
  SSL3_AD_BAD_RECORD_MAC = 20;
  SSL3_AD_DECOMPRESSION_FAILURE = 30;
  SSL3_AD_HANDSHAKE_FAILURE = 40;
  SSL3_AD_NO_CERTIFICATE = 41;
  SSL3_AD_BAD_CERTIFICATE = 42;
  SSL3_AD_UNSUPPORTED_CERTIFICATE = 43;
  SSL3_AD_CERTIFICATE_REVOKED = 44;
  SSL3_AD_CERTIFICATE_EXPIRED = 45;
  SSL3_AD_CERTIFICATE_UNKNOWN = 46;
  SSL3_AD_ILLEGAL_PARAMETER = 47;
  TLS1_HB_REQUEST = 1;
  TLS1_HB_RESPONSE = 2;
  SSL3_CT_RSA_SIGN = 1;
  SSL3_CT_DSS_SIGN = 2;
  SSL3_CT_RSA_FIXED_DH = 3;
  SSL3_CT_DSS_FIXED_DH = 4;
  SSL3_CT_RSA_EPHEMERAL_DH = 5;
  SSL3_CT_DSS_EPHEMERAL_DH = 6;
  SSL3_CT_FORTEZZA_DMS = 20;
  SSL3_CT_NUMBER = 10;
  SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS = $0001;
  TLS1_FLAGS_TLS_PADDING_BUG = $0;
  TLS1_FLAGS_SKIP_CERT_VERIFY = $0010;
  TLS1_FLAGS_ENCRYPT_THEN_MAC_READ = $0100;
  TLS1_FLAGS_ENCRYPT_THEN_MAC = TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;
  TLS1_FLAGS_RECEIVED_EXTMS = $0200;
  TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE = $0400;
  TLS1_FLAGS_STATELESS = $0800;
  SSL3_MT_HELLO_REQUEST = 0;
  SSL3_MT_CLIENT_HELLO = 1;
  SSL3_MT_SERVER_HELLO = 2;
  SSL3_MT_NEWSESSION_TICKET = 4;
  SSL3_MT_END_OF_EARLY_DATA = 5;
  SSL3_MT_ENCRYPTED_EXTENSIONS = 8;
  SSL3_MT_CERTIFICATE = 11;
  SSL3_MT_SERVER_KEY_EXCHANGE = 12;
  SSL3_MT_CERTIFICATE_REQUEST = 13;
  SSL3_MT_SERVER_DONE = 14;
  SSL3_MT_CERTIFICATE_VERIFY = 15;
  SSL3_MT_CLIENT_KEY_EXCHANGE = 16;
  SSL3_MT_FINISHED = 20;
  SSL3_MT_CERTIFICATE_URL = 21;
  SSL3_MT_CERTIFICATE_STATUS = 22;
  SSL3_MT_SUPPLEMENTAL_DATA = 23;
  SSL3_MT_KEY_UPDATE = 24;
  SSL3_MT_NEXT_PROTO = 67;
  SSL3_MT_MESSAGE_HASH = 254;
  DTLS1_MT_HELLO_VERIFY_REQUEST = 3;
  SSL3_MT_CHANGE_CIPHER_SPEC = $0101;
  SSL3_MT_CCS = 1;
  SSL3_CC_READ = $001;
  SSL3_CC_WRITE = $002;
  SSL3_CC_CLIENT = $010;
  SSL3_CC_SERVER = $020;
  SSL3_CC_EARLY = $040;
  SSL3_CC_HANDSHAKE = $080;
  SSL3_CC_APPLICATION = $100;
  SSL3_CHANGE_CIPHER_CLIENT_WRITE = (SSL3_CC_CLIENT or SSL3_CC_WRITE);
  SSL3_CHANGE_CIPHER_SERVER_READ = (SSL3_CC_SERVER or SSL3_CC_READ);
  SSL3_CHANGE_CIPHER_CLIENT_READ = (SSL3_CC_CLIENT or SSL3_CC_READ);
  SSL3_CHANGE_CIPHER_SERVER_WRITE = (SSL3_CC_SERVER or SSL3_CC_WRITE);
  OPENSSL_TLS_SECURITY_LEVEL = 1;
  TLS1_VERSION = $0301;
  TLS1_1_VERSION = $0302;
  TLS1_2_VERSION = $0303;
  TLS1_3_VERSION = $0304;
  TLS_MAX_VERSION = TLS1_3_VERSION;
  TLS_ANY_VERSION = $10000;
  TLS1_VERSION_MAJOR = $03;
  TLS1_VERSION_MINOR = $01;
  TLS1_1_VERSION_MAJOR = $03;
  TLS1_1_VERSION_MINOR = $02;
  TLS1_2_VERSION_MAJOR = $03;
  TLS1_2_VERSION_MINOR = $03;
  TLS1_AD_DECRYPTION_FAILED = 21;
  TLS1_AD_RECORD_OVERFLOW = 22;
  TLS1_AD_UNKNOWN_CA = 48;
  TLS1_AD_ACCESS_DENIED = 49;
  TLS1_AD_DECODE_ERROR = 50;
  TLS1_AD_DECRYPT_ERROR = 51;
  TLS1_AD_EXPORT_RESTRICTION = 60;
  TLS1_AD_PROTOCOL_VERSION = 70;
  TLS1_AD_INSUFFICIENT_SECURITY = 71;
  TLS1_AD_INTERNAL_ERROR = 80;
  TLS1_AD_INAPPROPRIATE_FALLBACK = 86;
  TLS1_AD_USER_CANCELLED = 90;
  TLS1_AD_NO_RENEGOTIATION = 100;
  TLS13_AD_MISSING_EXTENSION = 109;
  TLS13_AD_CERTIFICATE_REQUIRED = 116;
  TLS1_AD_UNSUPPORTED_EXTENSION = 110;
  TLS1_AD_CERTIFICATE_UNOBTAINABLE = 111;
  TLS1_AD_UNRECOGNIZED_NAME = 112;
  TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 113;
  TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = 114;
  TLS1_AD_UNKNOWN_PSK_IDENTITY = 115;
  TLS1_AD_NO_APPLICATION_PROTOCOL = 120;
  TLSEXT_TYPE_server_name = 0;
  TLSEXT_TYPE_max_fragment_length = 1;
  TLSEXT_TYPE_client_certificate_url = 2;
  TLSEXT_TYPE_trusted_ca_keys = 3;
  TLSEXT_TYPE_truncated_hmac = 4;
  TLSEXT_TYPE_status_request = 5;
  TLSEXT_TYPE_user_mapping = 6;
  TLSEXT_TYPE_client_authz = 7;
  TLSEXT_TYPE_server_authz = 8;
  TLSEXT_TYPE_cert_type = 9;
  TLSEXT_TYPE_supported_groups = 10;
  TLSEXT_TYPE_elliptic_curves = TLSEXT_TYPE_supported_groups;
  TLSEXT_TYPE_ec_point_formats = 11;
  TLSEXT_TYPE_srp = 12;
  TLSEXT_TYPE_signature_algorithms = 13;
  TLSEXT_TYPE_use_srtp = 14;
  TLSEXT_TYPE_heartbeat = 15;
  TLSEXT_TYPE_application_layer_protocol_negotiation = 16;
  TLSEXT_TYPE_signed_certificate_timestamp = 18;
  TLSEXT_TYPE_padding = 21;
  TLSEXT_TYPE_encrypt_then_mac = 22;
  TLSEXT_TYPE_extended_master_secret = 23;
  TLSEXT_TYPE_session_ticket = 35;
  TLSEXT_TYPE_psk = 41;
  TLSEXT_TYPE_early_data = 42;
  TLSEXT_TYPE_supported_versions = 43;
  TLSEXT_TYPE_cookie = 44;
  TLSEXT_TYPE_psk_kex_modes = 45;
  TLSEXT_TYPE_certificate_authorities = 47;
  TLSEXT_TYPE_post_handshake_auth = 49;
  TLSEXT_TYPE_signature_algorithms_cert = 50;
  TLSEXT_TYPE_key_share = 51;
  TLSEXT_TYPE_renegotiate = $ff01;
  TLSEXT_TYPE_next_proto_neg = 13172;
  TLSEXT_NAMETYPE_host_name = 0;
  TLSEXT_STATUSTYPE_ocsp = 1;
  TLSEXT_ECPOINTFORMAT_first = 0;
  TLSEXT_ECPOINTFORMAT_uncompressed = 0;
  TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime = 1;
  TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2 = 2;
  TLSEXT_ECPOINTFORMAT_last = 2;
  TLSEXT_signature_anonymous = 0;
  TLSEXT_signature_rsa = 1;
  TLSEXT_signature_dsa = 2;
  TLSEXT_signature_ecdsa = 3;
  TLSEXT_signature_gostr34102001 = 237;
  TLSEXT_signature_gostr34102012_256 = 238;
  TLSEXT_signature_gostr34102012_512 = 239;
  TLSEXT_signature_num = 7;
  TLSEXT_hash_none = 0;
  TLSEXT_hash_md5 = 1;
  TLSEXT_hash_sha1 = 2;
  TLSEXT_hash_sha224 = 3;
  TLSEXT_hash_sha256 = 4;
  TLSEXT_hash_sha384 = 5;
  TLSEXT_hash_sha512 = 6;
  TLSEXT_hash_gostr3411 = 237;
  TLSEXT_hash_gostr34112012_256 = 238;
  TLSEXT_hash_gostr34112012_512 = 239;
  TLSEXT_hash_num = 10;
  TLSEXT_nid_unknown = $1000000;
  TLSEXT_curve_P_256 = 23;
  TLSEXT_curve_P_384 = 24;
  TLSEXT_max_fragment_length_DISABLED = 0;
  TLSEXT_max_fragment_length_512 = 1;
  TLSEXT_max_fragment_length_1024 = 2;
  TLSEXT_max_fragment_length_2048 = 3;
  TLSEXT_max_fragment_length_4096 = 4;
  TLSEXT_MAXLEN_host_name = 255;
  SSL_TLSEXT_ERR_OK = 0;
  SSL_TLSEXT_ERR_ALERT_WARNING = 1;
  SSL_TLSEXT_ERR_ALERT_FATAL = 2;
  SSL_TLSEXT_ERR_NOACK = 3;
  TLS1_CK_PSK_WITH_RC4_128_SHA = $0300008A;
  TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA = $0300008B;
  TLS1_CK_PSK_WITH_AES_128_CBC_SHA = $0300008C;
  TLS1_CK_PSK_WITH_AES_256_CBC_SHA = $0300008D;
  TLS1_CK_DHE_PSK_WITH_RC4_128_SHA = $0300008E;
  TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA = $0300008F;
  TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA = $03000090;
  TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA = $03000091;
  TLS1_CK_RSA_PSK_WITH_RC4_128_SHA = $03000092;
  TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA = $03000093;
  TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA = $03000094;
  TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA = $03000095;
  TLS1_CK_PSK_WITH_AES_128_GCM_SHA256 = $030000A8;
  TLS1_CK_PSK_WITH_AES_256_GCM_SHA384 = $030000A9;
  TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256 = $030000AA;
  TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384 = $030000AB;
  TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256 = $030000AC;
  TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384 = $030000AD;
  TLS1_CK_PSK_WITH_AES_128_CBC_SHA256 = $030000AE;
  TLS1_CK_PSK_WITH_AES_256_CBC_SHA384 = $030000AF;
  TLS1_CK_PSK_WITH_NULL_SHA256 = $030000B0;
  TLS1_CK_PSK_WITH_NULL_SHA384 = $030000B1;
  TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256 = $030000B2;
  TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384 = $030000B3;
  TLS1_CK_DHE_PSK_WITH_NULL_SHA256 = $030000B4;
  TLS1_CK_DHE_PSK_WITH_NULL_SHA384 = $030000B5;
  TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256 = $030000B6;
  TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384 = $030000B7;
  TLS1_CK_RSA_PSK_WITH_NULL_SHA256 = $030000B8;
  TLS1_CK_RSA_PSK_WITH_NULL_SHA384 = $030000B9;
  TLS1_CK_PSK_WITH_NULL_SHA = $0300002C;
  TLS1_CK_DHE_PSK_WITH_NULL_SHA = $0300002D;
  TLS1_CK_RSA_PSK_WITH_NULL_SHA = $0300002E;
  TLS1_CK_RSA_WITH_AES_128_SHA = $0300002F;
  TLS1_CK_DH_DSS_WITH_AES_128_SHA = $03000030;
  TLS1_CK_DH_RSA_WITH_AES_128_SHA = $03000031;
  TLS1_CK_DHE_DSS_WITH_AES_128_SHA = $03000032;
  TLS1_CK_DHE_RSA_WITH_AES_128_SHA = $03000033;
  TLS1_CK_ADH_WITH_AES_128_SHA = $03000034;
  TLS1_CK_RSA_WITH_AES_256_SHA = $03000035;
  TLS1_CK_DH_DSS_WITH_AES_256_SHA = $03000036;
  TLS1_CK_DH_RSA_WITH_AES_256_SHA = $03000037;
  TLS1_CK_DHE_DSS_WITH_AES_256_SHA = $03000038;
  TLS1_CK_DHE_RSA_WITH_AES_256_SHA = $03000039;
  TLS1_CK_ADH_WITH_AES_256_SHA = $0300003A;
  TLS1_CK_RSA_WITH_NULL_SHA256 = $0300003B;
  TLS1_CK_RSA_WITH_AES_128_SHA256 = $0300003C;
  TLS1_CK_RSA_WITH_AES_256_SHA256 = $0300003D;
  TLS1_CK_DH_DSS_WITH_AES_128_SHA256 = $0300003E;
  TLS1_CK_DH_RSA_WITH_AES_128_SHA256 = $0300003F;
  TLS1_CK_DHE_DSS_WITH_AES_128_SHA256 = $03000040;
  TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA = $03000041;
  TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = $03000042;
  TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = $03000043;
  TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = $03000044;
  TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = $03000045;
  TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA = $03000046;
  TLS1_CK_DHE_RSA_WITH_AES_128_SHA256 = $03000067;
  TLS1_CK_DH_DSS_WITH_AES_256_SHA256 = $03000068;
  TLS1_CK_DH_RSA_WITH_AES_256_SHA256 = $03000069;
  TLS1_CK_DHE_DSS_WITH_AES_256_SHA256 = $0300006A;
  TLS1_CK_DHE_RSA_WITH_AES_256_SHA256 = $0300006B;
  TLS1_CK_ADH_WITH_AES_128_SHA256 = $0300006C;
  TLS1_CK_ADH_WITH_AES_256_SHA256 = $0300006D;
  TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA = $03000084;
  TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = $03000085;
  TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = $03000086;
  TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = $03000087;
  TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = $03000088;
  TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA = $03000089;
  TLS1_CK_RSA_WITH_SEED_SHA = $03000096;
  TLS1_CK_DH_DSS_WITH_SEED_SHA = $03000097;
  TLS1_CK_DH_RSA_WITH_SEED_SHA = $03000098;
  TLS1_CK_DHE_DSS_WITH_SEED_SHA = $03000099;
  TLS1_CK_DHE_RSA_WITH_SEED_SHA = $0300009A;
  TLS1_CK_ADH_WITH_SEED_SHA = $0300009B;
  TLS1_CK_RSA_WITH_AES_128_GCM_SHA256 = $0300009C;
  TLS1_CK_RSA_WITH_AES_256_GCM_SHA384 = $0300009D;
  TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256 = $0300009E;
  TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384 = $0300009F;
  TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256 = $030000A0;
  TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384 = $030000A1;
  TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256 = $030000A2;
  TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384 = $030000A3;
  TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256 = $030000A4;
  TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384 = $030000A5;
  TLS1_CK_ADH_WITH_AES_128_GCM_SHA256 = $030000A6;
  TLS1_CK_ADH_WITH_AES_256_GCM_SHA384 = $030000A7;
  TLS1_CK_RSA_WITH_AES_128_CCM = $0300C09C;
  TLS1_CK_RSA_WITH_AES_256_CCM = $0300C09D;
  TLS1_CK_DHE_RSA_WITH_AES_128_CCM = $0300C09E;
  TLS1_CK_DHE_RSA_WITH_AES_256_CCM = $0300C09F;
  TLS1_CK_RSA_WITH_AES_128_CCM_8 = $0300C0A0;
  TLS1_CK_RSA_WITH_AES_256_CCM_8 = $0300C0A1;
  TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8 = $0300C0A2;
  TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8 = $0300C0A3;
  TLS1_CK_PSK_WITH_AES_128_CCM = $0300C0A4;
  TLS1_CK_PSK_WITH_AES_256_CCM = $0300C0A5;
  TLS1_CK_DHE_PSK_WITH_AES_128_CCM = $0300C0A6;
  TLS1_CK_DHE_PSK_WITH_AES_256_CCM = $0300C0A7;
  TLS1_CK_PSK_WITH_AES_128_CCM_8 = $0300C0A8;
  TLS1_CK_PSK_WITH_AES_256_CCM_8 = $0300C0A9;
  TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8 = $0300C0AA;
  TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8 = $0300C0AB;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM = $0300C0AC;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM = $0300C0AD;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8 = $0300C0AE;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8 = $0300C0AF;
  TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256 = $030000BA;
  TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = $030000BB;
  TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = $030000BC;
  TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = $030000BD;
  TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = $030000BE;
  TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256 = $030000BF;
  TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256 = $030000C0;
  TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = $030000C1;
  TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = $030000C2;
  TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = $030000C3;
  TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = $030000C4;
  TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256 = $030000C5;
  TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA = $0300C001;
  TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA = $0300C002;
  TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = $0300C003;
  TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA = $0300C004;
  TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA = $0300C005;
  TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA = $0300C006;
  TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA = $0300C007;
  TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = $0300C008;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = $0300C009;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = $0300C00A;
  TLS1_CK_ECDH_RSA_WITH_NULL_SHA = $0300C00B;
  TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA = $0300C00C;
  TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA = $0300C00D;
  TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA = $0300C00E;
  TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA = $0300C00F;
  TLS1_CK_ECDHE_RSA_WITH_NULL_SHA = $0300C010;
  TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA = $0300C011;
  TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA = $0300C012;
  TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA = $0300C013;
  TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA = $0300C014;
  TLS1_CK_ECDH_anon_WITH_NULL_SHA = $0300C015;
  TLS1_CK_ECDH_anon_WITH_RC4_128_SHA = $0300C016;
  TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA = $0300C017;
  TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA = $0300C018;
  TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA = $0300C019;
  TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA = $0300C01A;
  TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = $0300C01B;
  TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = $0300C01C;
  TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA = $0300C01D;
  TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = $0300C01E;
  TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = $0300C01F;
  TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA = $0300C020;
  TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = $0300C021;
  TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = $0300C022;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256 = $0300C023;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384 = $0300C024;
  TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256 = $0300C025;
  TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384 = $0300C026;
  TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256 = $0300C027;
  TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384 = $0300C028;
  TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256 = $0300C029;
  TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384 = $0300C02A;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = $0300C02B;
  TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = $0300C02C;
  TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = $0300C02D;
  TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = $0300C02E;
  TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = $0300C02F;
  TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = $0300C030;
  TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256 = $0300C031;
  TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384 = $0300C032;
  TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA = $0300C033;
  TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = $0300C034;
  TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA = $0300C035;
  TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA = $0300C036;
  TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = $0300C037;
  TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = $0300C038;
  TLS1_CK_ECDHE_PSK_WITH_NULL_SHA = $0300C039;
  TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256 = $0300C03A;
  TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384 = $0300C03B;
  TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = $0300C072;
  TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = $0300C073;
  TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = $0300C074;
  TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = $0300C075;
  TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = $0300C076;
  TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = $0300C077;
  TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = $0300C078;
  TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = $0300C079;
  TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256 = $0300C094;
  TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384 = $0300C095;
  TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = $0300C096;
  TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = $0300C097;
  TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = $0300C098;
  TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = $0300C099;
  TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = $0300C09A;
  TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = $0300C09B;
  TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305 = $0300CCA8;
  TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = $0300CCA9;
  TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305 = $0300CCAA;
  TLS1_CK_PSK_WITH_CHACHA20_POLY1305 = $0300CCAB;
  TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305 = $0300CCAC;
  TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305 = $0300CCAD;
  TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305 = $0300CCAE;
  TLS1_3_CK_AES_128_GCM_SHA256 = $03001301;
  TLS1_3_CK_AES_256_GCM_SHA384 = $03001302;
  TLS1_3_CK_CHACHA20_POLY1305_SHA256 = $03001303;
  TLS1_3_CK_AES_128_CCM_SHA256 = $03001304;
  TLS1_3_CK_AES_128_CCM_8_SHA256 = $03001305;
  TLS1_CK_RSA_WITH_ARIA_128_GCM_SHA256 = $0300C050;
  TLS1_CK_RSA_WITH_ARIA_256_GCM_SHA384 = $0300C051;
  TLS1_CK_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = $0300C052;
  TLS1_CK_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = $0300C053;
  TLS1_CK_DH_RSA_WITH_ARIA_128_GCM_SHA256 = $0300C054;
  TLS1_CK_DH_RSA_WITH_ARIA_256_GCM_SHA384 = $0300C055;
  TLS1_CK_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = $0300C056;
  TLS1_CK_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = $0300C057;
  TLS1_CK_DH_DSS_WITH_ARIA_128_GCM_SHA256 = $0300C058;
  TLS1_CK_DH_DSS_WITH_ARIA_256_GCM_SHA384 = $0300C059;
  TLS1_CK_DH_anon_WITH_ARIA_128_GCM_SHA256 = $0300C05A;
  TLS1_CK_DH_anon_WITH_ARIA_256_GCM_SHA384 = $0300C05B;
  TLS1_CK_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = $0300C05C;
  TLS1_CK_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = $0300C05D;
  TLS1_CK_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = $0300C05E;
  TLS1_CK_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = $0300C05F;
  TLS1_CK_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = $0300C060;
  TLS1_CK_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = $0300C061;
  TLS1_CK_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = $0300C062;
  TLS1_CK_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = $0300C063;
  TLS1_CK_PSK_WITH_ARIA_128_GCM_SHA256 = $0300C06A;
  TLS1_CK_PSK_WITH_ARIA_256_GCM_SHA384 = $0300C06B;
  TLS1_CK_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = $0300C06C;
  TLS1_CK_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = $0300C06D;
  TLS1_CK_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = $0300C06E;
  TLS1_CK_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = $0300C06F;
  TLS1_RFC_RSA_WITH_AES_128_SHA = 'TLS_RSA_WITH_AES_128_CBC_SHA';
  TLS1_RFC_DHE_DSS_WITH_AES_128_SHA = 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA';
  TLS1_RFC_DHE_RSA_WITH_AES_128_SHA = 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA';
  TLS1_RFC_ADH_WITH_AES_128_SHA = 'TLS_DH_anon_WITH_AES_128_CBC_SHA';
  TLS1_RFC_RSA_WITH_AES_256_SHA = 'TLS_RSA_WITH_AES_256_CBC_SHA';
  TLS1_RFC_DHE_DSS_WITH_AES_256_SHA = 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA';
  TLS1_RFC_DHE_RSA_WITH_AES_256_SHA = 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA';
  TLS1_RFC_ADH_WITH_AES_256_SHA = 'TLS_DH_anon_WITH_AES_256_CBC_SHA';
  TLS1_RFC_RSA_WITH_NULL_SHA256 = 'TLS_RSA_WITH_NULL_SHA256';
  TLS1_RFC_RSA_WITH_AES_128_SHA256 = 'TLS_RSA_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_RSA_WITH_AES_256_SHA256 = 'TLS_RSA_WITH_AES_256_CBC_SHA256';
  TLS1_RFC_DHE_DSS_WITH_AES_128_SHA256 = 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_DHE_RSA_WITH_AES_128_SHA256 = 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_DHE_DSS_WITH_AES_256_SHA256 = 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256';
  TLS1_RFC_DHE_RSA_WITH_AES_256_SHA256 = 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256';
  TLS1_RFC_ADH_WITH_AES_128_SHA256 = 'TLS_DH_anon_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_ADH_WITH_AES_256_SHA256 = 'TLS_DH_anon_WITH_AES_256_CBC_SHA256';
  TLS1_RFC_RSA_WITH_AES_128_GCM_SHA256 = 'TLS_RSA_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_RSA_WITH_AES_256_GCM_SHA384 = 'TLS_RSA_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_DHE_RSA_WITH_AES_128_GCM_SHA256 = 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_DHE_RSA_WITH_AES_256_GCM_SHA384 = 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_DHE_DSS_WITH_AES_128_GCM_SHA256 = 'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_DHE_DSS_WITH_AES_256_GCM_SHA384 = 'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_ADH_WITH_AES_128_GCM_SHA256 = 'TLS_DH_anon_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_ADH_WITH_AES_256_GCM_SHA384 = 'TLS_DH_anon_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_RSA_WITH_AES_128_CCM = 'TLS_RSA_WITH_AES_128_CCM';
  TLS1_RFC_RSA_WITH_AES_256_CCM = 'TLS_RSA_WITH_AES_256_CCM';
  TLS1_RFC_DHE_RSA_WITH_AES_128_CCM = 'TLS_DHE_RSA_WITH_AES_128_CCM';
  TLS1_RFC_DHE_RSA_WITH_AES_256_CCM = 'TLS_DHE_RSA_WITH_AES_256_CCM';
  TLS1_RFC_RSA_WITH_AES_128_CCM_8 = 'TLS_RSA_WITH_AES_128_CCM_8';
  TLS1_RFC_RSA_WITH_AES_256_CCM_8 = 'TLS_RSA_WITH_AES_256_CCM_8';
  TLS1_RFC_DHE_RSA_WITH_AES_128_CCM_8 = 'TLS_DHE_RSA_WITH_AES_128_CCM_8';
  TLS1_RFC_DHE_RSA_WITH_AES_256_CCM_8 = 'TLS_DHE_RSA_WITH_AES_256_CCM_8';
  TLS1_RFC_PSK_WITH_AES_128_CCM = 'TLS_PSK_WITH_AES_128_CCM';
  TLS1_RFC_PSK_WITH_AES_256_CCM = 'TLS_PSK_WITH_AES_256_CCM';
  TLS1_RFC_DHE_PSK_WITH_AES_128_CCM = 'TLS_DHE_PSK_WITH_AES_128_CCM';
  TLS1_RFC_DHE_PSK_WITH_AES_256_CCM = 'TLS_DHE_PSK_WITH_AES_256_CCM';
  TLS1_RFC_PSK_WITH_AES_128_CCM_8 = 'TLS_PSK_WITH_AES_128_CCM_8';
  TLS1_RFC_PSK_WITH_AES_256_CCM_8 = 'TLS_PSK_WITH_AES_256_CCM_8';
  TLS1_RFC_DHE_PSK_WITH_AES_128_CCM_8 = 'TLS_PSK_DHE_WITH_AES_128_CCM_8';
  TLS1_RFC_DHE_PSK_WITH_AES_256_CCM_8 = 'TLS_PSK_DHE_WITH_AES_256_CCM_8';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM = 'TLS_ECDHE_ECDSA_WITH_AES_128_CCM';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM = 'TLS_ECDHE_ECDSA_WITH_AES_256_CCM';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 'TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 'TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8';
  TLS1_3_RFC_AES_128_GCM_SHA256 = 'TLS_AES_128_GCM_SHA256';
  TLS1_3_RFC_AES_256_GCM_SHA384 = 'TLS_AES_256_GCM_SHA384';
  TLS1_3_RFC_CHACHA20_POLY1305_SHA256 = 'TLS_CHACHA20_POLY1305_SHA256';
  TLS1_3_RFC_AES_128_CCM_SHA256 = 'TLS_AES_128_CCM_SHA256';
  TLS1_3_RFC_AES_128_CCM_8_SHA256 = 'TLS_AES_128_CCM_8_SHA256';
  TLS1_RFC_ECDHE_ECDSA_WITH_NULL_SHA = 'TLS_ECDHE_ECDSA_WITH_NULL_SHA';
  TLS1_RFC_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = 'TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA';
  TLS1_RFC_ECDHE_RSA_WITH_NULL_SHA = 'TLS_ECDHE_RSA_WITH_NULL_SHA';
  TLS1_RFC_ECDHE_RSA_WITH_DES_192_CBC3_SHA = 'TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_ECDHE_RSA_WITH_AES_128_CBC_SHA = 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA';
  TLS1_RFC_ECDHE_RSA_WITH_AES_256_CBC_SHA = 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA';
  TLS1_RFC_ECDH_anon_WITH_NULL_SHA = 'TLS_ECDH_anon_WITH_NULL_SHA';
  TLS1_RFC_ECDH_anon_WITH_DES_192_CBC3_SHA = 'TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_ECDH_anon_WITH_AES_128_CBC_SHA = 'TLS_ECDH_anon_WITH_AES_128_CBC_SHA';
  TLS1_RFC_ECDH_anon_WITH_AES_256_CBC_SHA = 'TLS_ECDH_anon_WITH_AES_256_CBC_SHA';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_SHA256 = 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_SHA384 = 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384';
  TLS1_RFC_ECDHE_RSA_WITH_AES_128_SHA256 = 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_ECDHE_RSA_WITH_AES_256_SHA384 = 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_PSK_WITH_NULL_SHA = 'TLS_PSK_WITH_NULL_SHA';
  TLS1_RFC_DHE_PSK_WITH_NULL_SHA = 'TLS_DHE_PSK_WITH_NULL_SHA';
  TLS1_RFC_RSA_PSK_WITH_NULL_SHA = 'TLS_RSA_PSK_WITH_NULL_SHA';
  TLS1_RFC_PSK_WITH_3DES_EDE_CBC_SHA = 'TLS_PSK_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_PSK_WITH_AES_128_CBC_SHA = 'TLS_PSK_WITH_AES_128_CBC_SHA';
  TLS1_RFC_PSK_WITH_AES_256_CBC_SHA = 'TLS_PSK_WITH_AES_256_CBC_SHA';
  TLS1_RFC_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 'TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA = 'TLS_DHE_PSK_WITH_AES_128_CBC_SHA';
  TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA = 'TLS_DHE_PSK_WITH_AES_256_CBC_SHA';
  TLS1_RFC_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 'TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA = 'TLS_RSA_PSK_WITH_AES_128_CBC_SHA';
  TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA = 'TLS_RSA_PSK_WITH_AES_256_CBC_SHA';
  TLS1_RFC_PSK_WITH_AES_128_GCM_SHA256 = 'TLS_PSK_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_PSK_WITH_AES_256_GCM_SHA384 = 'TLS_PSK_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_DHE_PSK_WITH_AES_128_GCM_SHA256 = 'TLS_DHE_PSK_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_DHE_PSK_WITH_AES_256_GCM_SHA384 = 'TLS_DHE_PSK_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_RSA_PSK_WITH_AES_128_GCM_SHA256 = 'TLS_RSA_PSK_WITH_AES_128_GCM_SHA256';
  TLS1_RFC_RSA_PSK_WITH_AES_256_GCM_SHA384 = 'TLS_RSA_PSK_WITH_AES_256_GCM_SHA384';
  TLS1_RFC_PSK_WITH_AES_128_CBC_SHA256 = 'TLS_PSK_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_PSK_WITH_AES_256_CBC_SHA384 = 'TLS_PSK_WITH_AES_256_CBC_SHA384';
  TLS1_RFC_PSK_WITH_NULL_SHA256 = 'TLS_PSK_WITH_NULL_SHA256';
  TLS1_RFC_PSK_WITH_NULL_SHA384 = 'TLS_PSK_WITH_NULL_SHA384';
  TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA256 = 'TLS_DHE_PSK_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA384 = 'TLS_DHE_PSK_WITH_AES_256_CBC_SHA384';
  TLS1_RFC_DHE_PSK_WITH_NULL_SHA256 = 'TLS_DHE_PSK_WITH_NULL_SHA256';
  TLS1_RFC_DHE_PSK_WITH_NULL_SHA384 = 'TLS_DHE_PSK_WITH_NULL_SHA384';
  TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA256 = 'TLS_RSA_PSK_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA384 = 'TLS_RSA_PSK_WITH_AES_256_CBC_SHA384';
  TLS1_RFC_RSA_PSK_WITH_NULL_SHA256 = 'TLS_RSA_PSK_WITH_NULL_SHA256';
  TLS1_RFC_RSA_PSK_WITH_NULL_SHA384 = 'TLS_RSA_PSK_WITH_NULL_SHA384';
  TLS1_RFC_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 'TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA = 'TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA';
  TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA = 'TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA';
  TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 'TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256';
  TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 'TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384';
  TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA = 'TLS_ECDHE_PSK_WITH_NULL_SHA';
  TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA256 = 'TLS_ECDHE_PSK_WITH_NULL_SHA256';
  TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA384 = 'TLS_ECDHE_PSK_WITH_NULL_SHA384';
  TLS1_RFC_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 'TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 'TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 'TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA';
  TLS1_RFC_SRP_SHA_WITH_AES_128_CBC_SHA = 'TLS_SRP_SHA_WITH_AES_128_CBC_SHA';
  TLS1_RFC_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 'TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA';
  TLS1_RFC_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 'TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA';
  TLS1_RFC_SRP_SHA_WITH_AES_256_CBC_SHA = 'TLS_SRP_SHA_WITH_AES_256_CBC_SHA';
  TLS1_RFC_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 'TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA';
  TLS1_RFC_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 'TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA';
  TLS1_RFC_DHE_RSA_WITH_CHACHA20_POLY1305 = 'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_PSK_WITH_CHACHA20_POLY1305 = 'TLS_PSK_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_ECDHE_PSK_WITH_CHACHA20_POLY1305 = 'TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_DHE_PSK_WITH_CHACHA20_POLY1305 = 'TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_RSA_PSK_WITH_CHACHA20_POLY1305 = 'TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256';
  TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 'TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256';
  TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 'TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256';
  TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 'TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256';
  TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA256 = 'TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256';
  TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA = 'TLS_RSA_WITH_CAMELLIA_256_CBC_SHA';
  TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 'TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA';
  TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 'TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA';
  TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA = 'TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA';
  TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA = 'TLS_RSA_WITH_CAMELLIA_128_CBC_SHA';
  TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 'TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA';
  TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 'TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA';
  TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA = 'TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA';
  TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 'TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384';
  TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 'TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384';
  TLS1_RFC_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384';
  TLS1_RFC_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384';
  TLS1_RFC_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384';
  TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256';
  TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384';
  TLS1_RFC_RSA_WITH_SEED_SHA = 'TLS_RSA_WITH_SEED_CBC_SHA';
  TLS1_RFC_DHE_DSS_WITH_SEED_SHA = 'TLS_DHE_DSS_WITH_SEED_CBC_SHA';
  TLS1_RFC_DHE_RSA_WITH_SEED_SHA = 'TLS_DHE_RSA_WITH_SEED_CBC_SHA';
  TLS1_RFC_ADH_WITH_SEED_SHA = 'TLS_DH_anon_WITH_SEED_CBC_SHA';
  TLS1_RFC_ECDHE_PSK_WITH_RC4_128_SHA = 'TLS_ECDHE_PSK_WITH_RC4_128_SHA';
  TLS1_RFC_ECDH_anon_WITH_RC4_128_SHA = 'TLS_ECDH_anon_WITH_RC4_128_SHA';
  TLS1_RFC_ECDHE_ECDSA_WITH_RC4_128_SHA = 'TLS_ECDHE_ECDSA_WITH_RC4_128_SHA';
  TLS1_RFC_ECDHE_RSA_WITH_RC4_128_SHA = 'TLS_ECDHE_RSA_WITH_RC4_128_SHA';
  TLS1_RFC_PSK_WITH_RC4_128_SHA = 'TLS_PSK_WITH_RC4_128_SHA';
  TLS1_RFC_RSA_PSK_WITH_RC4_128_SHA = 'TLS_RSA_PSK_WITH_RC4_128_SHA';
  TLS1_RFC_DHE_PSK_WITH_RC4_128_SHA = 'TLS_DHE_PSK_WITH_RC4_128_SHA';
  TLS1_RFC_RSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_RSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_RSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_RSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_DH_RSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_DH_RSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 'TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 'TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_DH_DSS_WITH_ARIA_128_GCM_SHA256 = 'TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_DH_DSS_WITH_ARIA_256_GCM_SHA384 = 'TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_DH_anon_WITH_ARIA_128_GCM_SHA256 = 'TLS_DH_anon_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_DH_anon_WITH_ARIA_256_GCM_SHA384 = 'TLS_DH_anon_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = 'TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = 'TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_PSK_WITH_ARIA_128_GCM_SHA256 = 'TLS_PSK_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_PSK_WITH_ARIA_256_GCM_SHA384 = 'TLS_PSK_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = 'TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = 'TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384';
  TLS1_RFC_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = 'TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256';
  TLS1_RFC_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = 'TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384';
  TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA = 'DHE-DSS-RC4-SHA';
  TLS1_TXT_PSK_WITH_NULL_SHA = 'PSK-NULL-SHA';
  TLS1_TXT_DHE_PSK_WITH_NULL_SHA = 'DHE-PSK-NULL-SHA';
  TLS1_TXT_RSA_PSK_WITH_NULL_SHA = 'RSA-PSK-NULL-SHA';
  TLS1_TXT_RSA_WITH_AES_128_SHA = 'AES128-SHA';
  TLS1_TXT_DH_DSS_WITH_AES_128_SHA = 'DH-DSS-AES128-SHA';
  TLS1_TXT_DH_RSA_WITH_AES_128_SHA = 'DH-RSA-AES128-SHA';
  TLS1_TXT_DHE_DSS_WITH_AES_128_SHA = 'DHE-DSS-AES128-SHA';
  TLS1_TXT_DHE_RSA_WITH_AES_128_SHA = 'DHE-RSA-AES128-SHA';
  TLS1_TXT_ADH_WITH_AES_128_SHA = 'ADH-AES128-SHA';
  TLS1_TXT_RSA_WITH_AES_256_SHA = 'AES256-SHA';
  TLS1_TXT_DH_DSS_WITH_AES_256_SHA = 'DH-DSS-AES256-SHA';
  TLS1_TXT_DH_RSA_WITH_AES_256_SHA = 'DH-RSA-AES256-SHA';
  TLS1_TXT_DHE_DSS_WITH_AES_256_SHA = 'DHE-DSS-AES256-SHA';
  TLS1_TXT_DHE_RSA_WITH_AES_256_SHA = 'DHE-RSA-AES256-SHA';
  TLS1_TXT_ADH_WITH_AES_256_SHA = 'ADH-AES256-SHA';
  TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA = 'ECDH-ECDSA-NULL-SHA';
  TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA = 'ECDH-ECDSA-RC4-SHA';
  TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = 'ECDH-ECDSA-DES-CBC3-SHA';
  TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 'ECDH-ECDSA-AES128-SHA';
  TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 'ECDH-ECDSA-AES256-SHA';
  TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA = 'ECDHE-ECDSA-NULL-SHA';
  TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA = 'ECDHE-ECDSA-RC4-SHA';
  TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = 'ECDHE-ECDSA-DES-CBC3-SHA';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 'ECDHE-ECDSA-AES128-SHA';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 'ECDHE-ECDSA-AES256-SHA';
  TLS1_TXT_ECDH_RSA_WITH_NULL_SHA = 'ECDH-RSA-NULL-SHA';
  TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA = 'ECDH-RSA-RC4-SHA';
  TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA = 'ECDH-RSA-DES-CBC3-SHA';
  TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA = 'ECDH-RSA-AES128-SHA';
  TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA = 'ECDH-RSA-AES256-SHA';
  TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA = 'ECDHE-RSA-NULL-SHA';
  TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA = 'ECDHE-RSA-RC4-SHA';
  TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA = 'ECDHE-RSA-DES-CBC3-SHA';
  TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA = 'ECDHE-RSA-AES128-SHA';
  TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA = 'ECDHE-RSA-AES256-SHA';
  TLS1_TXT_ECDH_anon_WITH_NULL_SHA = 'AECDH-NULL-SHA';
  TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA = 'AECDH-RC4-SHA';
  TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA = 'AECDH-DES-CBC3-SHA';
  TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA = 'AECDH-AES128-SHA';
  TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA = 'AECDH-AES256-SHA';
  TLS1_TXT_PSK_WITH_RC4_128_SHA = 'PSK-RC4-SHA';
  TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA = 'PSK-3DES-EDE-CBC-SHA';
  TLS1_TXT_PSK_WITH_AES_128_CBC_SHA = 'PSK-AES128-CBC-SHA';
  TLS1_TXT_PSK_WITH_AES_256_CBC_SHA = 'PSK-AES256-CBC-SHA';
  TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA = 'DHE-PSK-RC4-SHA';
  TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 'DHE-PSK-3DES-EDE-CBC-SHA';
  TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA = 'DHE-PSK-AES128-CBC-SHA';
  TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA = 'DHE-PSK-AES256-CBC-SHA';
  TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA = 'RSA-PSK-RC4-SHA';
  TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 'RSA-PSK-3DES-EDE-CBC-SHA';
  TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA = 'RSA-PSK-AES128-CBC-SHA';
  TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA = 'RSA-PSK-AES256-CBC-SHA';
  TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256 = 'PSK-AES128-GCM-SHA256';
  TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384 = 'PSK-AES256-GCM-SHA384';
  TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256 = 'DHE-PSK-AES128-GCM-SHA256';
  TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384 = 'DHE-PSK-AES256-GCM-SHA384';
  TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256 = 'RSA-PSK-AES128-GCM-SHA256';
  TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384 = 'RSA-PSK-AES256-GCM-SHA384';
  TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256 = 'PSK-AES128-CBC-SHA256';
  TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384 = 'PSK-AES256-CBC-SHA384';
  TLS1_TXT_PSK_WITH_NULL_SHA256 = 'PSK-NULL-SHA256';
  TLS1_TXT_PSK_WITH_NULL_SHA384 = 'PSK-NULL-SHA384';
  TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256 = 'DHE-PSK-AES128-CBC-SHA256';
  TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384 = 'DHE-PSK-AES256-CBC-SHA384';
  TLS1_TXT_DHE_PSK_WITH_NULL_SHA256 = 'DHE-PSK-NULL-SHA256';
  TLS1_TXT_DHE_PSK_WITH_NULL_SHA384 = 'DHE-PSK-NULL-SHA384';
  TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256 = 'RSA-PSK-AES128-CBC-SHA256';
  TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384 = 'RSA-PSK-AES256-CBC-SHA384';
  TLS1_TXT_RSA_PSK_WITH_NULL_SHA256 = 'RSA-PSK-NULL-SHA256';
  TLS1_TXT_RSA_PSK_WITH_NULL_SHA384 = 'RSA-PSK-NULL-SHA384';
  TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 'SRP-3DES-EDE-CBC-SHA';
  TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 'SRP-RSA-3DES-EDE-CBC-SHA';
  TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 'SRP-DSS-3DES-EDE-CBC-SHA';
  TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA = 'SRP-AES-128-CBC-SHA';
  TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 'SRP-RSA-AES-128-CBC-SHA';
  TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 'SRP-DSS-AES-128-CBC-SHA';
  TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA = 'SRP-AES-256-CBC-SHA';
  TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 'SRP-RSA-AES-256-CBC-SHA';
  TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 'SRP-DSS-AES-256-CBC-SHA';
  TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA = 'CAMELLIA128-SHA';
  TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 'DH-DSS-CAMELLIA128-SHA';
  TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 'DH-RSA-CAMELLIA128-SHA';
  TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 'DHE-DSS-CAMELLIA128-SHA';
  TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 'DHE-RSA-CAMELLIA128-SHA';
  TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA = 'ADH-CAMELLIA128-SHA';
  TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA = 'CAMELLIA256-SHA';
  TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 'DH-DSS-CAMELLIA256-SHA';
  TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 'DH-RSA-CAMELLIA256-SHA';
  TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 'DHE-DSS-CAMELLIA256-SHA';
  TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 'DHE-RSA-CAMELLIA256-SHA';
  TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA = 'ADH-CAMELLIA256-SHA';
  TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'CAMELLIA128-SHA256';
  TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 'DH-DSS-CAMELLIA128-SHA256';
  TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'DH-RSA-CAMELLIA128-SHA256';
  TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 'DHE-DSS-CAMELLIA128-SHA256';
  TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'DHE-RSA-CAMELLIA128-SHA256';
  TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256 = 'ADH-CAMELLIA128-SHA256';
  TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 'CAMELLIA256-SHA256';
  TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 'DH-DSS-CAMELLIA256-SHA256';
  TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 'DH-RSA-CAMELLIA256-SHA256';
  TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 'DHE-DSS-CAMELLIA256-SHA256';
  TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 'DHE-RSA-CAMELLIA256-SHA256';
  TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256 = 'ADH-CAMELLIA256-SHA256';
  TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'PSK-CAMELLIA128-SHA256';
  TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'PSK-CAMELLIA256-SHA384';
  TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'DHE-PSK-CAMELLIA128-SHA256';
  TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'DHE-PSK-CAMELLIA256-SHA384';
  TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'RSA-PSK-CAMELLIA128-SHA256';
  TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'RSA-PSK-CAMELLIA256-SHA384';
  TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 'ECDHE-PSK-CAMELLIA128-SHA256';
  TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 'ECDHE-PSK-CAMELLIA256-SHA384';
  TLS1_TXT_RSA_WITH_SEED_SHA = 'SEED-SHA';
  TLS1_TXT_DH_DSS_WITH_SEED_SHA = 'DH-DSS-SEED-SHA';
  TLS1_TXT_DH_RSA_WITH_SEED_SHA = 'DH-RSA-SEED-SHA';
  TLS1_TXT_DHE_DSS_WITH_SEED_SHA = 'DHE-DSS-SEED-SHA';
  TLS1_TXT_DHE_RSA_WITH_SEED_SHA = 'DHE-RSA-SEED-SHA';
  TLS1_TXT_ADH_WITH_SEED_SHA = 'ADH-SEED-SHA';
  TLS1_TXT_RSA_WITH_NULL_SHA256 = 'NULL-SHA256';
  TLS1_TXT_RSA_WITH_AES_128_SHA256 = 'AES128-SHA256';
  TLS1_TXT_RSA_WITH_AES_256_SHA256 = 'AES256-SHA256';
  TLS1_TXT_DH_DSS_WITH_AES_128_SHA256 = 'DH-DSS-AES128-SHA256';
  TLS1_TXT_DH_RSA_WITH_AES_128_SHA256 = 'DH-RSA-AES128-SHA256';
  TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256 = 'DHE-DSS-AES128-SHA256';
  TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256 = 'DHE-RSA-AES128-SHA256';
  TLS1_TXT_DH_DSS_WITH_AES_256_SHA256 = 'DH-DSS-AES256-SHA256';
  TLS1_TXT_DH_RSA_WITH_AES_256_SHA256 = 'DH-RSA-AES256-SHA256';
  TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256 = 'DHE-DSS-AES256-SHA256';
  TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256 = 'DHE-RSA-AES256-SHA256';
  TLS1_TXT_ADH_WITH_AES_128_SHA256 = 'ADH-AES128-SHA256';
  TLS1_TXT_ADH_WITH_AES_256_SHA256 = 'ADH-AES256-SHA256';
  TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256 = 'AES128-GCM-SHA256';
  TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384 = 'AES256-GCM-SHA384';
  TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256 = 'DHE-RSA-AES128-GCM-SHA256';
  TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384 = 'DHE-RSA-AES256-GCM-SHA384';
  TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256 = 'DH-RSA-AES128-GCM-SHA256';
  TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384 = 'DH-RSA-AES256-GCM-SHA384';
  TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256 = 'DHE-DSS-AES128-GCM-SHA256';
  TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384 = 'DHE-DSS-AES256-GCM-SHA384';
  TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256 = 'DH-DSS-AES128-GCM-SHA256';
  TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384 = 'DH-DSS-AES256-GCM-SHA384';
  TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256 = 'ADH-AES128-GCM-SHA256';
  TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384 = 'ADH-AES256-GCM-SHA384';
  TLS1_TXT_RSA_WITH_AES_128_CCM = 'AES128-CCM';
  TLS1_TXT_RSA_WITH_AES_256_CCM = 'AES256-CCM';
  TLS1_TXT_DHE_RSA_WITH_AES_128_CCM = 'DHE-RSA-AES128-CCM';
  TLS1_TXT_DHE_RSA_WITH_AES_256_CCM = 'DHE-RSA-AES256-CCM';
  TLS1_TXT_RSA_WITH_AES_128_CCM_8 = 'AES128-CCM8';
  TLS1_TXT_RSA_WITH_AES_256_CCM_8 = 'AES256-CCM8';
  TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8 = 'DHE-RSA-AES128-CCM8';
  TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8 = 'DHE-RSA-AES256-CCM8';
  TLS1_TXT_PSK_WITH_AES_128_CCM = 'PSK-AES128-CCM';
  TLS1_TXT_PSK_WITH_AES_256_CCM = 'PSK-AES256-CCM';
  TLS1_TXT_DHE_PSK_WITH_AES_128_CCM = 'DHE-PSK-AES128-CCM';
  TLS1_TXT_DHE_PSK_WITH_AES_256_CCM = 'DHE-PSK-AES256-CCM';
  TLS1_TXT_PSK_WITH_AES_128_CCM_8 = 'PSK-AES128-CCM8';
  TLS1_TXT_PSK_WITH_AES_256_CCM_8 = 'PSK-AES256-CCM8';
  TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8 = 'DHE-PSK-AES128-CCM8';
  TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8 = 'DHE-PSK-AES256-CCM8';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM = 'ECDHE-ECDSA-AES128-CCM';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM = 'ECDHE-ECDSA-AES256-CCM';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 'ECDHE-ECDSA-AES128-CCM8';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 'ECDHE-ECDSA-AES256-CCM8';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256 = 'ECDHE-ECDSA-AES128-SHA256';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384 = 'ECDHE-ECDSA-AES256-SHA384';
  TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256 = 'ECDH-ECDSA-AES128-SHA256';
  TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384 = 'ECDH-ECDSA-AES256-SHA384';
  TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256 = 'ECDHE-RSA-AES128-SHA256';
  TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384 = 'ECDHE-RSA-AES256-SHA384';
  TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256 = 'ECDH-RSA-AES128-SHA256';
  TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384 = 'ECDH-RSA-AES256-SHA384';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 'ECDHE-ECDSA-AES128-GCM-SHA256';
  TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 'ECDHE-ECDSA-AES256-GCM-SHA384';
  TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 'ECDH-ECDSA-AES128-GCM-SHA256';
  TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 'ECDH-ECDSA-AES256-GCM-SHA384';
  TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 'ECDHE-RSA-AES128-GCM-SHA256';
  TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 'ECDHE-RSA-AES256-GCM-SHA384';
  TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 'ECDH-RSA-AES128-GCM-SHA256';
  TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 'ECDH-RSA-AES256-GCM-SHA384';
  TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA = 'ECDHE-PSK-RC4-SHA';
  TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 'ECDHE-PSK-3DES-EDE-CBC-SHA';
  TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA = 'ECDHE-PSK-AES128-CBC-SHA';
  TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA = 'ECDHE-PSK-AES256-CBC-SHA';
  TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 'ECDHE-PSK-AES128-CBC-SHA256';
  TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 'ECDHE-PSK-AES256-CBC-SHA384';
  TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA = 'ECDHE-PSK-NULL-SHA';
  TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256 = 'ECDHE-PSK-NULL-SHA256';
  TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384 = 'ECDHE-PSK-NULL-SHA384';
  TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 'ECDHE-ECDSA-CAMELLIA128-SHA256';
  TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 'ECDHE-ECDSA-CAMELLIA256-SHA384';
  TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 'ECDH-ECDSA-CAMELLIA128-SHA256';
  TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 'ECDH-ECDSA-CAMELLIA256-SHA384';
  TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'ECDHE-RSA-CAMELLIA128-SHA256';
  TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 'ECDHE-RSA-CAMELLIA256-SHA384';
  TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 'ECDH-RSA-CAMELLIA128-SHA256';
  TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 'ECDH-RSA-CAMELLIA256-SHA384';
  TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 'ECDHE-RSA-CHACHA20-POLY1305';
  TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 'ECDHE-ECDSA-CHACHA20-POLY1305';
  TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305 = 'DHE-RSA-CHACHA20-POLY1305';
  TLS1_TXT_PSK_WITH_CHACHA20_POLY1305 = 'PSK-CHACHA20-POLY1305';
  TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305 = 'ECDHE-PSK-CHACHA20-POLY1305';
  TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305 = 'DHE-PSK-CHACHA20-POLY1305';
  TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305 = 'RSA-PSK-CHACHA20-POLY1305';
  TLS1_TXT_RSA_WITH_ARIA_128_GCM_SHA256 = 'ARIA128-GCM-SHA256';
  TLS1_TXT_RSA_WITH_ARIA_256_GCM_SHA384 = 'ARIA256-GCM-SHA384';
  TLS1_TXT_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 'DHE-RSA-ARIA128-GCM-SHA256';
  TLS1_TXT_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 'DHE-RSA-ARIA256-GCM-SHA384';
  TLS1_TXT_DH_RSA_WITH_ARIA_128_GCM_SHA256 = 'DH-RSA-ARIA128-GCM-SHA256';
  TLS1_TXT_DH_RSA_WITH_ARIA_256_GCM_SHA384 = 'DH-RSA-ARIA256-GCM-SHA384';
  TLS1_TXT_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 'DHE-DSS-ARIA128-GCM-SHA256';
  TLS1_TXT_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 'DHE-DSS-ARIA256-GCM-SHA384';
  TLS1_TXT_DH_DSS_WITH_ARIA_128_GCM_SHA256 = 'DH-DSS-ARIA128-GCM-SHA256';
  TLS1_TXT_DH_DSS_WITH_ARIA_256_GCM_SHA384 = 'DH-DSS-ARIA256-GCM-SHA384';
  TLS1_TXT_DH_anon_WITH_ARIA_128_GCM_SHA256 = 'ADH-ARIA128-GCM-SHA256';
  TLS1_TXT_DH_anon_WITH_ARIA_256_GCM_SHA384 = 'ADH-ARIA256-GCM-SHA384';
  TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 'ECDHE-ECDSA-ARIA128-GCM-SHA256';
  TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 'ECDHE-ECDSA-ARIA256-GCM-SHA384';
  TLS1_TXT_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = 'ECDH-ECDSA-ARIA128-GCM-SHA256';
  TLS1_TXT_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = 'ECDH-ECDSA-ARIA256-GCM-SHA384';
  TLS1_TXT_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 'ECDHE-ARIA128-GCM-SHA256';
  TLS1_TXT_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 'ECDHE-ARIA256-GCM-SHA384';
  TLS1_TXT_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = 'ECDH-ARIA128-GCM-SHA256';
  TLS1_TXT_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = 'ECDH-ARIA256-GCM-SHA384';
  TLS1_TXT_PSK_WITH_ARIA_128_GCM_SHA256 = 'PSK-ARIA128-GCM-SHA256';
  TLS1_TXT_PSK_WITH_ARIA_256_GCM_SHA384 = 'PSK-ARIA256-GCM-SHA384';
  TLS1_TXT_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = 'DHE-PSK-ARIA128-GCM-SHA256';
  TLS1_TXT_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = 'DHE-PSK-ARIA256-GCM-SHA384';
  TLS1_TXT_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = 'RSA-PSK-ARIA128-GCM-SHA256';
  TLS1_TXT_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = 'RSA-PSK-ARIA256-GCM-SHA384';
  TLS_CT_RSA_SIGN = 1;
  TLS_CT_DSS_SIGN = 2;
  TLS_CT_RSA_FIXED_DH = 3;
  TLS_CT_DSS_FIXED_DH = 4;
  TLS_CT_ECDSA_SIGN = 64;
  TLS_CT_RSA_FIXED_ECDH = 65;
  TLS_CT_ECDSA_FIXED_ECDH = 66;
  TLS_CT_GOST01_SIGN = 22;
  TLS_CT_GOST12_SIGN = 238;
  TLS_CT_GOST12_512_SIGN = 239;
  TLS_CT_NUMBER = 10;
  TLS1_FINISH_MAC_LENGTH = 12;
  TLS_MD_MAX_CONST_SIZE = 22;
  TLS_MD_CLIENT_FINISH_CONST = 'client finished';
  TLS_MD_CLIENT_FINISH_CONST_SIZE = 15;
  TLS_MD_SERVER_FINISH_CONST = 'server finished';
  TLS_MD_SERVER_FINISH_CONST_SIZE = 15;
  TLS_MD_KEY_EXPANSION_CONST = 'key expansion';
  TLS_MD_KEY_EXPANSION_CONST_SIZE = 13;
  TLS_MD_CLIENT_WRITE_KEY_CONST = 'client write key';
  TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE = 16;
  TLS_MD_SERVER_WRITE_KEY_CONST = 'server write key';
  TLS_MD_SERVER_WRITE_KEY_CONST_SIZE = 16;
  TLS_MD_IV_BLOCK_CONST = 'IV block';
  TLS_MD_IV_BLOCK_CONST_SIZE = 8;
  TLS_MD_MASTER_SECRET_CONST = 'master secret';
  TLS_MD_MASTER_SECRET_CONST_SIZE = 13;
  TLS_MD_EXTENDED_MASTER_SECRET_CONST = 'extended master secret';
  TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE = 22;
  SSL_KEY_UPDATE_NONE = -1;
  SSL_KEY_UPDATE_NOT_REQUESTED = 0;
  SSL_KEY_UPDATE_REQUESTED = 1;
  SSL_ST_CONNECT = $1000;
  SSL_ST_ACCEPT = $2000;
  SSL_ST_MASK = $0FFF;
  SSL_CB_LOOP = $01;
  SSL_CB_EXIT = $02;
  SSL_CB_READ = $04;
  SSL_CB_WRITE = $08;
  SSL_CB_ALERT = $4000;
  SSL_CB_READ_ALERT = (SSL_CB_ALERT or SSL_CB_READ);
  SSL_CB_WRITE_ALERT = (SSL_CB_ALERT or SSL_CB_WRITE);
  SSL_CB_ACCEPT_LOOP = (SSL_ST_ACCEPT or SSL_CB_LOOP);
  SSL_CB_ACCEPT_EXIT = (SSL_ST_ACCEPT or SSL_CB_EXIT);
  SSL_CB_CONNECT_LOOP = (SSL_ST_CONNECT or SSL_CB_LOOP);
  SSL_CB_CONNECT_EXIT = (SSL_ST_CONNECT or SSL_CB_EXIT);
  SSL_CB_HANDSHAKE_START = $10;
  SSL_CB_HANDSHAKE_DONE = $20;
  SSL_ST_READ_HEADER = $F0;
  SSL_ST_READ_BODY = $F1;
  SSL_ST_READ_DONE = $F2;
  SSL_VERIFY_NONE = $00;
  SSL_VERIFY_PEER = $01;
  SSL_VERIFY_FAIL_IF_NO_PEER_CERT = $02;
  SSL_VERIFY_CLIENT_ONCE = $04;
  SSL_VERIFY_POST_HANDSHAKE = $08;
  SSL_AD_REASON_OFFSET = 1000;
  SSL_AD_CLOSE_NOTIFY = SSL3_AD_CLOSE_NOTIFY;
  SSL_AD_UNEXPECTED_MESSAGE = SSL3_AD_UNEXPECTED_MESSAGE;
  SSL_AD_BAD_RECORD_MAC = SSL3_AD_BAD_RECORD_MAC;
  SSL_AD_DECRYPTION_FAILED = TLS1_AD_DECRYPTION_FAILED;
  SSL_AD_RECORD_OVERFLOW = TLS1_AD_RECORD_OVERFLOW;
  SSL_AD_DECOMPRESSION_FAILURE = SSL3_AD_DECOMPRESSION_FAILURE;
  SSL_AD_HANDSHAKE_FAILURE = SSL3_AD_HANDSHAKE_FAILURE;
  SSL_AD_NO_CERTIFICATE = SSL3_AD_NO_CERTIFICATE;
  SSL_AD_BAD_CERTIFICATE = SSL3_AD_BAD_CERTIFICATE;
  SSL_AD_UNSUPPORTED_CERTIFICATE = SSL3_AD_UNSUPPORTED_CERTIFICATE;
  SSL_AD_CERTIFICATE_REVOKED = SSL3_AD_CERTIFICATE_REVOKED;
  SSL_AD_CERTIFICATE_EXPIRED = SSL3_AD_CERTIFICATE_EXPIRED;
  SSL_AD_CERTIFICATE_UNKNOWN = SSL3_AD_CERTIFICATE_UNKNOWN;
  SSL_AD_ILLEGAL_PARAMETER = SSL3_AD_ILLEGAL_PARAMETER;
  SSL_AD_UNKNOWN_CA = TLS1_AD_UNKNOWN_CA;
  SSL_AD_ACCESS_DENIED = TLS1_AD_ACCESS_DENIED;
  SSL_AD_DECODE_ERROR = TLS1_AD_DECODE_ERROR;
  SSL_AD_DECRYPT_ERROR = TLS1_AD_DECRYPT_ERROR;
  SSL_AD_EXPORT_RESTRICTION = TLS1_AD_EXPORT_RESTRICTION;
  SSL_AD_PROTOCOL_VERSION = TLS1_AD_PROTOCOL_VERSION;
  SSL_AD_INSUFFICIENT_SECURITY = TLS1_AD_INSUFFICIENT_SECURITY;
  SSL_AD_INTERNAL_ERROR = TLS1_AD_INTERNAL_ERROR;
  SSL_AD_USER_CANCELLED = TLS1_AD_USER_CANCELLED;
  SSL_AD_NO_RENEGOTIATION = TLS1_AD_NO_RENEGOTIATION;
  SSL_AD_MISSING_EXTENSION = TLS13_AD_MISSING_EXTENSION;
  SSL_AD_CERTIFICATE_REQUIRED = TLS13_AD_CERTIFICATE_REQUIRED;
  SSL_AD_UNSUPPORTED_EXTENSION = TLS1_AD_UNSUPPORTED_EXTENSION;
  SSL_AD_CERTIFICATE_UNOBTAINABLE = TLS1_AD_CERTIFICATE_UNOBTAINABLE;
  SSL_AD_UNRECOGNIZED_NAME = TLS1_AD_UNRECOGNIZED_NAME;
  SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE = TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE;
  SSL_AD_BAD_CERTIFICATE_HASH_VALUE = TLS1_AD_BAD_CERTIFICATE_HASH_VALUE;
  SSL_AD_UNKNOWN_PSK_IDENTITY = TLS1_AD_UNKNOWN_PSK_IDENTITY;
  SSL_AD_INAPPROPRIATE_FALLBACK = TLS1_AD_INAPPROPRIATE_FALLBACK;
  SSL_AD_NO_APPLICATION_PROTOCOL = TLS1_AD_NO_APPLICATION_PROTOCOL;
  SSL_ERROR_NONE = 0;
  SSL_ERROR_SSL = 1;
  SSL_ERROR_WANT_READ = 2;
  SSL_ERROR_WANT_WRITE = 3;
  SSL_ERROR_WANT_X509_LOOKUP = 4;
  SSL_ERROR_SYSCALL = 5;
  SSL_ERROR_ZERO_RETURN = 6;
  SSL_ERROR_WANT_CONNECT = 7;
  SSL_ERROR_WANT_ACCEPT = 8;
  SSL_ERROR_WANT_ASYNC = 9;
  SSL_ERROR_WANT_ASYNC_JOB = 10;
  SSL_ERROR_WANT_CLIENT_HELLO_CB = 11;
  SSL_CTRL_SET_TMP_DH = 3;
  SSL_CTRL_SET_TMP_ECDH = 4;
  SSL_CTRL_SET_TMP_DH_CB = 6;
  SSL_CTRL_GET_CLIENT_CERT_REQUEST = 9;
  SSL_CTRL_GET_NUM_RENEGOTIATIONS = 10;
  SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS = 11;
  SSL_CTRL_GET_TOTAL_RENEGOTIATIONS = 12;
  SSL_CTRL_GET_FLAGS = 13;
  SSL_CTRL_EXTRA_CHAIN_CERT = 14;
  SSL_CTRL_SET_MSG_CALLBACK = 15;
  SSL_CTRL_SET_MSG_CALLBACK_ARG = 16;
  SSL_CTRL_SET_MTU = 17;
  SSL_CTRL_SESS_NUMBER = 20;
  SSL_CTRL_SESS_CONNECT = 21;
  SSL_CTRL_SESS_CONNECT_GOOD = 22;
  SSL_CTRL_SESS_CONNECT_RENEGOTIATE = 23;
  SSL_CTRL_SESS_ACCEPT = 24;
  SSL_CTRL_SESS_ACCEPT_GOOD = 25;
  SSL_CTRL_SESS_ACCEPT_RENEGOTIATE = 26;
  SSL_CTRL_SESS_HIT = 27;
  SSL_CTRL_SESS_CB_HIT = 28;
  SSL_CTRL_SESS_MISSES = 29;
  SSL_CTRL_SESS_TIMEOUTS = 30;
  SSL_CTRL_SESS_CACHE_FULL = 31;
  SSL_CTRL_MODE = 33;
  SSL_CTRL_GET_READ_AHEAD = 40;
  SSL_CTRL_SET_READ_AHEAD = 41;
  SSL_CTRL_SET_SESS_CACHE_SIZE = 42;
  SSL_CTRL_GET_SESS_CACHE_SIZE = 43;
  SSL_CTRL_SET_SESS_CACHE_MODE = 44;
  SSL_CTRL_GET_SESS_CACHE_MODE = 45;
  SSL_CTRL_GET_MAX_CERT_LIST = 50;
  SSL_CTRL_SET_MAX_CERT_LIST = 51;
  SSL_CTRL_SET_MAX_SEND_FRAGMENT = 52;
  SSL_CTRL_SET_TLSEXT_SERVERNAME_CB = 53;
  SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG = 54;
  SSL_CTRL_SET_TLSEXT_HOSTNAME = 55;
  SSL_CTRL_SET_TLSEXT_DEBUG_CB = 56;
  SSL_CTRL_SET_TLSEXT_DEBUG_ARG = 57;
  SSL_CTRL_GET_TLSEXT_TICKET_KEYS = 58;
  SSL_CTRL_SET_TLSEXT_TICKET_KEYS = 59;
  SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB = 63;
  SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG = 64;
  SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE = 65;
  SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS = 66;
  SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS = 67;
  SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS = 68;
  SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS = 69;
  SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP = 70;
  SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP = 71;
  SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB = 72;
  SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB = 75;
  SSL_CTRL_SET_SRP_VERIFY_PARAM_CB = 76;
  SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB = 77;
  SSL_CTRL_SET_SRP_ARG = 78;
  SSL_CTRL_SET_TLS_EXT_SRP_USERNAME = 79;
  SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH = 80;
  SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD = 81;
  DTLS_CTRL_GET_TIMEOUT = 73;
  DTLS_CTRL_HANDLE_TIMEOUT = 74;
  SSL_CTRL_GET_RI_SUPPORT = 76;
  SSL_CTRL_CLEAR_MODE = 78;
  SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB = 79;
  SSL_CTRL_GET_EXTRA_CHAIN_CERTS = 82;
  SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS = 83;
  SSL_CTRL_CHAIN = 88;
  SSL_CTRL_CHAIN_CERT = 89;
  SSL_CTRL_GET_GROUPS = 90;
  SSL_CTRL_SET_GROUPS = 91;
  SSL_CTRL_SET_GROUPS_LIST = 92;
  SSL_CTRL_GET_SHARED_GROUP = 93;
  SSL_CTRL_SET_SIGALGS = 97;
  SSL_CTRL_SET_SIGALGS_LIST = 98;
  SSL_CTRL_CERT_FLAGS = 99;
  SSL_CTRL_CLEAR_CERT_FLAGS = 100;
  SSL_CTRL_SET_CLIENT_SIGALGS = 101;
  SSL_CTRL_SET_CLIENT_SIGALGS_LIST = 102;
  SSL_CTRL_GET_CLIENT_CERT_TYPES = 103;
  SSL_CTRL_SET_CLIENT_CERT_TYPES = 104;
  SSL_CTRL_BUILD_CERT_CHAIN = 105;
  SSL_CTRL_SET_VERIFY_CERT_STORE = 106;
  SSL_CTRL_SET_CHAIN_CERT_STORE = 107;
  SSL_CTRL_GET_PEER_SIGNATURE_NID = 108;
  SSL_CTRL_GET_PEER_TMP_KEY = 109;
  SSL_CTRL_GET_RAW_CIPHERLIST = 110;
  SSL_CTRL_GET_EC_POINT_FORMATS = 111;
  SSL_CTRL_GET_CHAIN_CERTS = 115;
  SSL_CTRL_SELECT_CURRENT_CERT = 116;
  SSL_CTRL_SET_CURRENT_CERT = 117;
  SSL_CTRL_SET_DH_AUTO = 118;
  DTLS_CTRL_SET_LINK_MTU = 120;
  DTLS_CTRL_GET_LINK_MIN_MTU = 121;
  SSL_CTRL_GET_EXTMS_SUPPORT = 122;
  SSL_CTRL_SET_MIN_PROTO_VERSION = 123;
  SSL_CTRL_SET_MAX_PROTO_VERSION = 124;
  SSL_CTRL_SET_SPLIT_SEND_FRAGMENT = 125;
  SSL_CTRL_SET_MAX_PIPELINES = 126;
  SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE = 127;
  SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB = 128;
  SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG = 129;
  SSL_CTRL_GET_MIN_PROTO_VERSION = 130;
  SSL_CTRL_GET_MAX_PROTO_VERSION = 131;
  SSL_CTRL_GET_SIGNATURE_NID = 132;
  SSL_CTRL_GET_TMP_KEY = 133;
  SSL_CERT_SET_FIRST = 1;
  SSL_CERT_SET_NEXT = 2;
  SSL_CERT_SET_SERVER = 3;
  SSL_CTRL_GET_SERVER_TMP_KEY = SSL_CTRL_GET_PEER_TMP_KEY;
  SSL_CTRL_GET_CURVES = SSL_CTRL_GET_GROUPS;
  SSL_CTRL_SET_CURVES = SSL_CTRL_SET_GROUPS;
  SSL_CTRL_SET_CURVES_LIST = SSL_CTRL_SET_GROUPS_LIST;
  SSL_CTRL_GET_SHARED_CURVE = SSL_CTRL_GET_SHARED_GROUP;
  SSL_SERVERINFOV1 = 1;
  SSL_SERVERINFOV2 = 2;
  SSL_CLIENT_HELLO_SUCCESS = 1;
  SSL_CLIENT_HELLO_ERROR = 0;
  SSL_CLIENT_HELLO_RETRY = (-1);
  SSL_READ_EARLY_DATA_ERROR = 0;
  SSL_READ_EARLY_DATA_SUCCESS = 1;
  SSL_READ_EARLY_DATA_FINISH = 2;
  SSL_EARLY_DATA_NOT_SENT = 0;
  SSL_EARLY_DATA_REJECTED = 1;
  SSL_EARLY_DATA_ACCEPTED = 2;
  SSL_SECOP_OTHER_TYPE = $ffff0000;
  SSL_SECOP_OTHER_NONE = 0;
  SSL_SECOP_OTHER_CIPHER = (1 shl 16);
  SSL_SECOP_OTHER_CURVE = (2 shl 16);
  SSL_SECOP_OTHER_DH = (3 shl 16);
  SSL_SECOP_OTHER_PKEY = (4 shl 16);
  SSL_SECOP_OTHER_SIGALG = (5 shl 16);
  SSL_SECOP_OTHER_CERT = (6 shl 16);
  SSL_SECOP_PEER = $1000;
  SSL_SECOP_CIPHER_SUPPORTED = (1 or SSL_SECOP_OTHER_CIPHER);
  SSL_SECOP_CIPHER_SHARED = (2 or SSL_SECOP_OTHER_CIPHER);
  SSL_SECOP_CIPHER_CHECK = (3 or SSL_SECOP_OTHER_CIPHER);
  SSL_SECOP_CURVE_SUPPORTED = (4 or SSL_SECOP_OTHER_CURVE);
  SSL_SECOP_CURVE_SHARED = (5 or SSL_SECOP_OTHER_CURVE);
  SSL_SECOP_CURVE_CHECK = (6 or SSL_SECOP_OTHER_CURVE);
  SSL_SECOP_TMP_DH = (7 or SSL_SECOP_OTHER_PKEY);
  SSL_SECOP_VERSION = (9 or SSL_SECOP_OTHER_NONE);
  SSL_SECOP_TICKET = (10 or SSL_SECOP_OTHER_NONE);
  SSL_SECOP_SIGALG_SUPPORTED = (11 or SSL_SECOP_OTHER_SIGALG);
  SSL_SECOP_SIGALG_SHARED = (12 or SSL_SECOP_OTHER_SIGALG);
  SSL_SECOP_SIGALG_CHECK = (13 or SSL_SECOP_OTHER_SIGALG);
  SSL_SECOP_SIGALG_MASK = (14 or SSL_SECOP_OTHER_SIGALG);
  SSL_SECOP_COMPRESSION = (15 or SSL_SECOP_OTHER_NONE);
  SSL_SECOP_EE_KEY = (16 or SSL_SECOP_OTHER_CERT);
  SSL_SECOP_CA_KEY = (17 or SSL_SECOP_OTHER_CERT);
  SSL_SECOP_CA_MD = (18 or SSL_SECOP_OTHER_CERT);
  SSL_SECOP_PEER_EE_KEY = (SSL_SECOP_EE_KEY or SSL_SECOP_PEER);
  SSL_SECOP_PEER_CA_KEY = (SSL_SECOP_CA_KEY or SSL_SECOP_PEER);
  SSL_SECOP_PEER_CA_MD = (SSL_SECOP_CA_MD or SSL_SECOP_PEER);
  OPENSSL_INIT_NO_LOAD_SSL_STRINGS = $00100000;
  OPENSSL_INIT_LOAD_SSL_STRINGS = $00200000;
  OPENSSL_INIT_SSL_DEFAULT = (OPENSSL_INIT_LOAD_SSL_STRINGS or OPENSSL_INIT_LOAD_CRYPTO_STRINGS);
  SSL_TICKET_FATAL_ERR_MALLOC = 0;
  SSL_TICKET_FATAL_ERR_OTHER = 1;
  SSL_TICKET_NONE = 2;
  SSL_TICKET_EMPTY = 3;
  SSL_TICKET_NO_DECRYPT = 4;
  SSL_TICKET_SUCCESS = 5;
  SSL_TICKET_SUCCESS_RENEW = 6;
  SSL_TICKET_RETURN_ABORT = 0;
  SSL_TICKET_RETURN_IGNORE = 1;
  SSL_TICKET_RETURN_IGNORE_RENEW = 2;
  SSL_TICKET_RETURN_USE = 3;
  SSL_TICKET_RETURN_USE_RENEW = 4;
  SRTP_AES128_CM_SHA1_80 = $0001;
  SRTP_AES128_CM_SHA1_32 = $0002;
  SRTP_AES128_F8_SHA1_80 = $0003;
  SRTP_AES128_F8_SHA1_32 = $0004;
  SRTP_NULL_SHA1_80 = $0005;
  SRTP_NULL_SHA1_32 = $0006;
  SRTP_AEAD_AES_128_GCM = $0007;
  SRTP_AEAD_AES_256_GCM = $0008;
  OSSL_STORE_F_FILE_CTRL = 129;
  OSSL_STORE_F_FILE_FIND = 138;
  OSSL_STORE_F_FILE_GET_PASS = 118;
  OSSL_STORE_F_FILE_LOAD = 119;
  OSSL_STORE_F_FILE_LOAD_TRY_DECODE = 124;
  OSSL_STORE_F_FILE_NAME_TO_URI = 126;
  OSSL_STORE_F_FILE_OPEN = 120;
  OSSL_STORE_F_OSSL_STORE_ATTACH_PEM_BIO = 127;
  OSSL_STORE_F_OSSL_STORE_EXPECT = 130;
  OSSL_STORE_F_OSSL_STORE_FILE_ATTACH_PEM_BIO_INT = 128;
  OSSL_STORE_F_OSSL_STORE_FIND = 131;
  OSSL_STORE_F_OSSL_STORE_GET0_LOADER_INT = 100;
  OSSL_STORE_F_OSSL_STORE_INFO_GET1_CERT = 101;
  OSSL_STORE_F_OSSL_STORE_INFO_GET1_CRL = 102;
  OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME = 103;
  OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME_DESCRIPTION = 135;
  OSSL_STORE_F_OSSL_STORE_INFO_GET1_PARAMS = 104;
  OSSL_STORE_F_OSSL_STORE_INFO_GET1_PKEY = 105;
  OSSL_STORE_F_OSSL_STORE_INFO_NEW_CERT = 106;
  OSSL_STORE_F_OSSL_STORE_INFO_NEW_CRL = 107;
  OSSL_STORE_F_OSSL_STORE_INFO_NEW_EMBEDDED = 123;
  OSSL_STORE_F_OSSL_STORE_INFO_NEW_NAME = 109;
  OSSL_STORE_F_OSSL_STORE_INFO_NEW_PARAMS = 110;
  OSSL_STORE_F_OSSL_STORE_INFO_NEW_PKEY = 111;
  OSSL_STORE_F_OSSL_STORE_INFO_SET0_NAME_DESCRIPTION = 134;
  OSSL_STORE_F_OSSL_STORE_INIT_ONCE = 112;
  OSSL_STORE_F_OSSL_STORE_LOADER_NEW = 113;
  OSSL_STORE_F_OSSL_STORE_OPEN = 114;
  OSSL_STORE_F_OSSL_STORE_OPEN_INT = 115;
  OSSL_STORE_F_OSSL_STORE_REGISTER_LOADER_INT = 117;
  OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ALIAS = 132;
  OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ISSUER_SERIAL = 133;
  OSSL_STORE_F_OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT = 136;
  OSSL_STORE_F_OSSL_STORE_SEARCH_BY_NAME = 137;
  OSSL_STORE_F_OSSL_STORE_UNREGISTER_LOADER_INT = 116;
  OSSL_STORE_F_TRY_DECODE_PARAMS = 121;
  OSSL_STORE_F_TRY_DECODE_PKCS12 = 122;
  OSSL_STORE_F_TRY_DECODE_PKCS8ENCRYPTED = 125;
  OSSL_STORE_R_AMBIGUOUS_CONTENT_TYPE = 107;
  OSSL_STORE_R_BAD_PASSWORD_READ = 115;
  OSSL_STORE_R_ERROR_VERIFYING_PKCS12_MAC = 113;
  OSSL_STORE_R_FINGERPRINT_SIZE_DOES_NOT_MATCH_DIGEST = 121;
  OSSL_STORE_R_INVALID_SCHEME = 106;
  OSSL_STORE_R_IS_NOT_A = 112;
  OSSL_STORE_R_LOADER_INCOMPLETE = 116;
  OSSL_STORE_R_LOADING_STARTED = 117;
  OSSL_STORE_R_NOT_A_CERTIFICATE = 100;
  OSSL_STORE_R_NOT_A_CRL = 101;
  OSSL_STORE_R_NOT_A_KEY = 102;
  OSSL_STORE_R_NOT_A_NAME = 103;
  OSSL_STORE_R_NOT_PARAMETERS = 104;
  OSSL_STORE_R_PASSPHRASE_CALLBACK_ERROR = 114;
  OSSL_STORE_R_PATH_MUST_BE_ABSOLUTE = 108;
  OSSL_STORE_R_SEARCH_ONLY_SUPPORTED_FOR_DIRECTORIES = 119;
  OSSL_STORE_R_UI_PROCESS_INTERRUPTED_OR_CANCELLED = 109;
  OSSL_STORE_R_UNREGISTERED_SCHEME = 105;
  OSSL_STORE_R_UNSUPPORTED_CONTENT_TYPE = 110;
  OSSL_STORE_R_UNSUPPORTED_OPERATION = 118;
  OSSL_STORE_R_UNSUPPORTED_SEARCH_TYPE = 120;
  OSSL_STORE_R_URI_AUTHORITY_UNSUPPORTED = 111;
  OSSL_STORE_C_USE_SECMEM = 1;
  OSSL_STORE_C_CUSTOM_START = 100;
  OSSL_STORE_INFO_NAME = 1;
  OSSL_STORE_INFO_PARAMS = 2;
  OSSL_STORE_INFO_PKEY = 3;
  OSSL_STORE_INFO_CERT = 4;
  OSSL_STORE_INFO_CRL = 5;
  _OSSL_STORE_SEARCH_BY_NAME = 1;
  _OSSL_STORE_SEARCH_BY_ISSUER_SERIAL = 2;
  _OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT = 3;
  _OSSL_STORE_SEARCH_BY_ALIAS = 4;
  TS_F_DEF_SERIAL_CB = 110;
  TS_F_DEF_TIME_CB = 111;
  TS_F_ESS_ADD_SIGNING_CERT = 112;
  TS_F_ESS_ADD_SIGNING_CERT_V2 = 147;
  TS_F_ESS_CERT_ID_NEW_INIT = 113;
  TS_F_ESS_CERT_ID_V2_NEW_INIT = 156;
  TS_F_ESS_SIGNING_CERT_NEW_INIT = 114;
  TS_F_ESS_SIGNING_CERT_V2_NEW_INIT = 157;
  TS_F_INT_TS_RESP_VERIFY_TOKEN = 149;
  TS_F_PKCS7_TO_TS_TST_INFO = 148;
  TS_F_TS_ACCURACY_SET_MICROS = 115;
  TS_F_TS_ACCURACY_SET_MILLIS = 116;
  TS_F_TS_ACCURACY_SET_SECONDS = 117;
  TS_F_TS_CHECK_IMPRINTS = 100;
  TS_F_TS_CHECK_NONCES = 101;
  TS_F_TS_CHECK_POLICY = 102;
  TS_F_TS_CHECK_SIGNING_CERTS = 103;
  TS_F_TS_CHECK_STATUS_INFO = 104;
  TS_F_TS_COMPUTE_IMPRINT = 145;
  TS_F_TS_CONF_INVALID = 151;
  TS_F_TS_CONF_LOAD_CERT = 153;
  TS_F_TS_CONF_LOAD_CERTS = 154;
  TS_F_TS_CONF_LOAD_KEY = 155;
  TS_F_TS_CONF_LOOKUP_FAIL = 152;
  TS_F_TS_CONF_SET_DEFAULT_ENGINE = 146;
  TS_F_TS_GET_STATUS_TEXT = 105;
  TS_F_TS_MSG_IMPRINT_SET_ALGO = 118;
  TS_F_TS_REQ_SET_MSG_IMPRINT = 119;
  TS_F_TS_REQ_SET_NONCE = 120;
  TS_F_TS_REQ_SET_POLICY_ID = 121;
  TS_F_TS_RESP_CREATE_RESPONSE = 122;
  TS_F_TS_RESP_CREATE_TST_INFO = 123;
  TS_F_TS_RESP_CTX_ADD_FAILURE_INFO = 124;
  TS_F_TS_RESP_CTX_ADD_MD = 125;
  TS_F_TS_RESP_CTX_ADD_POLICY = 126;
  TS_F_TS_RESP_CTX_NEW = 127;
  TS_F_TS_RESP_CTX_SET_ACCURACY = 128;
  TS_F_TS_RESP_CTX_SET_CERTS = 129;
  TS_F_TS_RESP_CTX_SET_DEF_POLICY = 130;
  TS_F_TS_RESP_CTX_SET_SIGNER_CERT = 131;
  TS_F_TS_RESP_CTX_SET_STATUS_INFO = 132;
  TS_F_TS_RESP_GET_POLICY = 133;
  TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION = 134;
  TS_F_TS_RESP_SET_STATUS_INFO = 135;
  TS_F_TS_RESP_SET_TST_INFO = 150;
  TS_F_TS_RESP_SIGN = 136;
  TS_F_TS_RESP_VERIFY_SIGNATURE = 106;
  TS_F_TS_TST_INFO_SET_ACCURACY = 137;
  TS_F_TS_TST_INFO_SET_MSG_IMPRINT = 138;
  TS_F_TS_TST_INFO_SET_NONCE = 139;
  TS_F_TS_TST_INFO_SET_POLICY_ID = 140;
  TS_F_TS_TST_INFO_SET_SERIAL = 141;
  TS_F_TS_TST_INFO_SET_TIME = 142;
  TS_F_TS_TST_INFO_SET_TSA = 143;
  TS_F_TS_VERIFY = 108;
  TS_F_TS_VERIFY_CERT = 109;
  TS_F_TS_VERIFY_CTX_NEW = 144;
  TS_R_BAD_PKCS7_TYPE = 132;
  TS_R_BAD_TYPE = 133;
  TS_R_CANNOT_LOAD_CERT = 137;
  TS_R_CANNOT_LOAD_KEY = 138;
  TS_R_CERTIFICATE_VERIFY_ERROR = 100;
  TS_R_COULD_NOT_SET_ENGINE = 127;
  TS_R_COULD_NOT_SET_TIME = 115;
  TS_R_DETACHED_CONTENT = 134;
  TS_R_ESS_ADD_SIGNING_CERT_ERROR = 116;
  TS_R_ESS_ADD_SIGNING_CERT_V2_ERROR = 139;
  TS_R_ESS_SIGNING_CERTIFICATE_ERROR = 101;
  TS_R_INVALID_NULL_POINTER = 102;
  TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE = 117;
  TS_R_MESSAGE_IMPRINT_MISMATCH = 103;
  TS_R_NONCE_MISMATCH = 104;
  TS_R_NONCE_NOT_RETURNED = 105;
  TS_R_NO_CONTENT = 106;
  TS_R_NO_TIME_STAMP_TOKEN = 107;
  TS_R_PKCS7_ADD_SIGNATURE_ERROR = 118;
  TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR = 119;
  TS_R_PKCS7_TO_TS_TST_INFO_FAILED = 129;
  TS_R_POLICY_MISMATCH = 108;
  TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 120;
  TS_R_RESPONSE_SETUP_ERROR = 121;
  TS_R_SIGNATURE_FAILURE = 109;
  TS_R_THERE_MUST_BE_ONE_SIGNER = 110;
  TS_R_TIME_SYSCALL_ERROR = 122;
  TS_R_TOKEN_NOT_PRESENT = 130;
  TS_R_TOKEN_PRESENT = 131;
  TS_R_TSA_NAME_MISMATCH = 111;
  TS_R_TSA_UNTRUSTED = 112;
  TS_R_TST_INFO_SETUP_ERROR = 123;
  TS_R_TS_DATASIGN = 124;
  TS_R_UNACCEPTABLE_POLICY = 125;
  TS_R_UNSUPPORTED_MD_ALGORITHM = 126;
  TS_R_UNSUPPORTED_VERSION = 113;
  TS_R_VAR_BAD_VALUE = 135;
  TS_R_VAR_LOOKUP_FAILURE = 136;
  TS_R_WRONG_CONTENT_TYPE = 114;
  TS_STATUS_GRANTED = 0;
  TS_STATUS_GRANTED_WITH_MODS = 1;
  TS_STATUS_REJECTION = 2;
  TS_STATUS_WAITING = 3;
  TS_STATUS_REVOCATION_WARNING = 4;
  TS_STATUS_REVOCATION_NOTIFICATION = 5;
  TS_INFO_BAD_ALG = 0;
  TS_INFO_BAD_REQUEST = 2;
  TS_INFO_BAD_DATA_FORMAT = 5;
  TS_INFO_TIME_NOT_AVAILABLE = 14;
  TS_INFO_UNACCEPTED_POLICY = 15;
  TS_INFO_UNACCEPTED_EXTENSION = 16;
  TS_INFO_ADD_INFO_NOT_AVAILABLE = 17;
  TS_INFO_SYSTEM_FAILURE = 25;
  TS_TSA_NAME = $01;
  TS_ORDERING = $02;
  TS_ESS_CERT_ID_CHAIN = $04;
  TS_MAX_CLOCK_PRECISION_DIGITS = 6;
  TS_MAX_STATUS_LENGTH = (1024*1024);
  TS_VFY_SIGNATURE = (1 shl 0);
  TS_VFY_VERSION = (1 shl 1);
  TS_VFY_POLICY = (1 shl 2);
  TS_VFY_IMPRINT = (1 shl 3);
  TS_VFY_DATA = (1 shl 4);
  TS_VFY_NONCE = (1 shl 5);
  TS_VFY_SIGNER = (1 shl 6);
  TS_VFY_TSA_NAME = (1 shl 7);
  TS_VFY_ALL_IMPRINT = (TS_VFY_SIGNATURE or TS_VFY_VERSION or TS_VFY_POLICY or TS_VFY_IMPRINT or TS_VFY_NONCE or TS_VFY_SIGNER or TS_VFY_TSA_NAME);
  TS_VFY_ALL_DATA = (TS_VFY_SIGNATURE or TS_VFY_VERSION or TS_VFY_POLICY or TS_VFY_DATA or TS_VFY_NONCE or TS_VFY_SIGNER or TS_VFY_TSA_NAME);
  DB_ERROR_OK = 0;
  DB_ERROR_MALLOC = 1;
  DB_ERROR_INDEX_CLASH = 2;
  DB_ERROR_INDEX_OUT_OF_RANGE = 3;
  DB_ERROR_NO_INDEX = 4;
  DB_ERROR_INSERT_INDEX_CLASH = 5;
  DB_ERROR_WRONG_NUM_FIELDS = 6;
  WHIRLPOOL_DIGEST_LENGTH = (512 div 8);
  WHIRLPOOL_BBLOCK = 512;
  WHIRLPOOL_COUNTER = (256 div 8);

type
  // declaradas para delphi7
  {$IF (NOT Defined(FPC)) and (CompilerVersion < 22)}
    PUTF8Char = PAnsiChar;
    UTF8Char = AnsiChar;
    _PAnsiChr = PAnsiChar;
    MarshaledAString = _PAnsiChr;
    UInt8 = Byte;
    UInt16 = Word;
    UInt32 = Cardinal;
    TBytes = array of byte;
    RawByteString = ansiString;
  {$IFEND}
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PPPUTF8Char = ^PPUTF8Char;
  PPByte = ^PByte;
  PPPByte = ^PPByte;
  PPInteger = ^PInteger;
  PNativeUInt = ^NativeUInt;
  PInt64 = ^Int64;
  PPointer = ^Pointer;
  PUInt64 = ^UInt64;
  PLongint = ^Longint;
  PUInt8 = ^UInt8;
  PPUInt8 = ^PUInt8;
  PUInt32 = ^UInt32;
  Pstack_st = Pointer;
  PPstack_st = ^Pstack_st;
  Pstack_st_OPENSSL_STRING = Pointer;
  PPstack_st_OPENSSL_STRING = ^Pstack_st_OPENSSL_STRING;
  Pstack_st_OPENSSL_CSTRING = Pointer;
  PPstack_st_OPENSSL_CSTRING = ^Pstack_st_OPENSSL_CSTRING;
  Pstack_st_OPENSSL_BLOCK = Pointer;
  PPstack_st_OPENSSL_BLOCK = ^Pstack_st_OPENSSL_BLOCK;
  Pasn1_object_st = Pointer;
  PPasn1_object_st = ^Pasn1_object_st;
  Pasn1_pctx_st = Pointer;
  PPasn1_pctx_st = ^Pasn1_pctx_st;
  Pasn1_sctx_st = Pointer;
  PPasn1_sctx_st = ^Pasn1_sctx_st;
  Pdane_st = Pointer;
  PPdane_st = ^Pdane_st;
  Pbio_st = Pointer;
  PPbio_st = ^Pbio_st;
  Pbignum_st = Pointer;
  PPbignum_st = ^Pbignum_st;
  Pbignum_ctx = Pointer;
  PPbignum_ctx = ^Pbignum_ctx;
  Pbn_blinding_st = Pointer;
  PPbn_blinding_st = ^Pbn_blinding_st;
  Pbn_mont_ctx_st = Pointer;
  PPbn_mont_ctx_st = ^Pbn_mont_ctx_st;
  Pbn_recp_ctx_st = Pointer;
  PPbn_recp_ctx_st = ^Pbn_recp_ctx_st;
  Pbn_gencb_st = Pointer;
  PPbn_gencb_st = ^Pbn_gencb_st;
  Pevp_cipher_st = Pointer;
  PPevp_cipher_st = ^Pevp_cipher_st;
  Pevp_cipher_ctx_st = Pointer;
  PPevp_cipher_ctx_st = ^Pevp_cipher_ctx_st;
  Pevp_md_st = Pointer;
  PPevp_md_st = ^Pevp_md_st;
  Pevp_md_ctx_st = Pointer;
  PPevp_md_ctx_st = ^Pevp_md_ctx_st;
  Pevp_pkey_st = Pointer;
  PPevp_pkey_st = ^Pevp_pkey_st;
  Pevp_pkey_asn1_method_st = Pointer;
  PPevp_pkey_asn1_method_st = ^Pevp_pkey_asn1_method_st;
  Pevp_pkey_method_st = Pointer;
  PPevp_pkey_method_st = ^Pevp_pkey_method_st;
  Pevp_pkey_ctx_st = Pointer;
  PPevp_pkey_ctx_st = ^Pevp_pkey_ctx_st;
  Pevp_Encode_Ctx_st = Pointer;
  PPevp_Encode_Ctx_st = ^Pevp_Encode_Ctx_st;
  Phmac_ctx_st = Pointer;
  PPhmac_ctx_st = ^Phmac_ctx_st;
  Prsa_meth_st = Pointer;
  PPrsa_meth_st = ^Prsa_meth_st;
  Pec_key_method_st = Pointer;
  PPec_key_method_st = ^Pec_key_method_st;
  Prand_drbg_st = Pointer;
  PPrand_drbg_st = ^Prand_drbg_st;
  Pssl_dane_st = Pointer;
  PPssl_dane_st = ^Pssl_dane_st;
  Px509_st = Pointer;
  PPx509_st = ^Px509_st;
  PX509_crl_st = Pointer;
  PPX509_crl_st = ^PX509_crl_st;
  Px509_crl_method_st = Pointer;
  PPx509_crl_method_st = ^Px509_crl_method_st;
  Px509_revoked_st = Pointer;
  PPx509_revoked_st = ^Px509_revoked_st;
  PX509_name_st = Pointer;
  PPX509_name_st = ^PX509_name_st;
  PX509_pubkey_st = Pointer;
  PPX509_pubkey_st = ^PX509_pubkey_st;
  Px509_store_st = Pointer;
  PPx509_store_st = ^Px509_store_st;
  Px509_store_ctx_st = Pointer;
  PPx509_store_ctx_st = ^Px509_store_ctx_st;
  Px509_object_st = Pointer;
  PPx509_object_st = ^Px509_object_st;
  Px509_lookup_st = Pointer;
  PPx509_lookup_st = ^Px509_lookup_st;
  Px509_lookup_method_st = Pointer;
  PPx509_lookup_method_st = ^Px509_lookup_method_st;
  PX509_VERIFY_PARAM_st = Pointer;
  PPX509_VERIFY_PARAM_st = ^PX509_VERIFY_PARAM_st;
  Px509_sig_info_st = Pointer;
  PPx509_sig_info_st = ^Px509_sig_info_st;
  Ppkcs8_priv_key_info_st = Pointer;
  PPpkcs8_priv_key_info_st = ^Ppkcs8_priv_key_info_st;
  Possl_init_settings_st = Pointer;
  PPossl_init_settings_st = ^Possl_init_settings_st;
  Pui_st = Pointer;
  PPui_st = ^Pui_st;
  Pui_method_st = Pointer;
  PPui_method_st = ^Pui_method_st;
  Pengine_st = Pointer;
  PPengine_st = ^Pengine_st;
  Pssl_st = Pointer;
  PPssl_st = ^Pssl_st;
  Pssl_ctx_st = Pointer;
  PPssl_ctx_st = ^Pssl_ctx_st;
  Pcomp_ctx_st = Pointer;
  PPcomp_ctx_st = ^Pcomp_ctx_st;
  Pcomp_method_st = Pointer;
  PPcomp_method_st = ^Pcomp_method_st;
  PX509_POLICY_NODE_st = Pointer;
  PPX509_POLICY_NODE_st = ^PX509_POLICY_NODE_st;
  PX509_POLICY_LEVEL_st = Pointer;
  PPX509_POLICY_LEVEL_st = ^PX509_POLICY_LEVEL_st;
  PX509_POLICY_TREE_st = Pointer;
  PPX509_POLICY_TREE_st = ^PX509_POLICY_TREE_st;
  PX509_POLICY_CACHE_st = Pointer;
  PPX509_POLICY_CACHE_st = ^PX509_POLICY_CACHE_st;
  Pocsp_req_ctx_st = Pointer;
  PPocsp_req_ctx_st = ^Pocsp_req_ctx_st;
  Pocsp_response_st = Pointer;
  PPocsp_response_st = ^Pocsp_response_st;
  Pocsp_responder_id_st = Pointer;
  PPocsp_responder_id_st = ^Pocsp_responder_id_st;
  Psct_st = Pointer;
  PPsct_st = ^Psct_st;
  Psct_ctx_st = Pointer;
  PPsct_ctx_st = ^Psct_ctx_st;
  Pctlog_st = Pointer;
  PPctlog_st = ^Pctlog_st;
  Pctlog_store_st = Pointer;
  PPctlog_store_st = ^Pctlog_store_st;
  Pct_policy_eval_ctx_st = Pointer;
  PPct_policy_eval_ctx_st = ^Pct_policy_eval_ctx_st;
  Possl_store_info_st = Pointer;
  PPossl_store_info_st = ^Possl_store_info_st;
  Possl_store_search_st = Pointer;
  PPossl_store_search_st = ^Possl_store_search_st;
  Pstack_st_void = Pointer;
  PPstack_st_void = ^Pstack_st_void;
  Pbio_addrinfo_st = Pointer;
  PPbio_addrinfo_st = ^Pbio_addrinfo_st;
  Pbio_method_st = Pointer;
  PPbio_method_st = ^Pbio_method_st;
  Pstack_st_BIO = Pointer;
  PPstack_st_BIO = ^Pstack_st_BIO;
  Phostent = Pointer;
  PPhostent = ^Phostent;
  Pstack_st_X509_ALGOR = Pointer;
  PPstack_st_X509_ALGOR = ^Pstack_st_X509_ALGOR;
  Pstack_st_ASN1_STRING_TABLE = Pointer;
  PPstack_st_ASN1_STRING_TABLE = ^Pstack_st_ASN1_STRING_TABLE;
  PASN1_VALUE_st = Pointer;
  PPASN1_VALUE_st = ^PASN1_VALUE_st;
  Pstack_st_ASN1_INTEGER = Pointer;
  PPstack_st_ASN1_INTEGER = ^Pstack_st_ASN1_INTEGER;
  Pstack_st_ASN1_GENERALSTRING = Pointer;
  PPstack_st_ASN1_GENERALSTRING = ^Pstack_st_ASN1_GENERALSTRING;
  Pstack_st_ASN1_UTF8STRING = Pointer;
  PPstack_st_ASN1_UTF8STRING = ^Pstack_st_ASN1_UTF8STRING;
  Pstack_st_ASN1_TYPE = Pointer;
  PPstack_st_ASN1_TYPE = ^Pstack_st_ASN1_TYPE;
  Pstack_st_ASN1_OBJECT = Pointer;
  PPstack_st_ASN1_OBJECT = ^Pstack_st_ASN1_OBJECT;
  Pstack_st_ASN1_VALUE = Pointer;
  PPstack_st_ASN1_VALUE = ^Pstack_st_ASN1_VALUE;
  Pasync_job_st = Pointer;
  PPasync_job_st = ^Pasync_job_st;
  Pasync_wait_ctx_st = Pointer;
  PPasync_wait_ctx_st = ^Pasync_wait_ctx_st;
  Prsa_st = Pointer;
  PPrsa_st = ^Prsa_st;
  Pdsa_st = Pointer;
  PPdsa_st = ^Pdsa_st;
  Pdh_st = Pointer;
  PPdh_st = ^Pdh_st;
  Pec_key_st = Pointer;
  PPec_key_st = ^Pec_key_st;
  PCMAC_CTX_st = Pointer;
  PPCMAC_CTX_st = ^PCMAC_CTX_st;
  Pec_method_st = Pointer;
  PPec_method_st = ^Pec_method_st;
  Pec_group_st = Pointer;
  PPec_group_st = ^Pec_group_st;
  Pec_point_st = Pointer;
  PPec_point_st = ^Pec_point_st;
  Pecpk_parameters_st = Pointer;
  PPecpk_parameters_st = ^Pecpk_parameters_st;
  Pec_parameters_st = Pointer;
  PPec_parameters_st = ^Pec_parameters_st;
  PECDSA_SIG_st = Pointer;
  PPECDSA_SIG_st = ^PECDSA_SIG_st;
  PDSA_SIG_st = Pointer;
  PPDSA_SIG_st = ^PDSA_SIG_st;
  PX509_sig_st = Pointer;
  PPX509_sig_st = ^PX509_sig_st;
  PX509_name_entry_st = Pointer;
  PPX509_name_entry_st = ^PX509_name_entry_st;
  Pstack_st_X509_NAME_ENTRY = Pointer;
  PPstack_st_X509_NAME_ENTRY = ^Pstack_st_X509_NAME_ENTRY;
  Pstack_st_X509_NAME = Pointer;
  PPstack_st_X509_NAME = ^Pstack_st_X509_NAME;
  PX509_extension_st = Pointer;
  PPX509_extension_st = ^PX509_extension_st;
  Pstack_st_X509_EXTENSION = Pointer;
  PPstack_st_X509_EXTENSION = ^Pstack_st_X509_EXTENSION;
  Px509_attributes_st = Pointer;
  PPx509_attributes_st = ^Px509_attributes_st;
  Pstack_st_X509_ATTRIBUTE = Pointer;
  PPstack_st_X509_ATTRIBUTE = ^Pstack_st_X509_ATTRIBUTE;
  PX509_req_info_st = Pointer;
  PPX509_req_info_st = ^PX509_req_info_st;
  PX509_req_st = Pointer;
  PPX509_req_st = ^PX509_req_st;
  Px509_cert_aux_st = Pointer;
  PPx509_cert_aux_st = ^Px509_cert_aux_st;
  Px509_cinf_st = Pointer;
  PPx509_cinf_st = ^Px509_cinf_st;
  Pstack_st_X509 = Pointer;
  PPstack_st_X509 = ^Pstack_st_X509;
  Pstack_st_X509_TRUST = Pointer;
  PPstack_st_X509_TRUST = ^Pstack_st_X509_TRUST;
  Pstack_st_X509_REVOKED = Pointer;
  PPstack_st_X509_REVOKED = ^Pstack_st_X509_REVOKED;
  PX509_crl_info_st = Pointer;
  PPX509_crl_info_st = ^PX509_crl_info_st;
  Pstack_st_X509_CRL = Pointer;
  PPstack_st_X509_CRL = ^Pstack_st_X509_CRL;
  Pstack_st_X509_INFO = Pointer;
  PPstack_st_X509_INFO = ^Pstack_st_X509_INFO;
  Plhash_node_st = Pointer;
  PPlhash_node_st = ^Plhash_node_st;
  Plhash_st = Pointer;
  PPlhash_st = ^Plhash_st;
  Pstack_st_X509_LOOKUP = Pointer;
  PPstack_st_X509_LOOKUP = ^Pstack_st_X509_LOOKUP;
  Pstack_st_X509_OBJECT = Pointer;
  PPstack_st_X509_OBJECT = ^Pstack_st_X509_OBJECT;
  Pstack_st_X509_VERIFY_PARAM = Pointer;
  PPstack_st_X509_VERIFY_PARAM = ^Pstack_st_X509_VERIFY_PARAM;
  Pstack_st_PKCS7_SIGNER_INFO = Pointer;
  PPstack_st_PKCS7_SIGNER_INFO = ^Pstack_st_PKCS7_SIGNER_INFO;
  Pstack_st_PKCS7_RECIP_INFO = Pointer;
  PPstack_st_PKCS7_RECIP_INFO = ^Pstack_st_PKCS7_RECIP_INFO;
  Pstack_st_PKCS7 = Pointer;
  PPstack_st_PKCS7 = ^Pstack_st_PKCS7;
  Pstack_st_CONF_VALUE = Pointer;
  PPstack_st_CONF_VALUE = ^Pstack_st_CONF_VALUE;
  Pconf_imodule_st = Pointer;
  PPconf_imodule_st = ^Pconf_imodule_st;
  Pconf_module_st = Pointer;
  PPconf_module_st = ^Pconf_module_st;
  Pstack_st_CONF_MODULE = Pointer;
  PPstack_st_CONF_MODULE = ^Pstack_st_CONF_MODULE;
  Pstack_st_CONF_IMODULE = Pointer;
  PPstack_st_CONF_IMODULE = ^Pstack_st_CONF_IMODULE;
  Pstack_st_X509V3_EXT_METHOD = Pointer;
  PPstack_st_X509V3_EXT_METHOD = ^Pstack_st_X509V3_EXT_METHOD;
  Pstack_st_GENERAL_NAME = Pointer;
  PPstack_st_GENERAL_NAME = ^Pstack_st_GENERAL_NAME;
  Pstack_st_GENERAL_NAMES = Pointer;
  PPstack_st_GENERAL_NAMES = ^Pstack_st_GENERAL_NAMES;
  Pstack_st_ACCESS_DESCRIPTION = Pointer;
  PPstack_st_ACCESS_DESCRIPTION = ^Pstack_st_ACCESS_DESCRIPTION;
  Pstack_st_DIST_POINT = Pointer;
  PPstack_st_DIST_POINT = ^Pstack_st_DIST_POINT;
  Pstack_st_SXNETID = Pointer;
  PPstack_st_SXNETID = ^Pstack_st_SXNETID;
  Pstack_st_POLICYQUALINFO = Pointer;
  PPstack_st_POLICYQUALINFO = ^Pstack_st_POLICYQUALINFO;
  Pstack_st_POLICYINFO = Pointer;
  PPstack_st_POLICYINFO = ^Pstack_st_POLICYINFO;
  Pstack_st_POLICY_MAPPING = Pointer;
  PPstack_st_POLICY_MAPPING = ^Pstack_st_POLICY_MAPPING;
  Pstack_st_GENERAL_SUBTREE = Pointer;
  PPstack_st_GENERAL_SUBTREE = ^Pstack_st_GENERAL_SUBTREE;
  Pstack_st_X509_PURPOSE = Pointer;
  PPstack_st_X509_PURPOSE = ^Pstack_st_X509_PURPOSE;
  Pstack_st_X509_POLICY_NODE = Pointer;
  PPstack_st_X509_POLICY_NODE = ^Pstack_st_X509_POLICY_NODE;
  Pstack_st_ASIdOrRange = Pointer;
  PPstack_st_ASIdOrRange = ^Pstack_st_ASIdOrRange;
  Pstack_st_IPAddressOrRange = Pointer;
  PPstack_st_IPAddressOrRange = ^Pstack_st_IPAddressOrRange;
  Pstack_st_IPAddressFamily = Pointer;
  PPstack_st_IPAddressFamily = ^Pstack_st_IPAddressFamily;
  Pstack_st_ASN1_STRING = Pointer;
  PPstack_st_ASN1_STRING = ^Pstack_st_ASN1_STRING;
  PNamingAuthority_st = Pointer;
  PPNamingAuthority_st = ^PNamingAuthority_st;
  PProfessionInfo_st = Pointer;
  PPProfessionInfo_st = ^PProfessionInfo_st;
  PAdmissions_st = Pointer;
  PPAdmissions_st = ^PAdmissions_st;
  PAdmissionSyntax_st = Pointer;
  PPAdmissionSyntax_st = ^PAdmissionSyntax_st;
  Pstack_st_ADMISSIONS = Pointer;
  PPstack_st_ADMISSIONS = ^Pstack_st_ADMISSIONS;
  Pstack_st_PROFESSION_INFO = Pointer;
  PPstack_st_PROFESSION_INFO = ^Pstack_st_PROFESSION_INFO;
  PCMS_ContentInfo_st = Pointer;
  PPCMS_ContentInfo_st = ^PCMS_ContentInfo_st;
  PCMS_SignerInfo_st = Pointer;
  PPCMS_SignerInfo_st = ^PCMS_SignerInfo_st;
  PCMS_RevocationInfoChoice_st = Pointer;
  PPCMS_RevocationInfoChoice_st = ^PCMS_RevocationInfoChoice_st;
  PCMS_RecipientInfo_st = Pointer;
  PPCMS_RecipientInfo_st = ^PCMS_RecipientInfo_st;
  PCMS_ReceiptRequest_st = Pointer;
  PPCMS_ReceiptRequest_st = ^PCMS_ReceiptRequest_st;
  PCMS_Receipt_st = Pointer;
  PPCMS_Receipt_st = ^PCMS_Receipt_st;
  PCMS_RecipientEncryptedKey_st = Pointer;
  PPCMS_RecipientEncryptedKey_st = ^PCMS_RecipientEncryptedKey_st;
  PCMS_OtherKeyAttribute_st = Pointer;
  PPCMS_OtherKeyAttribute_st = ^PCMS_OtherKeyAttribute_st;
  Pstack_st_CMS_SignerInfo = Pointer;
  PPstack_st_CMS_SignerInfo = ^Pstack_st_CMS_SignerInfo;
  Pstack_st_CMS_RecipientEncryptedKey = Pointer;
  PPstack_st_CMS_RecipientEncryptedKey = ^Pstack_st_CMS_RecipientEncryptedKey;
  Pstack_st_CMS_RecipientInfo = Pointer;
  PPstack_st_CMS_RecipientInfo = ^Pstack_st_CMS_RecipientInfo;
  Pstack_st_CMS_RevocationInfoChoice = Pointer;
  PPstack_st_CMS_RevocationInfoChoice = ^Pstack_st_CMS_RevocationInfoChoice;
  Pstack_st_SCT = Pointer;
  PPstack_st_SCT = ^Pstack_st_SCT;
  Pstack_st_CTLOG = Pointer;
  PPstack_st_CTLOG = ^Pstack_st_CTLOG;
  Pui_string_st = Pointer;
  PPui_string_st = ^Pui_string_st;
  Pstack_st_UI_STRING = Pointer;
  PPstack_st_UI_STRING = ^Pstack_st_UI_STRING;
  Pocsp_cert_id_st = Pointer;
  PPocsp_cert_id_st = ^Pocsp_cert_id_st;
  Pstack_st_OCSP_CERTID = Pointer;
  PPstack_st_OCSP_CERTID = ^Pstack_st_OCSP_CERTID;
  Pocsp_one_request_st = Pointer;
  PPocsp_one_request_st = ^Pocsp_one_request_st;
  Pstack_st_OCSP_ONEREQ = Pointer;
  PPstack_st_OCSP_ONEREQ = ^Pstack_st_OCSP_ONEREQ;
  Pocsp_req_info_st = Pointer;
  PPocsp_req_info_st = ^Pocsp_req_info_st;
  Pocsp_signature_st = Pointer;
  PPocsp_signature_st = ^Pocsp_signature_st;
  Pocsp_request_st = Pointer;
  PPocsp_request_st = ^Pocsp_request_st;
  Pocsp_resp_bytes_st = Pointer;
  PPocsp_resp_bytes_st = ^Pocsp_resp_bytes_st;
  Pstack_st_OCSP_RESPID = Pointer;
  PPstack_st_OCSP_RESPID = ^Pstack_st_OCSP_RESPID;
  Pocsp_revoked_info_st = Pointer;
  PPocsp_revoked_info_st = ^Pocsp_revoked_info_st;
  Pocsp_cert_status_st = Pointer;
  PPocsp_cert_status_st = ^Pocsp_cert_status_st;
  Pocsp_single_response_st = Pointer;
  PPocsp_single_response_st = ^Pocsp_single_response_st;
  Pstack_st_OCSP_SINGLERESP = Pointer;
  PPstack_st_OCSP_SINGLERESP = ^Pstack_st_OCSP_SINGLERESP;
  Pocsp_response_data_st = Pointer;
  PPocsp_response_data_st = ^Pocsp_response_data_st;
  Pocsp_basic_response_st = Pointer;
  PPocsp_basic_response_st = ^Pocsp_basic_response_st;
  Pocsp_crl_id_st = Pointer;
  PPocsp_crl_id_st = ^Pocsp_crl_id_st;
  Pocsp_service_locator_st = Pointer;
  PPocsp_service_locator_st = ^Pocsp_service_locator_st;
  PPKCS12_MAC_DATA_st = Pointer;
  PPPKCS12_MAC_DATA_st = ^PPKCS12_MAC_DATA_st;
  PPKCS12_st = Pointer;
  PPPKCS12_st = ^PPKCS12_st;
  PPKCS12_SAFEBAG_st = Pointer;
  PPPKCS12_SAFEBAG_st = ^PPKCS12_SAFEBAG_st;
  Pstack_st_PKCS12_SAFEBAG = Pointer;
  PPstack_st_PKCS12_SAFEBAG = ^Pstack_st_PKCS12_SAFEBAG;
  Ppkcs12_bag_st = Pointer;
  PPpkcs12_bag_st = ^Ppkcs12_bag_st;
  Pstack_st_SRP_gN_cache = Pointer;
  PPstack_st_SRP_gN_cache = ^Pstack_st_SRP_gN_cache;
  Pstack_st_SRP_user_pwd = Pointer;
  PPstack_st_SRP_user_pwd = ^Pstack_st_SRP_user_pwd;
  Pstack_st_SRP_gN = Pointer;
  PPstack_st_SRP_gN = ^Pstack_st_SRP_gN;
  Pssl_method_st = Pointer;
  PPssl_method_st = ^Pssl_method_st;
  Pssl_cipher_st = Pointer;
  PPssl_cipher_st = ^Pssl_cipher_st;
  Pssl_session_st = Pointer;
  PPssl_session_st = ^Pssl_session_st;
  Ptls_sigalgs_st = Pointer;
  PPtls_sigalgs_st = ^Ptls_sigalgs_st;
  Pssl_conf_ctx_st = Pointer;
  PPssl_conf_ctx_st = ^Pssl_conf_ctx_st;
  Pssl_comp_st = Pointer;
  PPssl_comp_st = ^Pssl_comp_st;
  Pstack_st_SRTP_PROTECTION_PROFILE = Pointer;
  PPstack_st_SRTP_PROTECTION_PROFILE = ^Pstack_st_SRTP_PROTECTION_PROFILE;
  Plhash_st_SSL_SESSION = Pointer;
  PPlhash_st_SSL_SESSION = ^Plhash_st_SSL_SESSION;
  Pstack_st_SSL_CIPHER = Pointer;
  PPstack_st_SSL_CIPHER = ^Pstack_st_SSL_CIPHER;
  Pstack_st_SSL_COMP = Pointer;
  PPstack_st_SSL_COMP = ^Pstack_st_SSL_COMP;
  Possl_store_ctx_st = Pointer;
  PPossl_store_ctx_st = ^Possl_store_ctx_st;
  Possl_store_loader_st = Pointer;
  PPossl_store_loader_st = ^Possl_store_loader_st;
  Possl_store_loader_ctx_st = Pointer;
  PPossl_store_loader_ctx_st = ^Possl_store_loader_ctx_st;
  PTS_msg_imprint_st = Pointer;
  PPTS_msg_imprint_st = ^PTS_msg_imprint_st;
  PTS_req_st = Pointer;
  PPTS_req_st = ^PTS_req_st;
  PTS_accuracy_st = Pointer;
  PPTS_accuracy_st = ^PTS_accuracy_st;
  PTS_tst_info_st = Pointer;
  PPTS_tst_info_st = ^PTS_tst_info_st;
  PTS_status_info_st = Pointer;
  PPTS_status_info_st = ^PTS_status_info_st;
  Pstack_st_ESS_CERT_ID = Pointer;
  PPstack_st_ESS_CERT_ID = ^Pstack_st_ESS_CERT_ID;
  PESS_cert_id_v2_st = Pointer;
  PPESS_cert_id_v2_st = ^PESS_cert_id_v2_st;
  PESS_signing_cert_v2_st = Pointer;
  PPESS_signing_cert_v2_st = ^PESS_signing_cert_v2_st;
  Pstack_st_ESS_CERT_ID_V2 = Pointer;
  PPstack_st_ESS_CERT_ID_V2 = ^Pstack_st_ESS_CERT_ID_V2;
  PTS_resp_st = Pointer;
  PPTS_resp_st = ^PTS_resp_st;
  Pstack_st_EVP_MD = Pointer;
  PPstack_st_EVP_MD = ^Pstack_st_EVP_MD;
  Pstack_st_OPENSSL_PSTRING = Pointer;
  PPstack_st_OPENSSL_PSTRING = ^Pstack_st_OPENSSL_PSTRING;
  Paes_key_st = ^aes_key_st;
  PCRYPTO_dynlock = ^CRYPTO_dynlock;
  Pcrypto_ex_data_st = ^crypto_ex_data_st;
  Pcrypto_threadid_st = ^crypto_threadid_st;
  Pasn1_string_st = ^asn1_string_st;
  PASN1_ENCODING_st = ^ASN1_ENCODING_st;
  Pasn1_string_table_st = ^asn1_string_table_st;
  Pasn1_type_st = ^asn1_type_st;
  PBIT_STRING_BITNAME_st = ^BIT_STRING_BITNAME_st;
  PASN1_TEMPLATE_st = ^ASN1_TEMPLATE_st;
  PASN1_ADB_st = ^ASN1_ADB_st;
  PASN1_ADB_TABLE_st = ^ASN1_ADB_TABLE_st;
  PASN1_ITEM_st = ^ASN1_ITEM_st;
  PASN1_TLC_st = ^ASN1_TLC_st;
  PASN1_EXTERN_FUNCS_st = ^ASN1_EXTERN_FUNCS_st;
  PASN1_PRIMITIVE_FUNCS_st = ^ASN1_PRIMITIVE_FUNCS_st;
  PASN1_AUX_st = ^ASN1_AUX_st;
  PASN1_PRINT_ARG_st = ^ASN1_PRINT_ARG_st;
  PASN1_STREAM_ARG_st = ^ASN1_STREAM_ARG_st;
  Pbf_key_st = ^bf_key_st;
  Pbuf_mem_st = ^buf_mem_st;
  Pcamellia_key_st = ^camellia_key_st;
  Pcast_key_st = ^cast_key_st;
  Pobj_name_st = ^obj_name_st;
  PEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM = ^EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM;
  Pevp_cipher_info_st = ^evp_cipher_info_st;
  PEC_builtin_curve = ^EC_builtin_curve;
  Prsa_pss_params_st = ^rsa_pss_params_st;
  Prsa_oaep_params_st = ^rsa_oaep_params_st;
  PSHAstate_st = ^SHAstate_st;
  PSHA256state_st = ^SHA256state_st;
  PSHA512state_st = ^SHA512state_st;
  PX509_algor_st = ^X509_algor_st;
  PX509_val_st = ^X509_val_st;
  Px509_trust_st = ^x509_trust_st;
  Pprivate_key_st = ^private_key_st;
  PX509_info_st = ^X509_info_st;
  PNetscape_spkac_st = ^Netscape_spkac_st;
  PNetscape_spki_st = ^Netscape_spki_st;
  PNetscape_certificate_sequence = ^Netscape_certificate_sequence;
  PPBEPARAM_st = ^PBEPARAM_st;
  PPBE2PARAM_st = ^PBE2PARAM_st;
  PPBKDF2PARAM_st = ^PBKDF2PARAM_st;
  PSCRYPT_PARAMS_st = ^SCRYPT_PARAMS_st;
  Plhash_st_OPENSSL_STRING = ^lhash_st_OPENSSL_STRING;
  PPlhash_st_OPENSSL_STRING = ^Plhash_st_OPENSSL_STRING;
  Plhash_st_OPENSSL_CSTRING = ^lhash_st_OPENSSL_CSTRING;
  Ppkcs7_issuer_and_serial_st = ^pkcs7_issuer_and_serial_st;
  Ppkcs7_signer_info_st = ^pkcs7_signer_info_st;
  Ppkcs7_recip_info_st = ^pkcs7_recip_info_st;
  Ppkcs7_signed_st = ^pkcs7_signed_st;
  Ppkcs7_enc_content_st = ^pkcs7_enc_content_st;
  Ppkcs7_enveloped_st = ^pkcs7_enveloped_st;
  Ppkcs7_signedandenveloped_st = ^pkcs7_signedandenveloped_st;
  Ppkcs7_digest_st = ^pkcs7_digest_st;
  Ppkcs7_encrypted_st = ^pkcs7_encrypted_st;
  Ppkcs7_st = ^pkcs7_st;
  PCONF_VALUE = ^CONF_VALUE;
  PPCONF_VALUE = ^PCONF_VALUE;
  Plhash_st_CONF_VALUE = ^lhash_st_CONF_VALUE;
  Pconf_method_st = ^conf_method_st;
  Pconf_st = ^conf_st;
  Pv3_ext_method = ^v3_ext_method;
  PX509V3_CONF_METHOD_st = ^X509V3_CONF_METHOD_st;
  Pv3_ext_ctx = ^v3_ext_ctx;
  PBASIC_CONSTRAINTS_st = ^BASIC_CONSTRAINTS_st;
  PPKEY_USAGE_PERIOD_st = ^PKEY_USAGE_PERIOD_st;
  PotherName_st = ^otherName_st;
  PEDIPartyName_st = ^EDIPartyName_st;
  PGENERAL_NAME_st = ^GENERAL_NAME_st;
  PACCESS_DESCRIPTION_st = ^ACCESS_DESCRIPTION_st;
  PDIST_POINT_NAME_st = ^DIST_POINT_NAME_st;
  PDIST_POINT_st = ^DIST_POINT_st;
  PAUTHORITY_KEYID_st = ^AUTHORITY_KEYID_st;
  PSXNET_ID_st = ^SXNET_ID_st;
  PSXNET_st = ^SXNET_st;
  PNOTICEREF_st = ^NOTICEREF_st;
  PUSERNOTICE_st = ^USERNOTICE_st;
  PPOLICYQUALINFO_st = ^POLICYQUALINFO_st;
  PPOLICYINFO_st = ^POLICYINFO_st;
  PPOLICY_MAPPING_st = ^POLICY_MAPPING_st;
  PGENERAL_SUBTREE_st = ^GENERAL_SUBTREE_st;
  PNAME_CONSTRAINTS_st = ^NAME_CONSTRAINTS_st;
  PPOLICY_CONSTRAINTS_st = ^POLICY_CONSTRAINTS_st;
  PPROXY_POLICY_st = ^PROXY_POLICY_st;
  PPROXY_CERT_INFO_EXTENSION_st = ^PROXY_CERT_INFO_EXTENSION_st;
  PISSUING_DIST_POINT_st = ^ISSUING_DIST_POINT_st;
  Px509_purpose_st = ^x509_purpose_st;
  PASRange_st = ^ASRange_st;
  PASIdOrRange_st = ^ASIdOrRange_st;
  PASIdentifierChoice_st = ^ASIdentifierChoice_st;
  PASIdentifiers_st = ^ASIdentifiers_st;
  PIPAddressRange_st = ^IPAddressRange_st;
  PIPAddressOrRange_st = ^IPAddressOrRange_st;
  PIPAddressChoice_st = ^IPAddressChoice_st;
  PIPAddressFamily_st = ^IPAddressFamily_st;
  PDES_ks = ^DES_ks;
  Prand_meth_st = ^rand_meth_st;
  Perr_state_st = ^err_state_st;
  PERR_string_data_st = ^ERR_string_data_st;
  Plhash_st_ERR_STRING_DATA = ^lhash_st_ERR_STRING_DATA;
  PENGINE_CMD_DEFN_st = ^ENGINE_CMD_DEFN_st;
  Pst_dynamic_MEM_fns = ^st_dynamic_MEM_fns;
  Pst_dynamic_fns = ^st_dynamic_fns;
  Pidea_key_st = ^idea_key_st;
  PMD4state_st = ^MD4state_st;
  PMD5state_st = ^MD5state_st;
  Pmdc2_ctx_st = ^mdc2_ctx_st;
  Prc2_key_st = ^rc2_key_st;
  Prc4_key_st = ^rc4_key_st;
  PRIPEMD160state_st = ^RIPEMD160state_st;
  Pseed_key_st = ^seed_key_st;
  PSRP_gN_cache_st = ^SRP_gN_cache_st;
  PSRP_user_pwd_st = ^SRP_user_pwd_st;
  PSRP_VBASE_st = ^SRP_VBASE_st;
  PSRP_gN_st = ^SRP_gN_st;
  Psrtp_protection_profile_st = ^srtp_protection_profile_st;
  Ptls_session_ticket_ext_st = ^tls_session_ticket_ext_st;
  Ptxt_db_st = ^txt_db_st;
  PWHIRLPOOL_CTX = ^WHIRLPOOL_CTX;

  aes_key_st = record
    rd_key: array [0..59] of Cardinal;
    rounds: Integer;
  end;

  AES_KEY = aes_key_st;
  PAES_KEY = ^AES_KEY;
  POPENSSL_STACK = Pointer;
  PPOPENSSL_STACK = ^POPENSSL_STACK;

  OPENSSL_sk_compfunc = function(p1: Pointer; p2: Pointer): Integer; cdecl;

  OPENSSL_sk_freefunc = procedure(p1: Pointer); cdecl;

  OPENSSL_sk_copyfunc = function(p1: Pointer): Pointer; cdecl;
  OPENSSL_STRING = PUTF8Char;
  POPENSSL_STRING = ^OPENSSL_STRING;
  PPOPENSSL_STRING = ^POPENSSL_STRING;
  OPENSSL_CSTRING = PUTF8Char;
  POPENSSL_CSTRING = ^OPENSSL_CSTRING;

  sk_OPENSSL_STRING_compfunc = function(a: PPUTF8Char; b: PPUTF8Char): Integer; cdecl;

  sk_OPENSSL_STRING_freefunc = procedure(a: PUTF8Char); cdecl;

  sk_OPENSSL_STRING_copyfunc = function(a: PUTF8Char): PUTF8Char; cdecl;

  sk_OPENSSL_CSTRING_compfunc = function(a: PPUTF8Char; b: PPUTF8Char): Integer; cdecl;

  sk_OPENSSL_CSTRING_freefunc = procedure(a: PUTF8Char); cdecl;

  sk_OPENSSL_CSTRING_copyfunc = function(a: PUTF8Char): PUTF8Char; cdecl;
  OPENSSL_BLOCK = Pointer;

  sk_OPENSSL_BLOCK_compfunc = function(a: PPointer; b: PPointer): Integer; cdecl;

  sk_OPENSSL_BLOCK_freefunc = procedure(a: Pointer); cdecl;

  sk_OPENSSL_BLOCK_copyfunc = function(a: Pointer): Pointer; cdecl;
  PBIO = Pointer;
  PPBIO = ^PBIO;
  PBIGNUM = Pointer;
  PPBIGNUM = ^PBIGNUM;
  PBN_CTX = Pointer;
  PPBN_CTX = ^PBN_CTX;
  PBN_BLINDING = Pointer;
  PPBN_BLINDING = ^PBN_BLINDING;
  PBN_MONT_CTX = Pointer;
  PPBN_MONT_CTX = ^PBN_MONT_CTX;
  PBN_RECP_CTX = Pointer;
  PPBN_RECP_CTX = ^PBN_RECP_CTX;
  PBN_GENCB = Pointer;
  PPBN_GENCB = ^PBN_GENCB;
  PEVP_CIPHER = Pointer;
  PPEVP_CIPHER = ^PEVP_CIPHER;
  PEVP_CIPHER_CTX = Pointer;
  PPEVP_CIPHER_CTX = ^PEVP_CIPHER_CTX;
  PEVP_MD = Pointer;
  PPEVP_MD = ^PEVP_MD;
  PEVP_MD_CTX = Pointer;
  PPEVP_MD_CTX = ^PEVP_MD_CTX;
  PEVP_PKEY = Pointer;
  PPEVP_PKEY = ^PEVP_PKEY;
  PEVP_PKEY_ASN1_METHOD = Pointer;
  PPEVP_PKEY_ASN1_METHOD = ^PEVP_PKEY_ASN1_METHOD;
  PEVP_PKEY_METHOD = Pointer;
  PPEVP_PKEY_METHOD = ^PEVP_PKEY_METHOD;
  PEVP_PKEY_CTX = Pointer;
  PPEVP_PKEY_CTX = ^PEVP_PKEY_CTX;
  PEVP_ENCODE_CTX = Pointer;
  PPEVP_ENCODE_CTX = ^PEVP_ENCODE_CTX;
  PHMAC_CTX = Pointer;
  PPHMAC_CTX = ^PHMAC_CTX;
  PDH = Pointer;
  PPDH = ^PDH;
  PDH_METHOD = Pointer;
  PPDH_METHOD = ^PDH_METHOD;
  PDSA = Pointer;
  PPDSA = ^PDSA;
  PDSA_METHOD = Pointer;
  PPDSA_METHOD = ^PDSA_METHOD;
  PRSA = Pointer;
  PPRSA = ^PRSA;
  PRSA_METHOD = Pointer;
  PPRSA_METHOD = ^PRSA_METHOD;
  PEC_KEY = Pointer;
  PPEC_KEY = ^PEC_KEY;
  PEC_KEY_METHOD = Pointer;
  PPEC_KEY_METHOD = ^PEC_KEY_METHOD;
  PSSL_DANE = Pointer;
  PPSSL_DANE = ^PSSL_DANE;
  PX509_CRL = Pointer;
  PPX509_CRL = ^PX509_CRL;
  PX509_CRL_METHOD = Pointer;
  PPX509_CRL_METHOD = ^PX509_CRL_METHOD;
  PX509_REVOKED = Pointer;
  PPX509_REVOKED = ^PX509_REVOKED;
  PX509_NAME = Pointer;
  PPX509_NAME = ^PX509_NAME;
  PX509_PUBKEY = Pointer;
  PPX509_PUBKEY = ^PX509_PUBKEY;
  PX509_STORE = Pointer;
  PPX509_STORE = ^PX509_STORE;
  PX509_STORE_CTX = Pointer;
  PPX509_STORE_CTX = ^PX509_STORE_CTX;
  PX509_OBJECT = Pointer;
  PPX509_OBJECT = ^PX509_OBJECT;
  PX509_LOOKUP = Pointer;
  PPX509_LOOKUP = ^PX509_LOOKUP;
  PX509_LOOKUP_METHOD = Pointer;
  PPX509_LOOKUP_METHOD = ^PX509_LOOKUP_METHOD;
  PX509_VERIFY_PARAM = Pointer;
  PPX509_VERIFY_PARAM = ^PX509_VERIFY_PARAM;
  PX509_SIG_INFO = Pointer;
  PPX509_SIG_INFO = ^PX509_SIG_INFO;
  PPKCS8_PRIV_KEY_INFO = Pointer;
  PPPKCS8_PRIV_KEY_INFO = ^PPKCS8_PRIV_KEY_INFO;
  PX509V3_CTX = ^X509V3_CTX;
  PCONF = ^CONF;
  POPENSSL_INIT_SETTINGS = Pointer;
  PPOPENSSL_INIT_SETTINGS = ^POPENSSL_INIT_SETTINGS;
  PUI = Pointer;
  PPUI = ^PUI;
  PUI_METHOD = Pointer;
  PPUI_METHOD = ^PUI_METHOD;
  PENGINE = Pointer;
  PPENGINE = ^PENGINE;
  PSSL = Pointer;
  PPSSL = ^PSSL;
  PSSL_CTX = Pointer;
  PPSSL_CTX = ^PSSL_CTX;
  PCOMP_CTX = Pointer;
  PPCOMP_CTX = ^PCOMP_CTX;
  PCOMP_METHOD = Pointer;
  PPCOMP_METHOD = ^PCOMP_METHOD;
  PX509_POLICY_NODE = Pointer;
  PPX509_POLICY_NODE = ^PX509_POLICY_NODE;
  PX509_POLICY_LEVEL = Pointer;
  PPX509_POLICY_LEVEL = ^PX509_POLICY_LEVEL;
  PX509_POLICY_TREE = Pointer;
  PPX509_POLICY_TREE = ^PX509_POLICY_TREE;
  PX509_POLICY_CACHE = Pointer;
  PPX509_POLICY_CACHE = ^PX509_POLICY_CACHE;
  PAUTHORITY_KEYID = ^AUTHORITY_KEYID;
  PPAUTHORITY_KEYID = ^PAUTHORITY_KEYID;
  PDIST_POINT = ^DIST_POINT;
  PPDIST_POINT = ^PDIST_POINT;
  PISSUING_DIST_POINT = ^ISSUING_DIST_POINT;
  PPISSUING_DIST_POINT = ^PISSUING_DIST_POINT;
  POCSP_REQ_CTX = Pointer;
  PPOCSP_REQ_CTX = ^POCSP_REQ_CTX;
  POCSP_RESPONSE = Pointer;
  PPOCSP_RESPONSE = ^POCSP_RESPONSE;
  POCSP_RESPID = Pointer;
  PPOCSP_RESPID = ^POCSP_RESPID;
  PSCT = Pointer;
  PPSCT = ^PSCT;
  PSCT_CTX = Pointer;
  PPSCT_CTX = ^PSCT_CTX;
  PCTLOG = Pointer;
  PPCTLOG = ^PCTLOG;
  PCTLOG_STORE = Pointer;
  PPCTLOG_STORE = ^PCTLOG_STORE;
  PCT_POLICY_EVAL_CTX = Pointer;
  PPCT_POLICY_EVAL_CTX = ^PCT_POLICY_EVAL_CTX;
  POSSL_STORE_INFO = Pointer;
  PPOSSL_STORE_INFO = ^POSSL_STORE_INFO;
  POSSL_STORE_SEARCH = Pointer;
  PPOSSL_STORE_SEARCH = ^POSSL_STORE_SEARCH;
  ossl_intmax_t = Int64;
  ossl_uintmax_t = UInt64;

  CRYPTO_dynlock = record
    dummy: Integer;
  end;

  PCRYPTO_RWLOCK = Pointer;
  PPCRYPTO_RWLOCK = ^PCRYPTO_RWLOCK;

  crypto_ex_data_st = record
    sk: Pstack_st_void;
  end;
  CRYPTO_EX_DATA = crypto_ex_data_st;
  PCRYPTO_EX_DATA = ^CRYPTO_EX_DATA;

  sk_void_compfunc = function(a: PPointer; b: PPointer): Integer; cdecl;

  sk_void_freefunc = procedure(a: Pointer); cdecl;

  sk_void_copyfunc = function(a: Pointer): Pointer; cdecl;

  PCRYPTO_EX_new = procedure(parent: Pointer; ptr: Pointer; ad: PCRYPTO_EX_DATA; idx: Integer; argl: Integer; argp: Pointer); cdecl;

  PCRYPTO_EX_free = procedure(parent: Pointer; ptr: Pointer; ad: PCRYPTO_EX_DATA; idx: Integer; argl: Integer; argp: Pointer); cdecl;

  PCRYPTO_EX_dup = function(vto: PCRYPTO_EX_DATA; from: PCRYPTO_EX_DATA; from_d: Pointer; idx: Integer; argl: Integer; argp: Pointer): Integer; cdecl;

  crypto_threadid_st = record
    dummy: Integer;
  end;

  CRYPTO_THREADID = crypto_threadid_st;
  CRYPTO_ONCE = Cardinal;
  PCRYPTO_ONCE = ^CRYPTO_ONCE;
  CRYPTO_THREAD_LOCAL = Cardinal;
  PCRYPTO_THREAD_LOCAL = ^CRYPTO_THREAD_LOCAL;
  CRYPTO_THREAD_ID = Cardinal;
  PBIO_ADDR = Pointer;
  PPBIO_ADDR = ^PBIO_ADDR;
  PBIO_ADDRINFO = Pointer;
  PPBIO_ADDRINFO = ^PBIO_ADDRINFO;

  BIO_callback_fn = function(b: PBIO; oper: Integer; argp: PUTF8Char; argi: Integer; argl: Integer; ret: Integer): Integer; cdecl;

  BIO_callback_fn_ex = function(b: PBIO; oper: Integer; argp: PUTF8Char; len: NativeUInt; argi: Integer; argl: Integer; ret: Integer; processed: PNativeUInt): Integer; cdecl;
  PBIO_METHOD = Pointer;
  PPBIO_METHOD = ^PBIO_METHOD;

  PBIO_info_cb = function(p1: PBIO; p2: Integer; p3: Integer): Integer; cdecl;
  //bio_info_cb = BIO_info_cb;

  sk_BIO_compfunc = function(a: PPBIO; b: PPBIO): Integer; cdecl;

  sk_BIO_freefunc = procedure(a: PBIO); cdecl;

  sk_BIO_copyfunc = function(a: PBIO): Pbio_st; cdecl;

  Pasn1_ps_func = function(b: PBIO; pbuf: PPByte; plen: PInteger; parg: Pointer): Integer; cdecl;

  BIO_hostserv_priorities = (
    BIO_PARSE_PRIO_HOST = 0,
    BIO_PARSE_PRIO_SERV = 1);
  PBIO_hostserv_priorities = ^BIO_hostserv_priorities;

  BIO_lookup_type = (
    BIO_LOOKUP_CLIENT = 0,
    BIO_LOOKUP_SERVER = 1);
  PBIO_lookup_type = ^BIO_lookup_type;

  BIO_sock_info_u = record
    case Integer of
      0: (addr: PBIO_ADDR);
  end;

  BIO_sock_info_type = (
    BIO_SOCK_INFO_ADDRESS = 0);
  PBIO_sock_info_type = ^BIO_sock_info_type;

  asn1_string_st = record
    length: Integer;
    vtype: Integer;
    data: PByte;
    flags: Integer;
  end;

  ASN1_INTEGER = asn1_string_st;
  PASN1_INTEGER = ^ASN1_INTEGER;
  PPASN1_INTEGER = ^PASN1_INTEGER;
  ASN1_ENUMERATED = asn1_string_st;
  PASN1_ENUMERATED = ^ASN1_ENUMERATED;
  PPASN1_ENUMERATED = ^PASN1_ENUMERATED;
  ASN1_BIT_STRING = asn1_string_st;
  PASN1_BIT_STRING = ^ASN1_BIT_STRING;
  PPASN1_BIT_STRING = ^PASN1_BIT_STRING;
  ASN1_OCTET_STRING = asn1_string_st;
  PASN1_OCTET_STRING = ^ASN1_OCTET_STRING;
  PPASN1_OCTET_STRING = ^PASN1_OCTET_STRING;
  ASN1_PRINTABLESTRING = asn1_string_st;
  PASN1_PRINTABLESTRING = ^ASN1_PRINTABLESTRING;
  PPASN1_PRINTABLESTRING = ^PASN1_PRINTABLESTRING;
  ASN1_T61STRING = asn1_string_st;
  PASN1_T61STRING = ^ASN1_T61STRING;
  PPASN1_T61STRING = ^PASN1_T61STRING;
  ASN1_IA5STRING = asn1_string_st;
  PASN1_IA5STRING = ^ASN1_IA5STRING;
  PPASN1_IA5STRING = ^PASN1_IA5STRING;
  ASN1_GENERALSTRING = asn1_string_st;
  PASN1_GENERALSTRING = ^ASN1_GENERALSTRING;
  PPASN1_GENERALSTRING = ^PASN1_GENERALSTRING;
  ASN1_UNIVERSALSTRING = asn1_string_st;
  PASN1_UNIVERSALSTRING = ^ASN1_UNIVERSALSTRING;
  PPASN1_UNIVERSALSTRING = ^PASN1_UNIVERSALSTRING;
  ASN1_BMPSTRING = asn1_string_st;
  PASN1_BMPSTRING = ^ASN1_BMPSTRING;
  PPASN1_BMPSTRING = ^PASN1_BMPSTRING;
  ASN1_UTCTIME = asn1_string_st;
  PASN1_UTCTIME = ^ASN1_UTCTIME;
  PPASN1_UTCTIME = ^PASN1_UTCTIME;
  ASN1_TIME = asn1_string_st;
  PASN1_TIME = ^ASN1_TIME;
  PPASN1_TIME = ^PASN1_TIME;
  ASN1_GENERALIZEDTIME = asn1_string_st;
  PASN1_GENERALIZEDTIME = ^ASN1_GENERALIZEDTIME;
  PPASN1_GENERALIZEDTIME = ^PASN1_GENERALIZEDTIME;
  ASN1_VISIBLESTRING = asn1_string_st;
  PASN1_VISIBLESTRING = ^ASN1_VISIBLESTRING;
  PPASN1_VISIBLESTRING = ^PASN1_VISIBLESTRING;
  ASN1_UTF8STRING = asn1_string_st;
  PASN1_UTF8STRING = ^ASN1_UTF8STRING;
  PPASN1_UTF8STRING = ^PASN1_UTF8STRING;
  ASN1_STRING = asn1_string_st;
  PASN1_STRING = ^ASN1_STRING;
  PPASN1_STRING = ^PASN1_STRING;
  ASN1_BOOLEAN = Integer;
  ASN1_NULL = Integer;
  PASN1_NULL = ^ASN1_NULL;
  PPASN1_NULL = ^PASN1_NULL;
  PASN1_OBJECT = Pointer;
  PPASN1_OBJECT = ^PASN1_OBJECT;
  PASN1_PCTX = Pointer;
  PPASN1_PCTX = ^PASN1_PCTX;
  PASN1_SCTX = Pointer;
  PPASN1_SCTX = ^PASN1_SCTX;

  ASN1_ENCODING_st = record
    enc: PByte;
    len: Integer;
    modified: Integer;
  end;

  ASN1_ENCODING = ASN1_ENCODING_st;

  asn1_string_table_st = record
    nid: Integer;
    minsize: Integer;
    maxsize: Integer;
    mask: Cardinal;
    flags: Cardinal;
  end;

  ASN1_STRING_TABLE = asn1_string_table_st;
  PASN1_STRING_TABLE = ^ASN1_STRING_TABLE;
  PPASN1_STRING_TABLE = ^PASN1_STRING_TABLE;

  sk_ASN1_STRING_TABLE_compfunc = function(a: PPASN1_STRING_TABLE; b: PPASN1_STRING_TABLE): Integer; cdecl;

  sk_ASN1_STRING_TABLE_freefunc = procedure(a: PASN1_STRING_TABLE); cdecl;

  sk_ASN1_STRING_TABLE_copyfunc = function(a: PASN1_STRING_TABLE): Pasn1_string_table_st; cdecl;
  PASN1_VALUE = Pointer;
  PPASN1_VALUE = ^PASN1_VALUE;

  Pd2i_of_void = function(p1: PPointer; p2: PPByte; p3: Integer): Pointer; cdecl;

  Pi2d_of_void = function(p1: Pointer; p2: PPByte): Integer; cdecl;

  sk_ASN1_INTEGER_compfunc = function(a: PPASN1_INTEGER; b: PPASN1_INTEGER): Integer; cdecl;

  sk_ASN1_INTEGER_freefunc = procedure(a: PASN1_INTEGER); cdecl;

  sk_ASN1_INTEGER_copyfunc = function(a: PASN1_INTEGER): Pasn1_string_st; cdecl;

  sk_ASN1_GENERALSTRING_compfunc = function(a: PPASN1_GENERALSTRING; b: PPASN1_GENERALSTRING): Integer; cdecl;

  sk_ASN1_GENERALSTRING_freefunc = procedure(a: PASN1_GENERALSTRING); cdecl;

  sk_ASN1_GENERALSTRING_copyfunc = function(a: PASN1_GENERALSTRING): Pasn1_string_st; cdecl;

  sk_ASN1_UTF8STRING_compfunc = function(a: PPASN1_UTF8STRING; b: PPASN1_UTF8STRING): Integer; cdecl;

  sk_ASN1_UTF8STRING_freefunc = procedure(a: PASN1_UTF8STRING); cdecl;

  sk_ASN1_UTF8STRING_copyfunc = function(a: PASN1_UTF8STRING): Pasn1_string_st; cdecl;

  _anonymous_type_1 = record
    case Integer of
      0: (ptr: PUTF8Char);
      1: (boolean: ASN1_BOOLEAN);
      2: (asn1_string: PASN1_STRING);
      3: (vobject: PASN1_OBJECT);
      4: (vinteger: PASN1_INTEGER);
      5: (enumerated: PASN1_ENUMERATED);
      6: (bit_string: PASN1_BIT_STRING);
      7: (octet_string: PASN1_OCTET_STRING);
      8: (printablestring: PASN1_PRINTABLESTRING);
      9: (t61string: PASN1_T61STRING);
      10: (ia5string: PASN1_IA5STRING);
      11: (generalstring: PASN1_GENERALSTRING);
      12: (bmpstring: PASN1_BMPSTRING);
      13: (universalstring: PASN1_UNIVERSALSTRING);
      14: (utctime: PASN1_UTCTIME);
      15: (generalizedtime: PASN1_GENERALIZEDTIME);
      16: (visiblestring: PASN1_VISIBLESTRING);
      17: (utf8string: PASN1_UTF8STRING);
      18: (vset: PASN1_STRING);
      19: (sequence: PASN1_STRING);
      20: (asn1_value: PASN1_VALUE);
  end;
  P_anonymous_type_1 = ^_anonymous_type_1;

  asn1_type_st = record
    vtype: Integer;
    value: _anonymous_type_1;
  end;

  ASN1_TYPE = asn1_type_st;
  PASN1_TYPE = ^ASN1_TYPE;
  PPASN1_TYPE = ^PASN1_TYPE;

  sk_ASN1_TYPE_compfunc = function(a: PPASN1_TYPE; b: PPASN1_TYPE): Integer; cdecl;

  sk_ASN1_TYPE_freefunc = procedure(a: PASN1_TYPE); cdecl;

  sk_ASN1_TYPE_copyfunc = function(a: PASN1_TYPE): Pasn1_type_st; cdecl;
  PASN1_SEQUENCE_ANY = Pointer;
  PPASN1_SEQUENCE_ANY = ^PASN1_SEQUENCE_ANY;

  BIT_STRING_BITNAME_st = record
    bitnum: Integer;
    lname: PUTF8Char;
    sname: PUTF8Char;
  end;

  BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;
  PBIT_STRING_BITNAME = ^BIT_STRING_BITNAME;

  sk_ASN1_OBJECT_compfunc = function(a: PPASN1_OBJECT; b: PPASN1_OBJECT): Integer; cdecl;

  sk_ASN1_OBJECT_freefunc = procedure(a: PASN1_OBJECT); cdecl;

  sk_ASN1_OBJECT_copyfunc = function(a: PASN1_OBJECT): Pasn1_object_st; cdecl;

  PASN1_ITEM_EXP = function(): Pointer{PASN1_ITEM}; cdecl;

  ASN1_TEMPLATE_st = record
    flags: Cardinal;
    tag: Integer;
    offset: Cardinal;
    field_name: PUTF8Char;
    item: PASN1_ITEM_EXP;
  end;
  ASN1_TEMPLATE = ASN1_TEMPLATE_st;
  PASN1_TEMPLATE = ^ASN1_TEMPLATE;

  ASN1_ITEM_st = record
    itype: UTF8Char;
    utype: Integer;
    templates: PASN1_TEMPLATE;
    tcount: Integer;
    funcs: Pointer;
    size: Integer;
    sname: PUTF8Char;
  end;
  ASN1_ITEM = ASN1_ITEM_st;
  PASN1_ITEM = ^ASN1_ITEM;

  ASN1_ADB_TABLE_st = record
    value: Integer;
    tt: ASN1_TEMPLATE;
  end;

  ASN1_ADB_TABLE = ASN1_ADB_TABLE_st;
  PASN1_ADB_TABLE = ^ASN1_ADB_TABLE;

  ASN1_ADB_st = record
    flags: Cardinal;
    offset: Cardinal;
    adb_cb: function(psel: PInteger): Integer; cdecl;
    tbl: PASN1_ADB_TABLE;
    tblcount: Integer;
    default_tt: PASN1_TEMPLATE;
    null_tt: PASN1_TEMPLATE;
  end;

  ASN1_ADB = ASN1_ADB_st;

  ASN1_TLC_st = record
    valid: UTF8Char;
    ret: Integer;
    plen: Integer;
    ptag: Integer;
    pclass: Integer;
    hdrlen: Integer;
  end;
  ASN1_TLC = ASN1_TLC_st;
  PASN1_TLC = ^ASN1_TLC;

  PASN1_ex_d2i = function(pval: PPASN1_VALUE; vin: PPByte; len: Integer; it: PASN1_ITEM; tag: Integer; aclass: Integer; opt: UTF8Char; ctx: PASN1_TLC): Integer; cdecl;

  PASN1_ex_i2d = function(pval: PPASN1_VALUE; vout: PPByte; it: PASN1_ITEM; tag: Integer; aclass: Integer): Integer; cdecl;

  PASN1_ex_new_func = function(pval: PPASN1_VALUE; it: PASN1_ITEM): Integer; cdecl;

  PASN1_ex_free_func = procedure(pval: PPASN1_VALUE; it: PASN1_ITEM); cdecl;

  PASN1_ex_print_func = function(vout: PBIO; pval: PPASN1_VALUE; indent: Integer; fname: PUTF8Char; pctx: PASN1_PCTX): Integer; cdecl;

  PASN1_primitive_i2c = function(pval: PPASN1_VALUE; cont: PByte; putype: PInteger; it: PASN1_ITEM): Integer; cdecl;

  PASN1_primitive_c2i = function(pval: PPASN1_VALUE; cont: PByte; len: Integer; utype: Integer; free_cont: PUTF8Char; it: PASN1_ITEM): Integer; cdecl;

  PASN1_primitive_print = function(vout: PBIO; pval: PPASN1_VALUE; it: PASN1_ITEM; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl;

  ASN1_EXTERN_FUNCS_st = record
    app_data: Pointer;
    asn1_ex_new: PASN1_ex_new_func;
    asn1_ex_free: PASN1_ex_free_func;
    asn1_ex_clear: PASN1_ex_free_func;
    asn1_ex_d2i: PASN1_ex_d2i;
    asn1_ex_i2d: PASN1_ex_i2d;
    asn1_ex_print: PASN1_ex_print_func;
  end;

  ASN1_EXTERN_FUNCS = ASN1_EXTERN_FUNCS_st;

  ASN1_PRIMITIVE_FUNCS_st = record
    app_data: Pointer;
    flags: Cardinal;
    prim_new: PASN1_ex_new_func;
    prim_free: PASN1_ex_free_func;
    prim_clear: PASN1_ex_free_func;
    prim_c2i: PASN1_primitive_c2i;
    prim_i2c: PASN1_primitive_i2c;
    prim_print: PASN1_primitive_print;
  end;

  ASN1_PRIMITIVE_FUNCS = ASN1_PRIMITIVE_FUNCS_st;

  PASN1_aux_cb = function(operation: Integer; vin: PPASN1_VALUE; it: PASN1_ITEM; exarg: Pointer): Integer; cdecl;

  ASN1_AUX_st = record
    app_data: Pointer;
    flags: Integer;
    ref_offset: Integer;
    ref_lock: Integer;
    asn1_cb: PASN1_aux_cb;
    enc_offset: Integer;
  end;

  ASN1_AUX = ASN1_AUX_st;

  ASN1_PRINT_ARG_st = record
    vout: PBIO;
    indent: Integer;
    pctx: PASN1_PCTX;
  end;

  ASN1_PRINT_ARG = ASN1_PRINT_ARG_st;

  ASN1_STREAM_ARG_st = record
    vout: PBIO;
    ndef_bio: PBIO;
    boundary: PPByte;
  end;

  ASN1_STREAM_ARG = ASN1_STREAM_ARG_st;

  sk_ASN1_VALUE_compfunc = function(a: PPASN1_VALUE; b: PPASN1_VALUE): Integer; cdecl;

  sk_ASN1_VALUE_freefunc = procedure(a: PASN1_VALUE); cdecl;

  sk_ASN1_VALUE_copyfunc = function(a: PASN1_VALUE): PASN1_VALUE_st; cdecl;
  PASYNC_JOB = Pointer;
  PPASYNC_JOB = ^PASYNC_JOB;
  PASYNC_WAIT_CTX = Pointer;
  PPASYNC_WAIT_CTX = ^PASYNC_WAIT_CTX;

  bf_key_st = record
    P: array [0..17] of Cardinal;
    S: array [0..1023] of Cardinal;
  end;

  BF_KEY = bf_key_st;
  PBF_KEY = ^BF_KEY;

  buf_mem_st = record
    length: NativeUInt;
    data: PUTF8Char;
    max: NativeUInt;
    flags: Cardinal;
  end;

  BUF_MEM = buf_mem_st;
  PBUF_MEM = ^BUF_MEM;

  KEY_TABLE_TYPE = array [0..67] of Cardinal;

  _anonymous_type_2 = record
    case Integer of
      0: (d: Double);
      1: (rd_key: KEY_TABLE_TYPE);
  end;
  P_anonymous_type_2 = ^_anonymous_type_2;

  camellia_key_st = record
    u: _anonymous_type_2;
    grand_rounds: Integer;
  end;

  CAMELLIA_KEY = camellia_key_st;
  PCAMELLIA_KEY = ^CAMELLIA_KEY;

  cast_key_st = record
    data: array [0..31] of Cardinal;
    short_key: Integer;
  end;

  CAST_KEY = cast_key_st;
  PCAST_KEY = ^CAST_KEY;

  obj_name_st = record
    vtype: Integer;
    alias: Integer;
    name: PUTF8Char;
    data: PUTF8Char;
  end;

  OBJ_NAME = obj_name_st;
  POBJ_NAME = ^OBJ_NAME;

  EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM = record
    vout: PByte;
    inp: PByte;
    len: NativeUInt;
    interleave: Cardinal;
  end;

  evp_cipher_info_st = record
    cipher: PEVP_CIPHER;
    iv: array [0..15] of Byte;
  end;

  EVP_CIPHER_INFO = evp_cipher_info_st;
  PEVP_CIPHER_INFO = ^EVP_CIPHER_INFO;

  PEVP_PBE_KEYGEN = function(ctx: PEVP_CIPHER_CTX; pass: PUTF8Char; passlen: Integer; param: PASN1_TYPE; cipher: PEVP_CIPHER; md: PEVP_MD; en_de: Integer): Integer; cdecl;

  PEVP_PKEY_gen_cb = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;
  PCMAC_CTX = Pointer;
  PPCMAC_CTX = ^PCMAC_CTX;

  (** Enum for the point conversion form as defined in X9.62 (ECDSA)
   *  for the encoding of a elliptic curve point (x,y) *)
  point_conversion_form_t = (
    (** the point is encoded as z||x, where the octet z specifies
     *  which solution of the quadratic equation y is  *)
    POINT_CONVERSION_COMPRESSED = 2,
    (** the point is encoded as z||x||y, where z is the octet 0x04  *)
    POINT_CONVERSION_UNCOMPRESSED = 4,
    (** the point is encoded as z||x||y, where the octet z specifies
     *  which solution of the quadratic equation y is  *)
    POINT_CONVERSION_HYBRID = 6);
  Ppoint_conversion_form_t = ^point_conversion_form_t;
  PEC_METHOD = Pointer;
  PPEC_METHOD = ^PEC_METHOD;
  PEC_GROUP = Pointer;
  PPEC_GROUP = ^PEC_GROUP;
  PEC_POINT = Pointer;
  PPEC_POINT = ^PEC_POINT;
  PECPKPARAMETERS = Pointer;
  PPECPKPARAMETERS = ^PECPKPARAMETERS;
  PECPARAMETERS = Pointer;
  PPECPARAMETERS = ^PECPARAMETERS;

  (********************************************************************)
  EC_builtin_curve = record
    nid: Integer;
    comment: PUTF8Char;
  end;

  PECDSA_SIG = Pointer;
  PPECDSA_SIG = ^PECDSA_SIG;

  SHAstate_st = record
    h0: Cardinal;
    h1: Cardinal;
    h2: Cardinal;
    h3: Cardinal;
    h4: Cardinal;
    Nl: Cardinal;
    Nh: Cardinal;
    data: array [0..15] of Cardinal;
    num: Cardinal;
  end;

  SHA_CTX = SHAstate_st;
  PSHA_CTX = ^SHA_CTX;

  SHA256state_st = record
    h: array [0..7] of Cardinal;
    Nl: Cardinal;
    Nh: Cardinal;
    data: array [0..15] of Cardinal;
    num: Cardinal;
    md_len: Cardinal;
  end;

  SHA256_CTX = SHA256state_st;
  PSHA256_CTX = ^SHA256_CTX;

  _anonymous_type_3 = record
    case Integer of
      0: (d: array [0..15] of UInt64);
      1: (p: array [0..127] of Byte);
  end;
  P_anonymous_type_3 = ^_anonymous_type_3;

  SHA512state_st = record
    h: array [0..7] of UInt64;
    Nl: UInt64;
    Nh: UInt64;
    u: _anonymous_type_3;
    num: Cardinal;
    md_len: Cardinal;
  end;

  SHA512_CTX = SHA512state_st;
  PSHA512_CTX = ^SHA512_CTX;

  X509_algor_st = record
    algorithm: PASN1_OBJECT;
    parameter: PASN1_TYPE;
  end;

  PX509_ALGORS = Pointer;
  PPX509_ALGORS = ^PX509_ALGORS;

  X509_ALGOR = X509_algor_st;
  PX509_ALGOR = ^X509_ALGOR;
  PPX509_ALGOR = ^PX509_ALGOR;

  sk_X509_ALGOR_compfunc = function(a: PPX509_ALGOR; b: PPX509_ALGOR): Integer; cdecl;

  sk_X509_ALGOR_freefunc = procedure(a: PX509_ALGOR); cdecl;

  sk_X509_ALGOR_copyfunc = function(a: PX509_ALGOR): PX509_algor_st; cdecl;

  rsa_pss_params_st = record
    hashAlgorithm: PX509_ALGOR;
    maskGenAlgorithm: PX509_ALGOR;
    saltLength: PASN1_INTEGER;
    trailerField: PASN1_INTEGER;
    maskHash: PX509_ALGOR;
  end;

  RSA_PSS_PARAMS = rsa_pss_params_st;
  PRSA_PSS_PARAMS = ^RSA_PSS_PARAMS;
  PPRSA_PSS_PARAMS = ^PRSA_PSS_PARAMS;

  rsa_oaep_params_st = record
    hashFunc: PX509_ALGOR;
    maskGenFunc: PX509_ALGOR;
    pSourceFunc: PX509_ALGOR;
    maskHash: PX509_ALGOR;
  end;

  RSA_OAEP_PARAMS = rsa_oaep_params_st;
  PRSA_OAEP_PARAMS = ^RSA_OAEP_PARAMS;
  PPRSA_OAEP_PARAMS = ^PRSA_OAEP_PARAMS;
  PDSA_SIG = Pointer;
  PPDSA_SIG = ^PDSA_SIG;

  X509_val_st = record
    notBefore: PASN1_TIME;
    notAfter: PASN1_TIME;
  end;

  X509_VAL = X509_val_st;
  PX509_VAL = ^X509_VAL;
  PPX509_VAL = ^PX509_VAL;
  PX509_SIG = Pointer;
  PPX509_SIG = ^PX509_SIG;
  PX509_NAME_ENTRY = Pointer;
  PPX509_NAME_ENTRY = ^PX509_NAME_ENTRY;

  sk_X509_NAME_ENTRY_compfunc = function(a: PPX509_NAME_ENTRY; b: PPX509_NAME_ENTRY): Integer; cdecl;

  sk_X509_NAME_ENTRY_freefunc = procedure(a: PX509_NAME_ENTRY); cdecl;

  sk_X509_NAME_ENTRY_copyfunc = function(a: PX509_NAME_ENTRY): PX509_name_entry_st; cdecl;

  sk_X509_NAME_compfunc = function(a: PPX509_NAME; b: PPX509_NAME): Integer; cdecl;

  sk_X509_NAME_freefunc = procedure(a: PX509_NAME); cdecl;

  sk_X509_NAME_copyfunc = function(a: PX509_NAME): PX509_name_st; cdecl;
  PX509_EXTENSION = Pointer;
  PPX509_EXTENSION = ^PX509_EXTENSION;
  PX509_EXTENSIONS = Pointer;
  PPX509_EXTENSIONS = ^PX509_EXTENSIONS;

  sk_X509_EXTENSION_compfunc = function(a: PPX509_EXTENSION; b: PPX509_EXTENSION): Integer; cdecl;

  sk_X509_EXTENSION_freefunc = procedure(a: PX509_EXTENSION); cdecl;

  sk_X509_EXTENSION_copyfunc = function(a: PX509_EXTENSION): PX509_extension_st; cdecl;
  PX509_ATTRIBUTE = Pointer;
  PPX509_ATTRIBUTE = ^PX509_ATTRIBUTE;

  sk_X509_ATTRIBUTE_compfunc = function(a: PPX509_ATTRIBUTE; b: PPX509_ATTRIBUTE): Integer; cdecl;

  sk_X509_ATTRIBUTE_freefunc = procedure(a: PX509_ATTRIBUTE); cdecl;

  sk_X509_ATTRIBUTE_copyfunc = function(a: PX509_ATTRIBUTE): Px509_attributes_st; cdecl;
  PX509_REQ_INFO = Pointer;
  PPX509_REQ_INFO = ^PX509_REQ_INFO;
  PX509_REQ = Pointer;
  PPX509_REQ = ^PX509_REQ;
  PX509_CERT_AUX = Pointer;
  PPX509_CERT_AUX = ^PX509_CERT_AUX;

  { Certinfo }
  TX509_CINF = record
    version: PASN1_INTEGER;
    serialNumber: PASN1_INTEGER;
    signature: PX509_ALGOR;
    issuer: PX509_NAME;
    validity: PX509_VAL;
    subject: PX509_NAME;
    key: PX509_PUBKEY;
  end;
  PX509_CINF = ^TX509_CINF;
  PPX509_CINF = ^PX509_CINF;

  TX509 = record
    cert_info: PX509_CINF;
    sig_alg: PX509_ALGOR;
    signature: PASN1_BIT_STRING;
    valid: Integer;
    references: Integer;
    name: MarshaledAString;
  end;
  PX509  = ^TX509;
  PPX509 = ^PX509;
  PSTACK_OF_X509_INFO = PSTACK_st;

  PSTACK_OF_X509_ALGOR = PSTACK_st;
  PSTACK_OF_X509 = PSTACK_st;
  PPSTACK_OF_X509 = ^PSTACK_OF_X509;
  PSTACK_OF_X509_CRL = PSTACK_st;
  PSTACK_OF_PKCS7_SIGNER_INFO = PSTACK_st;
  PSTACK_OF_X509_ATTRIBUTE = PSTACK_st;
  PSTACK = PSTACK_st;

  sk_X509_compfunc = function(a: PPX509; b: PPX509): Integer; cdecl;

  sk_X509_freefunc = procedure(a: PX509); cdecl;

  sk_X509_copyfunc = function(a: PX509): Px509_st; cdecl;

  x509_trust_st = record
    trust: Integer;
    flags: Integer;
    check_trust: function(p1: Px509_trust_st; p2: PX509; p3: Integer): Integer; cdecl;
    name: PUTF8Char;
    arg1: Integer;
    arg2: Pointer;
  end;

  X509_TRUST = x509_trust_st;
  PX509_TRUST = ^X509_TRUST;
  PPX509_TRUST = ^PX509_TRUST;

  sk_X509_TRUST_compfunc = function(a: PPX509_TRUST; b: PPX509_TRUST): Integer; cdecl;

  sk_X509_TRUST_freefunc = procedure(a: PX509_TRUST); cdecl;

  sk_X509_TRUST_copyfunc = function(a: PX509_TRUST): Px509_trust_st; cdecl;

  sk_X509_REVOKED_compfunc = function(a: PPX509_REVOKED; b: PPX509_REVOKED): Integer; cdecl;

  sk_X509_REVOKED_freefunc = procedure(a: PX509_REVOKED); cdecl;

  sk_X509_REVOKED_copyfunc = function(a: PX509_REVOKED): Px509_revoked_st; cdecl;
  PX509_CRL_INFO = Pointer;
  PPX509_CRL_INFO = ^PX509_CRL_INFO;

  sk_X509_CRL_compfunc = function(a: PPX509_CRL; b: PPX509_CRL): Integer; cdecl;

  sk_X509_CRL_freefunc = procedure(a: PX509_CRL); cdecl;

  sk_X509_CRL_copyfunc = function(a: PX509_CRL): PX509_crl_st; cdecl;

  private_key_st = record
    version: Integer;
    enc_algor: PX509_ALGOR;
    enc_pkey: PASN1_OCTET_STRING;
    dec_pkey: PEVP_PKEY;
    key_length: Integer;
    key_data: PUTF8Char;
    key_free: Integer;
    cipher: EVP_CIPHER_INFO;
  end;

  X509_PKEY = private_key_st;
  PX509_PKEY = ^X509_PKEY;

  X509_info_st = record
    x509: PX509;
    crl: PX509_CRL;
    x_pkey: PX509_PKEY;
    enc_cipher: EVP_CIPHER_INFO;
    enc_len: Integer;
    enc_data: PUTF8Char;
  end;

  X509_INFO = X509_info_st;
  PX509_INFO = ^X509_INFO;
  PPX509_INFO = ^PX509_INFO;

  sk_X509_INFO_compfunc = function(a: PPX509_INFO; b: PPX509_INFO): Integer; cdecl;

  sk_X509_INFO_freefunc = procedure(a: PX509_INFO); cdecl;

  sk_X509_INFO_copyfunc = function(a: PX509_INFO): PX509_info_st; cdecl;

  Netscape_spkac_st = record
    pubkey: PX509_PUBKEY;
    challenge: PASN1_IA5STRING;
  end;

  NETSCAPE_SPKAC = Netscape_spkac_st;
  PNETSCAPE_SPKAC = ^NETSCAPE_SPKAC;
  PPNETSCAPE_SPKAC = ^PNETSCAPE_SPKAC;

  Netscape_spki_st = record
    spkac: PNETSCAPE_SPKAC;
    sig_algor: X509_ALGOR;
    signature: PASN1_BIT_STRING;
  end;

  NETSCAPE_SPKI = Netscape_spki_st;
  PNETSCAPE_SPKI = ^NETSCAPE_SPKI;
  PPNETSCAPE_SPKI = ^PNETSCAPE_SPKI;

  Netscape_certificate_sequence = record
    vtype: PASN1_OBJECT;
    certs: Pstack_st_X509;
  end;

  NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence;
  PNETSCAPE_CERT_SEQUENCE = ^NETSCAPE_CERT_SEQUENCE;
  PPNETSCAPE_CERT_SEQUENCE = ^PNETSCAPE_CERT_SEQUENCE;

  PBEPARAM_st = record
    salt: PASN1_OCTET_STRING;
    iter: PASN1_INTEGER;
  end;

  PBEPARAM = PBEPARAM_st;
  PPBEPARAM = ^PBEPARAM;
  PPPBEPARAM = ^PPBEPARAM;

  PBE2PARAM_st = record
    keyfunc: PX509_ALGOR;
    encryption: PX509_ALGOR;
  end;

  PBE2PARAM = PBE2PARAM_st;
  PPBE2PARAM = ^PBE2PARAM;
  PPPBE2PARAM = ^PPBE2PARAM;

  PBKDF2PARAM_st = record
    salt: PASN1_TYPE;
    iter: PASN1_INTEGER;
    keylength: PASN1_INTEGER;
    prf: PX509_ALGOR;
  end;

  PBKDF2PARAM = PBKDF2PARAM_st;
  PPBKDF2PARAM = ^PBKDF2PARAM;
  PPPBKDF2PARAM = ^PPBKDF2PARAM;

  SCRYPT_PARAMS_st = record
    salt: PASN1_OCTET_STRING;
    costParameter: PASN1_INTEGER;
    blockSize: PASN1_INTEGER;
    parallelizationParameter: PASN1_INTEGER;
    keyLength: PASN1_INTEGER;
  end;

  SCRYPT_PARAMS = SCRYPT_PARAMS_st;
  PSCRYPT_PARAMS = ^SCRYPT_PARAMS;
  PPSCRYPT_PARAMS = ^PSCRYPT_PARAMS;
  POPENSSL_LH_NODE = Pointer;
  PPOPENSSL_LH_NODE = ^POPENSSL_LH_NODE;

  OPENSSL_LH_COMPFUNC = function(p1: Pointer; p2: Pointer): Integer; cdecl;

  OPENSSL_LH_HASHFUNC = function(p1: Pointer): Cardinal; cdecl;

  OPENSSL_LH_DOALL_FUNC = procedure(p1: Pointer); cdecl;

  OPENSSL_LH_DOALL_FUNCARG = procedure(p1: Pointer; p2: Pointer); cdecl;
  POPENSSL_LHASH = Pointer;
  PPOPENSSL_LHASH = ^POPENSSL_LHASH;

  lh_OPENSSL_STRING_dummy = record
    case Integer of
      0: (d1: Pointer);
      1: (d2: Cardinal);
      2: (d3: Integer);
  end;

  lhash_st_OPENSSL_STRING = record
    dummy: lh_OPENSSL_STRING_dummy;
  end;

  lh_OPENSSL_CSTRING_dummy = record
    case Integer of
      0: (d1: Pointer);
      1: (d2: Cardinal);
      2: (d3: Integer);
  end;

  lhash_st_OPENSSL_CSTRING = record
    dummy: lh_OPENSSL_CSTRING_dummy;
  end;

  X509_LOOKUP_TYPE = (
    X509_LU_NONE = 0,
    X509_LU_X509 = 1,
    X509_LU_CRL = 2);
  PX509_LOOKUP_TYPE = ^X509_LOOKUP_TYPE;

  sk_X509_LOOKUP_compfunc = function(a: PPX509_LOOKUP; b: PPX509_LOOKUP): Integer; cdecl;

  sk_X509_LOOKUP_freefunc = procedure(a: PX509_LOOKUP); cdecl;

  sk_X509_LOOKUP_copyfunc = function(a: PX509_LOOKUP): Px509_lookup_st; cdecl;

  sk_X509_OBJECT_compfunc = function(a: PPX509_OBJECT; b: PPX509_OBJECT): Integer; cdecl;

  sk_X509_OBJECT_freefunc = procedure(a: PX509_OBJECT); cdecl;

  sk_X509_OBJECT_copyfunc = function(a: PX509_OBJECT): Px509_object_st; cdecl;

  sk_X509_VERIFY_PARAM_compfunc = function(a: PPX509_VERIFY_PARAM; b: PPX509_VERIFY_PARAM): Integer; cdecl;

  sk_X509_VERIFY_PARAM_freefunc = procedure(a: PX509_VERIFY_PARAM); cdecl;

  sk_X509_VERIFY_PARAM_copyfunc = function(a: PX509_VERIFY_PARAM): PX509_VERIFY_PARAM_st; cdecl;

  X509_STORE_CTX_verify_cb = function(p1: Integer; p2: PX509_STORE_CTX): Integer; cdecl;

  X509_STORE_CTX_verify_fn = function(p1: PX509_STORE_CTX): Integer; cdecl;

  X509_STORE_CTX_get_issuer_fn = function(issuer: PPX509; ctx: PX509_STORE_CTX; x: PX509): Integer; cdecl;

  X509_STORE_CTX_check_issued_fn = function(ctx: PX509_STORE_CTX; x: PX509; issuer: PX509): Integer; cdecl;

  X509_STORE_CTX_check_revocation_fn = function(ctx: PX509_STORE_CTX): Integer; cdecl;

  X509_STORE_CTX_get_crl_fn = function(ctx: PX509_STORE_CTX; crl: PPX509_CRL; x: PX509): Integer; cdecl;

  X509_STORE_CTX_check_crl_fn = function(ctx: PX509_STORE_CTX; crl: PX509_CRL): Integer; cdecl;

  X509_STORE_CTX_cert_crl_fn = function(ctx: PX509_STORE_CTX; crl: PX509_CRL; x: PX509): Integer; cdecl;

  X509_STORE_CTX_check_policy_fn = function(ctx: PX509_STORE_CTX): Integer; cdecl;

  X509_STORE_CTX_lookup_certs_fn = function(ctx: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509; cdecl;

  X509_STORE_CTX_lookup_crls_fn = function(ctx: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509_CRL; cdecl;

  X509_STORE_CTX_cleanup_fn = function(ctx: PX509_STORE_CTX): Integer; cdecl;

  X509_LOOKUP_ctrl_fn = function(ctx: PX509_LOOKUP; cmd: Integer; argc: PUTF8Char; argl: Integer; ret: PPUTF8Char): Integer; cdecl;

  X509_LOOKUP_get_by_subject_fn = function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; name: PX509_NAME; ret: PX509_OBJECT): Integer; cdecl;

  X509_LOOKUP_get_by_issuer_serial_fn = function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; name: PX509_NAME; serial: PASN1_INTEGER; ret: PX509_OBJECT): Integer; cdecl;

  X509_LOOKUP_get_by_fingerprint_fn = function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; bytes: PByte; len: Integer; ret: PX509_OBJECT): Integer; cdecl;

  X509_LOOKUP_get_by_alias_fn = function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; str: PUTF8Char; len: Integer; ret: PX509_OBJECT): Integer; cdecl;

  pkcs7_issuer_and_serial_st = record
    issuer: PX509_NAME;
    serial: PASN1_INTEGER;
  end;

  PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st;
  PPKCS7_ISSUER_AND_SERIAL = ^PKCS7_ISSUER_AND_SERIAL;
  PPPKCS7_ISSUER_AND_SERIAL = ^PPKCS7_ISSUER_AND_SERIAL;

  pkcs7_signer_info_st = record
    version: PASN1_INTEGER;
    issuer_and_serial: PPKCS7_ISSUER_AND_SERIAL;
    digest_alg: PX509_ALGOR;
    auth_attr: Pstack_st_X509_ATTRIBUTE;
    digest_enc_alg: PX509_ALGOR;
    enc_digest: PASN1_OCTET_STRING;
    unauth_attr: Pstack_st_X509_ATTRIBUTE;
    pkey: PEVP_PKEY;
  end;

  PKCS7_SIGNER_INFO = pkcs7_signer_info_st;
  PPKCS7_SIGNER_INFO = ^PKCS7_SIGNER_INFO;
  PPPKCS7_SIGNER_INFO = ^PPKCS7_SIGNER_INFO;

  sk_PKCS7_SIGNER_INFO_compfunc = function(a: PPPKCS7_SIGNER_INFO; b: PPPKCS7_SIGNER_INFO): Integer; cdecl;

  sk_PKCS7_SIGNER_INFO_freefunc = procedure(a: PPKCS7_SIGNER_INFO); cdecl;

  sk_PKCS7_SIGNER_INFO_copyfunc = function(a: PPKCS7_SIGNER_INFO): Ppkcs7_signer_info_st; cdecl;

  pkcs7_recip_info_st = record
    version: PASN1_INTEGER;
    issuer_and_serial: PPKCS7_ISSUER_AND_SERIAL;
    key_enc_algor: PX509_ALGOR;
    enc_key: PASN1_OCTET_STRING;
    cert: PX509;
  end;

  PKCS7_RECIP_INFO = pkcs7_recip_info_st;
  PPKCS7_RECIP_INFO = ^PKCS7_RECIP_INFO;
  PPPKCS7_RECIP_INFO = ^PPKCS7_RECIP_INFO;

  sk_PKCS7_RECIP_INFO_compfunc = function(a: PPPKCS7_RECIP_INFO; b: PPPKCS7_RECIP_INFO): Integer; cdecl;

  sk_PKCS7_RECIP_INFO_freefunc = procedure(a: PPKCS7_RECIP_INFO); cdecl;

  sk_PKCS7_RECIP_INFO_copyfunc = function(a: PPKCS7_RECIP_INFO): Ppkcs7_recip_info_st; cdecl;

  pkcs7_signed_st = record
    version: PASN1_INTEGER;
    md_algs: Pstack_st_X509_ALGOR;
    cert: Pstack_st_X509;
    crl: Pstack_st_X509_CRL;
    signer_info: Pstack_st_PKCS7_SIGNER_INFO;
    contents: Ppkcs7_st;
  end;

  PKCS7_SIGNED = pkcs7_signed_st;
  PPKCS7_SIGNED = ^PKCS7_SIGNED;
  PPPKCS7_SIGNED = ^PPKCS7_SIGNED;

  pkcs7_enc_content_st = record
    content_type: PASN1_OBJECT;
    algorithm: PX509_ALGOR;
    enc_data: PASN1_OCTET_STRING;
    cipher: PEVP_CIPHER;
  end;

  PKCS7_ENC_CONTENT = pkcs7_enc_content_st;
  PPKCS7_ENC_CONTENT = ^PKCS7_ENC_CONTENT;
  PPPKCS7_ENC_CONTENT = ^PPKCS7_ENC_CONTENT;

  pkcs7_enveloped_st = record
    version: PASN1_INTEGER;
    recipientinfo: Pstack_st_PKCS7_RECIP_INFO;
    enc_data: PPKCS7_ENC_CONTENT;
  end;

  PKCS7_ENVELOPE = pkcs7_enveloped_st;
  PPKCS7_ENVELOPE = ^PKCS7_ENVELOPE;
  PPPKCS7_ENVELOPE = ^PPKCS7_ENVELOPE;

  pkcs7_signedandenveloped_st = record
    version: PASN1_INTEGER;
    md_algs: Pstack_st_X509_ALGOR;
    cert: Pstack_st_X509;
    crl: Pstack_st_X509_CRL;
    signer_info: Pstack_st_PKCS7_SIGNER_INFO;
    enc_data: PPKCS7_ENC_CONTENT;
    recipientinfo: Pstack_st_PKCS7_RECIP_INFO;
  end;

  PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st;
  PPKCS7_SIGN_ENVELOPE = ^PKCS7_SIGN_ENVELOPE;
  PPPKCS7_SIGN_ENVELOPE = ^PPKCS7_SIGN_ENVELOPE;

  pkcs7_digest_st = record
    version: PASN1_INTEGER;
    md: PX509_ALGOR;
    contents: Ppkcs7_st;
    digest: PASN1_OCTET_STRING;
  end;

  PKCS7_DIGEST = pkcs7_digest_st;
  PPKCS7_DIGEST = ^PKCS7_DIGEST;
  PPPKCS7_DIGEST = ^PPKCS7_DIGEST;

  pkcs7_encrypted_st = record
    version: PASN1_INTEGER;
    enc_data: PPKCS7_ENC_CONTENT;
  end;

  _PKCS7_ENCRYPT = pkcs7_encrypted_st;
  PPKCS7_ENCRYPT = ^_PKCS7_ENCRYPT;
  PPPKCS7_ENCRYPT = ^PPKCS7_ENCRYPT;

  _anonymous_type_4 = record
    case Integer of
      0: (ptr: PUTF8Char);
      1: (data: PASN1_OCTET_STRING);
      2: (sign: PPKCS7_SIGNED);
      3: (enveloped: PPKCS7_ENVELOPE);
      4: (signed_and_enveloped: PPKCS7_SIGN_ENVELOPE);
      5: (digest: PPKCS7_DIGEST);
      6: (encrypted: PPKCS7_ENCRYPT);
      7: (other: PASN1_TYPE);
  end;
  P_anonymous_type_4 = ^_anonymous_type_4;

  pkcs7_st = record
    asn1: PByte;
    length: Integer;
    state: Integer;
    detached: Integer;
    vtype: PASN1_OBJECT;
    d: _anonymous_type_4;
  end;

  PKCS7 = pkcs7_st;
  PPKCS7 = ^PKCS7;
  PPPKCS7 = ^PPKCS7;

  sk_PKCS7_compfunc = function(a: PPPKCS7; b: PPPKCS7): Integer; cdecl;

  sk_PKCS7_freefunc = procedure(a: PPKCS7); cdecl;

  sk_PKCS7_copyfunc = function(a: PPKCS7): Ppkcs7_st; cdecl;

  CONF_VALUE = record
    section: PUTF8Char;
    name: PUTF8Char;
    value: PUTF8Char;
  end;

  sk_CONF_VALUE_compfunc = function(a: PPCONF_VALUE; b: PPCONF_VALUE): Integer; cdecl;

  sk_CONF_VALUE_freefunc = procedure(a: PCONF_VALUE); cdecl;

  sk_CONF_VALUE_copyfunc = function(a: PCONF_VALUE): PCONF_VALUE; cdecl;

  lh_CONF_VALUE_dummy = record
    case Integer of
      0: (d1: Pointer);
      1: (d2: Cardinal);
      2: (d3: Integer);
  end;

  lhash_st_CONF_VALUE = record
    dummy: lh_CONF_VALUE_dummy;
  end;

  conf_method_st = record
    name: PUTF8Char;
    create: function(meth: Pointer{PCONF_METHOD}): Pconf_st; cdecl;
    init: function(conf: PCONF): Integer; cdecl;
    destroy: function(conf: PCONF): Integer; cdecl;
    destroy_data: function(conf: PCONF): Integer; cdecl;
    load_bio: function(conf: PCONF; bp: PBIO; eline: PInteger): Integer; cdecl;
    dump: function(conf: PCONF; bp: PBIO): Integer; cdecl;
    is_number: function(conf: PCONF; c: UTF8Char): Integer; cdecl;
    to_int: function(conf: PCONF; c: UTF8Char): Integer; cdecl;
    load: function(conf: PCONF; name: PUTF8Char; eline: PInteger): Integer; cdecl;
  end;
  CONF_METHOD = conf_method_st;
  PCONF_METHOD = ^CONF_METHOD;

  PCONF_IMODULE = Pointer;
  PPCONF_IMODULE = ^PCONF_IMODULE;
  PCONF_MODULE = Pointer;
  PPCONF_MODULE = ^PCONF_MODULE;

  sk_CONF_MODULE_compfunc = function(a: PPCONF_MODULE; b: PPCONF_MODULE): Integer; cdecl;

  sk_CONF_MODULE_freefunc = procedure(a: PCONF_MODULE); cdecl;

  sk_CONF_MODULE_copyfunc = function(a: PCONF_MODULE): Pconf_module_st; cdecl;

  sk_CONF_IMODULE_compfunc = function(a: PPCONF_IMODULE; b: PPCONF_IMODULE): Integer; cdecl;

  sk_CONF_IMODULE_freefunc = procedure(a: PCONF_IMODULE); cdecl;

  sk_CONF_IMODULE_copyfunc = function(a: PCONF_IMODULE): Pconf_imodule_st; cdecl;

  Pconf_init_func = function(md: PCONF_IMODULE; cnf: PCONF): Integer; cdecl;

  Pconf_finish_func = procedure(md: PCONF_IMODULE); cdecl;

  conf_st = record
    meth: PCONF_METHOD;
    meth_data: Pointer;
    data: Plhash_st_CONF_VALUE;
  end;
  CONF = conf_st;

  X509V3_EXT_NEW = function(): Pointer; cdecl;

  X509V3_EXT_FREE = procedure(p1: Pointer); cdecl;

  _X509V3_EXT_D2I = function(p1: Pointer; p2: PPByte; p3: Integer): Pointer; cdecl;

  _X509V3_EXT_I2D = function(p1: Pointer; p2: PPByte): Integer; cdecl;

  X509V3_EXT_I2V = function(method: Pv3_ext_method; ext: Pointer; extlist: Pstack_st_CONF_VALUE): Pstack_st_CONF_VALUE; cdecl;

  X509V3_EXT_V2I = function(method: Pv3_ext_method; ctx: Pv3_ext_ctx; values: Pstack_st_CONF_VALUE): Pointer; cdecl;

  X509V3_EXT_I2S = function(method: Pv3_ext_method; ext: Pointer): PUTF8Char; cdecl;

  X509V3_EXT_S2I = function(method: Pv3_ext_method; ctx: Pv3_ext_ctx; str: PUTF8Char): Pointer; cdecl;

  X509V3_EXT_I2R = function(method: Pv3_ext_method; ext: Pointer; vout: PBIO; indent: Integer): Integer; cdecl;

  X509V3_EXT_R2I = function(method: Pv3_ext_method; ctx: Pv3_ext_ctx; str: PUTF8Char): Pointer; cdecl;

  v3_ext_method = record
    ext_nid: Integer;
    ext_flags: Integer;
    it: PASN1_ITEM_EXP;
    ext_new: X509V3_EXT_NEW;
    ext_free: X509V3_EXT_FREE;
    d2i: _X509V3_EXT_D2I;
    i2d: _X509V3_EXT_I2D;
    i2s: X509V3_EXT_I2S;
    s2i: X509V3_EXT_S2I;
    i2v: X509V3_EXT_I2V;
    v2i: X509V3_EXT_V2I;
    i2r: X509V3_EXT_I2R;
    r2i: X509V3_EXT_R2I;
    usr_data: Pointer;
  end;

  X509V3_CONF_METHOD_st = record
    get_string: function(db: Pointer; section: PUTF8Char; value: PUTF8Char): PUTF8Char; cdecl;
    get_section: function(db: Pointer; section: PUTF8Char): Pstack_st_CONF_VALUE; cdecl;
    free_string: procedure(db: Pointer; vstring: PUTF8Char); cdecl;
    free_section: procedure(db: Pointer; section: Pstack_st_CONF_VALUE); cdecl;
  end;

  X509V3_CONF_METHOD = X509V3_CONF_METHOD_st;
  PX509V3_CONF_METHOD = ^X509V3_CONF_METHOD;

  v3_ext_ctx = record
    flags: Integer;
    issuer_cert: PX509;
    subject_cert: PX509;
    subject_req: PX509_REQ;
    crl: PX509_CRL;
    db_meth: PX509V3_CONF_METHOD;
    db: Pointer;
  end;
  X509V3_CTX = v3_ext_ctx;

  X509V3_EXT_METHOD = v3_ext_method;
  PX509V3_EXT_METHOD = ^X509V3_EXT_METHOD;
  PPX509V3_EXT_METHOD = ^PX509V3_EXT_METHOD;

  sk_X509V3_EXT_METHOD_compfunc = function(a: PPX509V3_EXT_METHOD; b: PPX509V3_EXT_METHOD): Integer; cdecl;

  sk_X509V3_EXT_METHOD_freefunc = procedure(a: PX509V3_EXT_METHOD); cdecl;

  sk_X509V3_EXT_METHOD_copyfunc = function(a: PX509V3_EXT_METHOD): Pv3_ext_method; cdecl;
  ENUMERATED_NAMES = BIT_STRING_BITNAME;

  BASIC_CONSTRAINTS_st = record
    ca: Integer;
    pathlen: PASN1_INTEGER;
  end;

  BASIC_CONSTRAINTS = BASIC_CONSTRAINTS_st;
  PBASIC_CONSTRAINTS = ^BASIC_CONSTRAINTS;
  PPBASIC_CONSTRAINTS = ^PBASIC_CONSTRAINTS;

  PKEY_USAGE_PERIOD_st = record
    notBefore: PASN1_GENERALIZEDTIME;
    notAfter: PASN1_GENERALIZEDTIME;
  end;

  PKEY_USAGE_PERIOD = PKEY_USAGE_PERIOD_st;
  PPKEY_USAGE_PERIOD = ^PKEY_USAGE_PERIOD;
  PPPKEY_USAGE_PERIOD = ^PPKEY_USAGE_PERIOD;

  otherName_st = record
    type_id: PASN1_OBJECT;
    value: PASN1_TYPE;
  end;

  OTHERNAME = otherName_st;
  POTHERNAME = ^OTHERNAME;
  PPOTHERNAME = ^POTHERNAME;

  EDIPartyName_st = record
    nameAssigner: PASN1_STRING;
    partyName: PASN1_STRING;
  end;

  EDIPARTYNAME = EDIPartyName_st;
  PEDIPARTYNAME = ^EDIPARTYNAME;
  PPEDIPARTYNAME = ^PEDIPARTYNAME;

  _anonymous_type_5 = record
    case Integer of
      0: (ptr: PUTF8Char);
      1: (otherName: POTHERNAME);
      2: (rfc822Name: PASN1_IA5STRING);
      3: (dNSName: PASN1_IA5STRING);
      4: (x400Address: PASN1_TYPE);
      5: (directoryName: PX509_NAME);
      6: (ediPartyName: PEDIPARTYNAME);
      7: (uniformResourceIdentifier: PASN1_IA5STRING);
      8: (iPAddress: PASN1_OCTET_STRING);
      9: (registeredID: PASN1_OBJECT);
      10: (ip: PASN1_OCTET_STRING);
      11: (dirn: PX509_NAME);
      12: (ia5: PASN1_IA5STRING);
      13: (rid: PASN1_OBJECT);
      14: (other: PASN1_TYPE);
  end;
  P_anonymous_type_5 = ^_anonymous_type_5;

  GENERAL_NAME_st = record
    vtype: Integer;
    d: _anonymous_type_5;
  end;

  GENERAL_NAME = GENERAL_NAME_st;
  PGENERAL_NAME = ^GENERAL_NAME;
  PPGENERAL_NAME = ^PGENERAL_NAME;

  ACCESS_DESCRIPTION_st = record
    method: PASN1_OBJECT;
    location: PGENERAL_NAME;
  end;

  ACCESS_DESCRIPTION = ACCESS_DESCRIPTION_st;
  PACCESS_DESCRIPTION = ^ACCESS_DESCRIPTION;
  PPACCESS_DESCRIPTION = ^PACCESS_DESCRIPTION;
  PAUTHORITY_INFO_ACCESS = Pointer;
  PPAUTHORITY_INFO_ACCESS = ^PAUTHORITY_INFO_ACCESS;
  PEXTENDED_KEY_USAGE = Pointer;
  PPEXTENDED_KEY_USAGE = ^PEXTENDED_KEY_USAGE;
  PTLS_FEATURE = Pointer;
  PPTLS_FEATURE = ^PTLS_FEATURE;

  sk_GENERAL_NAME_compfunc = function(a: PPGENERAL_NAME; b: PPGENERAL_NAME): Integer; cdecl;

  sk_GENERAL_NAME_freefunc = procedure(a: PGENERAL_NAME); cdecl;

  sk_GENERAL_NAME_copyfunc = function(a: PGENERAL_NAME): PGENERAL_NAME_st; cdecl;
  PGENERAL_NAMES = Pointer;
  PPGENERAL_NAMES = ^PGENERAL_NAMES;

  sk_GENERAL_NAMES_compfunc = function(a: PPGENERAL_NAMES; b: PPGENERAL_NAMES): Integer; cdecl;

  sk_GENERAL_NAMES_freefunc = procedure(a: PGENERAL_NAMES); cdecl;

  sk_GENERAL_NAMES_copyfunc = function(a: PGENERAL_NAMES): Pstack_st_GENERAL_NAME; cdecl;

  sk_ACCESS_DESCRIPTION_compfunc = function(a: PPACCESS_DESCRIPTION; b: PPACCESS_DESCRIPTION): Integer; cdecl;

  sk_ACCESS_DESCRIPTION_freefunc = procedure(a: PACCESS_DESCRIPTION); cdecl;

  sk_ACCESS_DESCRIPTION_copyfunc = function(a: PACCESS_DESCRIPTION): PACCESS_DESCRIPTION_st; cdecl;

  _anonymous_type_6 = record
    case Integer of
      0: (fullname: PGENERAL_NAMES);
      1: (relativename: Pstack_st_X509_NAME_ENTRY);
  end;
  P_anonymous_type_6 = ^_anonymous_type_6;

  DIST_POINT_NAME_st = record
    vtype: Integer;
    name: _anonymous_type_6;
    dpname: PX509_NAME;
  end;

  DIST_POINT_NAME = DIST_POINT_NAME_st;
  PDIST_POINT_NAME = ^DIST_POINT_NAME;
  PPDIST_POINT_NAME = ^PDIST_POINT_NAME;

  DIST_POINT_st = record
    distpoint: PDIST_POINT_NAME;
    reasons: PASN1_BIT_STRING;
    CRLissuer: PGENERAL_NAMES;
    dp_reasons: Integer;
  end;
  DIST_POINT = DIST_POINT_st;

  PCRL_DIST_POINTS = Pointer;
  PPCRL_DIST_POINTS = ^PCRL_DIST_POINTS;

  sk_DIST_POINT_compfunc = function(a: PPDIST_POINT; b: PPDIST_POINT): Integer; cdecl;

  sk_DIST_POINT_freefunc = procedure(a: PDIST_POINT); cdecl;

  sk_DIST_POINT_copyfunc = function(a: PDIST_POINT): PDIST_POINT_st; cdecl;

  AUTHORITY_KEYID_st = record
    keyid: PASN1_OCTET_STRING;
    issuer: PGENERAL_NAMES;
    serial: PASN1_INTEGER;
  end;
  AUTHORITY_KEYID = AUTHORITY_KEYID_st;

  SXNET_ID_st = record
    zone: PASN1_INTEGER;
    user: PASN1_OCTET_STRING;
  end;

  SXNETID = SXNET_ID_st;
  PSXNETID = ^SXNETID;
  PPSXNETID = ^PSXNETID;

  sk_SXNETID_compfunc = function(a: PPSXNETID; b: PPSXNETID): Integer; cdecl;

  sk_SXNETID_freefunc = procedure(a: PSXNETID); cdecl;

  sk_SXNETID_copyfunc = function(a: PSXNETID): PSXNET_ID_st; cdecl;

  SXNET_st = record
    version: PASN1_INTEGER;
    ids: Pstack_st_SXNETID;
  end;

  SXNET = SXNET_st;
  PSXNET = ^SXNET;
  PPSXNET = ^PSXNET;

  NOTICEREF_st = record
    organization: PASN1_STRING;
    noticenos: Pstack_st_ASN1_INTEGER;
  end;

  NOTICEREF = NOTICEREF_st;
  PNOTICEREF = ^NOTICEREF;
  PPNOTICEREF = ^PNOTICEREF;

  USERNOTICE_st = record
    noticeref: PNOTICEREF;
    exptext: PASN1_STRING;
  end;

  USERNOTICE = USERNOTICE_st;
  PUSERNOTICE = ^USERNOTICE;
  PPUSERNOTICE = ^PUSERNOTICE;

  _anonymous_type_7 = record
    case Integer of
      0: (cpsuri: PASN1_IA5STRING);
      1: (usernotice: PUSERNOTICE);
      2: (other: PASN1_TYPE);
  end;
  P_anonymous_type_7 = ^_anonymous_type_7;

  POLICYQUALINFO_st = record
    pqualid: PASN1_OBJECT;
    d: _anonymous_type_7;
  end;

  POLICYQUALINFO = POLICYQUALINFO_st;
  PPOLICYQUALINFO = ^POLICYQUALINFO;
  PPPOLICYQUALINFO = ^PPOLICYQUALINFO;

  sk_POLICYQUALINFO_compfunc = function(a: PPPOLICYQUALINFO; b: PPPOLICYQUALINFO): Integer; cdecl;

  sk_POLICYQUALINFO_freefunc = procedure(a: PPOLICYQUALINFO); cdecl;

  sk_POLICYQUALINFO_copyfunc = function(a: PPOLICYQUALINFO): PPOLICYQUALINFO_st; cdecl;

  POLICYINFO_st = record
    policyid: PASN1_OBJECT;
    qualifiers: Pstack_st_POLICYQUALINFO;
  end;

  POLICYINFO = POLICYINFO_st;
  PPOLICYINFO = ^POLICYINFO;
  PPPOLICYINFO = ^PPOLICYINFO;
  PCERTIFICATEPOLICIES = Pointer;
  PPCERTIFICATEPOLICIES = ^PCERTIFICATEPOLICIES;

  sk_POLICYINFO_compfunc = function(a: PPPOLICYINFO; b: PPPOLICYINFO): Integer; cdecl;

  sk_POLICYINFO_freefunc = procedure(a: PPOLICYINFO); cdecl;

  sk_POLICYINFO_copyfunc = function(a: PPOLICYINFO): PPOLICYINFO_st; cdecl;

  POLICY_MAPPING_st = record
    issuerDomainPolicy: PASN1_OBJECT;
    subjectDomainPolicy: PASN1_OBJECT;
  end;

  POLICY_MAPPING = POLICY_MAPPING_st;
  PPOLICY_MAPPING = ^POLICY_MAPPING;
  PPPOLICY_MAPPING = ^PPOLICY_MAPPING;

  sk_POLICY_MAPPING_compfunc = function(a: PPPOLICY_MAPPING; b: PPPOLICY_MAPPING): Integer; cdecl;

  sk_POLICY_MAPPING_freefunc = procedure(a: PPOLICY_MAPPING); cdecl;

  sk_POLICY_MAPPING_copyfunc = function(a: PPOLICY_MAPPING): PPOLICY_MAPPING_st; cdecl;
  PPOLICY_MAPPINGS = Pointer;
  PPPOLICY_MAPPINGS = ^PPOLICY_MAPPINGS;

  GENERAL_SUBTREE_st = record
    base: PGENERAL_NAME;
    minimum: PASN1_INTEGER;
    maximum: PASN1_INTEGER;
  end;

  GENERAL_SUBTREE = GENERAL_SUBTREE_st;
  PGENERAL_SUBTREE = ^GENERAL_SUBTREE;
  PPGENERAL_SUBTREE = ^PGENERAL_SUBTREE;

  sk_GENERAL_SUBTREE_compfunc = function(a: PPGENERAL_SUBTREE; b: PPGENERAL_SUBTREE): Integer; cdecl;

  sk_GENERAL_SUBTREE_freefunc = procedure(a: PGENERAL_SUBTREE); cdecl;

  sk_GENERAL_SUBTREE_copyfunc = function(a: PGENERAL_SUBTREE): PGENERAL_SUBTREE_st; cdecl;

  NAME_CONSTRAINTS_st = record
    permittedSubtrees: Pstack_st_GENERAL_SUBTREE;
    excludedSubtrees: Pstack_st_GENERAL_SUBTREE;
  end;
  NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;
  PNAME_CONSTRAINTS = ^NAME_CONSTRAINTS;

  POLICY_CONSTRAINTS_st = record
    requireExplicitPolicy: PASN1_INTEGER;
    inhibitPolicyMapping: PASN1_INTEGER;
  end;

  POLICY_CONSTRAINTS = POLICY_CONSTRAINTS_st;
  PPOLICY_CONSTRAINTS = ^POLICY_CONSTRAINTS;

  PROXY_POLICY_st = record
    policyLanguage: PASN1_OBJECT;
    policy: PASN1_OCTET_STRING;
  end;

  PROXY_POLICY = PROXY_POLICY_st;
  PPROXY_POLICY = ^PROXY_POLICY;
  PPPROXY_POLICY = ^PPROXY_POLICY;

  PROXY_CERT_INFO_EXTENSION_st = record
    pcPathLengthConstraint: PASN1_INTEGER;
    proxyPolicy: PPROXY_POLICY;
  end;

  PROXY_CERT_INFO_EXTENSION = PROXY_CERT_INFO_EXTENSION_st;
  PPROXY_CERT_INFO_EXTENSION = ^PROXY_CERT_INFO_EXTENSION;
  PPPROXY_CERT_INFO_EXTENSION = ^PPROXY_CERT_INFO_EXTENSION;

  ISSUING_DIST_POINT_st = record
    distpoint: PDIST_POINT_NAME;
    onlyuser: Integer;
    onlyCA: Integer;
    onlysomereasons: PASN1_BIT_STRING;
    indirectCRL: Integer;
    onlyattr: Integer;
  end;
  ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;

  x509_purpose_st = record
    purpose: Integer;
    trust: Integer;
    flags: Integer;
    check_purpose: function(p1: Px509_purpose_st; p2: PX509; p3: Integer): Integer; cdecl;
    name: PUTF8Char;
    sname: PUTF8Char;
    usr_data: Pointer;
  end;

  X509_PURPOSE = x509_purpose_st;
  PX509_PURPOSE = ^X509_PURPOSE;
  PPX509_PURPOSE = ^PX509_PURPOSE;

  sk_X509_PURPOSE_compfunc = function(a: PPX509_PURPOSE; b: PPX509_PURPOSE): Integer; cdecl;

  sk_X509_PURPOSE_freefunc = procedure(a: PX509_PURPOSE); cdecl;

  sk_X509_PURPOSE_copyfunc = function(a: PX509_PURPOSE): Px509_purpose_st; cdecl;

  sk_X509_POLICY_NODE_compfunc = function(a: PPX509_POLICY_NODE; b: PPX509_POLICY_NODE): Integer; cdecl;

  sk_X509_POLICY_NODE_freefunc = procedure(a: PX509_POLICY_NODE); cdecl;

  sk_X509_POLICY_NODE_copyfunc = function(a: PX509_POLICY_NODE): PX509_POLICY_NODE_st; cdecl;

  ASRange_st = record
    min: PASN1_INTEGER;
    max: PASN1_INTEGER;
  end;

  ASRange = ASRange_st;
  PASRange = ^ASRange;
  PPASRange = ^PASRange;

  _anonymous_type_8 = record
    case Integer of
      0: (id: PASN1_INTEGER);
      1: (range: PASRange);
  end;
  P_anonymous_type_8 = ^_anonymous_type_8;

  ASIdOrRange_st = record
    vtype: Integer;
    u: _anonymous_type_8;
  end;

  ASIdOrRange = ASIdOrRange_st;
  PASIdOrRange = ^ASIdOrRange;
  PPASIdOrRange = ^PASIdOrRange;
  PASIdOrRanges = Pointer;
  PPASIdOrRanges = ^PASIdOrRanges;

  sk_ASIdOrRange_compfunc = function(a: PPASIdOrRange; b: PPASIdOrRange): Integer; cdecl;

  sk_ASIdOrRange_freefunc = procedure(a: PASIdOrRange); cdecl;

  sk_ASIdOrRange_copyfunc = function(a: PASIdOrRange): PASIdOrRange_st; cdecl;

  _anonymous_type_9 = record
    case Integer of
      0: (inherit: PASN1_NULL);
      1: (asIdsOrRanges: PASIdOrRanges);
  end;
  P_anonymous_type_9 = ^_anonymous_type_9;

  ASIdentifierChoice_st = record
    vtype: Integer;
    u: _anonymous_type_9;
  end;

  ASIdentifierChoice = ASIdentifierChoice_st;
  PASIdentifierChoice = ^ASIdentifierChoice;
  PPASIdentifierChoice = ^PASIdentifierChoice;

  ASIdentifiers_st = record
    asnum: PASIdentifierChoice;
    rdi: PASIdentifierChoice;
  end;

  ASIdentifiers = ASIdentifiers_st;
  PASIdentifiers = ^ASIdentifiers;
  PPASIdentifiers = ^PASIdentifiers;

  IPAddressRange_st = record
    min: PASN1_BIT_STRING;
    max: PASN1_BIT_STRING;
  end;

  IPAddressRange = IPAddressRange_st;
  PIPAddressRange = ^IPAddressRange;
  PPIPAddressRange = ^PIPAddressRange;

  _anonymous_type_10 = record
    case Integer of
      0: (addressPrefix: PASN1_BIT_STRING);
      1: (addressRange: PIPAddressRange);
  end;
  P_anonymous_type_10 = ^_anonymous_type_10;

  IPAddressOrRange_st = record
    vtype: Integer;
    u: _anonymous_type_10;
  end;

  IPAddressOrRange = IPAddressOrRange_st;
  PIPAddressOrRange = ^IPAddressOrRange;
  PPIPAddressOrRange = ^PIPAddressOrRange;
  PIPAddressOrRanges = Pointer;
  PPIPAddressOrRanges = ^PIPAddressOrRanges;

  sk_IPAddressOrRange_compfunc = function(a: PPIPAddressOrRange; b: PPIPAddressOrRange): Integer; cdecl;

  sk_IPAddressOrRange_freefunc = procedure(a: PIPAddressOrRange); cdecl;

  sk_IPAddressOrRange_copyfunc = function(a: PIPAddressOrRange): PIPAddressOrRange_st; cdecl;

  _anonymous_type_11 = record
    case Integer of
      0: (inherit: PASN1_NULL);
      1: (addressesOrRanges: PIPAddressOrRanges);
  end;
  P_anonymous_type_11 = ^_anonymous_type_11;

  IPAddressChoice_st = record
    vtype: Integer;
    u: _anonymous_type_11;
  end;

  IPAddressChoice = IPAddressChoice_st;
  PIPAddressChoice = ^IPAddressChoice;
  PPIPAddressChoice = ^PIPAddressChoice;

  IPAddressFamily_st = record
    addressFamily: PASN1_OCTET_STRING;
    ipAddressChoice: PIPAddressChoice;
  end;

  IPAddressFamily = IPAddressFamily_st;
  PIPAddressFamily = ^IPAddressFamily;
  PPIPAddressFamily = ^PIPAddressFamily;
  PIPAddrBlocks = Pointer;
  PPIPAddrBlocks = ^PIPAddrBlocks;

  sk_IPAddressFamily_compfunc = function(a: PPIPAddressFamily; b: PPIPAddressFamily): Integer; cdecl;

  sk_IPAddressFamily_freefunc = procedure(a: PIPAddressFamily); cdecl;

  sk_IPAddressFamily_copyfunc = function(a: PIPAddressFamily): PIPAddressFamily_st; cdecl;

  sk_ASN1_STRING_compfunc = function(a: PPASN1_STRING; b: PPASN1_STRING): Integer; cdecl;

  sk_ASN1_STRING_freefunc = procedure(a: PASN1_STRING); cdecl;

  sk_ASN1_STRING_copyfunc = function(a: PASN1_STRING): Pasn1_string_st; cdecl;
  PNAMING_AUTHORITY = Pointer;
  PPNAMING_AUTHORITY = ^PNAMING_AUTHORITY;
  PPROFESSION_INFO = Pointer;
  PPPROFESSION_INFO = ^PPROFESSION_INFO;
  PADMISSIONS = Pointer;
  PPADMISSIONS = ^PADMISSIONS;
  PADMISSION_SYNTAX = Pointer;
  PPADMISSION_SYNTAX = ^PADMISSION_SYNTAX;

  sk_ADMISSIONS_compfunc = function(a: PPADMISSIONS; b: PPADMISSIONS): Integer; cdecl;

  sk_ADMISSIONS_freefunc = procedure(a: PADMISSIONS); cdecl;

  sk_ADMISSIONS_copyfunc = function(a: PADMISSIONS): PAdmissions_st; cdecl;

  sk_PROFESSION_INFO_compfunc = function(a: PPPROFESSION_INFO; b: PPPROFESSION_INFO): Integer; cdecl;

  sk_PROFESSION_INFO_freefunc = procedure(a: PPROFESSION_INFO); cdecl;

  sk_PROFESSION_INFO_copyfunc = function(a: PPROFESSION_INFO): PProfessionInfo_st; cdecl;
  PPROFESSION_INFOS = Pointer;
  PPPROFESSION_INFOS = ^PPROFESSION_INFOS;
  PCMS_ContentInfo = Pointer;
  PPCMS_ContentInfo = ^PCMS_ContentInfo;
  PCMS_SignerInfo = Pointer;
  PPCMS_SignerInfo = ^PCMS_SignerInfo;
  PCMS_CertificateChoices = Pointer;
  PPCMS_CertificateChoices = ^PCMS_CertificateChoices;
  PCMS_RevocationInfoChoice = Pointer;
  PPCMS_RevocationInfoChoice = ^PCMS_RevocationInfoChoice;
  PCMS_RecipientInfo = Pointer;
  PPCMS_RecipientInfo = ^PCMS_RecipientInfo;
  PCMS_ReceiptRequest = Pointer;
  PPCMS_ReceiptRequest = ^PCMS_ReceiptRequest;
  PCMS_Receipt = Pointer;
  PPCMS_Receipt = ^PCMS_Receipt;
  PCMS_RecipientEncryptedKey = Pointer;
  PPCMS_RecipientEncryptedKey = ^PCMS_RecipientEncryptedKey;
  PCMS_OtherKeyAttribute = Pointer;
  PPCMS_OtherKeyAttribute = ^PCMS_OtherKeyAttribute;

  sk_CMS_SignerInfo_compfunc = function(a: PPCMS_SignerInfo; b: PPCMS_SignerInfo): Integer; cdecl;

  sk_CMS_SignerInfo_freefunc = procedure(a: PCMS_SignerInfo); cdecl;

  sk_CMS_SignerInfo_copyfunc = function(a: PCMS_SignerInfo): PCMS_SignerInfo_st; cdecl;

  sk_CMS_RecipientEncryptedKey_compfunc = function(a: PPCMS_RecipientEncryptedKey; b: PPCMS_RecipientEncryptedKey): Integer; cdecl;

  sk_CMS_RecipientEncryptedKey_freefunc = procedure(a: PCMS_RecipientEncryptedKey); cdecl;

  sk_CMS_RecipientEncryptedKey_copyfunc = function(a: PCMS_RecipientEncryptedKey): PCMS_RecipientEncryptedKey_st; cdecl;

  sk_CMS_RecipientInfo_compfunc = function(a: PPCMS_RecipientInfo; b: PPCMS_RecipientInfo): Integer; cdecl;

  sk_CMS_RecipientInfo_freefunc = procedure(a: PCMS_RecipientInfo); cdecl;

  sk_CMS_RecipientInfo_copyfunc = function(a: PCMS_RecipientInfo): PCMS_RecipientInfo_st; cdecl;

  sk_CMS_RevocationInfoChoice_compfunc = function(a: PPCMS_RevocationInfoChoice; b: PPCMS_RevocationInfoChoice): Integer; cdecl;

  sk_CMS_RevocationInfoChoice_freefunc = procedure(a: PCMS_RevocationInfoChoice); cdecl;

  sk_CMS_RevocationInfoChoice_copyfunc = function(a: PCMS_RevocationInfoChoice): PCMS_RevocationInfoChoice_st; cdecl;

  ct_log_entry_type_t = (
    CT_LOG_ENTRY_TYPE_NOT_SET = -1,
    CT_LOG_ENTRY_TYPE_X509 = 0,
    CT_LOG_ENTRY_TYPE_PRECERT = 1);
  Pct_log_entry_type_t = ^ct_log_entry_type_t;

  sct_version_t = (
    SCT_VERSION_NOT_SET = -1,
    SCT_VERSION_V1 = 0);
  Psct_version_t = ^sct_version_t;

  sct_source_t = (
    SCT_SOURCE_UNKNOWN = 0,
    SCT_SOURCE_TLS_EXTENSION = 1,
    SCT_SOURCE_X509V3_EXTENSION = 2,
    SCT_SOURCE_OCSP_STAPLED_RESPONSE = 3);
  Psct_source_t = ^sct_source_t;

  sct_validation_status_t = (
    SCT_VALIDATION_STATUS_NOT_SET = 0,
    SCT_VALIDATION_STATUS_UNKNOWN_LOG = 1,
    SCT_VALIDATION_STATUS_VALID = 2,
    SCT_VALIDATION_STATUS_INVALID = 3,
    SCT_VALIDATION_STATUS_UNVERIFIED = 4,
    SCT_VALIDATION_STATUS_UNKNOWN_VERSION = 5);
  Psct_validation_status_t = ^sct_validation_status_t;

  sk_SCT_compfunc = function(a: PPSCT; b: PPSCT): Integer; cdecl;

  sk_SCT_freefunc = procedure(a: PSCT); cdecl;

  sk_SCT_copyfunc = function(a: PSCT): Psct_st; cdecl;

  sk_CTLOG_compfunc = function(a: PPCTLOG; b: PPCTLOG): Integer; cdecl;

  sk_CTLOG_freefunc = procedure(a: PCTLOG); cdecl;

  sk_CTLOG_copyfunc = function(a: PCTLOG): Pctlog_st; cdecl;
  DES_LONG = Cardinal;
  PDES_LONG = ^DES_LONG;
  DES_cblock = array [0..7] of Byte;
  PDES_cblock = ^DES_cblock;
  const_DES_cblock = array [0..7] of Byte;
  Pconst_DES_cblock = ^const_DES_cblock;

  _anonymous_type_12 = record
    case Integer of
      0: (cblock: DES_cblock);
      1: (deslong: array [0..1] of DES_LONG);
  end;
  P_anonymous_type_12 = ^_anonymous_type_12;

  DES_ks = record
    ks: array [0..15] of _anonymous_type_12;
  end;

  DES_key_schedule = DES_ks;
  PDES_key_schedule = ^DES_key_schedule;

  rand_meth_st = record
    seed: function(buf: Pointer; num: Integer): Integer; cdecl;
    bytes: function(buf: PByte; num: Integer): Integer; cdecl;
    cleanup: procedure(); cdecl;
    add: function(buf: Pointer; num: Integer; randomness: Double): Integer; cdecl;
    pseudorand: function(buf: PByte; num: Integer): Integer; cdecl;
    status: function(): Integer; cdecl;
  end;

  RAND_METHOD = rand_meth_st;
  PRAND_METHOD = ^RAND_METHOD;
  PRAND_DRBG = Pointer;
  PPRAND_DRBG = ^PRAND_DRBG;

  Ppem_password_cb = function(buf: PUTF8Char; size: Integer; rwflag: Integer; userdata: Pointer): Integer; cdecl;
  PUI_STRING = Pointer;
  PPUI_STRING = ^PUI_STRING;

  sk_UI_STRING_compfunc = function(a: PPUI_STRING; b: PPUI_STRING): Integer; cdecl;

  sk_UI_STRING_freefunc = procedure(a: PUI_STRING); cdecl;

  sk_UI_STRING_copyfunc = function(a: PUI_STRING): Pui_string_st; cdecl;

  UI_string_types = (
    UIT_NONE = 0,
    UIT_PROMPT = 1,
    UIT_VERIFY = 2,
    UIT_BOOLEAN = 3,
    UIT_INFO = 4,
    UIT_ERROR = 5);
  PUI_string_types = ^UI_string_types;

  err_state_st = record
    err_flags: array [0..15] of Integer;
    err_buffer: array [0..15] of Cardinal;
    err_data: array [0..15] of PUTF8Char;
    err_data_flags: array [0..15] of Integer;
    err_file: array [0..15] of PUTF8Char;
    err_line: array [0..15] of Integer;
    top: Integer;
    bottom: Integer;
  end;

  ERR_STATE = err_state_st;
  PERR_STATE = ^ERR_STATE;

  ERR_string_data_st = record
    error: Cardinal;
    vstring: PUTF8Char;
  end;

  ERR_STRING_DATA = ERR_string_data_st;
  PERR_STRING_DATA = ^ERR_STRING_DATA;

  lh_ERR_STRING_DATA_dummy = record
    case Integer of
      0: (d1: Pointer);
      1: (d2: Cardinal);
      2: (d3: Integer);
  end;

  lhash_st_ERR_STRING_DATA = record
    dummy: lh_ERR_STRING_DATA_dummy;
  end;

  ENGINE_CMD_DEFN_st = record
    cmd_num: Cardinal;
    cmd_name: PUTF8Char;
    cmd_desc: PUTF8Char;
    cmd_flags: Cardinal;
  end;

  ENGINE_CMD_DEFN = ENGINE_CMD_DEFN_st;
  PENGINE_CMD_DEFN = ^ENGINE_CMD_DEFN;

  ENGINE_GEN_FUNC_PTR = function(): Integer; cdecl;

  ENGINE_GEN_INT_FUNC_PTR = function(p1: PENGINE): Integer; cdecl;

  ENGINE_CTRL_FUNC_PTR_f = Pointer;

  ENGINE_CTRL_FUNC_PTR = function(p1: PENGINE; p2: Integer; p3: Integer; p4: Pointer; f: ENGINE_CTRL_FUNC_PTR_f): Integer; cdecl;

  ENGINE_LOAD_KEY_PTR = function(p1: PENGINE; p2: PUTF8Char; ui_method: PUI_METHOD; callback_data: Pointer): Pevp_pkey_st; cdecl;

  ENGINE_SSL_CLIENT_CERT_PTR = function(p1: PENGINE; ssl: PSSL; ca_dn: Pstack_st_X509_NAME; pcert: PPX509; pkey: PPEVP_PKEY; pother: PPstack_st_X509; ui_method: PUI_METHOD; callback_data: Pointer): Integer; cdecl;

  ENGINE_CIPHERS_PTR = function(p1: PENGINE; p2: PPEVP_CIPHER; p3: PPInteger; p4: Integer): Integer; cdecl;

  ENGINE_DIGESTS_PTR = function(p1: PENGINE; p2: PPEVP_MD; p3: PPInteger; p4: Integer): Integer; cdecl;

  ENGINE_PKEY_METHS_PTR = function(p1: PENGINE; p2: PPEVP_PKEY_METHOD; p3: PPInteger; p4: Integer): Integer; cdecl;

  ENGINE_PKEY_ASN1_METHS_PTR = function(p1: PENGINE; p2: PPEVP_PKEY_ASN1_METHOD; p3: PPInteger; p4: Integer): Integer; cdecl;

  dyn_MEM_malloc_fn = function(p1: NativeUInt; p2: PUTF8Char; p3: Integer): Pointer; cdecl;

  dyn_MEM_realloc_fn = function(p1: Pointer; p2: NativeUInt; p3: PUTF8Char; p4: Integer): Pointer; cdecl;

  dyn_MEM_free_fn = procedure(p1: Pointer; p2: PUTF8Char; p3: Integer); cdecl;

  st_dynamic_MEM_fns = record
    malloc_fn: dyn_MEM_malloc_fn;
    realloc_fn: dyn_MEM_realloc_fn;
    free_fn: dyn_MEM_free_fn;
  end;

  dynamic_MEM_fns = st_dynamic_MEM_fns;

  st_dynamic_fns = record
    static_state: Pointer;
    mem_fns: dynamic_MEM_fns;
  end;

  dynamic_fns = st_dynamic_fns;
  Pdynamic_fns = ^dynamic_fns;

  dynamic_v_check_fn = function(ossl_version: Cardinal): Cardinal; cdecl;

  dynamic_bind_engine = function(e: PENGINE; id: PUTF8Char; fns: Pdynamic_fns): Integer; cdecl;
  IDEA_INT = Cardinal;

  idea_key_st = record
    data: array [0..8] of array [0..5] of IDEA_INT;
  end;

  IDEA_KEY_SCHEDULE = idea_key_st;
  PIDEA_KEY_SCHEDULE = ^IDEA_KEY_SCHEDULE;

  MD4state_st = record
    A: Cardinal;
    B: Cardinal;
    C: Cardinal;
    D: Cardinal;
    Nl: Cardinal;
    Nh: Cardinal;
    data: array [0..15] of Cardinal;
    num: Cardinal;
  end;

  MD4_CTX = MD4state_st;
  PMD4_CTX = ^MD4_CTX;

  MD5state_st = record
    A: Cardinal;
    B: Cardinal;
    C: Cardinal;
    D: Cardinal;
    Nl: Cardinal;
    Nh: Cardinal;
    data: array [0..15] of Cardinal;
    num: Cardinal;
  end;

  MD5_CTX = MD5state_st;
  PMD5_CTX = ^MD5_CTX;

  mdc2_ctx_st = record
    num: Cardinal;
    data: array [0..7] of Byte;
    h: DES_cblock;
    hh: DES_cblock;
    pad_type: Integer;
  end;

  MDC2_CTX = mdc2_ctx_st;
  PMDC2_CTX = ^MDC2_CTX;

  block128_f = procedure(vin: PByte; vout: PByte; key: Pointer); cdecl;

  cbc128_f = procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; enc: Integer); cdecl;

  ctr128_f = procedure(vin: PByte; vout: PByte; blocks: NativeUInt; key: Pointer; ivec: PByte); cdecl;

  ccm128_f = procedure(vin: PByte; vout: PByte; blocks: NativeUInt; key: Pointer; ivec: PByte; cmac: PByte); cdecl;
  PGCM128_CONTEXT = Pointer;
  PPGCM128_CONTEXT = ^PGCM128_CONTEXT;
  PCCM128_CONTEXT = Pointer;
  PPCCM128_CONTEXT = ^PCCM128_CONTEXT;
  PXTS128_CONTEXT = Pointer;
  PPXTS128_CONTEXT = ^PXTS128_CONTEXT;
  POCB128_CONTEXT = Pointer;
  PPOCB128_CONTEXT = ^POCB128_CONTEXT;

  PArray = Pointer;
  ocb128_f = procedure(vin: PByte; vout: PByte; blocks: NativeUInt; key: Pointer; start_block_num: NativeUInt; offset_i: PByte; L_: PArray {Parray [0..15] of Byte}; checksum: PByte); cdecl;
  POCSP_CERTID = Pointer;
  PPOCSP_CERTID = ^POCSP_CERTID;

  sk_OCSP_CERTID_compfunc = function(a: PPOCSP_CERTID; b: PPOCSP_CERTID): Integer; cdecl;

  sk_OCSP_CERTID_freefunc = procedure(a: POCSP_CERTID); cdecl;

  sk_OCSP_CERTID_copyfunc = function(a: POCSP_CERTID): Pocsp_cert_id_st; cdecl;
  POCSP_ONEREQ = Pointer;
  PPOCSP_ONEREQ = ^POCSP_ONEREQ;

  sk_OCSP_ONEREQ_compfunc = function(a: PPOCSP_ONEREQ; b: PPOCSP_ONEREQ): Integer; cdecl;

  sk_OCSP_ONEREQ_freefunc = procedure(a: POCSP_ONEREQ); cdecl;

  sk_OCSP_ONEREQ_copyfunc = function(a: POCSP_ONEREQ): Pocsp_one_request_st; cdecl;
  POCSP_REQINFO = Pointer;
  PPOCSP_REQINFO = ^POCSP_REQINFO;
  POCSP_SIGNATURE = Pointer;
  PPOCSP_SIGNATURE = ^POCSP_SIGNATURE;
  POCSP_REQUEST = Pointer;
  PPOCSP_REQUEST = ^POCSP_REQUEST;
  POCSP_RESPBYTES = Pointer;
  PPOCSP_RESPBYTES = ^POCSP_RESPBYTES;

  sk_OCSP_RESPID_compfunc = function(a: PPOCSP_RESPID; b: PPOCSP_RESPID): Integer; cdecl;

  sk_OCSP_RESPID_freefunc = procedure(a: POCSP_RESPID); cdecl;

  sk_OCSP_RESPID_copyfunc = function(a: POCSP_RESPID): Pocsp_responder_id_st; cdecl;
  POCSP_REVOKEDINFO = Pointer;
  PPOCSP_REVOKEDINFO = ^POCSP_REVOKEDINFO;
  POCSP_CERTSTATUS = Pointer;
  PPOCSP_CERTSTATUS = ^POCSP_CERTSTATUS;
  POCSP_SINGLERESP = Pointer;
  PPOCSP_SINGLERESP = ^POCSP_SINGLERESP;

  sk_OCSP_SINGLERESP_compfunc = function(a: PPOCSP_SINGLERESP; b: PPOCSP_SINGLERESP): Integer; cdecl;

  sk_OCSP_SINGLERESP_freefunc = procedure(a: POCSP_SINGLERESP); cdecl;

  sk_OCSP_SINGLERESP_copyfunc = function(a: POCSP_SINGLERESP): Pocsp_single_response_st; cdecl;
  POCSP_RESPDATA = Pointer;
  PPOCSP_RESPDATA = ^POCSP_RESPDATA;
  POCSP_BASICRESP = Pointer;
  PPOCSP_BASICRESP = ^POCSP_BASICRESP;
  POCSP_CRLID = Pointer;
  PPOCSP_CRLID = ^POCSP_CRLID;
  POCSP_SERVICELOC = Pointer;
  PPOCSP_SERVICELOC = ^POCSP_SERVICELOC;
  PPKCS12_MAC_DATA = Pointer;
  PPPKCS12_MAC_DATA = ^PPKCS12_MAC_DATA;
  PPKCS12 = Pointer;
  PPPKCS12 = ^PPKCS12;
  PPKCS12_SAFEBAG = Pointer;
  PPPKCS12_SAFEBAG = ^PPKCS12_SAFEBAG;

  sk_PKCS12_SAFEBAG_compfunc = function(a: PPPKCS12_SAFEBAG; b: PPPKCS12_SAFEBAG): Integer; cdecl;

  sk_PKCS12_SAFEBAG_freefunc = procedure(a: PPKCS12_SAFEBAG); cdecl;

  sk_PKCS12_SAFEBAG_copyfunc = function(a: PPKCS12_SAFEBAG): PPKCS12_SAFEBAG_st; cdecl;
  PPKCS12_BAGS = Pointer;
  PPPKCS12_BAGS = ^PPKCS12_BAGS;

  RAND_DRBG_get_entropy_fn = function(drbg: PRAND_DRBG; pout: PPByte; entropy: Integer; min_len: NativeUInt; max_len: NativeUInt; prediction_resistance: Integer): UInt64; cdecl;

  RAND_DRBG_cleanup_entropy_fn = procedure(ctx: PRAND_DRBG; vout: PByte; outlen: NativeUInt); cdecl;

  RAND_DRBG_get_nonce_fn = function(drbg: PRAND_DRBG; pout: PPByte; entropy: Integer; min_len: NativeUInt; max_len: NativeUInt): UInt64; cdecl;

  RAND_DRBG_cleanup_nonce_fn = procedure(drbg: PRAND_DRBG; vout: PByte; outlen: NativeUInt); cdecl;
  RC2_INT = Cardinal;

  rc2_key_st = record
    data: array [0..63] of RC2_INT;
  end;

  RC2_KEY = rc2_key_st;
  PRC2_KEY = ^RC2_KEY;

  rc4_key_st = record
    x: Cardinal;
    y: Cardinal;
    data: array [0..255] of Cardinal;
  end;

  RC4_KEY = rc4_key_st;
  PRC4_KEY = ^RC4_KEY;

  RIPEMD160state_st = record
    A: Cardinal;
    B: Cardinal;
    C: Cardinal;
    D: Cardinal;
    E: Cardinal;
    Nl: Cardinal;
    Nh: Cardinal;
    data: array [0..15] of Cardinal;
    num: Cardinal;
  end;

  RIPEMD160_CTX = RIPEMD160state_st;
  PRIPEMD160_CTX = ^RIPEMD160_CTX;

  seed_key_st = record
    data: array [0..31] of Cardinal;
  end;

  SEED_KEY_SCHEDULE = seed_key_st;
  PSEED_KEY_SCHEDULE = ^SEED_KEY_SCHEDULE;

  SRP_gN_cache_st = record
    b64_bn: PUTF8Char;
    bn: PBIGNUM;
  end;

  SRP_gN_cache = SRP_gN_cache_st;
  PSRP_gN_cache = ^SRP_gN_cache;
  PPSRP_gN_cache = ^PSRP_gN_cache;

  sk_SRP_gN_cache_compfunc = function(a: PPSRP_gN_cache; b: PPSRP_gN_cache): Integer; cdecl;

  sk_SRP_gN_cache_freefunc = procedure(a: PSRP_gN_cache); cdecl;

  sk_SRP_gN_cache_copyfunc = function(a: PSRP_gN_cache): PSRP_gN_cache_st; cdecl;

  SRP_user_pwd_st = record
    id: PUTF8Char;
    s: PBIGNUM;
    v: PBIGNUM;
    g: PBIGNUM;
    N: PBIGNUM;
    info: PUTF8Char;
  end;

  SRP_user_pwd = SRP_user_pwd_st;
  PSRP_user_pwd = ^SRP_user_pwd;
  PPSRP_user_pwd = ^PSRP_user_pwd;

  sk_SRP_user_pwd_compfunc = function(a: PPSRP_user_pwd; b: PPSRP_user_pwd): Integer; cdecl;

  sk_SRP_user_pwd_freefunc = procedure(a: PSRP_user_pwd); cdecl;

  sk_SRP_user_pwd_copyfunc = function(a: PSRP_user_pwd): PSRP_user_pwd_st; cdecl;

  SRP_VBASE_st = record
    users_pwd: Pstack_st_SRP_user_pwd;
    gN_cache: Pstack_st_SRP_gN_cache;
    seed_key: PUTF8Char;
    default_g: PBIGNUM;
    default_N: PBIGNUM;
  end;

  SRP_VBASE = SRP_VBASE_st;
  PSRP_VBASE = ^SRP_VBASE;

  SRP_gN_st = record
    id: PUTF8Char;
    g: PBIGNUM;
    N: PBIGNUM;
  end;

  SRP_gN = SRP_gN_st;
  PSRP_gN = ^SRP_gN;
  PPSRP_gN = ^PSRP_gN;

  sk_SRP_gN_compfunc = function(a: PPSRP_gN; b: PPSRP_gN): Integer; cdecl;

  sk_SRP_gN_freefunc = procedure(a: PSRP_gN); cdecl;

  sk_SRP_gN_copyfunc = function(a: PSRP_gN): PSRP_gN_st; cdecl;
  ssl_crock_st = Pointer;
  Pssl_crock_st = ^ssl_crock_st;
  PSSL_METHOD = Pointer;
  PPSSL_METHOD = ^PSSL_METHOD;
  PSSL_CIPHER = Pointer;
  PPSSL_CIPHER = ^PSSL_CIPHER;
  PSSL_SESSION = Pointer;
  PPSSL_SESSION = ^PSSL_SESSION;
  PTLS_SIGALGS = Pointer;
  PPTLS_SIGALGS = ^PTLS_SIGALGS;
  PSSL_CONF_CTX = Pointer;
  PPSSL_CONF_CTX = ^PSSL_CONF_CTX;
  PSSL_COMP = Pointer;
  PPSSL_COMP = ^PSSL_COMP;

  srtp_protection_profile_st = record
    name: PUTF8Char;
    id: Cardinal;
  end;

  SRTP_PROTECTION_PROFILE = srtp_protection_profile_st;
  PSRTP_PROTECTION_PROFILE = ^SRTP_PROTECTION_PROFILE;
  PPSRTP_PROTECTION_PROFILE = ^PSRTP_PROTECTION_PROFILE;

  sk_SRTP_PROTECTION_PROFILE_compfunc = function(a: PPSRTP_PROTECTION_PROFILE; b: PPSRTP_PROTECTION_PROFILE): Integer; cdecl;

  sk_SRTP_PROTECTION_PROFILE_freefunc = procedure(a: PSRTP_PROTECTION_PROFILE); cdecl;

  sk_SRTP_PROTECTION_PROFILE_copyfunc = function(a: PSRTP_PROTECTION_PROFILE): Psrtp_protection_profile_st; cdecl;

  tls_session_ticket_ext_cb_fn = function(s: PSSL; data: PByte; len: Integer; arg: Pointer): Integer; cdecl;

  tls_session_secret_cb_fn = function(s: PSSL; secret: Pointer; secret_len: PInteger; peer_ciphers: Pstack_st_SSL_CIPHER; cipher: PPSSL_CIPHER; arg: Pointer): Integer; cdecl;

  custom_ext_add_cb = function(s: PSSL; ext_type: Cardinal; vout: PPByte; outlen: PNativeUInt; al: PInteger; add_arg: Pointer): Integer; cdecl;

  custom_ext_free_cb = procedure(s: PSSL; ext_type: Cardinal; vout: PByte; add_arg: Pointer); cdecl;

  custom_ext_parse_cb = function(s: PSSL; ext_type: Cardinal; vin: PByte; inlen: NativeUInt; al: PInteger; parse_arg: Pointer): Integer; cdecl;

  SSL_custom_ext_add_cb_ex = function(s: PSSL; ext_type: Cardinal; context: Cardinal; vout: PPByte; outlen: PNativeUInt; x: PX509; chainidx: NativeUInt; al: PInteger; add_arg: Pointer): Integer; cdecl;

  SSL_custom_ext_free_cb_ex = procedure(s: PSSL; ext_type: Cardinal; context: Cardinal; vout: PByte; add_arg: Pointer); cdecl;

  SSL_custom_ext_parse_cb_ex = function(s: PSSL; ext_type: Cardinal; context: Cardinal; vin: PByte; inlen: NativeUInt; x: PX509; chainidx: NativeUInt; al: PInteger; parse_arg: Pointer): Integer; cdecl;

  SSL_verify_cb = function(preverify_ok: Integer; x509_ctx: PX509_STORE_CTX): Integer; cdecl;

  GEN_SESSION_CB = function(ssl: PSSL; id: PByte; id_len: PCardinal): Integer; cdecl;

  SSL_CTX_npn_advertised_cb_func = function(ssl: PSSL; vout: PPByte; outlen: PCardinal; arg: Pointer): Integer; cdecl;

  SSL_CTX_npn_select_cb_func = function(s: PSSL; vout: PPByte; outlen: PByte; vin: PByte; inlen: Cardinal; arg: Pointer): Integer; cdecl;

  SSL_CTX_alpn_select_cb_func = function(ssl: PSSL; vout: PPByte; outlen: PByte; vin: PByte; inlen: Cardinal; arg: Pointer): Integer; cdecl;

  SSL_psk_client_cb_func = function(ssl: PSSL; hint: PUTF8Char; identity: PUTF8Char; max_identity_len: Cardinal; psk: PByte; max_psk_len: Cardinal): Cardinal; cdecl;

  SSL_psk_server_cb_func = function(ssl: PSSL; identity: PUTF8Char; psk: PByte; max_psk_len: Cardinal): Cardinal; cdecl;

  SSL_psk_find_session_cb_func = function(ssl: PSSL; identity: PByte; identity_len: NativeUInt; sess: PPSSL_SESSION): Integer; cdecl;

  SSL_psk_use_session_cb_func = function(ssl: PSSL; md: PEVP_MD; id: PPByte; idlen: PNativeUInt; sess: PPSSL_SESSION): Integer; cdecl;

  SSL_CTX_keylog_cb_func = procedure(ssl: PSSL; line: PUTF8Char); cdecl;

  tls_session_ticket_ext_st = record
    length: Word;
    data: Pointer;
  end;
  TLS_SESSION_TICKET_EXT = tls_session_ticket_ext_st;

  sk_SSL_CIPHER_compfunc = function(a: PPSSL_CIPHER; b: PPSSL_CIPHER): Integer; cdecl;

  sk_SSL_CIPHER_freefunc = procedure(a: PSSL_CIPHER); cdecl;

  sk_SSL_CIPHER_copyfunc = function(a: PSSL_CIPHER): Pssl_cipher_st; cdecl;

  sk_SSL_COMP_compfunc = function(a: PPSSL_COMP; b: PPSSL_COMP): Integer; cdecl;

  sk_SSL_COMP_freefunc = procedure(a: PSSL_COMP); cdecl;

  sk_SSL_COMP_copyfunc = function(a: PSSL_COMP): Pssl_comp_st; cdecl;

  OSSL_HANDSHAKE_STATE = (
    TLS_ST_BEFORE = 0,
    TLS_ST_OK = 1,
    DTLS_ST_CR_HELLO_VERIFY_REQUEST = 2,
    TLS_ST_CR_SRVR_HELLO = 3,
    TLS_ST_CR_CERT = 4,
    TLS_ST_CR_CERT_STATUS = 5,
    TLS_ST_CR_KEY_EXCH = 6,
    TLS_ST_CR_CERT_REQ = 7,
    TLS_ST_CR_SRVR_DONE = 8,
    TLS_ST_CR_SESSION_TICKET = 9,
    TLS_ST_CR_CHANGE = 10,
    TLS_ST_CR_FINISHED = 11,
    TLS_ST_CW_CLNT_HELLO = 12,
    TLS_ST_CW_CERT = 13,
    TLS_ST_CW_KEY_EXCH = 14,
    TLS_ST_CW_CERT_VRFY = 15,
    TLS_ST_CW_CHANGE = 16,
    TLS_ST_CW_NEXT_PROTO = 17,
    TLS_ST_CW_FINISHED = 18,
    TLS_ST_SW_HELLO_REQ = 19,
    TLS_ST_SR_CLNT_HELLO = 20,
    DTLS_ST_SW_HELLO_VERIFY_REQUEST = 21,
    TLS_ST_SW_SRVR_HELLO = 22,
    TLS_ST_SW_CERT = 23,
    TLS_ST_SW_KEY_EXCH = 24,
    TLS_ST_SW_CERT_REQ = 25,
    TLS_ST_SW_SRVR_DONE = 26,
    TLS_ST_SR_CERT = 27,
    TLS_ST_SR_KEY_EXCH = 28,
    TLS_ST_SR_CERT_VRFY = 29,
    TLS_ST_SR_NEXT_PROTO = 30,
    TLS_ST_SR_CHANGE = 31,
    TLS_ST_SR_FINISHED = 32,
    TLS_ST_SW_SESSION_TICKET = 33,
    TLS_ST_SW_CERT_STATUS = 34,
    TLS_ST_SW_CHANGE = 35,
    TLS_ST_SW_FINISHED = 36,
    TLS_ST_SW_ENCRYPTED_EXTENSIONS = 37,
    TLS_ST_CR_ENCRYPTED_EXTENSIONS = 38,
    TLS_ST_CR_CERT_VRFY = 39,
    TLS_ST_SW_CERT_VRFY = 40,
    TLS_ST_CR_HELLO_REQ = 41,
    TLS_ST_SW_KEY_UPDATE = 42,
    TLS_ST_CW_KEY_UPDATE = 43,
    TLS_ST_SR_KEY_UPDATE = 44,
    TLS_ST_CR_KEY_UPDATE = 45,
    TLS_ST_EARLY_DATA = 46,
    TLS_ST_PENDING_EARLY_DATA_END = 47,
    TLS_ST_CW_END_OF_EARLY_DATA = 48,
    TLS_ST_SR_END_OF_EARLY_DATA = 49);
  POSSL_HANDSHAKE_STATE = ^OSSL_HANDSHAKE_STATE;

  SSL_client_hello_cb_fn = function(s: PSSL; al: PInteger; arg: Pointer): Integer; cdecl;

  ssl_ct_validation_cb = function(ctx: PCT_POLICY_EVAL_CTX; scts: Pstack_st_SCT; arg: Pointer): Integer; cdecl;

  _anonymous_type_13 = (
    SSL_CT_VALIDATION_PERMISSIVE = 0,
    SSL_CT_VALIDATION_STRICT = 1);
  P_anonymous_type_13 = ^_anonymous_type_13;
  SSL_TICKET_STATUS = Integer;
  SSL_TICKET_RETURN = Integer;

  SSL_CTX_generate_session_ticket_fn = function(s: PSSL; arg: Pointer): Integer; cdecl;

  SSL_CTX_decrypt_session_ticket_fn = function(s: PSSL; ss: PSSL_SESSION; keyname: PByte; keyname_length: NativeUInt; status: SSL_TICKET_STATUS; arg: Pointer): Integer; cdecl;

  DTLS_timer_cb = function(s: PSSL; timer_us: Cardinal): Cardinal; cdecl;

  SSL_allow_early_data_cb_fn = function(s: PSSL; arg: Pointer): Integer; cdecl;
  POSSL_STORE_CTX = Pointer;
  PPOSSL_STORE_CTX = ^POSSL_STORE_CTX;

  OSSL_STORE_post_process_info_fn = function(p1: POSSL_STORE_INFO; p2: Pointer): Possl_store_info_st; cdecl;
  POSSL_STORE_LOADER = Pointer;
  PPOSSL_STORE_LOADER = ^POSSL_STORE_LOADER;
  POSSL_STORE_LOADER_CTX = Pointer;
  PPOSSL_STORE_LOADER_CTX = ^POSSL_STORE_LOADER_CTX;

  OSSL_STORE_open_fn = function(loader: POSSL_STORE_LOADER; uri: PUTF8Char; ui_method: PUI_METHOD; ui_data: Pointer): Possl_store_loader_ctx_st; cdecl;

  OSSL_STORE_ctrl_fn = function(ctx: POSSL_STORE_LOADER_CTX; cmd: Integer; args: Pointer): Integer; cdecl;

  OSSL_STORE_expect_fn = function(ctx: POSSL_STORE_LOADER_CTX; expected: Integer): Integer; cdecl;

  OSSL_STORE_find_fn = function(ctx: POSSL_STORE_LOADER_CTX; criteria: POSSL_STORE_SEARCH): Integer; cdecl;

  OSSL_STORE_load_fn = function(ctx: POSSL_STORE_LOADER_CTX; ui_method: PUI_METHOD; ui_data: Pointer): Possl_store_info_st; cdecl;

  OSSL_STORE_eof_fn = function(ctx: POSSL_STORE_LOADER_CTX): Integer; cdecl;

  OSSL_STORE_error_fn = function(ctx: POSSL_STORE_LOADER_CTX): Integer; cdecl;

  OSSL_STORE_close_fn = function(ctx: POSSL_STORE_LOADER_CTX): Integer; cdecl;
  PTS_MSG_IMPRINT = Pointer;
  PPTS_MSG_IMPRINT = ^PTS_MSG_IMPRINT;
  PTS_REQ = Pointer;
  PPTS_REQ = ^PTS_REQ;
  PTS_ACCURACY = Pointer;
  PPTS_ACCURACY = ^PTS_ACCURACY;
  PTS_TST_INFO = Pointer;
  PPTS_TST_INFO = ^PTS_TST_INFO;
  PTS_STATUS_INFO = Pointer;
  PPTS_STATUS_INFO = ^PTS_STATUS_INFO;
  PESS_ISSUER_SERIAL = Pointer;
  PPESS_ISSUER_SERIAL = ^PESS_ISSUER_SERIAL;
  PESS_CERT_ID = Pointer;
  PPESS_CERT_ID = ^PESS_CERT_ID;
  PESS_SIGNING_CERT = Pointer;
  PPESS_SIGNING_CERT = ^PESS_SIGNING_CERT;

  sk_ESS_CERT_ID_compfunc = function(a: PPESS_CERT_ID; b: PPESS_CERT_ID): Integer; cdecl;

  sk_ESS_CERT_ID_freefunc = procedure(a: PESS_CERT_ID); cdecl;

  sk_ESS_CERT_ID_copyfunc = function(a: PESS_CERT_ID): PESS_cert_id; cdecl;
  PESS_CERT_ID_V2 = Pointer;
  PPESS_CERT_ID_V2 = ^PESS_CERT_ID_V2;
  PESS_SIGNING_CERT_V2 = Pointer;
  PPESS_SIGNING_CERT_V2 = ^PESS_SIGNING_CERT_V2;

  sk_ESS_CERT_ID_V2_compfunc = function(a: PPESS_CERT_ID_V2; b: PPESS_CERT_ID_V2): Integer; cdecl;

  sk_ESS_CERT_ID_V2_freefunc = procedure(a: PESS_CERT_ID_V2); cdecl;

  sk_ESS_CERT_ID_V2_copyfunc = function(a: PESS_CERT_ID_V2): PESS_cert_id_v2_st; cdecl;
  PTS_RESP = Pointer;
  PPTS_RESP = ^PTS_RESP;

  PTS_RESP_CTX = Pointer;
  PPTS_RESP_CTX = ^PTS_RESP_CTX;

  TS_serial_cb = function(p1: PTS_resp_ctx; p2: Pointer): Pasn1_string_st; cdecl;

  TS_time_cb = function(p1: PTS_resp_ctx; p2: Pointer; sec: PInteger; usec: PInteger): Integer; cdecl;

  TS_extension_cb = function(p1: PTS_resp_ctx; p2: PX509_EXTENSION; p3: Pointer): Integer; cdecl;

  sk_EVP_MD_compfunc = function(a: PPEVP_MD; b: PPEVP_MD): Integer; cdecl;

  sk_EVP_MD_freefunc = procedure(a: PEVP_MD); cdecl;

  sk_EVP_MD_copyfunc = function(a: PEVP_MD): Pevp_md_st; cdecl;
  PTS_VERIFY_CTX = Pointer;
  PPTS_VERIFY_CTX = ^PTS_VERIFY_CTX;
  OPENSSL_PSTRING = POPENSSL_STRING;

  sk_OPENSSL_PSTRING_compfunc = function(a: PPOPENSSL_STRING; b: PPOPENSSL_STRING): Integer; cdecl;

  sk_OPENSSL_PSTRING_freefunc = procedure(a: POPENSSL_STRING); cdecl;

  sk_OPENSSL_PSTRING_copyfunc = function(a: POPENSSL_STRING): PPUTF8Char; cdecl;

  txt_db_st = record
    num_fields: Integer;
    data: Pstack_st_OPENSSL_PSTRING;
    index: PPlhash_st_OPENSSL_STRING;
    qual: Integer { TODO : Cannot convert original type "int (**)(OPENSSL_STRING *)" };
    error: Integer;
    arg1: Integer;
    arg2: Integer;
    arg_row: POPENSSL_STRING;
  end;

  TXT_DB = txt_db_st;
  PTXT_DB = ^TXT_DB;

  _anonymous_type_14 = record
    case Integer of
      0: (c: array [0..63] of Byte);
      1: (q: array [0..7] of Double);
  end;
  P_anonymous_type_14 = ^_anonymous_type_14;

  WHIRLPOOL_CTX = record
    H: _anonymous_type_14;
    data: array [0..63] of Byte;
    bitoff: Cardinal;
    bitlen: array [0..3] of NativeUInt;
  end;

type
  OPENSSL_sk_pop_free_func = procedure(p1: Pointer); cdecl;

type
  CRYPTO_set_mem_functions_m = function(p1: NativeUInt; p2: PUTF8Char; p3: Integer): Pointer; cdecl;

type
  CRYPTO_set_mem_functions_r = function(p1: Pointer; p2: NativeUInt; p3: PUTF8Char; p4: Integer): Pointer; cdecl;

type
  CRYPTO_set_mem_functions_f = procedure(p1: Pointer; p2: PUTF8Char; p3: Integer); cdecl;

type
  Ptm = Pointer;

type
  OPENSSL_atexit_handler = procedure(); cdecl;

type
  CRYPTO_THREAD_run_once_init = procedure(); cdecl;

type
  CRYPTO_THREAD_init_local_cleanup = procedure(p1: Pointer); cdecl;

type
  PPasn1_ps_func = Pointer;

type
  BIO_dump_cb_cb = function(data: Pointer; len: NativeUInt; u: Pointer): Integer; cdecl;

type
  BIO_dump_indent_cb_cb = function(data: Pointer; len: NativeUInt; u: Pointer): Integer; cdecl;

type
  PBIO_sock_info_u = Pointer;

type
  BIO_meth_set_write_write = function(p1: PBIO; p2: PUTF8Char; p3: Integer): Integer; cdecl;

type
  BIO_meth_set_write_ex_bwrite = function(p1: PBIO; p2: PUTF8Char; p3: NativeUInt; p4: PNativeUInt): Integer; cdecl;

type
  BIO_meth_set_read_read = function(p1: PBIO; p2: PUTF8Char; p3: Integer): Integer; cdecl;

type
  BIO_meth_set_read_ex_bread = function(p1: PBIO; p2: PUTF8Char; p3: NativeUInt; p4: PNativeUInt): Integer; cdecl;

type
  BIO_meth_set_puts_puts = function(p1: PBIO; p2: PUTF8Char): Integer; cdecl;

type
  BIO_meth_set_gets_gets = function(p1: PBIO; p2: PUTF8Char; p3: Integer): Integer; cdecl;

type
  BIO_meth_set_ctrl_ctrl = function(p1: PBIO; p2: Integer; p3: Integer; p4: Pointer): Integer; cdecl;

type
  BIO_meth_set_create_create = function(p1: PBIO): Integer; cdecl;

type
  BIO_meth_set_destroy_destroy = function(p1: PBIO): Integer; cdecl;

type
  BIO_meth_set_callback_ctrl_callback_ctrl = function(p1: PBIO; p2: Integer; p3: PBIO_info_cb): Integer; cdecl;

type
  BN_GENCB_set_old_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  BN_GENCB_set_callback = function(p1: Integer; p2: Integer; p3: PBN_GENCB): Integer; cdecl;

type
  BN_generate_prime_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  BN_is_prime_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  BN_is_prime_fasttest_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  BN_BLINDING_create_param_bn_mod_exp = function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; m_ctx: PBN_MONT_CTX): Integer; cdecl;

type
  ASN1_d2i_fp_xnew = function(): Pointer; cdecl;

type
  ASN1_d2i_bio_xnew = function(): Pointer; cdecl;

type
  ASN1_SCTX_new_scan_cb = function(ctx: PASN1_SCTX): Integer; cdecl;

type
  ASYNC_start_job_func = function(p1: Pointer): Integer; cdecl;

type
  OBJ_NAME_new_index_hash_func = function(p1: PUTF8Char): Cardinal; cdecl;

type
  OBJ_NAME_new_index_cmp_func = function(p1: PUTF8Char; p2: PUTF8Char): Integer; cdecl;

type
  OBJ_NAME_new_index_free_func = procedure(p1: PUTF8Char; p2: Integer; p3: PUTF8Char); cdecl;

type
  OBJ_NAME_do_all_fn = procedure(p1: POBJ_NAME; arg: Pointer); cdecl;

type
  OBJ_NAME_do_all_sorted_fn = procedure(p1: POBJ_NAME; arg: Pointer); cdecl;

type
  OBJ_bsearch__cmp = function(p1: Pointer; p2: Pointer): Integer; cdecl;

type
  OBJ_bsearch_ex__cmp = function(p1: Pointer; p2: Pointer): Integer; cdecl;

type
  EVP_MD_meth_set_init_init = function(ctx: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_MD_meth_set_update_update = function(ctx: PEVP_MD_CTX; data: Pointer; count: NativeUInt): Integer; cdecl;

type
  EVP_MD_meth_set_final_final = function(ctx: PEVP_MD_CTX; md: PByte): Integer; cdecl;

type
  EVP_MD_meth_set_copy_copy = function(vto: PEVP_MD_CTX; from: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_MD_meth_set_cleanup_cleanup = function(ctx: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_MD_meth_set_ctrl_ctrl = function(ctx: PEVP_MD_CTX; cmd: Integer; p1: Integer; p2: Pointer): Integer; cdecl;

type
  EVP_CIPHER_meth_set_init_init = function(ctx: PEVP_CIPHER_CTX; key: PByte; iv: PByte; enc: Integer): Integer; cdecl;

type
  EVP_CIPHER_meth_set_do_cipher_do_cipher = function(ctx: PEVP_CIPHER_CTX; vout: PByte; vin: PByte; inl: NativeUInt): Integer; cdecl;

type
  EVP_CIPHER_meth_set_cleanup_cleanup = function(p1: PEVP_CIPHER_CTX): Integer; cdecl;

type
  EVP_CIPHER_meth_set_set_asn1_params_set_asn1_parameters = function(p1: PEVP_CIPHER_CTX; p2: PASN1_TYPE): Integer; cdecl;

type
  EVP_CIPHER_meth_set_get_asn1_params_get_asn1_parameters = function(p1: PEVP_CIPHER_CTX; p2: PASN1_TYPE): Integer; cdecl;

type
  EVP_CIPHER_meth_set_ctrl_ctrl = function(p1: PEVP_CIPHER_CTX; vtype: Integer; arg: Integer; ptr: Pointer): Integer; cdecl;

type
  EVP_MD_CTX_set_update_fn_update = function(ctx: PEVP_MD_CTX; data: Pointer; count: NativeUInt): Integer; cdecl;

type
  EVP_CIPHER_do_all_fn = procedure(ciph: PEVP_CIPHER; from: PUTF8Char; vto: PUTF8Char; x: Pointer); cdecl;

type
  EVP_CIPHER_do_all_sorted_fn = procedure(ciph: PEVP_CIPHER; from: PUTF8Char; vto: PUTF8Char; x: Pointer); cdecl;

type
  EVP_MD_do_all_fn = procedure(ciph: PEVP_MD; from: PUTF8Char; vto: PUTF8Char; x: Pointer); cdecl;

type
  EVP_MD_do_all_sorted_fn = procedure(ciph: PEVP_MD; from: PUTF8Char; vto: PUTF8Char; x: Pointer); cdecl;

type
  PPEVP_PBE_KEYGEN = Pointer;

type
  EVP_PKEY_asn1_set_public_pub_decode = function(pk: PEVP_PKEY; pub: PX509_PUBKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_public_pub_encode = function(pub: PX509_PUBKEY; pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_public_pub_cmp = function(a: PEVP_PKEY; b: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_public_pub_print = function(vout: PBIO; pkey: PEVP_PKEY; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl;

type
  EVP_PKEY_asn1_set_public_pkey_size = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_public_pkey_bits = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_private_priv_decode = function(pk: PEVP_PKEY; p8inf: PPKCS8_PRIV_KEY_INFO): Integer; cdecl;

type
  EVP_PKEY_asn1_set_private_priv_encode = function(p8: PPKCS8_PRIV_KEY_INFO; pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_private_priv_print = function(vout: PBIO; pkey: PEVP_PKEY; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_param_decode = function(pkey: PEVP_PKEY; pder: PPByte; derlen: Integer): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_param_encode = function(pkey: PEVP_PKEY; pder: PPByte): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_param_missing = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_param_copy = function(vto: PEVP_PKEY; from: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_param_cmp = function(a: PEVP_PKEY; b: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_param_print = function(vout: PBIO; pkey: PEVP_PKEY; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl;

type
  EVP_PKEY_asn1_set_free_pkey_free = procedure(pkey: PEVP_PKEY); cdecl;

type
  EVP_PKEY_asn1_set_ctrl_pkey_ctrl = function(pkey: PEVP_PKEY; op: Integer; arg1: Integer; arg2: Pointer): Integer; cdecl;

type
  EVP_PKEY_asn1_set_item_item_verify = function(ctx: PEVP_MD_CTX; it: PASN1_ITEM; asn: Pointer; a: PX509_ALGOR; sig: PASN1_BIT_STRING; pkey: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_item_item_sign = function(ctx: PEVP_MD_CTX; it: PASN1_ITEM; asn: Pointer; alg1: PX509_ALGOR; alg2: PX509_ALGOR; sig: PASN1_BIT_STRING): Integer; cdecl;

type
  EVP_PKEY_asn1_set_siginf_siginf_set = function(siginf: PX509_SIG_INFO; alg: PX509_ALGOR; sig: PASN1_STRING): Integer; cdecl;

type
  EVP_PKEY_asn1_set_check_pkey_check = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_public_check_pkey_pub_check = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_param_check_pkey_param_check = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_asn1_set_set_priv_key_set_priv_key = function(pk: PEVP_PKEY; priv: PByte; len: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_asn1_set_set_pub_key_set_pub_key = function(pk: PEVP_PKEY; pub: PByte; len: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_asn1_set_get_priv_key_get_priv_key = function(pk: PEVP_PKEY; priv: PByte; len: PNativeUInt): Integer; cdecl;

type
  EVP_PKEY_asn1_set_get_pub_key_get_pub_key = function(pk: PEVP_PKEY; pub: PByte; len: PNativeUInt): Integer; cdecl;

type
  EVP_PKEY_asn1_set_security_bits_pkey_security_bits = function(pk: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_meth_set_init_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_copy_copy = function(dst: PEVP_PKEY_CTX; src: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_cleanup_cleanup = procedure(ctx: PEVP_PKEY_CTX); cdecl;

type
  EVP_PKEY_meth_set_paramgen_paramgen_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_paramgen_paramgen = function(ctx: PEVP_PKEY_CTX; pkey: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_meth_set_keygen_keygen_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_keygen_keygen = function(ctx: PEVP_PKEY_CTX; pkey: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_meth_set_sign_sign_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_sign_sign = function(ctx: PEVP_PKEY_CTX; sig: PByte; var siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_verify_verify_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_verify_verify = function(ctx: PEVP_PKEY_CTX; sig: PByte; siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_verify_recover_verify_recover_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_verify_recover_verify_recover = function(ctx: PEVP_PKEY_CTX; sig: PByte; var siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_signctx_signctx_init = function(ctx: PEVP_PKEY_CTX; mctx: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_signctx_signctx = function(ctx: PEVP_PKEY_CTX; sig: PByte; var siglen: NativeUInt; mctx: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_verifyctx_verifyctx_init = function(ctx: PEVP_PKEY_CTX; mctx: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_verifyctx_verifyctx = function(ctx: PEVP_PKEY_CTX; sig: PByte; siglen: Integer; mctx: PEVP_MD_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_encrypt_encrypt_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_encrypt_encryptfn = function(ctx: PEVP_PKEY_CTX; vout: PByte; outlen: PNativeUInt; vin: PByte; inlen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_decrypt_decrypt_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_decrypt_decrypt = function(ctx: PEVP_PKEY_CTX; vout: PByte; outlen: PNativeUInt; vin: PByte; inlen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_derive_derive_init = function(ctx: PEVP_PKEY_CTX): Integer; cdecl;

type
  EVP_PKEY_meth_set_derive_derive = function(ctx: PEVP_PKEY_CTX; key: PByte; keylen: PNativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_ctrl_ctrl = function(ctx: PEVP_PKEY_CTX; vtype: Integer; p1: Integer; p2: Pointer): Integer; cdecl;

type
  EVP_PKEY_meth_set_ctrl_ctrl_str = function(ctx: PEVP_PKEY_CTX; vtype: PUTF8Char; value: PUTF8Char): Integer; cdecl;

type
  EVP_PKEY_meth_set_digestsign_digestsign = function(ctx: PEVP_MD_CTX; sig: PByte; var siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_digestverify_digestverify = function(ctx: PEVP_MD_CTX; sig: PByte; siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl;

type
  EVP_PKEY_meth_set_check_check = function(pkey: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_meth_set_public_check_check = function(pkey: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_meth_set_param_check_check = function(pkey: PEVP_PKEY): Integer; cdecl;

type
  EVP_PKEY_meth_set_digest_custom_digest_custom = function(ctx: PEVP_PKEY_CTX; mctx: PEVP_MD_CTX): Integer; cdecl;

type
  ECDH_compute_key_KDF = function(vin: Pointer; inlen: NativeUInt; vout: Pointer; outlen: PNativeUInt): Pointer; cdecl;

type
  EC_KEY_METHOD_set_init_init = function(key: PEC_KEY): Integer; cdecl;

type
  EC_KEY_METHOD_set_init_finish = procedure(key: PEC_KEY); cdecl;

type
  EC_KEY_METHOD_set_init_copy = function(dest: PEC_KEY; src: PEC_KEY): Integer; cdecl;

type
  EC_KEY_METHOD_set_init_set_group = function(key: PEC_KEY; grp: PEC_GROUP): Integer; cdecl;

type
  EC_KEY_METHOD_set_init_set_private = function(key: PEC_KEY; priv_key: PBIGNUM): Integer; cdecl;

type
  EC_KEY_METHOD_set_init_set_public = function(key: PEC_KEY; pub_key: PEC_POINT): Integer; cdecl;

type
  EC_KEY_METHOD_set_keygen_keygen = function(key: PEC_KEY): Integer; cdecl;

type
  EC_KEY_METHOD_set_compute_key_ckey = function(psec: PPByte; pseclen: PNativeUInt; pub_key: PEC_POINT; ecdh: PEC_KEY): Integer; cdecl;

type
  EC_KEY_METHOD_set_sign_sign = function(vtype: Integer; dgst: PByte; dlen: Integer; sig: PByte; siglen: PCardinal; kinv: PBIGNUM; r: PBIGNUM; eckey: PEC_KEY): Integer; cdecl;

type
  EC_KEY_METHOD_set_sign_sign_setup = function(eckey: PEC_KEY; ctx_in: PBN_CTX; kinvp: PPBIGNUM; rp: PPBIGNUM): Integer; cdecl;

type
  EC_KEY_METHOD_set_sign_sign_sig = function(dgst: PByte; dgst_len: Integer; in_kinv: PBIGNUM; in_r: PBIGNUM; eckey: PEC_KEY): PECDSA_SIG_st; cdecl;

type
  EC_KEY_METHOD_set_verify_verify = function(vtype: Integer; dgst: PByte; dgst_len: Integer; sigbuf: PByte; sig_len: Integer; eckey: PEC_KEY): Integer; cdecl;

type
  EC_KEY_METHOD_set_verify_verify_sig = function(dgst: PByte; dgst_len: Integer; sig: PECDSA_SIG; eckey: PEC_KEY): Integer; cdecl;

type
  RSA_generate_key_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  RSA_meth_set_pub_enc_pub_enc = function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl;

type
  RSA_meth_set_pub_dec_pub_dec = function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl;

type
  RSA_meth_set_priv_enc_priv_enc = function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl;

type
  RSA_meth_set_priv_dec_priv_dec = function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl;

type
  RSA_meth_set_mod_exp_mod_exp = function(r0: PBIGNUM; i: PBIGNUM; rsa: PRSA; ctx: PBN_CTX): Integer; cdecl;

type
  RSA_meth_set_bn_mod_exp_bn_mod_exp = function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; m_ctx: PBN_MONT_CTX): Integer; cdecl;

type
  RSA_meth_set_init_init = function(rsa: PRSA): Integer; cdecl;

type
  RSA_meth_set_finish_finish = function(rsa: PRSA): Integer; cdecl;

type
  RSA_meth_set_sign_sign = function(vtype: Integer; m: PByte; m_length: Cardinal; sigret: PByte; siglen: PCardinal; rsa: PRSA): Integer; cdecl;

type
  RSA_meth_set_verify_verify = function(dtype: Integer; m: PByte; m_length: Cardinal; sigbuf: PByte; siglen: Cardinal; rsa: PRSA): Integer; cdecl;

type
  RSA_meth_set_keygen_keygen = function(rsa: PRSA; bits: Integer; e: PBIGNUM; cb: PBN_GENCB): Integer; cdecl;

type
  RSA_meth_set_multi_prime_keygen_keygen = function(rsa: PRSA; bits: Integer; primes: Integer; e: PBIGNUM; cb: PBN_GENCB): Integer; cdecl;

type
  DH_generate_parameters_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  DH_meth_set_generate_key_generate_key = function(p1: PDH): Integer; cdecl;

type
  DH_meth_set_compute_key_compute_key = function(key: PByte; pub_key: PBIGNUM; dh: PDH): Integer; cdecl;

type
  DH_meth_set_bn_mod_exp_bn_mod_exp = function(p1: PDH; p2: PBIGNUM; p3: PBIGNUM; p4: PBIGNUM; p5: PBIGNUM; p6: PBN_CTX; p7: PBN_MONT_CTX): Integer; cdecl;

type
  DH_meth_set_init_init = function(p1: PDH): Integer; cdecl;

type
  DH_meth_set_finish_finish = function(p1: PDH): Integer; cdecl;

type
  DH_meth_set_generate_params_generate_params = function(p1: PDH; p2: Integer; p3: Integer; p4: PBN_GENCB): Integer; cdecl;

type
  DSA_generate_parameters_callback = procedure(p1: Integer; p2: Integer; p3: Pointer); cdecl;

type
  DSA_meth_set_sign_sign = function(p1: PByte; p2: Integer; p3: PDSA): PDSA_SIG_st; cdecl;

type
  DSA_meth_set_sign_setup_sign_setup = function(p1: PDSA; p2: PBN_CTX; p3: PPBIGNUM; p4: PPBIGNUM): Integer; cdecl;

type
  DSA_meth_set_verify_verify = function(p1: PByte; p2: Integer; p3: PDSA_SIG; p4: PDSA): Integer; cdecl;

type
  DSA_meth_set_mod_exp_mod_exp = function(p1: PDSA; p2: PBIGNUM; p3: PBIGNUM; p4: PBIGNUM; p5: PBIGNUM; p6: PBIGNUM; p7: PBIGNUM; p8: PBN_CTX; p9: PBN_MONT_CTX): Integer; cdecl;

type
  DSA_meth_set_bn_mod_exp_bn_mod_exp = function(p1: PDSA; p2: PBIGNUM; p3: PBIGNUM; p4: PBIGNUM; p5: PBIGNUM; p6: PBN_CTX; p7: PBN_MONT_CTX): Integer; cdecl;

type
  DSA_meth_set_init_init = function(p1: PDSA): Integer; cdecl;

type
  DSA_meth_set_finish_finish = function(p1: PDSA): Integer; cdecl;

type
  DSA_meth_set_paramgen_paramgen = function(p1: PDSA; p2: Integer; p3: PByte; p4: Integer; p5: PInteger; p6: PCardinal; p7: PBN_GENCB): Integer; cdecl;

type
  DSA_meth_set_keygen_keygen = function(p1: PDSA): Integer; cdecl;

type
  X509_LOOKUP_meth_set_new_item_new_item = function(ctx: PX509_LOOKUP): Integer; cdecl;

type
  X509_LOOKUP_meth_set_free_free_fn = procedure(ctx: PX509_LOOKUP); cdecl;

type
  X509_LOOKUP_meth_set_init_init = function(ctx: PX509_LOOKUP): Integer; cdecl;

type
  X509_LOOKUP_meth_set_shutdown_shutdown = function(ctx: PX509_LOOKUP): Integer; cdecl;

type
  X509_CRL_METHOD_new_crl_init = function(crl: PX509_CRL): Integer; cdecl;

type
  X509_CRL_METHOD_new_crl_free = function(crl: PX509_CRL): Integer; cdecl;

type
  X509_CRL_METHOD_new_crl_lookup = function(crl: PX509_CRL; ret: PPX509_REVOKED; ser: PASN1_INTEGER; issuer: PX509_NAME): Integer; cdecl;

type
  X509_CRL_METHOD_new_crl_verify = function(crl: PX509_CRL; pk: PEVP_PKEY): Integer; cdecl;

type
  X509_TRUST_set_default_trust = function(p1: Integer; p2: PX509; p3: Integer): Integer; cdecl;

type
  X509_TRUST_add_ck = function(p1: PX509_TRUST; p2: PX509; p3: Integer): Integer; cdecl;

type
  CONF_parse_list_list_cb = function(elem: PUTF8Char; len: Integer; usr: Pointer): Integer; cdecl;

type
  X509_PURPOSE_add_ck = function(p1: PX509_PURPOSE; p2: PX509; p3: Integer): Integer; cdecl;

type
  UI_ctrl_f = procedure(); cdecl;

type
  UI_method_set_opener_opener = function(ui: PUI): Integer; cdecl;

type
  UI_method_set_writer_writer = function(ui: PUI; uis: PUI_STRING): Integer; cdecl;

type
  UI_method_set_flusher_flusher = function(ui: PUI): Integer; cdecl;

type
  UI_method_set_reader_reader = function(ui: PUI; uis: PUI_STRING): Integer; cdecl;

type
  UI_method_set_closer_closer = function(ui: PUI): Integer; cdecl;

type
  UI_method_set_data_duplicator_duplicator = function(ui: PUI; ui_data: Pointer): Pointer; cdecl;

type
  UI_method_set_data_duplicator_destructor = procedure(ui: PUI; ui_data: Pointer); cdecl;

type
  UI_method_set_prompt_constructor_prompt_constructor = function(ui: PUI; object_desc: PUTF8Char; object_name: PUTF8Char): PUTF8Char; cdecl;

type
  ERR_print_errors_cb_cb = function(str: PUTF8Char; len: NativeUInt; u: Pointer): Integer; cdecl;

type
  ENGINE_ctrl_f = procedure(); cdecl;

type
  ENGINE_ctrl_cmd_f = procedure(); cdecl;

type
  OSSL_STORE_do_all_loaders_do_function = procedure(loader: POSSL_STORE_LOADER; do_arg: Pointer); cdecl;

type
  TXT_DB_create_index_qual = function(p1: POPENSSL_STRING): Integer; cdecl;

type
  TOSSLImports = record
      F: PPointer;   // function pointer
      N: PAnsiChar;  // export name
      MI: Cardinal;  // minimum OpenSSL version
      MX: Cardinal;  // maximum OpenSSL version
  end;

{ Crypto Library }
const
  AES_options : function() : PUTF8Char; cdecl = nil;
  AES_set_encrypt_key : function(userKey: PByte; bits: Integer; key: PAES_KEY): Integer; cdecl = nil;
  AES_set_decrypt_key : function(userKey: PByte; bits: Integer; key: PAES_KEY): Integer; cdecl = nil;
  AES_encrypt : procedure(vin: PByte; vout: PByte; key: PAES_KEY); cdecl = nil;
  AES_decrypt : procedure(vin: PByte; vout: PByte; key: PAES_KEY); cdecl = nil;
  AES_ecb_encrypt : procedure(vin: PByte; vout: PByte; key: PAES_KEY; enc: Integer); cdecl = nil;
  AES_cbc_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; ivec: PByte; enc: Integer); cdecl = nil;
  AES_cfb128_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  AES_cfb1_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  AES_cfb8_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  AES_ofb128_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; ivec: PByte; num: PInteger); cdecl = nil;
  AES_ige_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; ivec: PByte; enc: Integer); cdecl = nil;
  AES_bi_ige_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PAES_KEY; key2: PAES_KEY; ivec: PByte; enc: Integer); cdecl = nil;
  AES_wrap_key : function(key: PAES_KEY; iv: PByte; vout: PByte; vin: PByte; inlen: Cardinal): Integer; cdecl = nil;
  AES_unwrap_key : function(key: PAES_KEY; iv: PByte; vout: PByte; vin: PByte; inlen: Cardinal): Integer; cdecl = nil;
  OPENSSL_sk_num : function(p1: POPENSSL_STACK): Integer; cdecl = nil;
  OPENSSL_sk_value : function(p1: POPENSSL_STACK; p2: Integer): Pointer; cdecl = nil;
  OPENSSL_sk_set : function(st: POPENSSL_STACK; i: Integer; data: Pointer): Pointer; cdecl = nil;
  OPENSSL_sk_new : function(cmp: OPENSSL_sk_compfunc): POPENSSL_STACK; cdecl = nil;
  OPENSSL_sk_new_null : function(): POPENSSL_STACK; cdecl = nil;
  OPENSSL_sk_new_reserve : function(c: OPENSSL_sk_compfunc; n: Integer): POPENSSL_STACK; cdecl = nil;
  OPENSSL_sk_reserve : function(st: POPENSSL_STACK; n: Integer): Integer; cdecl = nil;
  OPENSSL_sk_free : procedure(p1: POPENSSL_STACK); cdecl = nil;
  OPENSSL_sk_pop_free : procedure(st: POPENSSL_STACK; func: OPENSSL_sk_pop_free_func); cdecl = nil;
  OPENSSL_sk_deep_copy : function(p1: POPENSSL_STACK; c: OPENSSL_sk_copyfunc; f: OPENSSL_sk_freefunc): POPENSSL_STACK; cdecl = nil;
  OPENSSL_sk_insert : function(sk: POPENSSL_STACK; data: Pointer; where: Integer): Integer; cdecl = nil;
  OPENSSL_sk_delete : function(st: POPENSSL_STACK; loc: Integer): Pointer; cdecl = nil;
  OPENSSL_sk_delete_ptr : function(st: POPENSSL_STACK; p: Pointer): Pointer; cdecl = nil;
  OPENSSL_sk_find : function(st: POPENSSL_STACK; data: Pointer): Integer; cdecl = nil;
  OPENSSL_sk_find_ex : function(st: POPENSSL_STACK; data: Pointer): Integer; cdecl = nil;
  OPENSSL_sk_push : function(st: POPENSSL_STACK; data: Pointer): Integer; cdecl = nil;
  OPENSSL_sk_unshift : function(st: POPENSSL_STACK; data: Pointer): Integer; cdecl = nil;
  OPENSSL_sk_shift : function(st: POPENSSL_STACK): Pointer; cdecl = nil;
  OPENSSL_sk_pop : function(st: POPENSSL_STACK): Pointer; cdecl = nil;
  OPENSSL_sk_zero : procedure(st: POPENSSL_STACK); cdecl = nil;
  OPENSSL_sk_set_cmp_func : function(sk: POPENSSL_STACK; cmp: OPENSSL_sk_compfunc): OPENSSL_sk_compfunc; cdecl = nil;
  OPENSSL_sk_dup : function(st: POPENSSL_STACK): POPENSSL_STACK; cdecl = nil;
  OPENSSL_sk_sort : procedure(st: POPENSSL_STACK); cdecl = nil;
  OPENSSL_sk_is_sorted : function(st: POPENSSL_STACK): Integer; cdecl = nil;
  ERR_load_CRYPTO_strings : function(): Integer; cdecl = nil;
  CRYPTO_THREAD_lock_new : function(): PCRYPTO_RWLOCK; cdecl = nil;
  CRYPTO_THREAD_read_lock : function(lock: PCRYPTO_RWLOCK): Integer; cdecl = nil;
  CRYPTO_THREAD_write_lock : function(lock: PCRYPTO_RWLOCK): Integer; cdecl = nil;
  CRYPTO_THREAD_unlock : function(lock: PCRYPTO_RWLOCK): Integer; cdecl = nil;
  CRYPTO_THREAD_lock_free : procedure(lock: PCRYPTO_RWLOCK); cdecl = nil;
  CRYPTO_atomic_add : function(val: PInteger; amount: Integer; ret: PInteger; lock: PCRYPTO_RWLOCK): Integer; cdecl = nil;
  CRYPTO_mem_ctrl : function(mode: Integer): Integer; cdecl = nil;
  OPENSSL_strlcpy : function(dst: PUTF8Char; src: PUTF8Char; siz: NativeUInt): NativeUInt; cdecl = nil;
  OPENSSL_strlcat : function(dst: PUTF8Char; src: PUTF8Char; siz: NativeUInt): NativeUInt; cdecl = nil;
  OPENSSL_strnlen : function(str: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl = nil;
  OPENSSL_buf2hexstr : function(buffer: PByte; len: Integer): PUTF8Char; cdecl = nil;
  OPENSSL_hexstr2buf : function(str: PUTF8Char; len: PInteger): PByte; cdecl = nil;
  OPENSSL_hexchar2int : function(c: Byte): Integer; cdecl = nil;
  OpenSSL_version_num : function(): Cardinal; cdecl = nil;
  SSLeay : function(): Cardinal; cdecl = nil;
  OpenSSL_version : function(vtype: Integer): PUTF8Char; cdecl = nil;
  SSLeay_version : function(vtype: Integer): PUTF8Char; cdecl = nil;
  OPENSSL_issetugid : function(): Integer; cdecl = nil;
  CRYPTO_get_ex_new_index : function(class_index: Integer; argl: Integer; argp: Pointer; new_func: PCRYPTO_EX_new; dup_func: PCRYPTO_EX_dup; free_func: PCRYPTO_EX_free): Integer; cdecl = nil;
  CRYPTO_free_ex_index : function(class_index: Integer; idx: Integer): Integer; cdecl = nil;
  CRYPTO_new_ex_data : function(class_index: Integer; obj: Pointer; ad: PCRYPTO_EX_DATA): Integer; cdecl = nil;
  CRYPTO_dup_ex_data : function(class_index: Integer; vto: PCRYPTO_EX_DATA; from: PCRYPTO_EX_DATA): Integer; cdecl = nil;
  CRYPTO_free_ex_data : procedure(class_index: Integer; obj: Pointer; ad: PCRYPTO_EX_DATA); cdecl = nil;
  CRYPTO_set_ex_data : function(ad: PCRYPTO_EX_DATA; idx: Integer; val: Pointer): Integer; cdecl = nil;
  CRYPTO_get_ex_data : function(ad: PCRYPTO_EX_DATA; idx: Integer): Pointer; cdecl = nil;
  CRYPTO_set_mem_functions : function(m: CRYPTO_set_mem_functions_m; r: CRYPTO_set_mem_functions_r; f: CRYPTO_set_mem_functions_f): Integer; cdecl = nil;
  CRYPTO_set_mem_debug : function(flag: Integer): Integer; cdecl = nil;
  CRYPTO_get_mem_functions : procedure(m: Integer; r: Integer; f: Integer); cdecl = nil;
  CRYPTO_malloc : function(num: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_zalloc : function(num: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_memdup : function(str: Pointer; siz: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_strdup : function(str: PUTF8Char; vfile: PUTF8Char; line: Integer): PUTF8Char; cdecl = nil;
  CRYPTO_strndup : function(str: PUTF8Char; s: NativeUInt; vfile: PUTF8Char; line: Integer): PUTF8Char; cdecl = nil;
  CRYPTO_free : procedure(ptr: Pointer; vfile: PUTF8Char; line: Integer); cdecl = nil;
  CRYPTO_clear_free : procedure(ptr: Pointer; num: NativeUInt; vfile: PUTF8Char; line: Integer); cdecl = nil;
  CRYPTO_realloc : function(addr: Pointer; num: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_clear_realloc : function(addr: Pointer; old_num: NativeUInt; num: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_secure_malloc_init : function(sz: NativeUInt; minsize: Integer): Integer; cdecl = nil;
  CRYPTO_secure_malloc_done : function(): Integer; cdecl = nil;
  CRYPTO_secure_malloc : function(num: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_secure_zalloc : function(num: NativeUInt; vfile: PUTF8Char; line: Integer): Pointer; cdecl = nil;
  CRYPTO_secure_free : procedure(ptr: Pointer; vfile: PUTF8Char; line: Integer); cdecl = nil;
  CRYPTO_secure_clear_free : procedure(ptr: Pointer; num: NativeUInt; vfile: PUTF8Char; line: Integer); cdecl = nil;
  CRYPTO_secure_allocated : function(ptr: Pointer): Integer; cdecl = nil;
  CRYPTO_secure_malloc_initialized : function(): Integer; cdecl = nil;
  CRYPTO_secure_actual_size : function(ptr: Pointer): NativeUInt; cdecl = nil;
  CRYPTO_secure_used : function(): NativeUInt; cdecl = nil;
  OPENSSL_cleanse : procedure(ptr: Pointer; len: NativeUInt); cdecl = nil;
  OPENSSL_die : procedure(assertion: PUTF8Char; vfile: PUTF8Char; line: Integer); cdecl = nil;
  OPENSSL_isservice : function(): Integer; cdecl = nil;
  FIPS_mode : function(): Integer; cdecl = nil;
  FIPS_mode_set : function(r: Integer): Integer; cdecl = nil;
  OPENSSL_init : procedure(); cdecl = nil;
  OPENSSL_gmtime : function(timer: PLongint; result: Ptm): Ptm; cdecl = nil;
  OPENSSL_gmtime_adj : function(tm: Ptm; offset_day: Integer; offset_sec: Integer): Integer; cdecl = nil;
  OPENSSL_gmtime_diff : function(pday: PInteger; psec: PInteger; from: Ptm; vto: Ptm): Integer; cdecl = nil;
  CRYPTO_memcmp : function(in_a: Pointer; in_b: Pointer; len: NativeUInt): Integer; cdecl = nil;
  OPENSSL_cleanup : procedure(); cdecl = nil;
  OPENSSL_init_crypto : function(opts: UInt64; settings: POPENSSL_INIT_SETTINGS): Integer; cdecl = nil;
  OPENSSL_atexit : function(handler: OPENSSL_atexit_handler): Integer; cdecl = nil;
  OPENSSL_thread_stop : procedure(); cdecl = nil;
  OPENSSL_INIT_new : function(): POPENSSL_INIT_SETTINGS; cdecl = nil;
  OPENSSL_INIT_set_config_filename : function(settings: POPENSSL_INIT_SETTINGS; config_filename: PUTF8Char): Integer; cdecl = nil;
  OPENSSL_INIT_set_config_file_flags : procedure(settings: POPENSSL_INIT_SETTINGS; flags: Cardinal); cdecl = nil;
  OPENSSL_INIT_set_config_appname : function(settings: POPENSSL_INIT_SETTINGS; config_appname: PUTF8Char): Integer; cdecl = nil;
  OPENSSL_INIT_free : procedure(settings: POPENSSL_INIT_SETTINGS); cdecl = nil;
  CRYPTO_THREAD_run_once : function(once: PCRYPTO_ONCE; init: CRYPTO_THREAD_run_once_init): Integer; cdecl = nil;
  CRYPTO_THREAD_init_local : function(key: PCRYPTO_THREAD_LOCAL; cleanup: CRYPTO_THREAD_init_local_cleanup): Integer; cdecl = nil;
  CRYPTO_THREAD_get_local : function(key: PCRYPTO_THREAD_LOCAL): Pointer; cdecl = nil;
  CRYPTO_THREAD_set_local : function(key: PCRYPTO_THREAD_LOCAL; val: Pointer): Integer; cdecl = nil;
  CRYPTO_THREAD_cleanup_local : function(key: PCRYPTO_THREAD_LOCAL): Integer; cdecl = nil;
  CRYPTO_THREAD_get_current_id : function(): CRYPTO_THREAD_ID; cdecl = nil;
  CRYPTO_THREAD_compare_id : function(a: CRYPTO_THREAD_ID; b: CRYPTO_THREAD_ID): Integer; cdecl = nil;
  ERR_load_BIO_strings : function(): Integer; cdecl = nil;
  BIO_get_new_index : function(): Integer; cdecl = nil;
  BIO_set_flags : procedure(b: PBIO; flags: Integer); cdecl = nil;
  BIO_test_flags : function(b: PBIO; flags: Integer): Integer; cdecl = nil;
  BIO_clear_flags : procedure(b: PBIO; flags: Integer); cdecl = nil;
  BIO_get_callback : function(b: PBIO): BIO_callback_fn; cdecl = nil;
  BIO_set_callback : procedure(b: PBIO; callback: BIO_callback_fn); cdecl = nil;
  BIO_get_callback_ex : function(b: PBIO): BIO_callback_fn_ex; cdecl = nil;
  BIO_set_callback_ex : procedure(b: PBIO; callback: BIO_callback_fn_ex); cdecl = nil;
  BIO_get_callback_arg : function(b: PBIO): PUTF8Char; cdecl = nil;
  BIO_set_callback_arg : procedure(b: PBIO; arg: PUTF8Char); cdecl = nil;
  BIO_method_name : function(b: PBIO): PUTF8Char; cdecl = nil;
  BIO_method_type : function(b: PBIO): Integer; cdecl = nil;
  BIO_ctrl_pending : function(b: PBIO): NativeUInt; cdecl = nil;
  BIO_ctrl_wpending : function(b: PBIO): NativeUInt; cdecl = nil;
  BIO_ctrl_get_write_guarantee : function(b: PBIO): NativeUInt; cdecl = nil;
  BIO_ctrl_get_read_request : function(b: PBIO): NativeUInt; cdecl = nil;
  BIO_ctrl_reset_read_request : function(b: PBIO): Integer; cdecl = nil;
  BIO_set_ex_data : function(bio: PBIO; idx: Integer; data: Pointer): Integer; cdecl = nil;
  BIO_get_ex_data : function(bio: PBIO; idx: Integer): Pointer; cdecl = nil;
  BIO_number_read : function(bio: PBIO): UInt64; cdecl = nil;
  BIO_number_written : function(bio: PBIO): UInt64; cdecl = nil;
  BIO_asn1_set_prefix : function(b: PBIO; prefix: Pasn1_ps_func; prefix_free: Pasn1_ps_func): Integer; cdecl = nil;
  BIO_asn1_get_prefix : function(b: PBIO; pprefix: PPasn1_ps_func; pprefix_free: PPasn1_ps_func): Integer; cdecl = nil;
  BIO_asn1_set_suffix : function(b: PBIO; suffix: Pasn1_ps_func; suffix_free: Pasn1_ps_func): Integer; cdecl = nil;
  BIO_asn1_get_suffix : function(b: PBIO; psuffix: PPasn1_ps_func; psuffix_free: PPasn1_ps_func): Integer; cdecl = nil;
  BIO_s_file : function(): PBIO_METHOD; cdecl = nil;
  BIO_new_file : function(filename: PUTF8Char; mode: PUTF8Char): PBIO; cdecl = nil;
  BIO_new_fp : function(stream: PPointer; close_flag: Integer): PBIO; cdecl = nil;
  BIO_new : function(vtype: PBIO_METHOD): PBIO; cdecl = nil;
  BIO_free : function(a: PBIO): Integer; cdecl = nil;
  BIO_set_data : procedure(a: PBIO; ptr: Pointer); cdecl = nil;
  BIO_get_data : function(a: PBIO): Pointer; cdecl = nil;
  BIO_set_init : procedure(a: PBIO; init: Integer); cdecl = nil;
  BIO_get_init : function(a: PBIO): Integer; cdecl = nil;
  BIO_set_shutdown : procedure(a: PBIO; shut: Integer); cdecl = nil;
  BIO_get_shutdown : function(a: PBIO): Integer; cdecl = nil;
  BIO_vfree : procedure(a: PBIO); cdecl = nil;
  BIO_up_ref : function(a: PBIO): Integer; cdecl = nil;
  BIO_read : function(b: PBIO; data: Pointer; dlen: Integer): Integer; cdecl = nil;
  BIO_read_ex : function(b: PBIO; data: Pointer; dlen: NativeUInt; readbytes: PNativeUInt): Integer; cdecl = nil;
  BIO_gets : function(bp: PBIO; buf: PUTF8Char; size: Integer): Integer; cdecl = nil;
  BIO_write : function(b: PBIO; data: Pointer; dlen: Integer): Integer; cdecl = nil;
  BIO_write_ex : function(b: PBIO; data: Pointer; dlen: NativeUInt; written: PNativeUInt): Integer; cdecl = nil;
  BIO_puts : function(bp: PBIO; buf: PUTF8Char): Integer; cdecl = nil;
  BIO_indent : function(b: PBIO; indent: Integer; max: Integer): Integer; cdecl = nil;
  BIO_ctrl : function(bp: PBIO; cmd: Integer; larg: Integer; parg: Pointer): Integer; cdecl = nil;
  BIO_callback_ctrl : function(b: PBIO; cmd: Integer; fp: PBIO_info_cb): Integer; cdecl = nil;
  BIO_ptr_ctrl : function(bp: PBIO; cmd: Integer; larg: Integer): Pointer; cdecl = nil;
  BIO_int_ctrl : function(bp: PBIO; cmd: Integer; larg: Integer; iarg: Integer): Integer; cdecl = nil;
  BIO_push : function(b: PBIO; append: PBIO): PBIO; cdecl = nil;
  BIO_pop : function(b: PBIO): PBIO; cdecl = nil;
  BIO_free_all : procedure(a: PBIO); cdecl = nil;
  BIO_find_type : function(b: PBIO; bio_type: Integer): PBIO; cdecl = nil;
  BIO_next : function(b: PBIO): PBIO; cdecl = nil;
  BIO_set_next : procedure(b: PBIO; next: PBIO); cdecl = nil;
  BIO_get_retry_BIO : function(bio: PBIO; reason: PInteger): PBIO; cdecl = nil;
  BIO_get_retry_reason : function(bio: PBIO): Integer; cdecl = nil;
  BIO_set_retry_reason : procedure(bio: PBIO; reason: Integer); cdecl = nil;
  BIO_dup_chain : function(vin: PBIO): PBIO; cdecl = nil;
  BIO_nread0 : function(bio: PBIO; buf: PPUTF8Char): Integer; cdecl = nil;
  BIO_nread : function(bio: PBIO; buf: PPUTF8Char; num: Integer): Integer; cdecl = nil;
  BIO_nwrite0 : function(bio: PBIO; buf: PPUTF8Char): Integer; cdecl = nil;
  BIO_nwrite : function(bio: PBIO; buf: PPUTF8Char; num: Integer): Integer; cdecl = nil;
  BIO_debug_callback : function(bio: PBIO; cmd: Integer; argp: PUTF8Char; argi: Integer; argl: Integer; ret: Integer): Integer; cdecl = nil;
  BIO_s_mem : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_secmem : function(): PBIO_METHOD; cdecl = nil;
  BIO_new_mem_buf : function(buf: Pointer; len: Integer): PBIO; cdecl = nil;
  BIO_s_socket : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_connect : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_accept : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_fd : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_log : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_bio : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_null : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_null : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_buffer : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_linebuffer : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_nbio_test : function(): PBIO_METHOD; cdecl = nil;
  BIO_s_datagram : function(): PBIO_METHOD; cdecl = nil;
  BIO_dgram_non_fatal_error : function(error: Integer): Integer; cdecl = nil;
  BIO_new_dgram : function(fd: Integer; close_flag: Integer): PBIO; cdecl = nil;
  BIO_sock_should_retry : function(i: Integer): Integer; cdecl = nil;
  BIO_sock_non_fatal_error : function(error: Integer): Integer; cdecl = nil;
  BIO_fd_should_retry : function(i: Integer): Integer; cdecl = nil;
  BIO_fd_non_fatal_error : function(error: Integer): Integer; cdecl = nil;
  BIO_dump_cb : function(cb: BIO_dump_cb_cb; u: Pointer; s: PUTF8Char; len: Integer): Integer; cdecl = nil;
  BIO_dump_indent_cb : function(cb: BIO_dump_indent_cb_cb; u: Pointer; s: PUTF8Char; len: Integer; indent: Integer): Integer; cdecl = nil;
  BIO_dump : function(b: PBIO; bytes: PUTF8Char; len: Integer): Integer; cdecl = nil;
  BIO_dump_indent : function(b: PBIO; bytes: PUTF8Char; len: Integer; indent: Integer): Integer; cdecl = nil;
  BIO_dump_fp : function(fp: PPointer; s: PUTF8Char; len: Integer): Integer; cdecl = nil;
  BIO_dump_indent_fp : function(fp: PPointer; s: PUTF8Char; len: Integer; indent: Integer): Integer; cdecl = nil;
  BIO_hex_string : function(vout: PBIO; indent: Integer; width: Integer; data: PByte; datalen: Integer): Integer; cdecl = nil;
  BIO_ADDR_new : function(): PBIO_ADDR; cdecl = nil;
  BIO_ADDR_rawmake : function(ap: PBIO_ADDR; family: Integer; where: Pointer; wherelen: NativeUInt; port: Word): Integer; cdecl = nil;
  BIO_ADDR_free : procedure(p1: PBIO_ADDR); cdecl = nil;
  BIO_ADDR_clear : procedure(ap: PBIO_ADDR); cdecl = nil;
  BIO_ADDR_family : function(ap: PBIO_ADDR): Integer; cdecl = nil;
  BIO_ADDR_rawaddress : function(ap: PBIO_ADDR; p: Pointer; l: PNativeUInt): Integer; cdecl = nil;
  BIO_ADDR_rawport : function(ap: PBIO_ADDR): Word; cdecl = nil;
  BIO_ADDR_hostname_string : function(ap: PBIO_ADDR; numeric: Integer): PUTF8Char; cdecl = nil;
  BIO_ADDR_service_string : function(ap: PBIO_ADDR; numeric: Integer): PUTF8Char; cdecl = nil;
  BIO_ADDR_path_string : function(ap: PBIO_ADDR): PUTF8Char; cdecl = nil;
  BIO_ADDRINFO_next : function(bai: PBIO_ADDRINFO): PBIO_ADDRINFO; cdecl = nil;
  BIO_ADDRINFO_family : function(bai: PBIO_ADDRINFO): Integer; cdecl = nil;
  BIO_ADDRINFO_socktype : function(bai: PBIO_ADDRINFO): Integer; cdecl = nil;
  BIO_ADDRINFO_protocol : function(bai: PBIO_ADDRINFO): Integer; cdecl = nil;
  BIO_ADDRINFO_address : function(bai: PBIO_ADDRINFO): PBIO_ADDR; cdecl = nil;
  BIO_ADDRINFO_free : procedure(bai: PBIO_ADDRINFO); cdecl = nil;
  BIO_parse_hostserv : function(hostserv: PUTF8Char; host: PPUTF8Char; service: PPUTF8Char; hostserv_prio: BIO_hostserv_priorities): Integer; cdecl = nil;
  BIO_lookup : function(host: PUTF8Char; service: PUTF8Char; lookup_type: BIO_lookup_type; family: Integer; socktype: Integer; res: PPBIO_ADDRINFO): Integer; cdecl = nil;
  BIO_lookup_ex : function(host: PUTF8Char; service: PUTF8Char; lookup_type: Integer; family: Integer; socktype: Integer; protocol: Integer; res: PPBIO_ADDRINFO): Integer; cdecl = nil;
  BIO_sock_error : function(sock: Integer): Integer; cdecl = nil;
  BIO_socket_ioctl : function(fd: Integer; vtype: Integer; arg: Pointer): Integer; cdecl = nil;
  BIO_socket_nbio : function(fd: Integer; mode: Integer): Integer; cdecl = nil;
  BIO_sock_init : function(): Integer; cdecl = nil;
  BIO_set_tcp_ndelay : function(sock: Integer; turn_on: Integer): Integer; cdecl = nil;
  BIO_gethostbyname : function(name: PUTF8Char): Phostent; cdecl = nil;
  BIO_get_port : function(str: PUTF8Char; port_ptr: PWord): Integer; cdecl = nil;
  BIO_get_host_ip : function(str: PUTF8Char; ip: PByte): Integer; cdecl = nil;
  BIO_get_accept_socket : function(host_port: PUTF8Char; mode: Integer): Integer; cdecl = nil;
  BIO_accept : function(sock: Integer; ip_port: PPUTF8Char): Integer; cdecl = nil;
  BIO_sock_info : function(sock: Integer; vtype: BIO_sock_info_type; info: PBIO_sock_info_u): Integer; cdecl = nil;
  BIO_socket : function(domain: Integer; socktype: Integer; protocol: Integer; options: Integer): Integer; cdecl = nil;
  BIO_connect : function(sock: Integer; addr: PBIO_ADDR; options: Integer): Integer; cdecl = nil;
  BIO_bind : function(sock: Integer; addr: PBIO_ADDR; options: Integer): Integer; cdecl = nil;
  BIO_listen : function(sock: Integer; addr: PBIO_ADDR; options: Integer): Integer; cdecl = nil;
  BIO_accept_ex : function(accept_sock: Integer; addr: PBIO_ADDR; options: Integer): Integer; cdecl = nil;
  BIO_closesocket : function(sock: Integer): Integer; cdecl = nil;
  BIO_new_socket : function(sock: Integer; close_flag: Integer): PBIO; cdecl = nil;
  BIO_new_connect : function(host_port: PUTF8Char): PBIO; cdecl = nil;
  BIO_new_accept : function(host_port: PUTF8Char): PBIO; cdecl = nil;
  BIO_new_fd : function(fd: Integer; close_flag: Integer): PBIO; cdecl = nil;
  BIO_new_bio_pair : function(bio1: PPBIO; writebuf1: NativeUInt; bio2: PPBIO; writebuf2: NativeUInt): Integer; cdecl = nil;
  BIO_copy_next_retry : procedure(b: PBIO); cdecl = nil;
  BIO_printf : function(bio: PBIO; format: PUTF8Char): Integer varargs; cdecl = nil;
  BIO_vprintf : function(bio: PBIO; format: PUTF8Char; args: Pointer): Integer; cdecl = nil;
  BIO_snprintf : function(buf: PUTF8Char; n: NativeUInt; format: PUTF8Char): Integer varargs; cdecl = nil;
  BIO_vsnprintf : function(buf: PUTF8Char; n: NativeUInt; format: PUTF8Char; args: Pointer): Integer; cdecl = nil;
  BIO_meth_new : function(vtype: Integer; name: PUTF8Char): PBIO_METHOD; cdecl = nil;
  BIO_meth_free : procedure(biom: PBIO_METHOD); cdecl = nil;
//  BIO_meth_get_write : function(p1: PBIOp2: PUTF8Charp3: Integerbiom: PBIO_METHOD): Integer; cdecl = nil;
//  BIO_meth_get_write_ex : function(p1: PBIOp2: PUTF8Charp3: NativeUIntp4: PNativeUIntbiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_write : function(biom: PBIO_METHOD; write: BIO_meth_set_write_write): Integer; cdecl = nil;
  BIO_meth_set_write_ex : function(biom: PBIO_METHOD; bwrite: BIO_meth_set_write_ex_bwrite): Integer; cdecl = nil;
  BIO_meth_set_read : function(biom: PBIO_METHOD; read: BIO_meth_set_read_read): Integer; cdecl = nil;
//  BIO_meth_get_read : function(p1: PBIOp2: PUTF8Charp3: Integerbiom: PBIO_METHOD): Integer; cdecl = nil;
//  BIO_meth_get_read_ex : function(p1: PBIOp2: PUTF8Charp3: NativeUIntp4: PNativeUIntbiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_read_ex : function(biom: PBIO_METHOD; bread: BIO_meth_set_read_ex_bread): Integer; cdecl = nil;
//  BIO_meth_get_puts : function(p1: PBIOp2: PUTF8Charbiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_puts : function(biom: PBIO_METHOD; puts: BIO_meth_set_puts_puts): Integer; cdecl = nil;
//  BIO_meth_get_gets : function(p1: PBIOp2: PUTF8Charp3: Integerbiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_gets : function(biom: PBIO_METHOD; gets: BIO_meth_set_gets_gets): Integer; cdecl = nil;
//  BIO_meth_get_ctrl : function(p1: PBIOp2: Integerp3: Integerp4: Pointerbiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_ctrl : function(biom: PBIO_METHOD; ctrl: BIO_meth_set_ctrl_ctrl): Integer; cdecl = nil;
//  BIO_meth_get_create : function(p1: PBIObion: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_create : function(biom: PBIO_METHOD; create: BIO_meth_set_create_create): Integer; cdecl = nil;
//  BIO_meth_get_destroy : function(p1: PBIObiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_destroy : function(biom: PBIO_METHOD; destroy: BIO_meth_set_destroy_destroy): Integer; cdecl = nil;
//  BIO_meth_get_callback_ctrl : function(p1: PBIOp2: Integerp3: PBIO_info_cbbiom: PBIO_METHOD): Integer; cdecl = nil;
  BIO_meth_set_callback_ctrl : function(biom: PBIO_METHOD; callback_ctrl: BIO_meth_set_callback_ctrl_callback_ctrl): Integer; cdecl = nil;
  ERR_load_ASN1_strings : function(): Integer; cdecl = nil;
  ERR_load_BN_strings : function(): Integer; cdecl = nil;
  BN_set_flags : procedure(b: PBIGNUM; n: Integer); cdecl = nil;
  BN_get_flags : function(b: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_with_flags : procedure(dest: PBIGNUM; b: PBIGNUM; flags: Integer); cdecl = nil;
  BN_GENCB_call : function(cb: PBN_GENCB; a: Integer; b: Integer): Integer; cdecl = nil;
  BN_GENCB_new : function(): PBN_GENCB; cdecl = nil;
  BN_GENCB_free : procedure(cb: PBN_GENCB); cdecl = nil;
  BN_GENCB_set_old : procedure(gencb: PBN_GENCB; callback: BN_GENCB_set_old_callback; cb_arg: Pointer); cdecl = nil;
  BN_GENCB_set : procedure(gencb: PBN_GENCB; callback: BN_GENCB_set_callback; cb_arg: Pointer); cdecl = nil;
  BN_GENCB_get_arg : function(cb: PBN_GENCB): Pointer; cdecl = nil;
  BN_abs_is_word : function(a: PBIGNUM; w: Cardinal): Integer; cdecl = nil;
  BN_is_zero : function(a: PBIGNUM): Integer; cdecl = nil;
  BN_is_one : function(a: PBIGNUM): Integer; cdecl = nil;
  BN_is_word : function(a: PBIGNUM; w: Cardinal): Integer; cdecl = nil;
  BN_is_odd : function(a: PBIGNUM): Integer; cdecl = nil;
  BN_zero_ex : procedure(a: PBIGNUM); cdecl = nil;
  BN_value_one : function(): PBIGNUM; cdecl = nil;
  BN_options : function(): PUTF8Char; cdecl = nil;
  BN_CTX_new : function(): PBN_CTX; cdecl = nil;
  BN_CTX_secure_new : function(): PBN_CTX; cdecl = nil;
  BN_CTX_free : procedure(c: PBN_CTX); cdecl = nil;
  BN_CTX_start : procedure(ctx: PBN_CTX); cdecl = nil;
  BN_CTX_get : function(ctx: PBN_CTX): PBIGNUM; cdecl = nil;
  BN_CTX_end : procedure(ctx: PBN_CTX); cdecl = nil;
  BN_rand : function(rnd: PBIGNUM; bits: Integer; top: Integer; bottom: Integer): Integer; cdecl = nil;
  BN_priv_rand : function(rnd: PBIGNUM; bits: Integer; top: Integer; bottom: Integer): Integer; cdecl = nil;
  BN_rand_range : function(rnd: PBIGNUM; range: PBIGNUM): Integer; cdecl = nil;
  BN_priv_rand_range : function(rnd: PBIGNUM; range: PBIGNUM): Integer; cdecl = nil;
  BN_pseudo_rand : function(rnd: PBIGNUM; bits: Integer; top: Integer; bottom: Integer): Integer; cdecl = nil;
  BN_pseudo_rand_range : function(rnd: PBIGNUM; range: PBIGNUM): Integer; cdecl = nil;
  BN_num_bits : function(a: PBIGNUM): Integer; cdecl = nil;
  BN_num_bits_word : function(l: Cardinal): Integer; cdecl = nil;
  BN_security_bits : function(L: Integer; N: Integer): Integer; cdecl = nil;
  BN_new : function(): PBIGNUM; cdecl = nil;
  BN_secure_new : function(): PBIGNUM; cdecl = nil;
  BN_clear_free : procedure(a: PBIGNUM); cdecl = nil;
  BN_copy : function(a: PBIGNUM; b: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_swap : procedure(a: PBIGNUM; b: PBIGNUM); cdecl = nil;
  BN_bin2bn : function(s: Pointer; len: Integer; ret: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_bn2bin : function(a: PBIGNUM; vto: Pointer): Integer; cdecl = nil;
  BN_bn2binpad : function(a: PBIGNUM; vto: Pointer; tolen: Integer): Integer; cdecl = nil;
  BN_lebin2bn : function(s: Pointer; len: Integer; ret: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_bn2lebinpad : function(a: PBIGNUM; vto: Pointer; tolen: Integer): Integer; cdecl = nil;
  BN_mpi2bn : function(s: Pointer; len: Integer; ret: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_bn2mpi : function(a: PBIGNUM; vto: Pointer): Integer; cdecl = nil;
  BN_sub : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_usub : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_uadd : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_add : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_mul : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_sqr : function(r: PBIGNUM; a: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_set_negative : procedure(b: PBIGNUM; n: Integer); cdecl = nil;
  BN_is_negative : function(b: PBIGNUM): Integer; cdecl = nil;
  BN_div : function(dv: PBIGNUM; rem: PBIGNUM; m: PBIGNUM; d: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_nnmod : function(r: PBIGNUM; m: PBIGNUM; d: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_add : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_add_quick : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; m: PBIGNUM): Integer; cdecl = nil;
  BN_mod_sub : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_sub_quick : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; m: PBIGNUM): Integer; cdecl = nil;
  BN_mod_mul : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_sqr : function(r: PBIGNUM; a: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_lshift1 : function(r: PBIGNUM; a: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_lshift1_quick : function(r: PBIGNUM; a: PBIGNUM; m: PBIGNUM): Integer; cdecl = nil;
  BN_mod_lshift : function(r: PBIGNUM; a: PBIGNUM; n: Integer; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_lshift_quick : function(r: PBIGNUM; a: PBIGNUM; n: Integer; m: PBIGNUM): Integer; cdecl = nil;
  BN_mod_word : function(a: PBIGNUM; w: Cardinal): Cardinal; cdecl = nil;
  BN_div_word : function(a: PBIGNUM; w: Cardinal): Cardinal; cdecl = nil;
  BN_mul_word : function(a: PBIGNUM; w: Cardinal): Integer; cdecl = nil;
  BN_add_word : function(a: PBIGNUM; w: Cardinal): Integer; cdecl = nil;
  BN_sub_word : function(a: PBIGNUM; w: Cardinal): Integer; cdecl = nil;
  BN_set_word : function(a: PBIGNUM; w: Cardinal): Integer; cdecl = nil;
  BN_get_word : function(a: PBIGNUM): Cardinal; cdecl = nil;
  BN_cmp : function(a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_free : procedure(a: PBIGNUM); cdecl = nil;
  BN_is_bit_set : function(a: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_lshift : function(r: PBIGNUM; a: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_lshift1 : function(r: PBIGNUM; a: PBIGNUM): Integer; cdecl = nil;
  BN_exp : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_exp : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_exp_mont : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; m_ctx: PBN_MONT_CTX): Integer; cdecl = nil;
  BN_mod_exp_mont_consttime : function(rr: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; in_mont: PBN_MONT_CTX): Integer; cdecl = nil;
  BN_mod_exp_mont_word : function(r: PBIGNUM; a: Cardinal; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; m_ctx: PBN_MONT_CTX): Integer; cdecl = nil;
  BN_mod_exp2_mont : function(r: PBIGNUM; a1: PBIGNUM; p1: PBIGNUM; a2: PBIGNUM; p2: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; m_ctx: PBN_MONT_CTX): Integer; cdecl = nil;
  BN_mod_exp_simple : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mask_bits : function(a: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_print_fp : function(fp: PPointer; a: PBIGNUM): Integer; cdecl = nil;
  BN_print : function(bio: PBIO; a: PBIGNUM): Integer; cdecl = nil;
  BN_reciprocal : function(r: PBIGNUM; m: PBIGNUM; len: Integer; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_rshift : function(r: PBIGNUM; a: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_rshift1 : function(r: PBIGNUM; a: PBIGNUM): Integer; cdecl = nil;
  BN_clear : procedure(a: PBIGNUM); cdecl = nil;
  BN_dup : function(a: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_ucmp : function(a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_set_bit : function(a: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_clear_bit : function(a: PBIGNUM; n: Integer): Integer; cdecl = nil;
  BN_bn2hex : function(a: PBIGNUM): PUTF8Char; cdecl = nil;
  BN_bn2dec : function(a: PBIGNUM): PUTF8Char; cdecl = nil;
  BN_hex2bn : function(a: PPBIGNUM; str: PUTF8Char): Integer; cdecl = nil;
  BN_dec2bn : function(a: PPBIGNUM; str: PUTF8Char): Integer; cdecl = nil;
  BN_asc2bn : function(a: PPBIGNUM; str: PUTF8Char): Integer; cdecl = nil;
  BN_gcd : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_kronecker : function(a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_inverse : function(ret: PBIGNUM; a: PBIGNUM; n: PBIGNUM; ctx: PBN_CTX): PBIGNUM; cdecl = nil;
  BN_mod_sqrt : function(ret: PBIGNUM; a: PBIGNUM; n: PBIGNUM; ctx: PBN_CTX): PBIGNUM; cdecl = nil;
  BN_consttime_swap : procedure(swap: Cardinal; a: PBIGNUM; b: PBIGNUM; nwords: Integer); cdecl = nil;
  BN_generate_prime : function(ret: PBIGNUM; bits: Integer; safe: Integer; add: PBIGNUM; rem: PBIGNUM; callback: BN_generate_prime_callback; cb_arg: Pointer): PBIGNUM; cdecl = nil;
  BN_is_prime : function(p: PBIGNUM; nchecks: Integer; callback: BN_is_prime_callback; ctx: PBN_CTX; cb_arg: Pointer): Integer; cdecl = nil;
  BN_is_prime_fasttest : function(p: PBIGNUM; nchecks: Integer; callback: BN_is_prime_fasttest_callback; ctx: PBN_CTX; cb_arg: Pointer; do_trial_division: Integer): Integer; cdecl = nil;
  BN_generate_prime_ex : function(ret: PBIGNUM; bits: Integer; safe: Integer; add: PBIGNUM; rem: PBIGNUM; cb: PBN_GENCB): Integer; cdecl = nil;
  BN_is_prime_ex : function(p: PBIGNUM; nchecks: Integer; ctx: PBN_CTX; cb: PBN_GENCB): Integer; cdecl = nil;
  BN_is_prime_fasttest_ex : function(p: PBIGNUM; nchecks: Integer; ctx: PBN_CTX; do_trial_division: Integer; cb: PBN_GENCB): Integer; cdecl = nil;
  BN_X931_generate_Xpq : function(Xp: PBIGNUM; Xq: PBIGNUM; nbits: Integer; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_X931_derive_prime_ex : function(p: PBIGNUM; p1: PBIGNUM; p2: PBIGNUM; Xp: PBIGNUM; Xp1: PBIGNUM; Xp2: PBIGNUM; e: PBIGNUM; ctx: PBN_CTX; cb: PBN_GENCB): Integer; cdecl = nil;
  BN_X931_generate_prime_ex : function(p: PBIGNUM; p1: PBIGNUM; p2: PBIGNUM; Xp1: PBIGNUM; Xp2: PBIGNUM; Xp: PBIGNUM; e: PBIGNUM; ctx: PBN_CTX; cb: PBN_GENCB): Integer; cdecl = nil;
  BN_MONT_CTX_new : function(): PBN_MONT_CTX; cdecl = nil;
  BN_mod_mul_montgomery : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; mont: PBN_MONT_CTX; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_to_montgomery : function(r: PBIGNUM; a: PBIGNUM; mont: PBN_MONT_CTX; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_from_montgomery : function(r: PBIGNUM; a: PBIGNUM; mont: PBN_MONT_CTX; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_MONT_CTX_free : procedure(mont: PBN_MONT_CTX); cdecl = nil;
  BN_MONT_CTX_set : function(mont: PBN_MONT_CTX; vmod: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_MONT_CTX_copy : function(vto: PBN_MONT_CTX; from: PBN_MONT_CTX): PBN_MONT_CTX; cdecl = nil;
  BN_MONT_CTX_set_locked : function(pmont: PPBN_MONT_CTX; lock: PCRYPTO_RWLOCK; vmod: PBIGNUM; ctx: PBN_CTX): PBN_MONT_CTX; cdecl = nil;
  BN_BLINDING_new : function(A: PBIGNUM; Ai: PBIGNUM; vmod: PBIGNUM): PBN_BLINDING; cdecl = nil;
  BN_BLINDING_free : procedure(b: PBN_BLINDING); cdecl = nil;
  BN_BLINDING_update : function(b: PBN_BLINDING; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_BLINDING_convert : function(n: PBIGNUM; b: PBN_BLINDING; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_BLINDING_invert : function(n: PBIGNUM; b: PBN_BLINDING; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_BLINDING_convert_ex : function(n: PBIGNUM; r: PBIGNUM; b: PBN_BLINDING; p4: PBN_CTX): Integer; cdecl = nil;
  BN_BLINDING_invert_ex : function(n: PBIGNUM; r: PBIGNUM; b: PBN_BLINDING; p4: PBN_CTX): Integer; cdecl = nil;
  BN_BLINDING_is_current_thread : function(b: PBN_BLINDING): Integer; cdecl = nil;
  BN_BLINDING_set_current_thread : procedure(b: PBN_BLINDING); cdecl = nil;
  BN_BLINDING_lock : function(b: PBN_BLINDING): Integer; cdecl = nil;
  BN_BLINDING_unlock : function(b: PBN_BLINDING): Integer; cdecl = nil;
  BN_BLINDING_get_flags : function(p1: PBN_BLINDING): Cardinal; cdecl = nil;
  BN_BLINDING_set_flags : procedure(p1: PBN_BLINDING; p2: Cardinal); cdecl = nil;
  BN_BLINDING_create_param : function(b: PBN_BLINDING; e: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX; bn_mod_exp: BN_BLINDING_create_param_bn_mod_exp; m_ctx: PBN_MONT_CTX): PBN_BLINDING; cdecl = nil;
  BN_set_params : procedure(mul: Integer; high: Integer; low: Integer; mont: Integer); cdecl = nil;
  BN_get_params : function(which: Integer): Integer; cdecl = nil;
  BN_RECP_CTX_new : function(): PBN_RECP_CTX; cdecl = nil;
  BN_RECP_CTX_free : procedure(recp: PBN_RECP_CTX); cdecl = nil;
  BN_RECP_CTX_set : function(recp: PBN_RECP_CTX; rdiv: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_mul_reciprocal : function(r: PBIGNUM; x: PBIGNUM; y: PBIGNUM; recp: PBN_RECP_CTX; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_mod_exp_recp : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_div_recp : function(dv: PBIGNUM; rem: PBIGNUM; m: PBIGNUM; recp: PBN_RECP_CTX; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_add : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM): Integer; cdecl = nil;
  BN_GF2m_mod : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM): Integer; cdecl = nil;
  BN_GF2m_mod_mul : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_sqr : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_inv : function(r: PBIGNUM; b: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_div : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_exp : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_sqrt : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_solve_quad : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_arr : function(r: PBIGNUM; a: PBIGNUM; p: PInteger): Integer; cdecl = nil;
  BN_GF2m_mod_mul_arr : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_sqr_arr : function(r: PBIGNUM; a: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_inv_arr : function(r: PBIGNUM; b: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_div_arr : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_exp_arr : function(r: PBIGNUM; a: PBIGNUM; b: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_sqrt_arr : function(r: PBIGNUM; a: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_mod_solve_quad_arr : function(r: PBIGNUM; a: PBIGNUM; p: PInteger; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_GF2m_poly2arr : function(a: PBIGNUM; p: PInteger; max: Integer): Integer; cdecl = nil;
  BN_GF2m_arr2poly : function(p: PInteger; a: PBIGNUM): Integer; cdecl = nil;
  BN_nist_mod_192 : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_nist_mod_224 : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_nist_mod_256 : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_nist_mod_384 : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_nist_mod_521 : function(r: PBIGNUM; a: PBIGNUM; p: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_get0_nist_prime_192 : function(): PBIGNUM; cdecl = nil;
  BN_get0_nist_prime_224 : function(): PBIGNUM; cdecl = nil;
  BN_get0_nist_prime_256 : function(): PBIGNUM; cdecl = nil;
  BN_get0_nist_prime_384 : function(): PBIGNUM; cdecl = nil;
  BN_get0_nist_prime_521 : function(): PBIGNUM; cdecl = nil;
//  BN_nist_mod_func : function(r: PBIGNUMa: PBIGNUMfield: PBIGNUMctx: PBN_CTXp: PBIGNUM): Integer; cdecl = nil;
  BN_generate_dsa_nonce : function(vout: PBIGNUM; range: PBIGNUM; priv: PBIGNUM; vmessage: PByte; message_len: NativeUInt; ctx: PBN_CTX): Integer; cdecl = nil;
  BN_get_rfc2409_prime_768 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc2409_prime_1024 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc3526_prime_1536 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc3526_prime_2048 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc3526_prime_3072 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc3526_prime_4096 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc3526_prime_6144 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_get_rfc3526_prime_8192 : function(bn: PBIGNUM): PBIGNUM; cdecl = nil;
  BN_bntest_rand : function(rnd: PBIGNUM; bits: Integer; top: Integer; bottom: Integer): Integer; cdecl = nil;
  d2i_ASN1_SEQUENCE_ANY : function(a: PPASN1_SEQUENCE_ANY; vin: PPByte; len: Integer): PASN1_SEQUENCE_ANY; cdecl = nil;
  i2d_ASN1_SEQUENCE_ANY : function(a: PASN1_SEQUENCE_ANY; vout: PPByte): Integer; cdecl = nil;
  ASN1_SEQUENCE_ANY_it : function(): PASN1_ITEM; cdecl = nil;
  d2i_ASN1_SET_ANY : function(a: PPASN1_SEQUENCE_ANY; vin: PPByte; len: Integer): PASN1_SEQUENCE_ANY; cdecl = nil;
  i2d_ASN1_SET_ANY : function(a: PASN1_SEQUENCE_ANY; vout: PPByte): Integer; cdecl = nil;
  ASN1_SET_ANY_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_TYPE_new : function(): PASN1_TYPE; cdecl = nil;
  ASN1_TYPE_free : procedure(a: PASN1_TYPE); cdecl = nil;
  d2i_ASN1_TYPE : function(a: PPASN1_TYPE; vin: PPByte; len: Integer): PASN1_TYPE; cdecl = nil;
  i2d_ASN1_TYPE : function(a: PASN1_TYPE; vout: PPByte): Integer; cdecl = nil;
  ASN1_ANY_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_TYPE_get : function(a: PASN1_TYPE): Integer; cdecl = nil;
  ASN1_TYPE_set : procedure(a: PASN1_TYPE; vtype: Integer; value: Pointer); cdecl = nil;
  ASN1_TYPE_set1 : function(a: PASN1_TYPE; vtype: Integer; value: Pointer): Integer; cdecl = nil;
  ASN1_TYPE_cmp : function(a: PASN1_TYPE; b: PASN1_TYPE): Integer; cdecl = nil;
  ASN1_TYPE_pack_sequence : function(it: PASN1_ITEM; s: Pointer; t: PPASN1_TYPE): PASN1_TYPE; cdecl = nil;
  ASN1_TYPE_unpack_sequence : function(it: PASN1_ITEM; t: PASN1_TYPE): Pointer; cdecl = nil;
  ASN1_OBJECT_new : function(): PASN1_OBJECT; cdecl = nil;
  ASN1_OBJECT_free : procedure(a: PASN1_OBJECT); cdecl = nil;
  i2d_ASN1_OBJECT : function(a: PASN1_OBJECT; pp: PPByte): Integer; cdecl = nil;
  d2i_ASN1_OBJECT : function(a: PPASN1_OBJECT; pp: PPByte; length: Integer): PASN1_OBJECT; cdecl = nil;
  ASN1_OBJECT_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_STRING_new : function(): PASN1_STRING; cdecl = nil;
  ASN1_STRING_free : procedure(a: PASN1_STRING); cdecl = nil;
  ASN1_STRING_clear_free : procedure(a: PASN1_STRING); cdecl = nil;
  ASN1_STRING_copy : function(dst: PASN1_STRING; str: PASN1_STRING): Integer; cdecl = nil;
  ASN1_STRING_dup : function(a: PASN1_STRING): PASN1_STRING; cdecl = nil;
  ASN1_STRING_type_new : function(vtype: Integer): PASN1_STRING; cdecl = nil;
  ASN1_STRING_cmp : function(a: PASN1_STRING; b: PASN1_STRING): Integer; cdecl = nil;
  ASN1_STRING_set : function(str: PASN1_STRING; data: Pointer; len: Integer): Integer; cdecl = nil;
  ASN1_STRING_set0 : procedure(str: PASN1_STRING; data: Pointer; len: Integer); cdecl = nil;
  ASN1_STRING_length : function(x: PASN1_STRING): Integer; cdecl = nil;
  ASN1_STRING_length_set : procedure(x: PASN1_STRING; n: Integer); cdecl = nil;
  ASN1_STRING_type : function(x: PASN1_STRING): Integer; cdecl = nil;
  ASN1_STRING_data : function(x: PASN1_STRING): PByte; cdecl = nil;
  ASN1_STRING_get0_data : function(x: PASN1_STRING): PByte; cdecl = nil;
  ASN1_BIT_STRING_new : function(): PASN1_BIT_STRING; cdecl = nil;
  ASN1_BIT_STRING_free : procedure(a: PASN1_BIT_STRING); cdecl = nil;
  d2i_ASN1_BIT_STRING : function(a: PPASN1_BIT_STRING; vin: PPByte; len: Integer): PASN1_BIT_STRING; cdecl = nil;
  i2d_ASN1_BIT_STRING : function(a: PASN1_BIT_STRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_BIT_STRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_BIT_STRING_set : function(a: PASN1_BIT_STRING; d: PByte; length: Integer): Integer; cdecl = nil;
  ASN1_BIT_STRING_set_bit : function(a: PASN1_BIT_STRING; n: Integer; value: Integer): Integer; cdecl = nil;
  ASN1_BIT_STRING_get_bit : function(a: PASN1_BIT_STRING; n: Integer): Integer; cdecl = nil;
  ASN1_BIT_STRING_check : function(a: PASN1_BIT_STRING; flags: PByte; flags_len: Integer): Integer; cdecl = nil;
  ASN1_BIT_STRING_name_print : function(vout: PBIO; bs: PASN1_BIT_STRING; tbl: PBIT_STRING_BITNAME; indent: Integer): Integer; cdecl = nil;
  ASN1_BIT_STRING_num_asc : function(name: PUTF8Char; tbl: PBIT_STRING_BITNAME): Integer; cdecl = nil;
  ASN1_BIT_STRING_set_asc : function(bs: PASN1_BIT_STRING; name: PUTF8Char; value: Integer; tbl: PBIT_STRING_BITNAME): Integer; cdecl = nil;
  ASN1_INTEGER_new : function(): PASN1_INTEGER; cdecl = nil;
  ASN1_INTEGER_free : procedure(a: PASN1_INTEGER); cdecl = nil;
  d2i_ASN1_INTEGER : function(a: PPASN1_INTEGER; vin: PPByte; len: Integer): PASN1_INTEGER; cdecl = nil;
  i2d_ASN1_INTEGER : function(a: PASN1_INTEGER; vout: PPByte): Integer; cdecl = nil;
  ASN1_INTEGER_it : function(): PASN1_ITEM; cdecl = nil;
  d2i_ASN1_UINTEGER : function(a: PPASN1_INTEGER; pp: PPByte; length: Integer): PASN1_INTEGER; cdecl = nil;
  ASN1_INTEGER_dup : function(x: PASN1_INTEGER): PASN1_INTEGER; cdecl = nil;
  ASN1_INTEGER_cmp : function(x: PASN1_INTEGER; y: PASN1_INTEGER): Integer; cdecl = nil;
  ASN1_ENUMERATED_new : function(): PASN1_ENUMERATED; cdecl = nil;
  ASN1_ENUMERATED_free : procedure(a: PASN1_ENUMERATED); cdecl = nil;
  d2i_ASN1_ENUMERATED : function(a: PPASN1_ENUMERATED; vin: PPByte; len: Integer): PASN1_ENUMERATED; cdecl = nil;
  i2d_ASN1_ENUMERATED : function(a: PASN1_ENUMERATED; vout: PPByte): Integer; cdecl = nil;
  ASN1_ENUMERATED_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_UTCTIME_check : function(a: PASN1_UTCTIME): Integer; cdecl = nil;
  ASN1_UTCTIME_set : function(s: PASN1_UTCTIME; t: Longint): PASN1_UTCTIME; cdecl = nil;
  ASN1_UTCTIME_adj : function(s: PASN1_UTCTIME; t: Longint; offset_day: Integer; offset_sec: Integer): PASN1_UTCTIME; cdecl = nil;
  ASN1_UTCTIME_set_string : function(s: PASN1_UTCTIME; str: PUTF8Char): Integer; cdecl = nil;
  ASN1_UTCTIME_cmp_time_t : function(s: PASN1_UTCTIME; t: Longint): Integer; cdecl = nil;
  ASN1_GENERALIZEDTIME_check : function(a: PASN1_GENERALIZEDTIME): Integer; cdecl = nil;
  ASN1_GENERALIZEDTIME_set : function(s: PASN1_GENERALIZEDTIME; t: Longint): PASN1_GENERALIZEDTIME; cdecl = nil;
  ASN1_GENERALIZEDTIME_adj : function(s: PASN1_GENERALIZEDTIME; t: Longint; offset_day: Integer; offset_sec: Integer): PASN1_GENERALIZEDTIME; cdecl = nil;
  ASN1_GENERALIZEDTIME_set_string : function(s: PASN1_GENERALIZEDTIME; str: PUTF8Char): Integer; cdecl = nil;
  ASN1_TIME_diff : function(pday: PInteger; psec: PInteger; from: PASN1_TIME; vto: PASN1_TIME): Integer; cdecl = nil;
  ASN1_OCTET_STRING_new : function(): PASN1_OCTET_STRING; cdecl = nil;
  ASN1_OCTET_STRING_free : procedure(a: PASN1_OCTET_STRING); cdecl = nil;
  d2i_ASN1_OCTET_STRING : function(a: PPASN1_OCTET_STRING; vin: PPByte; len: Integer): PASN1_OCTET_STRING; cdecl = nil;
  i2d_ASN1_OCTET_STRING : function(a: PASN1_OCTET_STRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_OCTET_STRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_OCTET_STRING_dup : function(a: PASN1_OCTET_STRING): PASN1_OCTET_STRING; cdecl = nil;
  ASN1_OCTET_STRING_cmp : function(a: PASN1_OCTET_STRING; b: PASN1_OCTET_STRING): Integer; cdecl = nil;
  ASN1_OCTET_STRING_set : function(str: PASN1_OCTET_STRING; data: PByte; len: Integer): Integer; cdecl = nil;
  ASN1_VISIBLESTRING_new : function(): PASN1_VISIBLESTRING; cdecl = nil;
  ASN1_VISIBLESTRING_free : procedure(a: PASN1_VISIBLESTRING); cdecl = nil;
  d2i_ASN1_VISIBLESTRING : function(a: PPASN1_VISIBLESTRING; vin: PPByte; len: Integer): PASN1_VISIBLESTRING; cdecl = nil;
  i2d_ASN1_VISIBLESTRING : function(a: PASN1_VISIBLESTRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_VISIBLESTRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_UNIVERSALSTRING_new : function(): PASN1_UNIVERSALSTRING; cdecl = nil;
  ASN1_UNIVERSALSTRING_free : procedure(a: PASN1_UNIVERSALSTRING); cdecl = nil;
  d2i_ASN1_UNIVERSALSTRING : function(a: PPASN1_UNIVERSALSTRING; vin: PPByte; len: Integer): PASN1_UNIVERSALSTRING; cdecl = nil;
  i2d_ASN1_UNIVERSALSTRING : function(a: PASN1_UNIVERSALSTRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_UNIVERSALSTRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_UTF8STRING_new : function(): PASN1_UTF8STRING; cdecl = nil;
  ASN1_UTF8STRING_free : procedure(a: PASN1_UTF8STRING); cdecl = nil;
  d2i_ASN1_UTF8STRING : function(a: PPASN1_UTF8STRING; vin: PPByte; len: Integer): PASN1_UTF8STRING; cdecl = nil;
  i2d_ASN1_UTF8STRING : function(a: PASN1_UTF8STRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_UTF8STRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_NULL_new : function(): PASN1_NULL; cdecl = nil;
  ASN1_NULL_free : procedure(a: PASN1_NULL); cdecl = nil;
  d2i_ASN1_NULL : function(a: PPASN1_NULL; vin: PPByte; len: Integer): PASN1_NULL; cdecl = nil;
  i2d_ASN1_NULL : function(a: PASN1_NULL; vout: PPByte): Integer; cdecl = nil;
  ASN1_NULL_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_BMPSTRING_new : function(): PASN1_BMPSTRING; cdecl = nil;
  ASN1_BMPSTRING_free : procedure(a: PASN1_BMPSTRING); cdecl = nil;
  d2i_ASN1_BMPSTRING : function(a: PPASN1_BMPSTRING; vin: PPByte; len: Integer): PASN1_BMPSTRING; cdecl = nil;
  i2d_ASN1_BMPSTRING : function(a: PASN1_BMPSTRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_BMPSTRING_it : function(): PASN1_ITEM; cdecl = nil;
  UTF8_getc : function(str: PByte; len: Integer; val: PCardinal): Integer; cdecl = nil;
  UTF8_putc : function(str: PByte; len: Integer; value: Cardinal): Integer; cdecl = nil;
  ASN1_PRINTABLE_new : function(): PASN1_STRING; cdecl = nil;
  ASN1_PRINTABLE_free : procedure(a: PASN1_STRING); cdecl = nil;
  d2i_ASN1_PRINTABLE : function(a: PPASN1_STRING; vin: PPByte; len: Integer): PASN1_STRING; cdecl = nil;
  i2d_ASN1_PRINTABLE : function(a: PASN1_STRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_PRINTABLE_it : function(): PASN1_ITEM; cdecl = nil;
  DIRECTORYSTRING_new : function(): PASN1_STRING; cdecl = nil;
  DIRECTORYSTRING_free : procedure(a: PASN1_STRING); cdecl = nil;
  d2i_DIRECTORYSTRING : function(a: PPASN1_STRING; vin: PPByte; len: Integer): PASN1_STRING; cdecl = nil;
  i2d_DIRECTORYSTRING : function(a: PASN1_STRING; vout: PPByte): Integer; cdecl = nil;
  DIRECTORYSTRING_it : function(): PASN1_ITEM; cdecl = nil;
  DISPLAYTEXT_new : function(): PASN1_STRING; cdecl = nil;
  DISPLAYTEXT_free : procedure(a: PASN1_STRING); cdecl = nil;
  d2i_DISPLAYTEXT : function(a: PPASN1_STRING; vin: PPByte; len: Integer): PASN1_STRING; cdecl = nil;
  i2d_DISPLAYTEXT : function(a: PASN1_STRING; vout: PPByte): Integer; cdecl = nil;
  DISPLAYTEXT_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_PRINTABLESTRING_new : function(): PASN1_PRINTABLESTRING; cdecl = nil;
  ASN1_PRINTABLESTRING_free : procedure(a: PASN1_PRINTABLESTRING); cdecl = nil;
  d2i_ASN1_PRINTABLESTRING : function(a: PPASN1_PRINTABLESTRING; vin: PPByte; len: Integer): PASN1_PRINTABLESTRING; cdecl = nil;
  i2d_ASN1_PRINTABLESTRING : function(a: PASN1_PRINTABLESTRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_PRINTABLESTRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_T61STRING_new : function(): PASN1_T61STRING; cdecl = nil;
  ASN1_T61STRING_free : procedure(a: PASN1_T61STRING); cdecl = nil;
  d2i_ASN1_T61STRING : function(a: PPASN1_T61STRING; vin: PPByte; len: Integer): PASN1_T61STRING; cdecl = nil;
  i2d_ASN1_T61STRING : function(a: PASN1_T61STRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_T61STRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_IA5STRING_new : function(): PASN1_IA5STRING; cdecl = nil;
  ASN1_IA5STRING_free : procedure(a: PASN1_IA5STRING); cdecl = nil;
  d2i_ASN1_IA5STRING : function(a: PPASN1_IA5STRING; vin: PPByte; len: Integer): PASN1_IA5STRING; cdecl = nil;
  i2d_ASN1_IA5STRING : function(a: PASN1_IA5STRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_IA5STRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_GENERALSTRING_new : function(): PASN1_GENERALSTRING; cdecl = nil;
  ASN1_GENERALSTRING_free : procedure(a: PASN1_GENERALSTRING); cdecl = nil;
  d2i_ASN1_GENERALSTRING : function(a: PPASN1_GENERALSTRING; vin: PPByte; len: Integer): PASN1_GENERALSTRING; cdecl = nil;
  i2d_ASN1_GENERALSTRING : function(a: PASN1_GENERALSTRING; vout: PPByte): Integer; cdecl = nil;
  ASN1_GENERALSTRING_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_UTCTIME_new : function(): PASN1_UTCTIME; cdecl = nil;
  ASN1_UTCTIME_free : procedure(a: PASN1_UTCTIME); cdecl = nil;
  d2i_ASN1_UTCTIME : function(a: PPASN1_UTCTIME; vin: PPByte; len: Integer): PASN1_UTCTIME; cdecl = nil;
  i2d_ASN1_UTCTIME : function(a: PASN1_UTCTIME; vout: PPByte): Integer; cdecl = nil;
  ASN1_UTCTIME_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_GENERALIZEDTIME_new : function(): PASN1_GENERALIZEDTIME; cdecl = nil;
  ASN1_GENERALIZEDTIME_free : procedure(a: PASN1_GENERALIZEDTIME); cdecl = nil;
  d2i_ASN1_GENERALIZEDTIME : function(a: PPASN1_GENERALIZEDTIME; vin: PPByte; len: Integer): PASN1_GENERALIZEDTIME; cdecl = nil;
  i2d_ASN1_GENERALIZEDTIME : function(a: PASN1_GENERALIZEDTIME; vout: PPByte): Integer; cdecl = nil;
  ASN1_GENERALIZEDTIME_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_TIME_new : function(): PASN1_TIME; cdecl = nil;
  ASN1_TIME_free : procedure(a: PASN1_TIME); cdecl = nil;
  d2i_ASN1_TIME : function(a: PPASN1_TIME; vin: PPByte; len: Integer): PASN1_TIME; cdecl = nil;
  i2d_ASN1_TIME : function(a: PASN1_TIME; vout: PPByte): Integer; cdecl = nil;
  ASN1_TIME_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_OCTET_STRING_NDEF_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_TIME_set : function(s: PASN1_TIME; t: Longint): PASN1_TIME; cdecl = nil;
  ASN1_TIME_adj : function(s: PASN1_TIME; t: Longint; offset_day: Integer; offset_sec: Integer): PASN1_TIME; cdecl = nil;
  ASN1_TIME_check : function(t: PASN1_TIME): Integer; cdecl = nil;
  ASN1_TIME_to_generalizedtime : function(t: PASN1_TIME; vout: PPASN1_GENERALIZEDTIME): PASN1_GENERALIZEDTIME; cdecl = nil;
  ASN1_TIME_set_string : function(s: PASN1_TIME; str: PUTF8Char): Integer; cdecl = nil;
  ASN1_TIME_set_string_X509 : function(s: PASN1_TIME; str: PUTF8Char): Integer; cdecl = nil;
  ASN1_TIME_to_tm : function(s: PASN1_TIME; tm: Ptm): Integer; cdecl = nil;
  ASN1_TIME_normalize : function(s: PASN1_TIME): Integer; cdecl = nil;
  ASN1_TIME_cmp_time_t : function(s: PASN1_TIME; t: Longint): Integer; cdecl = nil;
  ASN1_TIME_compare : function(a: PASN1_TIME; b: PASN1_TIME): Integer; cdecl = nil;
  i2a_ASN1_INTEGER : function(bp: PBIO; a: PASN1_INTEGER): Integer; cdecl = nil;
  a2i_ASN1_INTEGER : function(bp: PBIO; bs: PASN1_INTEGER; buf: PUTF8Char; size: Integer): Integer; cdecl = nil;
  i2a_ASN1_ENUMERATED : function(bp: PBIO; a: PASN1_ENUMERATED): Integer; cdecl = nil;
  a2i_ASN1_ENUMERATED : function(bp: PBIO; bs: PASN1_ENUMERATED; buf: PUTF8Char; size: Integer): Integer; cdecl = nil;
  i2a_ASN1_OBJECT : function(bp: PBIO; a: PASN1_OBJECT): Integer; cdecl = nil;
  a2i_ASN1_STRING : function(bp: PBIO; bs: PASN1_STRING; buf: PUTF8Char; size: Integer): Integer; cdecl = nil;
  i2a_ASN1_STRING : function(bp: PBIO; a: PASN1_STRING; vtype: Integer): Integer; cdecl = nil;
  i2t_ASN1_OBJECT : function(buf: PUTF8Char; buf_len: Integer; a: PASN1_OBJECT): Integer; cdecl = nil;
  a2d_ASN1_OBJECT : function(vout: PByte; olen: Integer; buf: PUTF8Char; num: Integer): Integer; cdecl = nil;
  ASN1_OBJECT_create : function(nid: Integer; data: PByte; len: Integer; sn: PUTF8Char; ln: PUTF8Char): PASN1_OBJECT; cdecl = nil;
  ASN1_INTEGER_get_int64 : function(pr: PInt64; a: PASN1_INTEGER): Integer; cdecl = nil;
  ASN1_INTEGER_set_int64 : function(a: PASN1_INTEGER; r: Int64): Integer; cdecl = nil;
  ASN1_INTEGER_get_uint64 : function(pr: PUInt64; a: PASN1_INTEGER): Integer; cdecl = nil;
  ASN1_INTEGER_set_uint64 : function(a: PASN1_INTEGER; r: UInt64): Integer; cdecl = nil;
  ASN1_INTEGER_set : function(a: PASN1_INTEGER; v: Integer): Integer; cdecl = nil;
  ASN1_INTEGER_get : function(a: PASN1_INTEGER): Integer; cdecl = nil;
  BN_to_ASN1_INTEGER : function(bn: PBIGNUM; ai: PASN1_INTEGER): PASN1_INTEGER; cdecl = nil;
  ASN1_INTEGER_to_BN : function(ai: PASN1_INTEGER; bn: PBIGNUM): PBIGNUM; cdecl = nil;
  ASN1_ENUMERATED_get_int64 : function(pr: PInt64; a: PASN1_ENUMERATED): Integer; cdecl = nil;
  ASN1_ENUMERATED_set_int64 : function(a: PASN1_ENUMERATED; r: Int64): Integer; cdecl = nil;
  ASN1_ENUMERATED_set : function(a: PASN1_ENUMERATED; v: Integer): Integer; cdecl = nil;
  ASN1_ENUMERATED_get : function(a: PASN1_ENUMERATED): Integer; cdecl = nil;
  BN_to_ASN1_ENUMERATED : function(bn: PBIGNUM; ai: PASN1_ENUMERATED): PASN1_ENUMERATED; cdecl = nil;
  ASN1_ENUMERATED_to_BN : function(ai: PASN1_ENUMERATED; bn: PBIGNUM): PBIGNUM; cdecl = nil;
  ASN1_PRINTABLE_type : function(s: PByte; max: Integer): Integer; cdecl = nil;
  ASN1_tag2bit : function(tag: Integer): Cardinal; cdecl = nil;
  ASN1_get_object : function(pp: PPByte; plength: PInteger; ptag: PInteger; pclass: PInteger; omax: Integer): Integer; cdecl = nil;
  ASN1_check_infinite_end : function(p: PPByte; len: Integer): Integer; cdecl = nil;
  ASN1_const_check_infinite_end : function(p: PPByte; len: Integer): Integer; cdecl = nil;
  ASN1_put_object : procedure(pp: PPByte; constructed: Integer; length: Integer; tag: Integer; xclass: Integer); cdecl = nil;
  ASN1_put_eoc : function(pp: PPByte): Integer; cdecl = nil;
  ASN1_object_size : function(constructed: Integer; length: Integer; tag: Integer): Integer; cdecl = nil;
  ASN1_dup : function(i2d: Pi2d_of_void; d2i: Pd2i_of_void; x: Pointer): Pointer; cdecl = nil;
  ASN1_item_dup : function(it: PASN1_ITEM; x: Pointer): Pointer; cdecl = nil;
  ASN1_d2i_fp : function(xnew: ASN1_d2i_fp_xnew; d2i: Pd2i_of_void; vin: PPointer; x: PPointer): Pointer; cdecl = nil;
  ASN1_item_d2i_fp : function(it: PASN1_ITEM; vin: PPointer; x: Pointer): Pointer; cdecl = nil;
  ASN1_i2d_fp : function(i2d: Pi2d_of_void; vout: PPointer; x: Pointer): Integer; cdecl = nil;
  ASN1_item_i2d_fp : function(it: PASN1_ITEM; vout: PPointer; x: Pointer): Integer; cdecl = nil;
  ASN1_STRING_print_ex_fp : function(fp: PPointer; str: PASN1_STRING; flags: Cardinal): Integer; cdecl = nil;
  ASN1_STRING_to_UTF8 : function(vout: PPByte; vin: PASN1_STRING): Integer; cdecl = nil;
  ASN1_d2i_bio : function(xnew: ASN1_d2i_bio_xnew; d2i: Pd2i_of_void; vin: PBIO; x: PPointer): Pointer; cdecl = nil;
  ASN1_item_d2i_bio : function(it: PASN1_ITEM; vin: PBIO; x: Pointer): Pointer; cdecl = nil;
  ASN1_i2d_bio : function(i2d: Pi2d_of_void; vout: PBIO; x: PByte): Integer; cdecl = nil;
  ASN1_item_i2d_bio : function(it: PASN1_ITEM; vout: PBIO; x: Pointer): Integer; cdecl = nil;
  ASN1_UTCTIME_print : function(fp: PBIO; a: PASN1_UTCTIME): Integer; cdecl = nil;
  ASN1_GENERALIZEDTIME_print : function(fp: PBIO; a: PASN1_GENERALIZEDTIME): Integer; cdecl = nil;
  ASN1_TIME_print : function(fp: PBIO; a: PASN1_TIME): Integer; cdecl = nil;
  ASN1_STRING_print : function(bp: PBIO; v: PASN1_STRING): Integer; cdecl = nil;
  ASN1_STRING_print_ex : function(vout: PBIO; str: PASN1_STRING; flags: Cardinal): Integer; cdecl = nil;
  ASN1_buf_print : function(bp: PBIO; buf: PByte; buflen: NativeUInt; off: Integer): Integer; cdecl = nil;
  ASN1_bn_print : function(bp: PBIO; number: PUTF8Char; num: PBIGNUM; buf: PByte; off: Integer): Integer; cdecl = nil;
  ASN1_parse : function(bp: PBIO; pp: PByte; len: Integer; indent: Integer): Integer; cdecl = nil;
  ASN1_parse_dump : function(bp: PBIO; pp: PByte; len: Integer; indent: Integer; dump: Integer): Integer; cdecl = nil;
  ASN1_tag2str : function(tag: Integer): PUTF8Char; cdecl = nil;
  ASN1_UNIVERSALSTRING_to_string : function(s: PASN1_UNIVERSALSTRING): Integer; cdecl = nil;
  ASN1_TYPE_set_octetstring : function(a: PASN1_TYPE; data: PByte; len: Integer): Integer; cdecl = nil;
  ASN1_TYPE_get_octetstring : function(a: PASN1_TYPE; data: PByte; max_len: Integer): Integer; cdecl = nil;
  ASN1_TYPE_set_int_octetstring : function(a: PASN1_TYPE; num: Integer; data: PByte; len: Integer): Integer; cdecl = nil;
  ASN1_TYPE_get_int_octetstring : function(a: PASN1_TYPE; num: PInteger; data: PByte; max_len: Integer): Integer; cdecl = nil;
  ASN1_item_unpack : function(oct: PASN1_STRING; it: PASN1_ITEM): Pointer; cdecl = nil;
  ASN1_item_pack : function(obj: Pointer; it: PASN1_ITEM; oct: PPASN1_OCTET_STRING): PASN1_STRING; cdecl = nil;
  ASN1_STRING_set_default_mask : procedure(mask: Cardinal); cdecl = nil;
  ASN1_STRING_set_default_mask_asc : function(p: PUTF8Char): Integer; cdecl = nil;
  ASN1_STRING_get_default_mask : function(): Cardinal; cdecl = nil;
  ASN1_mbstring_copy : function(vout: PPASN1_STRING; vin: PByte; len: Integer; inform: Integer; mask: Cardinal): Integer; cdecl = nil;
  ASN1_mbstring_ncopy : function(vout: PPASN1_STRING; vin: PByte; len: Integer; inform: Integer; mask: Cardinal; minsize: Integer; maxsize: Integer): Integer; cdecl = nil;
  ASN1_STRING_set_by_NID : function(vout: PPASN1_STRING; vin: PByte; inlen: Integer; inform: Integer; nid: Integer): PASN1_STRING; cdecl = nil;
  ASN1_STRING_TABLE_get : function(nid: Integer): PASN1_STRING_TABLE; cdecl = nil;
  ASN1_STRING_TABLE_add : function(p1: Integer; p2: Integer; p3: Integer; p4: Cardinal; p5: Cardinal): Integer; cdecl = nil;
  ASN1_STRING_TABLE_cleanup : procedure(); cdecl = nil;
  ASN1_item_new : function(it: PASN1_ITEM): PASN1_VALUE; cdecl = nil;
  ASN1_item_free : procedure(val: PASN1_VALUE; it: PASN1_ITEM); cdecl = nil;
  ASN1_item_d2i : function(val: PPASN1_VALUE; vin: PPByte; len: Integer; it: PASN1_ITEM): PASN1_VALUE; cdecl = nil;
  ASN1_item_i2d : function(val: PASN1_VALUE; vout: PPByte; it: PASN1_ITEM): Integer; cdecl = nil;
  ASN1_item_ndef_i2d : function(val: PASN1_VALUE; vout: PPByte; it: PASN1_ITEM): Integer; cdecl = nil;
  ASN1_add_oid_module : procedure(); cdecl = nil;
  ASN1_add_stable_module : procedure(); cdecl = nil;
  ASN1_generate_nconf : function(str: PUTF8Char; nconf: PCONF): PASN1_TYPE; cdecl = nil;
  ASN1_generate_v3 : function(str: PUTF8Char; cnf: PX509V3_CTX): PASN1_TYPE; cdecl = nil;
  ASN1_str2mask : function(str: PUTF8Char; pmask: PCardinal): Integer; cdecl = nil;
  ASN1_item_print : function(vout: PBIO; ifld: PASN1_VALUE; indent: Integer; it: PASN1_ITEM; pctx: PASN1_PCTX): Integer; cdecl = nil;
  ASN1_PCTX_new : function(): PASN1_PCTX; cdecl = nil;
  ASN1_PCTX_free : procedure(p: PASN1_PCTX); cdecl = nil;
  ASN1_PCTX_get_flags : function(p: PASN1_PCTX): Cardinal; cdecl = nil;
  ASN1_PCTX_set_flags : procedure(p: PASN1_PCTX; flags: Cardinal); cdecl = nil;
  ASN1_PCTX_get_nm_flags : function(p: PASN1_PCTX): Cardinal; cdecl = nil;
  ASN1_PCTX_set_nm_flags : procedure(p: PASN1_PCTX; flags: Cardinal); cdecl = nil;
  ASN1_PCTX_get_cert_flags : function(p: PASN1_PCTX): Cardinal; cdecl = nil;
  ASN1_PCTX_set_cert_flags : procedure(p: PASN1_PCTX; flags: Cardinal); cdecl = nil;
  ASN1_PCTX_get_oid_flags : function(p: PASN1_PCTX): Cardinal; cdecl = nil;
  ASN1_PCTX_set_oid_flags : procedure(p: PASN1_PCTX; flags: Cardinal); cdecl = nil;
  ASN1_PCTX_get_str_flags : function(p: PASN1_PCTX): Cardinal; cdecl = nil;
  ASN1_PCTX_set_str_flags : procedure(p: PASN1_PCTX; flags: Cardinal); cdecl = nil;
  ASN1_SCTX_new : function(scan_cb: ASN1_SCTX_new_scan_cb): PASN1_SCTX; cdecl = nil;
  ASN1_SCTX_free : procedure(p: PASN1_SCTX); cdecl = nil;
  ASN1_SCTX_get_item : function(p: PASN1_SCTX): PASN1_ITEM; cdecl = nil;
  ASN1_SCTX_get_template : function(p: PASN1_SCTX): PASN1_TEMPLATE; cdecl = nil;
  ASN1_SCTX_get_flags : function(p: PASN1_SCTX): Cardinal; cdecl = nil;
  ASN1_SCTX_set_app_data : procedure(p: PASN1_SCTX; data: Pointer); cdecl = nil;
  ASN1_SCTX_get_app_data : function(p: PASN1_SCTX): Pointer; cdecl = nil;
  BIO_f_asn1 : function(): PBIO_METHOD; cdecl = nil;
  BIO_new_NDEF : function(vout: PBIO; val: PASN1_VALUE; it: PASN1_ITEM): PBIO; cdecl = nil;
  i2d_ASN1_bio_stream : function(vout: PBIO; val: PASN1_VALUE; vin: PBIO; flags: Integer; it: PASN1_ITEM): Integer; cdecl = nil;
  PEM_write_bio_ASN1_stream : function(vout: PBIO; val: PASN1_VALUE; vin: PBIO; flags: Integer; hdr: PUTF8Char; it: PASN1_ITEM): Integer; cdecl = nil;
  SMIME_write_ASN1 : function(bio: PBIO; val: PASN1_VALUE; data: PBIO; flags: Integer; ctype_nid: Integer; econt_nid: Integer; mdalgs: Pstack_st_X509_ALGOR; it: PASN1_ITEM): Integer; cdecl = nil;
  SMIME_read_ASN1 : function(bio: PBIO; bcont: PPBIO; it: PASN1_ITEM): PASN1_VALUE; cdecl = nil;
  SMIME_crlf_copy : function(vin: PBIO; vout: PBIO; flags: Integer): Integer; cdecl = nil;
  SMIME_text : function(vin: PBIO; vout: PBIO): Integer; cdecl = nil;
  ASN1_ITEM_lookup : function(name: PUTF8Char): PASN1_ITEM; cdecl = nil;
  ASN1_ITEM_get : function(i: NativeUInt): PASN1_ITEM; cdecl = nil;
  ASN1_BOOLEAN_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_TBOOLEAN_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_FBOOLEAN_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_SEQUENCE_it : function(): PASN1_ITEM; cdecl = nil;
  CBIGNUM_it : function(): PASN1_ITEM; cdecl = nil;
  BIGNUM_it : function(): PASN1_ITEM; cdecl = nil;
  INT32_it : function(): PASN1_ITEM; cdecl = nil;
  ZINT32_it : function(): PASN1_ITEM; cdecl = nil;
  UINT32_it : function(): PASN1_ITEM; cdecl = nil;
  ZUINT32_it : function(): PASN1_ITEM; cdecl = nil;
  INT64_it : function(): PASN1_ITEM; cdecl = nil;
  ZINT64_it : function(): PASN1_ITEM; cdecl = nil;
  UINT64_it : function(): PASN1_ITEM; cdecl = nil;
  ZUINT64_it : function(): PASN1_ITEM; cdecl = nil;
  LONG_it : function(): PASN1_ITEM; cdecl = nil;
  ZLONG_it : function(): PASN1_ITEM; cdecl = nil;
  ASN1_item_ex_new : function(pval: PPASN1_VALUE; it: PASN1_ITEM): Integer; cdecl = nil;
  ASN1_item_ex_free : procedure(pval: PPASN1_VALUE; it: PASN1_ITEM); cdecl = nil;
  ASN1_item_ex_d2i : function(pval: PPASN1_VALUE; vin: PPByte; len: Integer; it: PASN1_ITEM; tag: Integer; aclass: Integer; opt: UTF8Char; ctx: PASN1_TLC): Integer; cdecl = nil;
  ASN1_item_ex_i2d : function(pval: PPASN1_VALUE; vout: PPByte; it: PASN1_ITEM; tag: Integer; aclass: Integer): Integer; cdecl = nil;
  ERR_load_ASYNC_strings : function(): Integer; cdecl = nil;
  ASYNC_init_thread : function(max_size: NativeUInt; init_size: NativeUInt): Integer; cdecl = nil;
  ASYNC_cleanup_thread : procedure(); cdecl = nil;
  ASYNC_is_capable : function(): Integer; cdecl = nil;
  ASYNC_start_job : function(job: PPASYNC_JOB; ctx: PASYNC_WAIT_CTX; ret: PInteger; func: ASYNC_start_job_func; args: Pointer; size: NativeUInt): Integer; cdecl = nil;
  ASYNC_pause_job : function(): Integer; cdecl = nil;
  ASYNC_get_current_job : function(): PASYNC_JOB; cdecl = nil;
  ASYNC_get_wait_ctx : function(job: PASYNC_JOB): PASYNC_WAIT_CTX; cdecl = nil;
  ASYNC_block_pause : procedure(); cdecl = nil;
  ASYNC_unblock_pause : procedure(); cdecl = nil;
  BF_set_key : procedure(key: PBF_KEY; len: Integer; data: PByte); cdecl = nil;
  BF_encrypt : procedure(data: PCardinal; key: PBF_KEY); cdecl = nil;
  BF_decrypt : procedure(data: PCardinal; key: PBF_KEY); cdecl = nil;
  BF_ecb_encrypt : procedure(vin: PByte; vout: PByte; key: PBF_KEY; enc: Integer); cdecl = nil;
  BF_cbc_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PBF_KEY; ivec: PByte; enc: Integer); cdecl = nil;
  BF_cfb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PBF_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  BF_ofb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PBF_KEY; ivec: PByte; num: PInteger); cdecl = nil;
  BF_options : function(): PUTF8Char; cdecl = nil;
  ERR_load_BUF_strings : function(): Integer; cdecl = nil;
  BUF_MEM_new : function(): PBUF_MEM; cdecl = nil;
  BUF_MEM_new_ex : function(flags: Cardinal): PBUF_MEM; cdecl = nil;
  BUF_MEM_free : procedure(a: PBUF_MEM); cdecl = nil;
  BUF_MEM_grow : function(str: PBUF_MEM; len: NativeUInt): NativeUInt; cdecl = nil;
  BUF_MEM_grow_clean : function(str: PBUF_MEM; len: NativeUInt): NativeUInt; cdecl = nil;
  BUF_reverse : procedure(vout: PByte; vin: PByte; siz: NativeUInt); cdecl = nil;
  Camellia_set_key : function(userKey: PByte; bits: Integer; key: PCAMELLIA_KEY): Integer; cdecl = nil;
  Camellia_encrypt : procedure(vin: PByte; vout: PByte; key: PCAMELLIA_KEY); cdecl = nil;
  Camellia_decrypt : procedure(vin: PByte; vout: PByte; key: PCAMELLIA_KEY); cdecl = nil;
  Camellia_ecb_encrypt : procedure(vin: PByte; vout: PByte; key: PCAMELLIA_KEY; enc: Integer); cdecl = nil;
  Camellia_cbc_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PCAMELLIA_KEY; ivec: PByte; enc: Integer); cdecl = nil;
  Camellia_cfb128_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PCAMELLIA_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  Camellia_cfb1_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PCAMELLIA_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  Camellia_cfb8_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PCAMELLIA_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  Camellia_ofb128_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PCAMELLIA_KEY; ivec: PByte; num: PInteger); cdecl = nil;
  Camellia_ctr128_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: PCAMELLIA_KEY; ivec: PByte; ecount_buf: PByte; num: PCardinal); cdecl = nil;
  CAST_set_key : procedure(key: PCAST_KEY; len: Integer; data: PByte); cdecl = nil;
  CAST_ecb_encrypt : procedure(vin: PByte; vout: PByte; key: PCAST_KEY; enc: Integer); cdecl = nil;
  CAST_encrypt : procedure(data: PCardinal; key: PCAST_KEY); cdecl = nil;
  CAST_decrypt : procedure(data: PCardinal; key: PCAST_KEY); cdecl = nil;
  CAST_cbc_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks: PCAST_KEY; iv: PByte; enc: Integer); cdecl = nil;
  CAST_cfb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PCAST_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  CAST_ofb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PCAST_KEY; ivec: PByte; num: PInteger); cdecl = nil;
  ERR_load_EVP_strings : function(): Integer; cdecl = nil;
  ERR_load_OBJ_strings : function(): Integer; cdecl = nil;
  OBJ_NAME_init : function(): Integer; cdecl = nil;
  OBJ_NAME_new_index : function(hash_func: OBJ_NAME_new_index_hash_func; cmp_func: OBJ_NAME_new_index_cmp_func; free_func: OBJ_NAME_new_index_free_func): Integer; cdecl = nil;
  OBJ_NAME_get : function(name: PUTF8Char; vtype: Integer): PUTF8Char; cdecl = nil;
  OBJ_NAME_add : function(name: PUTF8Char; vtype: Integer; data: PUTF8Char): Integer; cdecl = nil;
  OBJ_NAME_remove : function(name: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  OBJ_NAME_cleanup : procedure(vtype: Integer); cdecl = nil;
  OBJ_NAME_do_all : procedure(vtype: Integer; fn: OBJ_NAME_do_all_fn; arg: Pointer); cdecl = nil;
  OBJ_NAME_do_all_sorted : procedure(vtype: Integer; fn: OBJ_NAME_do_all_sorted_fn; arg: Pointer); cdecl = nil;
  OBJ_dup : function(o: PASN1_OBJECT): PASN1_OBJECT; cdecl = nil;
  OBJ_nid2obj : function(n: Integer): PASN1_OBJECT; cdecl = nil;
  OBJ_nid2ln : function(n: Integer): PUTF8Char; cdecl = nil;
  OBJ_nid2sn : function(n: Integer): PUTF8Char; cdecl = nil;
  OBJ_obj2nid : function(o: PASN1_OBJECT): Integer; cdecl = nil;
  OBJ_txt2obj : function(s: PUTF8Char; no_name: Integer): PASN1_OBJECT; cdecl = nil;
  OBJ_obj2txt : function(buf: PUTF8Char; buf_len: Integer; a: PASN1_OBJECT; no_name: Integer): Integer; cdecl = nil;
  OBJ_txt2nid : function(s: PUTF8Char): Integer; cdecl = nil;
  OBJ_ln2nid : function(s: PUTF8Char): Integer; cdecl = nil;
  OBJ_sn2nid : function(s: PUTF8Char): Integer; cdecl = nil;
  OBJ_cmp : function(a: PASN1_OBJECT; b: PASN1_OBJECT): Integer; cdecl = nil;
  OBJ_bsearch_ : function(key: Pointer; base: Pointer; num: Integer; size: Integer; cmp: OBJ_bsearch__cmp): Pointer; cdecl = nil;
  OBJ_bsearch_ex_ : function(key: Pointer; base: Pointer; num: Integer; size: Integer; cmp: OBJ_bsearch_ex__cmp; flags: Integer): Pointer; cdecl = nil;
  OBJ_new_nid : function(num: Integer): Integer; cdecl = nil;
  OBJ_add_object : function(obj: PASN1_OBJECT): Integer; cdecl = nil;
  OBJ_create : function(oid: PUTF8Char; sn: PUTF8Char; ln: PUTF8Char): Integer; cdecl = nil;
  OBJ_create_objects : function(vin: PBIO): Integer; cdecl = nil;
  OBJ_length : function(obj: PASN1_OBJECT): NativeUInt; cdecl = nil;
  OBJ_get0_data : function(obj: PASN1_OBJECT): PByte; cdecl = nil;
  OBJ_find_sigid_algs : function(signid: Integer; pdig_nid: PInteger; ppkey_nid: PInteger): Integer; cdecl = nil;
  OBJ_find_sigid_by_algs : function(psignid: PInteger; dig_nid: Integer; pkey_nid: Integer): Integer; cdecl = nil;
  OBJ_add_sigid : function(signid: Integer; dig_id: Integer; pkey_id: Integer): Integer; cdecl = nil;
  OBJ_sigid_free : procedure(); cdecl = nil;
  EVP_MD_meth_new : function(md_type: Integer; pkey_type: Integer): PEVP_MD; cdecl = nil;
  EVP_MD_meth_dup : function(md: PEVP_MD): PEVP_MD; cdecl = nil;
  EVP_MD_meth_free : procedure(md: PEVP_MD); cdecl = nil;
  EVP_MD_meth_set_input_blocksize : function(md: PEVP_MD; blocksize: Integer): Integer; cdecl = nil;
  EVP_MD_meth_set_result_size : function(md: PEVP_MD; resultsize: Integer): Integer; cdecl = nil;
  EVP_MD_meth_set_app_datasize : function(md: PEVP_MD; datasize: Integer): Integer; cdecl = nil;
  EVP_MD_meth_set_flags : function(md: PEVP_MD; flags: Cardinal): Integer; cdecl = nil;
  EVP_MD_meth_set_init : function(md: PEVP_MD; init: EVP_MD_meth_set_init_init): Integer; cdecl = nil;
  EVP_MD_meth_set_update : function(md: PEVP_MD; update: EVP_MD_meth_set_update_update): Integer; cdecl = nil;
  EVP_MD_meth_set_final : function(md: PEVP_MD; vfinal: EVP_MD_meth_set_final_final): Integer; cdecl = nil;
  EVP_MD_meth_set_copy : function(md: PEVP_MD; copy: EVP_MD_meth_set_copy_copy): Integer; cdecl = nil;
  EVP_MD_meth_set_cleanup : function(md: PEVP_MD; cleanup: EVP_MD_meth_set_cleanup_cleanup): Integer; cdecl = nil;
  EVP_MD_meth_set_ctrl : function(md: PEVP_MD; ctrl: EVP_MD_meth_set_ctrl_ctrl): Integer; cdecl = nil;
  EVP_MD_meth_get_input_blocksize : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_meth_get_result_size : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_meth_get_app_datasize : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_meth_get_flags : function(md: PEVP_MD): Cardinal; cdecl = nil;
//  EVP_MD_meth_get_init : function(ctx: PEVP_MD_CTXmd: PEVP_MD): Integer; cdecl = nil;
//  EVP_MD_meth_get_update : function(ctx: PEVP_MD_CTXdata: Pointercount: NativeUIntmd: PEVP_MD): Integer; cdecl = nil;
//  EVP_MD_meth_get_final : function(ctx: PEVP_MD_CTXmd: PBytemd: PEVP_MD): Integer; cdecl = nil;
//  EVP_MD_meth_get_copy : function(vto: PEVP_MD_CTXfrom: PEVP_MD_CTXmd: PEVP_MD): Integer; cdecl = nil;
//  EVP_MD_meth_get_cleanup : function(ctx: PEVP_MD_CTXmd: PEVP_MD): Integer; cdecl = nil;
//  EVP_MD_meth_get_ctrl : function(ctx: PEVP_MD_CTXcmd: Integerp1: Integerp2: Pointermd: PEVP_MD): Integer; cdecl = nil;
  EVP_CIPHER_meth_new : function(cipher_type: Integer; block_size: Integer; key_len: Integer): PEVP_CIPHER; cdecl = nil;
  EVP_CIPHER_meth_dup : function(cipher: PEVP_CIPHER): PEVP_CIPHER; cdecl = nil;
  EVP_CIPHER_meth_free : procedure(cipher: PEVP_CIPHER); cdecl = nil;
  EVP_CIPHER_meth_set_iv_length : function(cipher: PEVP_CIPHER; iv_len: Integer): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_flags : function(cipher: PEVP_CIPHER; flags: Cardinal): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_impl_ctx_size : function(cipher: PEVP_CIPHER; ctx_size: Integer): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_init : function(cipher: PEVP_CIPHER; init: EVP_CIPHER_meth_set_init_init): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_do_cipher : function(cipher: PEVP_CIPHER; do_cipher: EVP_CIPHER_meth_set_do_cipher_do_cipher): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_cleanup : function(cipher: PEVP_CIPHER; cleanup: EVP_CIPHER_meth_set_cleanup_cleanup): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_set_asn1_params : function(cipher: PEVP_CIPHER; set_asn1_parameters: EVP_CIPHER_meth_set_set_asn1_params_set_asn1_parameters): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_get_asn1_params : function(cipher: PEVP_CIPHER; get_asn1_parameters: EVP_CIPHER_meth_set_get_asn1_params_get_asn1_parameters): Integer; cdecl = nil;
  EVP_CIPHER_meth_set_ctrl : function(cipher: PEVP_CIPHER; ctrl: EVP_CIPHER_meth_set_ctrl_ctrl): Integer; cdecl = nil;
//  EVP_CIPHER_meth_get_init : function(ctx: PEVP_CIPHER_CTXkey: PByteiv: PByteenc: Integercipher: PEVP_CIPHER): Integer; cdecl = nil;
//  EVP_CIPHER_meth_get_do_cipher : function(ctx: PEVP_CIPHER_CTXvout: PBytevin: PByteinl: NativeUIntcipher: PEVP_CIPHER): Integer; cdecl = nil;
//  EVP_CIPHER_meth_get_cleanup : function(p1: PEVP_CIPHER_CTXcipher: PEVP_CIPHER): Integer; cdecl = nil;
//  EVP_CIPHER_meth_get_set_asn1_params : function(p1: PEVP_CIPHER_CTXp2: PASN1_TYPEcipher: PEVP_CIPHER): Integer; cdecl = nil;
//  EVP_CIPHER_meth_get_get_asn1_params : function(p1: PEVP_CIPHER_CTXp2: PASN1_TYPEcipher: PEVP_CIPHER): Integer; cdecl = nil;
//  EVP_CIPHER_meth_get_ctrl : function(p1: PEVP_CIPHER_CTXvtype: Integerarg: Integerptr: Pointercipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_MD_type : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_pkey_type : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_size : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_block_size : function(md: PEVP_MD): Integer; cdecl = nil;
  EVP_MD_flags : function(md: PEVP_MD): Cardinal; cdecl = nil;
  EVP_MD_CTX_md : function(ctx: PEVP_MD_CTX): PEVP_MD; cdecl = nil;
//  EVP_MD_CTX_update_fn : function(ctx: PEVP_MD_CTXdata: Pointercount: NativeUIntctx: PEVP_MD_CTX): Integer; cdecl = nil;
  EVP_MD_CTX_set_update_fn : procedure(ctx: PEVP_MD_CTX; update: EVP_MD_CTX_set_update_fn_update); cdecl = nil;
  EVP_MD_CTX_pkey_ctx : function(ctx: PEVP_MD_CTX): PEVP_PKEY_CTX; cdecl = nil;
  EVP_MD_CTX_set_pkey_ctx : procedure(ctx: PEVP_MD_CTX; pctx: PEVP_PKEY_CTX); cdecl = nil;
  EVP_MD_CTX_md_data : function(ctx: PEVP_MD_CTX): Pointer; cdecl = nil;
  EVP_CIPHER_nid : function(cipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_CIPHER_block_size : function(cipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_CIPHER_impl_ctx_size : function(cipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_CIPHER_key_length : function(cipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_CIPHER_iv_length : function(cipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_CIPHER_flags : function(cipher: PEVP_CIPHER): Cardinal; cdecl = nil;
  EVP_CIPHER_CTX_cipher : function(ctx: PEVP_CIPHER_CTX): PEVP_CIPHER; cdecl = nil;
  EVP_CIPHER_CTX_encrypting : function(ctx: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_nid : function(ctx: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_block_size : function(ctx: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_key_length : function(ctx: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_iv_length : function(ctx: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_iv : function(ctx: PEVP_CIPHER_CTX): PByte; cdecl = nil;
  EVP_CIPHER_CTX_original_iv : function(ctx: PEVP_CIPHER_CTX): PByte; cdecl = nil;
  EVP_CIPHER_CTX_iv_noconst : function(ctx: PEVP_CIPHER_CTX): PByte; cdecl = nil;
  EVP_CIPHER_CTX_buf_noconst : function(ctx: PEVP_CIPHER_CTX): PByte; cdecl = nil;
  EVP_CIPHER_CTX_num : function(ctx: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_set_num : procedure(ctx: PEVP_CIPHER_CTX; num: Integer); cdecl = nil;
  EVP_CIPHER_CTX_copy : function(vout: PEVP_CIPHER_CTX; vin: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_get_app_data : function(ctx: PEVP_CIPHER_CTX): Pointer; cdecl = nil;
  EVP_CIPHER_CTX_set_app_data : procedure(ctx: PEVP_CIPHER_CTX; data: Pointer); cdecl = nil;
  EVP_CIPHER_CTX_get_cipher_data : function(ctx: PEVP_CIPHER_CTX): Pointer; cdecl = nil;
  EVP_CIPHER_CTX_set_cipher_data : function(ctx: PEVP_CIPHER_CTX; cipher_data: Pointer): Pointer; cdecl = nil;
  EVP_Cipher : function(c: PEVP_CIPHER_CTX; vout: PByte; vin: PByte; inl: Cardinal): Integer; cdecl = nil;
  EVP_MD_CTX_ctrl : function(ctx: PEVP_MD_CTX; cmd: Integer; p1: Integer; p2: Pointer): Integer; cdecl = nil;
  EVP_MD_CTX_new : function(): PEVP_MD_CTX; cdecl = nil;
  EVP_MD_CTX_create : function(): PEVP_MD_CTX; cdecl = nil;
  EVP_MD_CTX_reset : function(ctx: PEVP_MD_CTX): Integer; cdecl = nil;
  EVP_MD_CTX_free : procedure(ctx: PEVP_MD_CTX); cdecl = nil;
  EVP_MD_CTX_destroy : procedure(ctx: PEVP_MD_CTX); cdecl = nil;
  EVP_MD_CTX_copy_ex : function(vout: PEVP_MD_CTX; vin: PEVP_MD_CTX): Integer; cdecl = nil;
  EVP_MD_CTX_set_flags : procedure(ctx: PEVP_MD_CTX; flags: Integer); cdecl = nil;
  EVP_MD_CTX_clear_flags : procedure(ctx: PEVP_MD_CTX; flags: Integer); cdecl = nil;
  EVP_MD_CTX_test_flags : function(ctx: PEVP_MD_CTX; flags: Integer): Integer; cdecl = nil;
  EVP_DigestInit_ex : function(ctx: PEVP_MD_CTX; vtype: PEVP_MD; impl: PENGINE): Integer; cdecl = nil;
  EVP_DigestUpdate : function(ctx: PEVP_MD_CTX; d: Pointer; cnt: NativeUInt): Integer; cdecl = nil;
  EVP_DigestFinal_ex : function(ctx: PEVP_MD_CTX; md: PByte; s: PCardinal): Integer; cdecl = nil;
  EVP_Digest : function(data: Pointer; count: NativeUInt; md: PByte; size: PCardinal; vtype: PEVP_MD; impl: PENGINE): Integer; cdecl = nil;
  EVP_MD_CTX_copy : function(vout: PEVP_MD_CTX; vin: PEVP_MD_CTX): Integer; cdecl = nil;
  EVP_DigestInit : function(ctx: PEVP_MD_CTX; vtype: PEVP_MD): Integer; cdecl = nil;
  EVP_DigestFinal : function(ctx: PEVP_MD_CTX; md: PByte; s: PCardinal): Integer; cdecl = nil;
  EVP_DigestFinalXOF : function(ctx: PEVP_MD_CTX; md: PByte; len: NativeUInt): Integer; cdecl = nil;
  EVP_read_pw_string : function(buf: PUTF8Char; length: Integer; prompt: PUTF8Char; verify: Integer): Integer; cdecl = nil;
  EVP_read_pw_string_min : function(buf: PUTF8Char; minlen: Integer; maxlen: Integer; prompt: PUTF8Char; verify: Integer): Integer; cdecl = nil;
  EVP_set_pw_prompt : procedure(prompt: PUTF8Char); cdecl = nil;
  EVP_get_pw_prompt : function(): PUTF8Char; cdecl = nil;
  EVP_BytesToKey : function(vtype: PEVP_CIPHER; md: PEVP_MD; salt: PByte; data: PByte; datal: Integer; count: Integer; key: PByte; iv: PByte): Integer; cdecl = nil;
  EVP_CIPHER_CTX_set_flags : procedure(ctx: PEVP_CIPHER_CTX; flags: Integer); cdecl = nil;
  EVP_CIPHER_CTX_clear_flags : procedure(ctx: PEVP_CIPHER_CTX; flags: Integer); cdecl = nil;
  EVP_CIPHER_CTX_test_flags : function(ctx: PEVP_CIPHER_CTX; flags: Integer): Integer; cdecl = nil;
  EVP_EncryptInit : function(ctx: PEVP_CIPHER_CTX; cipher: PEVP_CIPHER; key: PByte; iv: PByte): Integer; cdecl = nil;
  EVP_EncryptInit_ex : function(ctx: PEVP_CIPHER_CTX; cipher: PEVP_CIPHER; impl: PENGINE; key: PByte; iv: PByte): Integer; cdecl = nil;
  EVP_EncryptUpdate : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger; vin: PByte; inl: Integer): Integer; cdecl = nil;
  EVP_EncryptFinal_ex : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_EncryptFinal : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_DecryptInit : function(ctx: PEVP_CIPHER_CTX; cipher: PEVP_CIPHER; key: PByte; iv: PByte): Integer; cdecl = nil;
  EVP_DecryptInit_ex : function(ctx: PEVP_CIPHER_CTX; cipher: PEVP_CIPHER; impl: PENGINE; key: PByte; iv: PByte): Integer; cdecl = nil;
  EVP_DecryptUpdate : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger; vin: PByte; inl: Integer): Integer; cdecl = nil;
  EVP_DecryptFinal : function(ctx: PEVP_CIPHER_CTX; outm: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_DecryptFinal_ex : function(ctx: PEVP_CIPHER_CTX; outm: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_CipherInit : function(ctx: PEVP_CIPHER_CTX; cipher: PEVP_CIPHER; key: PByte; iv: PByte; enc: Integer): Integer; cdecl = nil;
  EVP_CipherInit_ex : function(ctx: PEVP_CIPHER_CTX; cipher: PEVP_CIPHER; impl: PENGINE; key: PByte; iv: PByte; enc: Integer): Integer; cdecl = nil;
  EVP_CipherUpdate : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger; vin: PByte; inl: Integer): Integer; cdecl = nil;
  EVP_CipherFinal : function(ctx: PEVP_CIPHER_CTX; outm: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_CipherFinal_ex : function(ctx: PEVP_CIPHER_CTX; outm: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_SignFinal : function(ctx: PEVP_MD_CTX; md: PByte; s: PCardinal; pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_DigestSign : function(ctx: PEVP_MD_CTX; sigret: PByte; var siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl = nil;
  EVP_VerifyFinal : function(ctx: PEVP_MD_CTX; sigbuf: PByte; siglen: Cardinal; pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_DigestVerify : function(ctx: PEVP_MD_CTX; sigret: PByte; siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl = nil;
  EVP_DigestSignInit : function(ctx: PEVP_MD_CTX; pctx: PPEVP_PKEY_CTX; vtype: PEVP_MD; e: PENGINE; pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_DigestSignFinal : function(ctx: PEVP_MD_CTX; sigret: PByte; var siglen: NativeUInt): Integer; cdecl = nil;
  EVP_DigestVerifyInit : function(ctx: PEVP_MD_CTX; pctx: PPEVP_PKEY_CTX; vtype: PEVP_MD; e: PENGINE; pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_DigestVerifyFinal : function(ctx: PEVP_MD_CTX; sig: PByte; siglen: NativeUInt): Integer; cdecl = nil;
  EVP_OpenInit : function(ctx: PEVP_CIPHER_CTX; vtype: PEVP_CIPHER; ek: PByte; ekl: Integer; iv: PByte; priv: PEVP_PKEY): Integer; cdecl = nil;
  EVP_OpenFinal : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_SealInit : function(ctx: PEVP_CIPHER_CTX; vtype: PEVP_CIPHER; ek: PPByte; ekl: PInteger; iv: PByte; pubk: PPEVP_PKEY; npubk: Integer): Integer; cdecl = nil;
  EVP_SealFinal : function(ctx: PEVP_CIPHER_CTX; vout: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_ENCODE_CTX_new : function(): PEVP_ENCODE_CTX; cdecl = nil;
  EVP_ENCODE_CTX_free : procedure(ctx: PEVP_ENCODE_CTX); cdecl = nil;
  EVP_ENCODE_CTX_copy : function(dctx: PEVP_ENCODE_CTX; sctx: PEVP_ENCODE_CTX): Integer; cdecl = nil;
  EVP_ENCODE_CTX_num : function(ctx: PEVP_ENCODE_CTX): Integer; cdecl = nil;
  EVP_EncodeInit : procedure(ctx: PEVP_ENCODE_CTX); cdecl = nil;
  EVP_EncodeUpdate : function(ctx: PEVP_ENCODE_CTX; vout: PByte; outl: PInteger; vin: PByte; inl: Integer): Integer; cdecl = nil;
  EVP_EncodeFinal : procedure(ctx: PEVP_ENCODE_CTX; vout: PByte; outl: PInteger); cdecl = nil;
  EVP_EncodeBlock : function(t: PByte; f: PByte; n: Integer): Integer; cdecl = nil;
  EVP_DecodeInit : procedure(ctx: PEVP_ENCODE_CTX); cdecl = nil;
  EVP_DecodeUpdate : function(ctx: PEVP_ENCODE_CTX; vout: PByte; outl: PInteger; vin: PByte; inl: Integer): Integer; cdecl = nil;
  EVP_DecodeFinal : function(ctx: PEVP_ENCODE_CTX; vout: PByte; outl: PInteger): Integer; cdecl = nil;
  EVP_DecodeBlock : function(t: PByte; f: PByte; n: Integer): Integer; cdecl = nil;
  EVP_CIPHER_CTX_new : function(): PEVP_CIPHER_CTX; cdecl = nil;
  EVP_CIPHER_CTX_reset : function(c: PEVP_CIPHER_CTX): Integer; cdecl = nil;
  EVP_CIPHER_CTX_free : procedure(c: PEVP_CIPHER_CTX); cdecl = nil;
  EVP_CIPHER_CTX_set_key_length : function(x: PEVP_CIPHER_CTX; keylen: Integer): Integer; cdecl = nil;
  EVP_CIPHER_CTX_set_padding : function(c: PEVP_CIPHER_CTX; pad: Integer): Integer; cdecl = nil;
  EVP_CIPHER_CTX_ctrl : function(ctx: PEVP_CIPHER_CTX; vtype: Integer; arg: Integer; ptr: Pointer): Integer; cdecl = nil;
  EVP_CIPHER_CTX_rand_key : function(ctx: PEVP_CIPHER_CTX; key: PByte): Integer; cdecl = nil;
  BIO_f_md : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_base64 : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_cipher : function(): PBIO_METHOD; cdecl = nil;
  BIO_f_reliable : function(): PBIO_METHOD; cdecl = nil;
  BIO_set_cipher : function(b: PBIO; c: PEVP_CIPHER; k: PByte; i: PByte; enc: Integer): Integer; cdecl = nil;
  EVP_md_null : function(): PEVP_MD; cdecl = nil;
  EVP_md4 : function(): PEVP_MD; cdecl = nil;
  EVP_md5 : function(): PEVP_MD; cdecl = nil;
  EVP_md5_sha1 : function(): PEVP_MD; cdecl = nil;
  EVP_blake2b512 : function(): PEVP_MD; cdecl = nil;
  EVP_blake2s256 : function(): PEVP_MD; cdecl = nil;
  EVP_sha1 : function(): PEVP_MD; cdecl = nil;
  EVP_sha224 : function(): PEVP_MD; cdecl = nil;
  EVP_sha256 : function(): PEVP_MD; cdecl = nil;
  EVP_sha384 : function(): PEVP_MD; cdecl = nil;
  EVP_sha512 : function(): PEVP_MD; cdecl = nil;
  EVP_sha512_224 : function(): PEVP_MD; cdecl = nil;
  EVP_sha512_256 : function(): PEVP_MD; cdecl = nil;
  EVP_sha3_224 : function(): PEVP_MD; cdecl = nil;
  EVP_sha3_256 : function(): PEVP_MD; cdecl = nil;
  EVP_sha3_384 : function(): PEVP_MD; cdecl = nil;
  EVP_sha3_512 : function(): PEVP_MD; cdecl = nil;
  EVP_shake128 : function(): PEVP_MD; cdecl = nil;
  EVP_shake256 : function(): PEVP_MD; cdecl = nil;
  EVP_mdc2 : function(): PEVP_MD; cdecl = nil;
  EVP_ripemd160 : function(): PEVP_MD; cdecl = nil;
  EVP_whirlpool : function(): PEVP_MD; cdecl = nil;
  EVP_sm3 : function(): PEVP_MD; cdecl = nil;
  EVP_enc_null : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_desx_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_des_ede3_wrap : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc4 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc4_40 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc4_hmac_md5 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_idea_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_idea_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_idea_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_idea_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_idea_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_40_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_64_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_rc2_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_bf_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_bf_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_bf_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_bf_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_bf_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_cast5_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_cast5_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_cast5_cfb64 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_cast5_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_cast5_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_ccm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_gcm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_xts : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_wrap : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_wrap_pad : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_ocb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_ccm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_gcm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_wrap : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_wrap_pad : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_192_ocb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_ccm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_gcm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_xts : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_wrap : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_wrap_pad : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_ocb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cbc_hmac_sha1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cbc_hmac_sha1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_128_cbc_hmac_sha256 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aes_256_cbc_hmac_sha256 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_gcm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_128_ccm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_gcm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_192_ccm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_gcm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_aria_256_ccm : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_128_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_192_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_cfb1 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_cfb8 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_camellia_256_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_chacha20 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_chacha20_poly1305 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_seed_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_seed_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_seed_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_seed_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_seed_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_sm4_ecb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_sm4_cbc : function(): PEVP_CIPHER; cdecl = nil;
  EVP_sm4_cfb128 : function(): PEVP_CIPHER; cdecl = nil;
  EVP_sm4_cfb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_sm4_ofb : function(): PEVP_CIPHER; cdecl = nil;
  EVP_sm4_ctr : function(): PEVP_CIPHER; cdecl = nil;
  EVP_add_cipher : function(cipher: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_add_digest : function(digest: PEVP_MD): Integer; cdecl = nil;
  EVP_get_cipherbyname : function(name: PUTF8Char): PEVP_CIPHER; cdecl = nil;
  EVP_get_digestbyname : function(name: PUTF8Char): PEVP_MD; cdecl = nil;
  EVP_CIPHER_do_all : procedure(fn: EVP_CIPHER_do_all_fn; arg: Pointer); cdecl = nil;
  EVP_CIPHER_do_all_sorted : procedure(fn: EVP_CIPHER_do_all_sorted_fn; arg: Pointer); cdecl = nil;
  EVP_MD_do_all : procedure(fn: EVP_MD_do_all_fn; arg: Pointer); cdecl = nil;
  EVP_MD_do_all_sorted : procedure(fn: EVP_MD_do_all_sorted_fn; arg: Pointer); cdecl = nil;
  EVP_PKEY_decrypt_old : function(dec_key: PByte; enc_key: PByte; enc_key_len: Integer; private_key: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_encrypt_old : function(enc_key: PByte; key: PByte; key_len: Integer; pub_key: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_type : function(vtype: Integer): Integer; cdecl = nil;
  EVP_PKEY_id : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_base_id : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_bits : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_security_bits : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_size : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_set_type : function(pkey: PEVP_PKEY; vtype: Integer): Integer; cdecl = nil;
  EVP_PKEY_set_type_str : function(pkey: PEVP_PKEY; str: PUTF8Char; len: Integer): Integer; cdecl = nil;
  EVP_PKEY_set_alias_type : function(pkey: PEVP_PKEY; vtype: Integer): Integer; cdecl = nil;
  EVP_PKEY_set1_engine : function(pkey: PEVP_PKEY; e: PENGINE): Integer; cdecl = nil;
  EVP_PKEY_get0_engine : function(pkey: PEVP_PKEY): PENGINE; cdecl = nil;
  EVP_PKEY_assign : function(pkey: PEVP_PKEY; vtype: Integer; key: Pointer): Integer; cdecl = nil;
  EVP_PKEY_get0 : function(pkey: PEVP_PKEY): Pointer; cdecl = nil;
  EVP_PKEY_get0_hmac : function(pkey: PEVP_PKEY; len: PNativeUInt): PByte; cdecl = nil;
  EVP_PKEY_get0_poly1305 : function(pkey: PEVP_PKEY; len: PNativeUInt): PByte; cdecl = nil;
  EVP_PKEY_get0_siphash : function(pkey: PEVP_PKEY; len: PNativeUInt): PByte; cdecl = nil;
  EVP_PKEY_set1_RSA : function(pkey: PEVP_PKEY; key: Prsa_st): Integer; cdecl = nil;
  EVP_PKEY_get0_RSA : function(pkey: PEVP_PKEY): Prsa_st; cdecl = nil;
  EVP_PKEY_get1_RSA : function(pkey: PEVP_PKEY): Prsa_st; cdecl = nil;
  EVP_PKEY_set1_DSA : function(pkey: PEVP_PKEY; key: Pdsa_st): Integer; cdecl = nil;
  EVP_PKEY_get0_DSA : function(pkey: PEVP_PKEY): Pdsa_st; cdecl = nil;
  EVP_PKEY_get1_DSA : function(pkey: PEVP_PKEY): Pdsa_st; cdecl = nil;
  EVP_PKEY_set1_DH : function(pkey: PEVP_PKEY; key: Pdh_st): Integer; cdecl = nil;
  EVP_PKEY_get0_DH : function(pkey: PEVP_PKEY): Pdh_st; cdecl = nil;
  EVP_PKEY_get1_DH : function(pkey: PEVP_PKEY): Pdh_st; cdecl = nil;
  EVP_PKEY_set1_EC_KEY : function(pkey: PEVP_PKEY; key: Pec_key_st): Integer; cdecl = nil;
  EVP_PKEY_get0_EC_KEY : function(pkey: PEVP_PKEY): Pec_key_st; cdecl = nil;
  EVP_PKEY_get1_EC_KEY : function(pkey: PEVP_PKEY): Pec_key_st; cdecl = nil;
  EVP_PKEY_new : function(): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_up_ref : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_free : procedure(pkey: PEVP_PKEY); cdecl = nil;
  d2i_PublicKey : function(vtype: Integer; a: PPEVP_PKEY; pp: PPByte; length: Integer): PEVP_PKEY; cdecl = nil;
  i2d_PublicKey : function(a: PEVP_PKEY; pp: PPByte): Integer; cdecl = nil;
  d2i_PrivateKey : function(vtype: Integer; a: PPEVP_PKEY; pp: PPByte; length: Integer): PEVP_PKEY; cdecl = nil;
  d2i_AutoPrivateKey : function(a: PPEVP_PKEY; pp: PPByte; length: Integer): PEVP_PKEY; cdecl = nil;
  i2d_PrivateKey : function(a: PEVP_PKEY; pp: PPByte): Integer; cdecl = nil;
  EVP_PKEY_copy_parameters : function(vto: PEVP_PKEY; from: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_missing_parameters : function(pkey: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_save_parameters : function(pkey: PEVP_PKEY; mode: Integer): Integer; cdecl = nil;
  EVP_PKEY_cmp_parameters : function(a: PEVP_PKEY; b: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_cmp : function(a: PEVP_PKEY; b: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_print_public : function(vout: PBIO; pkey: PEVP_PKEY; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl = nil;
  EVP_PKEY_print_private : function(vout: PBIO; pkey: PEVP_PKEY; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl = nil;
  EVP_PKEY_print_params : function(vout: PBIO; pkey: PEVP_PKEY; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl = nil;
  EVP_PKEY_get_default_digest_nid : function(pkey: PEVP_PKEY; pnid: PInteger): Integer; cdecl = nil;
  EVP_PKEY_set1_tls_encodedpoint : function(pkey: PEVP_PKEY; pt: PByte; ptlen: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_get1_tls_encodedpoint : function(pkey: PEVP_PKEY; ppt: PPByte): NativeUInt; cdecl = nil;
  EVP_CIPHER_type : function(ctx: PEVP_CIPHER): Integer; cdecl = nil;
  EVP_CIPHER_param_to_asn1 : function(c: PEVP_CIPHER_CTX; vtype: PASN1_TYPE): Integer; cdecl = nil;
  EVP_CIPHER_asn1_to_param : function(c: PEVP_CIPHER_CTX; vtype: PASN1_TYPE): Integer; cdecl = nil;
  EVP_CIPHER_set_asn1_iv : function(c: PEVP_CIPHER_CTX; vtype: PASN1_TYPE): Integer; cdecl = nil;
  EVP_CIPHER_get_asn1_iv : function(c: PEVP_CIPHER_CTX; vtype: PASN1_TYPE): Integer; cdecl = nil;
  PKCS5_PBE_keyivgen : function(ctx: PEVP_CIPHER_CTX; pass: PUTF8Char; passlen: Integer; param: PASN1_TYPE; cipher: PEVP_CIPHER; md: PEVP_MD; en_de: Integer): Integer; cdecl = nil;
  PKCS5_PBKDF2_HMAC_SHA1 : function(pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; keylen: Integer; vout: PByte): Integer; cdecl = nil;
  PKCS5_PBKDF2_HMAC : function(pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; digest: PEVP_MD; keylen: Integer; vout: PByte): Integer; cdecl = nil;
  PKCS5_v2_PBE_keyivgen : function(ctx: PEVP_CIPHER_CTX; pass: PUTF8Char; passlen: Integer; param: PASN1_TYPE; cipher: PEVP_CIPHER; md: PEVP_MD; en_de: Integer): Integer; cdecl = nil;
  EVP_PBE_scrypt : function(pass: PUTF8Char; passlen: NativeUInt; salt: PByte; saltlen: NativeUInt; N: UInt64; r: UInt64; p: UInt64; maxmem: UInt64; key: PByte; keylen: NativeUInt): Integer; cdecl = nil;
  PKCS5_v2_scrypt_keyivgen : function(ctx: PEVP_CIPHER_CTX; pass: PUTF8Char; passlen: Integer; param: PASN1_TYPE; c: PEVP_CIPHER; md: PEVP_MD; en_de: Integer): Integer; cdecl = nil;
  PKCS5_PBE_add : procedure(); cdecl = nil;
  EVP_PBE_CipherInit : function(pbe_obj: PASN1_OBJECT; pass: PUTF8Char; passlen: Integer; param: PASN1_TYPE; ctx: PEVP_CIPHER_CTX; en_de: Integer): Integer; cdecl = nil;
  EVP_PBE_alg_add_type : function(pbe_type: Integer; pbe_nid: Integer; cipher_nid: Integer; md_nid: Integer; keygen: PEVP_PBE_KEYGEN): Integer; cdecl = nil;
  EVP_PBE_alg_add : function(nid: Integer; cipher: PEVP_CIPHER; md: PEVP_MD; keygen: PEVP_PBE_KEYGEN): Integer; cdecl = nil;
  EVP_PBE_find : function(vtype: Integer; pbe_nid: Integer; pcnid: PInteger; pmnid: PInteger; pkeygen: PPEVP_PBE_KEYGEN): Integer; cdecl = nil;
  EVP_PBE_cleanup : procedure(); cdecl = nil;
  EVP_PBE_get : function(ptype: PInteger; ppbe_nid: PInteger; num: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_asn1_get_count : function(): Integer; cdecl = nil;
  EVP_PKEY_asn1_get0 : function(idx: Integer): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  EVP_PKEY_asn1_find : function(pe: PPENGINE; vtype: Integer): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  EVP_PKEY_asn1_find_str : function(pe: PPENGINE; str: PUTF8Char; len: Integer): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  EVP_PKEY_asn1_add0 : function(ameth: PEVP_PKEY_ASN1_METHOD): Integer; cdecl = nil;
  EVP_PKEY_asn1_add_alias : function(vto: Integer; from: Integer): Integer; cdecl = nil;
  EVP_PKEY_asn1_get0_info : function(ppkey_id: PInteger; pkey_base_id: PInteger; ppkey_flags: PInteger; pinfo: PPUTF8Char; ppem_str: PPUTF8Char; ameth: PEVP_PKEY_ASN1_METHOD): Integer; cdecl = nil;
  EVP_PKEY_get0_asn1 : function(pkey: PEVP_PKEY): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  EVP_PKEY_asn1_new : function(id: Integer; flags: Integer; pem_str: PUTF8Char; info: PUTF8Char): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  EVP_PKEY_asn1_copy : procedure(dst: PEVP_PKEY_ASN1_METHOD; src: PEVP_PKEY_ASN1_METHOD); cdecl = nil;
  EVP_PKEY_asn1_free : procedure(ameth: PEVP_PKEY_ASN1_METHOD); cdecl = nil;
  EVP_PKEY_asn1_set_public : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pub_decode: EVP_PKEY_asn1_set_public_pub_decode; pub_encode: EVP_PKEY_asn1_set_public_pub_encode; pub_cmp: EVP_PKEY_asn1_set_public_pub_cmp; pub_print: EVP_PKEY_asn1_set_public_pub_print; pkey_size: EVP_PKEY_asn1_set_public_pkey_size; pkey_bits: EVP_PKEY_asn1_set_public_pkey_bits); cdecl = nil;
  EVP_PKEY_asn1_set_private : procedure(ameth: PEVP_PKEY_ASN1_METHOD; priv_decode: EVP_PKEY_asn1_set_private_priv_decode; priv_encode: EVP_PKEY_asn1_set_private_priv_encode; priv_print: EVP_PKEY_asn1_set_private_priv_print); cdecl = nil;
  EVP_PKEY_asn1_set_param : procedure(ameth: PEVP_PKEY_ASN1_METHOD; param_decode: EVP_PKEY_asn1_set_param_param_decode; param_encode: EVP_PKEY_asn1_set_param_param_encode; param_missing: EVP_PKEY_asn1_set_param_param_missing; param_copy: EVP_PKEY_asn1_set_param_param_copy; param_cmp: EVP_PKEY_asn1_set_param_param_cmp; param_print: EVP_PKEY_asn1_set_param_param_print); cdecl = nil;
  EVP_PKEY_asn1_set_free : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pkey_free: EVP_PKEY_asn1_set_free_pkey_free); cdecl = nil;
  EVP_PKEY_asn1_set_ctrl : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pkey_ctrl: EVP_PKEY_asn1_set_ctrl_pkey_ctrl); cdecl = nil;
  EVP_PKEY_asn1_set_item : procedure(ameth: PEVP_PKEY_ASN1_METHOD; item_verify: EVP_PKEY_asn1_set_item_item_verify; item_sign: EVP_PKEY_asn1_set_item_item_sign); cdecl = nil;
  EVP_PKEY_asn1_set_siginf : procedure(ameth: PEVP_PKEY_ASN1_METHOD; siginf_set: EVP_PKEY_asn1_set_siginf_siginf_set); cdecl = nil;
  EVP_PKEY_asn1_set_check : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pkey_check: EVP_PKEY_asn1_set_check_pkey_check); cdecl = nil;
  EVP_PKEY_asn1_set_public_check : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pkey_pub_check: EVP_PKEY_asn1_set_public_check_pkey_pub_check); cdecl = nil;
  EVP_PKEY_asn1_set_param_check : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pkey_param_check: EVP_PKEY_asn1_set_param_check_pkey_param_check); cdecl = nil;
  EVP_PKEY_asn1_set_set_priv_key : procedure(ameth: PEVP_PKEY_ASN1_METHOD; set_priv_key: EVP_PKEY_asn1_set_set_priv_key_set_priv_key); cdecl = nil;
  EVP_PKEY_asn1_set_set_pub_key : procedure(ameth: PEVP_PKEY_ASN1_METHOD; set_pub_key: EVP_PKEY_asn1_set_set_pub_key_set_pub_key); cdecl = nil;
  EVP_PKEY_asn1_set_get_priv_key : procedure(ameth: PEVP_PKEY_ASN1_METHOD; get_priv_key: EVP_PKEY_asn1_set_get_priv_key_get_priv_key); cdecl = nil;
  EVP_PKEY_asn1_set_get_pub_key : procedure(ameth: PEVP_PKEY_ASN1_METHOD; get_pub_key: EVP_PKEY_asn1_set_get_pub_key_get_pub_key); cdecl = nil;
  EVP_PKEY_asn1_set_security_bits : procedure(ameth: PEVP_PKEY_ASN1_METHOD; pkey_security_bits: EVP_PKEY_asn1_set_security_bits_pkey_security_bits); cdecl = nil;
  EVP_PKEY_meth_find : function(vtype: Integer): PEVP_PKEY_METHOD; cdecl = nil;
  EVP_PKEY_meth_new : function(id: Integer; flags: Integer): PEVP_PKEY_METHOD; cdecl = nil;
  EVP_PKEY_meth_get0_info : procedure(ppkey_id: PInteger; pflags: PInteger; meth: PEVP_PKEY_METHOD); cdecl = nil;
  EVP_PKEY_meth_copy : procedure(dst: PEVP_PKEY_METHOD; src: PEVP_PKEY_METHOD); cdecl = nil;
  EVP_PKEY_meth_free : procedure(pmeth: PEVP_PKEY_METHOD); cdecl = nil;
  EVP_PKEY_meth_add0 : function(pmeth: PEVP_PKEY_METHOD): Integer; cdecl = nil;
  EVP_PKEY_meth_remove : function(pmeth: PEVP_PKEY_METHOD): Integer; cdecl = nil;
  EVP_PKEY_meth_get_count : function(): NativeUInt; cdecl = nil;
  EVP_PKEY_meth_get0 : function(idx: NativeUInt): PEVP_PKEY_METHOD; cdecl = nil;
  EVP_PKEY_CTX_new : function(pkey: PEVP_PKEY; e: PENGINE): PEVP_PKEY_CTX; cdecl = nil;
  EVP_PKEY_CTX_new_id : function(id: Integer; e: PENGINE): PEVP_PKEY_CTX; cdecl = nil;
  EVP_PKEY_CTX_dup : function(ctx: PEVP_PKEY_CTX): PEVP_PKEY_CTX; cdecl = nil;
  EVP_PKEY_CTX_free : procedure(ctx: PEVP_PKEY_CTX); cdecl = nil;
  EVP_PKEY_CTX_ctrl : function(ctx: PEVP_PKEY_CTX; keytype: Integer; optype: Integer; cmd: Integer; p1: Integer; p2: Pointer): Integer; cdecl = nil;
  EVP_PKEY_CTX_ctrl_str : function(ctx: PEVP_PKEY_CTX; vtype: PUTF8Char; value: PUTF8Char): Integer; cdecl = nil;
  EVP_PKEY_CTX_ctrl_uint64 : function(ctx: PEVP_PKEY_CTX; keytype: Integer; optype: Integer; cmd: Integer; value: UInt64): Integer; cdecl = nil;
  EVP_PKEY_CTX_str2ctrl : function(ctx: PEVP_PKEY_CTX; cmd: Integer; str: PUTF8Char): Integer; cdecl = nil;
  EVP_PKEY_CTX_hex2ctrl : function(ctx: PEVP_PKEY_CTX; cmd: Integer; hex: PUTF8Char): Integer; cdecl = nil;
  EVP_PKEY_CTX_md : function(ctx: PEVP_PKEY_CTX; optype: Integer; cmd: Integer; md: PUTF8Char): Integer; cdecl = nil;
  EVP_PKEY_CTX_get_operation : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_CTX_set0_keygen_info : procedure(ctx: PEVP_PKEY_CTX; dat: PInteger; datlen: Integer); cdecl = nil;
  EVP_PKEY_new_mac_key : function(vtype: Integer; e: PENGINE; key: PByte; keylen: Integer): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_new_raw_private_key : function(vtype: Integer; e: PENGINE; priv: PByte; len: NativeUInt): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_new_raw_public_key : function(vtype: Integer; e: PENGINE; pub: PByte; len: NativeUInt): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_get_raw_private_key : function(pkey: PEVP_PKEY; priv: PByte; len: PNativeUInt): Integer; cdecl = nil;
  EVP_PKEY_get_raw_public_key : function(pkey: PEVP_PKEY; pub: PByte; len: PNativeUInt): Integer; cdecl = nil;
  EVP_PKEY_new_CMAC_key : function(e: PENGINE; priv: PByte; len: NativeUInt; cipher: PEVP_CIPHER): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_CTX_set_data : procedure(ctx: PEVP_PKEY_CTX; data: Pointer); cdecl = nil;
  EVP_PKEY_CTX_get_data : function(ctx: PEVP_PKEY_CTX): Pointer; cdecl = nil;
  EVP_PKEY_CTX_get0_pkey : function(ctx: PEVP_PKEY_CTX): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_CTX_get0_peerkey : function(ctx: PEVP_PKEY_CTX): PEVP_PKEY; cdecl = nil;
  EVP_PKEY_CTX_set_app_data : procedure(ctx: PEVP_PKEY_CTX; data: Pointer); cdecl = nil;
  EVP_PKEY_CTX_get_app_data : function(ctx: PEVP_PKEY_CTX): Pointer; cdecl = nil;
  EVP_PKEY_sign_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_sign : function(ctx: PEVP_PKEY_CTX; sig: PByte; var siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_verify_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_verify : function(ctx: PEVP_PKEY_CTX; sig: PByte; siglen: NativeUInt; tbs: PByte; tbslen: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_verify_recover_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_verify_recover : function(ctx: PEVP_PKEY_CTX; rout: PByte; routlen: PNativeUInt; sig: PByte; siglen: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_encrypt_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_encrypt : function(ctx: PEVP_PKEY_CTX; vout: PByte; outlen: PNativeUInt; vin: PByte; inlen: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_decrypt_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_decrypt : function(ctx: PEVP_PKEY_CTX; vout: PByte; outlen: PNativeUInt; vin: PByte; inlen: NativeUInt): Integer; cdecl = nil;
  EVP_PKEY_derive_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_derive_set_peer : function(ctx: PEVP_PKEY_CTX; peer: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_derive : function(ctx: PEVP_PKEY_CTX; key: PByte; keylen: PNativeUInt): Integer; cdecl = nil;
  EVP_PKEY_paramgen_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_paramgen : function(ctx: PEVP_PKEY_CTX; ppkey: PPEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_keygen_init : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_keygen : function(ctx: PEVP_PKEY_CTX; ppkey: PPEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_check : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_public_check : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_param_check : function(ctx: PEVP_PKEY_CTX): Integer; cdecl = nil;
  EVP_PKEY_CTX_set_cb : procedure(ctx: PEVP_PKEY_CTX; cb: PEVP_PKEY_gen_cb); cdecl = nil;
  EVP_PKEY_CTX_get_cb : function(ctx: PEVP_PKEY_CTX): PEVP_PKEY_gen_cb; cdecl = nil;
  EVP_PKEY_CTX_get_keygen_info : function(ctx: PEVP_PKEY_CTX; idx: Integer): Integer; cdecl = nil;
  EVP_PKEY_meth_set_init : procedure(pmeth: PEVP_PKEY_METHOD; init: EVP_PKEY_meth_set_init_init); cdecl = nil;
  EVP_PKEY_meth_set_copy : procedure(pmeth: PEVP_PKEY_METHOD; copy: EVP_PKEY_meth_set_copy_copy); cdecl = nil;
  EVP_PKEY_meth_set_cleanup : procedure(pmeth: PEVP_PKEY_METHOD; cleanup: EVP_PKEY_meth_set_cleanup_cleanup); cdecl = nil;
  EVP_PKEY_meth_set_paramgen : procedure(pmeth: PEVP_PKEY_METHOD; paramgen_init: EVP_PKEY_meth_set_paramgen_paramgen_init; paramgen: EVP_PKEY_meth_set_paramgen_paramgen); cdecl = nil;
  EVP_PKEY_meth_set_keygen : procedure(pmeth: PEVP_PKEY_METHOD; keygen_init: EVP_PKEY_meth_set_keygen_keygen_init; keygen: EVP_PKEY_meth_set_keygen_keygen); cdecl = nil;
  EVP_PKEY_meth_set_sign : procedure(pmeth: PEVP_PKEY_METHOD; sign_init: EVP_PKEY_meth_set_sign_sign_init; sign: EVP_PKEY_meth_set_sign_sign); cdecl = nil;
  EVP_PKEY_meth_set_verify : procedure(pmeth: PEVP_PKEY_METHOD; verify_init: EVP_PKEY_meth_set_verify_verify_init; verify: EVP_PKEY_meth_set_verify_verify); cdecl = nil;
  EVP_PKEY_meth_set_verify_recover : procedure(pmeth: PEVP_PKEY_METHOD; verify_recover_init: EVP_PKEY_meth_set_verify_recover_verify_recover_init; verify_recover: EVP_PKEY_meth_set_verify_recover_verify_recover); cdecl = nil;
  EVP_PKEY_meth_set_signctx : procedure(pmeth: PEVP_PKEY_METHOD; signctx_init: EVP_PKEY_meth_set_signctx_signctx_init; signctx: EVP_PKEY_meth_set_signctx_signctx); cdecl = nil;
  EVP_PKEY_meth_set_verifyctx : procedure(pmeth: PEVP_PKEY_METHOD; verifyctx_init: EVP_PKEY_meth_set_verifyctx_verifyctx_init; verifyctx: EVP_PKEY_meth_set_verifyctx_verifyctx); cdecl = nil;
  EVP_PKEY_meth_set_encrypt : procedure(pmeth: PEVP_PKEY_METHOD; encrypt_init: EVP_PKEY_meth_set_encrypt_encrypt_init; encryptfn: EVP_PKEY_meth_set_encrypt_encryptfn); cdecl = nil;
  EVP_PKEY_meth_set_decrypt : procedure(pmeth: PEVP_PKEY_METHOD; decrypt_init: EVP_PKEY_meth_set_decrypt_decrypt_init; decrypt: EVP_PKEY_meth_set_decrypt_decrypt); cdecl = nil;
  EVP_PKEY_meth_set_derive : procedure(pmeth: PEVP_PKEY_METHOD; derive_init: EVP_PKEY_meth_set_derive_derive_init; derive: EVP_PKEY_meth_set_derive_derive); cdecl = nil;
  EVP_PKEY_meth_set_ctrl : procedure(pmeth: PEVP_PKEY_METHOD; ctrl: EVP_PKEY_meth_set_ctrl_ctrl; ctrl_str: EVP_PKEY_meth_set_ctrl_ctrl_str); cdecl = nil;
  EVP_PKEY_meth_set_digestsign : procedure(pmeth: PEVP_PKEY_METHOD; digestsign: EVP_PKEY_meth_set_digestsign_digestsign); cdecl = nil;
  EVP_PKEY_meth_set_digestverify : procedure(pmeth: PEVP_PKEY_METHOD; digestverify: EVP_PKEY_meth_set_digestverify_digestverify); cdecl = nil;
  EVP_PKEY_meth_set_check : procedure(pmeth: PEVP_PKEY_METHOD; check: EVP_PKEY_meth_set_check_check); cdecl = nil;
  EVP_PKEY_meth_set_public_check : procedure(pmeth: PEVP_PKEY_METHOD; check: EVP_PKEY_meth_set_public_check_check); cdecl = nil;
  EVP_PKEY_meth_set_param_check : procedure(pmeth: PEVP_PKEY_METHOD; check: EVP_PKEY_meth_set_param_check_check); cdecl = nil;
  EVP_PKEY_meth_set_digest_custom : procedure(pmeth: PEVP_PKEY_METHOD; digest_custom: EVP_PKEY_meth_set_digest_custom_digest_custom); cdecl = nil;
  EVP_PKEY_meth_get_init : procedure(pmeth: PEVP_PKEY_METHOD; pinit: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }); cdecl = nil;
  EVP_PKEY_meth_get_copy : procedure(pmeth: PEVP_PKEY_METHOD; pcopy: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, EVP_PKEY_CTX *)" }); cdecl = nil;
  EVP_PKEY_meth_get_cleanup : procedure(pmeth: PEVP_PKEY_METHOD; pcleanup: Integer { TODO : Cannot convert original type "void (**)(EVP_PKEY_CTX *)" }); cdecl = nil;
  EVP_PKEY_meth_get_paramgen : procedure(pmeth: PEVP_PKEY_METHOD; pparamgen_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pparamgen: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, EVP_PKEY *)" }); cdecl = nil;
  EVP_PKEY_meth_get_keygen : procedure(pmeth: PEVP_PKEY_METHOD; pkeygen_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pkeygen: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, EVP_PKEY *)" }); cdecl = nil;
  EVP_PKEY_meth_get_sign : procedure(pmeth: PEVP_PKEY_METHOD; psign_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; psign: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_verify : procedure(pmeth: PEVP_PKEY_METHOD; pverify_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pverify: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, const unsigned char *, size_t, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_verify_recover : procedure(pmeth: PEVP_PKEY_METHOD; pverify_recover_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pverify_recover: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_signctx : procedure(pmeth: PEVP_PKEY_METHOD; psignctx_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *)" }; psignctx: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, EVP_MD_CTX *)" }); cdecl = nil;
  EVP_PKEY_meth_get_verifyctx : procedure(pmeth: PEVP_PKEY_METHOD; pverifyctx_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *)" }; pverifyctx: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, const unsigned char *, int, EVP_MD_CTX *)" }); cdecl = nil;
  EVP_PKEY_meth_get_encrypt : procedure(pmeth: PEVP_PKEY_METHOD; pencrypt_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pencryptfn: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_decrypt : procedure(pmeth: PEVP_PKEY_METHOD; pdecrypt_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pdecrypt: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_derive : procedure(pmeth: PEVP_PKEY_METHOD; pderive_init: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *)" }; pderive: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *)" }); cdecl = nil;
  EVP_PKEY_meth_get_ctrl : procedure(pmeth: PEVP_PKEY_METHOD; pctrl: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, int, int, void *)" }; pctrl_str: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, const char *, const char *)" }); cdecl = nil;
  EVP_PKEY_meth_get_digestsign : procedure(pmeth: PEVP_PKEY_METHOD; digestsign: Integer { TODO : Cannot convert original type "int (**)(EVP_MD_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_digestverify : procedure(pmeth: PEVP_PKEY_METHOD; digestverify: Integer { TODO : Cannot convert original type "int (**)(EVP_MD_CTX *, const unsigned char *, size_t, const unsigned char *, size_t)" }); cdecl = nil;
  EVP_PKEY_meth_get_check : procedure(pmeth: PEVP_PKEY_METHOD; pcheck: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY *)" }); cdecl = nil;
  EVP_PKEY_meth_get_public_check : procedure(pmeth: PEVP_PKEY_METHOD; pcheck: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY *)" }); cdecl = nil;
  EVP_PKEY_meth_get_param_check : procedure(pmeth: PEVP_PKEY_METHOD; pcheck: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY *)" }); cdecl = nil;
  EVP_PKEY_meth_get_digest_custom : procedure(pmeth: PEVP_PKEY_METHOD; pdigest_custom: Integer { TODO : Cannot convert original type "int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *)" }); cdecl = nil;
  EVP_add_alg_module : procedure(); cdecl = nil;
  CMAC_CTX_new : function(): PCMAC_CTX; cdecl = nil;
  CMAC_CTX_cleanup : procedure(ctx: PCMAC_CTX); cdecl = nil;
  CMAC_CTX_free : procedure(ctx: PCMAC_CTX); cdecl = nil;
  CMAC_CTX_get0_cipher_ctx : function(ctx: PCMAC_CTX): PEVP_CIPHER_CTX; cdecl = nil;
  CMAC_CTX_copy : function(vout: PCMAC_CTX; vin: PCMAC_CTX): Integer; cdecl = nil;
  CMAC_Init : function(ctx: PCMAC_CTX; key: Pointer; keylen: NativeUInt; cipher: PEVP_CIPHER; impl: PENGINE): Integer; cdecl = nil;
  CMAC_Update : function(ctx: PCMAC_CTX; data: Pointer; dlen: NativeUInt): Integer; cdecl = nil;
  CMAC_Final : function(ctx: PCMAC_CTX; vout: PByte; poutlen: PNativeUInt): Integer; cdecl = nil;
  CMAC_resume : function(ctx: PCMAC_CTX): Integer; cdecl = nil;
  ERR_load_EC_strings : function(): Integer; cdecl = nil;
  EC_GFp_simple_method : function(): PEC_METHOD; cdecl = nil;
  EC_GFp_mont_method : function(): PEC_METHOD; cdecl = nil;
  EC_GFp_nist_method : function(): PEC_METHOD; cdecl = nil;
  EC_GF2m_simple_method : function(): PEC_METHOD; cdecl = nil;
  EC_GROUP_new : function(meth: PEC_METHOD): PEC_GROUP; cdecl = nil;
  EC_GROUP_free : procedure(group: PEC_GROUP); cdecl = nil;
  EC_GROUP_clear_free : procedure(group: PEC_GROUP); cdecl = nil;
  EC_GROUP_copy : function(dst: PEC_GROUP; src: PEC_GROUP): Integer; cdecl = nil;
  EC_GROUP_dup : function(src: PEC_GROUP): PEC_GROUP; cdecl = nil;
  EC_GROUP_method_of : function(group: PEC_GROUP): PEC_METHOD; cdecl = nil;
  EC_METHOD_get_field_type : function(meth: PEC_METHOD): Integer; cdecl = nil;
  EC_GROUP_set_generator : function(group: PEC_GROUP; generator: PEC_POINT; order: PBIGNUM; cofactor: PBIGNUM): Integer; cdecl = nil;
  EC_GROUP_get0_generator : function(group: PEC_GROUP): PEC_POINT; cdecl = nil;
  EC_GROUP_get_mont_data : function(group: PEC_GROUP): PBN_MONT_CTX; cdecl = nil;
  EC_GROUP_get_order : function(group: PEC_GROUP; order: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_get0_order : function(group: PEC_GROUP): PBIGNUM; cdecl = nil;
  EC_GROUP_order_bits : function(group: PEC_GROUP): Integer; cdecl = nil;
  EC_GROUP_get_cofactor : function(group: PEC_GROUP; cofactor: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_get0_cofactor : function(group: PEC_GROUP): PBIGNUM; cdecl = nil;
  EC_GROUP_set_curve_name : procedure(group: PEC_GROUP; nid: Integer); cdecl = nil;
  EC_GROUP_get_curve_name : function(group: PEC_GROUP): Integer; cdecl = nil;
  EC_GROUP_set_asn1_flag : procedure(group: PEC_GROUP; flag: Integer); cdecl = nil;
  EC_GROUP_get_asn1_flag : function(group: PEC_GROUP): Integer; cdecl = nil;
  EC_GROUP_set_point_conversion_form : procedure(group: PEC_GROUP; form: point_conversion_form_t); cdecl = nil;
  EC_GROUP_get_point_conversion_form : function(p1: PEC_GROUP): point_conversion_form_t; cdecl = nil;
  EC_GROUP_get0_seed : function(x: PEC_GROUP): PByte; cdecl = nil;
  EC_GROUP_get_seed_len : function(p1: PEC_GROUP): NativeUInt; cdecl = nil;
  EC_GROUP_set_seed : function(p1: PEC_GROUP; p2: PByte; len: NativeUInt): NativeUInt; cdecl = nil;
  EC_GROUP_set_curve : function(group: PEC_GROUP; p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_get_curve : function(group: PEC_GROUP; p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_set_curve_GFp : function(group: PEC_GROUP; p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_get_curve_GFp : function(group: PEC_GROUP; p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_set_curve_GF2m : function(group: PEC_GROUP; p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_get_curve_GF2m : function(group: PEC_GROUP; p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_get_degree : function(group: PEC_GROUP): Integer; cdecl = nil;
  EC_GROUP_check : function(group: PEC_GROUP; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_check_discriminant : function(group: PEC_GROUP; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_cmp : function(a: PEC_GROUP; b: PEC_GROUP; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_new_curve_GFp : function(p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): PEC_GROUP; cdecl = nil;
  EC_GROUP_new_curve_GF2m : function(p: PBIGNUM; a: PBIGNUM; b: PBIGNUM; ctx: PBN_CTX): PEC_GROUP; cdecl = nil;
  EC_GROUP_new_by_curve_name : function(nid: Integer): PEC_GROUP; cdecl = nil;
  EC_GROUP_new_from_ecparameters : function(params: PECPARAMETERS): PEC_GROUP; cdecl = nil;
  EC_GROUP_get_ecparameters : function(group: PEC_GROUP; params: PECPARAMETERS): PECPARAMETERS; cdecl = nil;
  EC_GROUP_new_from_ecpkparameters : function(params: PECPKPARAMETERS): PEC_GROUP; cdecl = nil;
  EC_GROUP_get_ecpkparameters : function(group: PEC_GROUP; params: PECPKPARAMETERS): PECPKPARAMETERS; cdecl = nil;
  EC_get_builtin_curves : function(r: PEC_builtin_curve; nitems: NativeUInt): NativeUInt; cdecl = nil;
  EC_curve_nid2nist : function(nid: Integer): PUTF8Char; cdecl = nil;
  EC_curve_nist2nid : function(name: PUTF8Char): Integer; cdecl = nil;
  EC_POINT_new : function(group: PEC_GROUP): PEC_POINT; cdecl = nil;
  EC_POINT_free : procedure(point: PEC_POINT); cdecl = nil;
  EC_POINT_clear_free : procedure(point: PEC_POINT); cdecl = nil;
  EC_POINT_copy : function(dst: PEC_POINT; src: PEC_POINT): Integer; cdecl = nil;
  EC_POINT_dup : function(src: PEC_POINT; group: PEC_GROUP): PEC_POINT; cdecl = nil;
  EC_POINT_method_of : function(point: PEC_POINT): PEC_METHOD; cdecl = nil;
  EC_POINT_set_to_infinity : function(group: PEC_GROUP; point: PEC_POINT): Integer; cdecl = nil;
  EC_POINT_set_Jprojective_coordinates_GFp : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; z: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_get_Jprojective_coordinates_GFp : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; z: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_set_affine_coordinates : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_get_affine_coordinates : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_set_affine_coordinates_GFp : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_get_affine_coordinates_GFp : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_set_compressed_coordinates : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y_bit: Integer; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_set_compressed_coordinates_GFp : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y_bit: Integer; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_set_affine_coordinates_GF2m : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_get_affine_coordinates_GF2m : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_set_compressed_coordinates_GF2m : function(group: PEC_GROUP; p: PEC_POINT; x: PBIGNUM; y_bit: Integer; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_point2oct : function(group: PEC_GROUP; p: PEC_POINT; form: point_conversion_form_t; buf: PByte; len: NativeUInt; ctx: PBN_CTX): NativeUInt; cdecl = nil;
  EC_POINT_oct2point : function(group: PEC_GROUP; p: PEC_POINT; buf: PByte; len: NativeUInt; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_point2buf : function(group: PEC_GROUP; point: PEC_POINT; form: point_conversion_form_t; pbuf: PPByte; ctx: PBN_CTX): NativeUInt; cdecl = nil;
  EC_POINT_point2bn : function(p1: PEC_GROUP; p2: PEC_POINT; form: point_conversion_form_t; p4: PBIGNUM; p5: PBN_CTX): PBIGNUM; cdecl = nil;
  EC_POINT_bn2point : function(p1: PEC_GROUP; p2: PBIGNUM; p3: PEC_POINT; p4: PBN_CTX): PEC_POINT; cdecl = nil;
  EC_POINT_point2hex : function(p1: PEC_GROUP; p2: PEC_POINT; form: point_conversion_form_t; p4: PBN_CTX): PUTF8Char; cdecl = nil;
  EC_POINT_hex2point : function(p1: PEC_GROUP; p2: PUTF8Char; p3: PEC_POINT; p4: PBN_CTX): PEC_POINT; cdecl = nil;
  EC_POINT_add : function(group: PEC_GROUP; r: PEC_POINT; a: PEC_POINT; b: PEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_dbl : function(group: PEC_GROUP; r: PEC_POINT; a: PEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_invert : function(group: PEC_GROUP; a: PEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_is_at_infinity : function(group: PEC_GROUP; p: PEC_POINT): Integer; cdecl = nil;
  EC_POINT_is_on_curve : function(group: PEC_GROUP; point: PEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_cmp : function(group: PEC_GROUP; a: PEC_POINT; b: PEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_make_affine : function(group: PEC_GROUP; point: PEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINTs_make_affine : function(group: PEC_GROUP; num: NativeUInt; points: PPEC_POINT; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINTs_mul : function(group: PEC_GROUP; r: PEC_POINT; n: PBIGNUM; num: NativeUInt; p: PPEC_POINT; m: PPBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_POINT_mul : function(group: PEC_GROUP; r: PEC_POINT; n: PBIGNUM; q: PEC_POINT; m: PBIGNUM; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_precompute_mult : function(group: PEC_GROUP; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_GROUP_have_precompute_mult : function(group: PEC_GROUP): Integer; cdecl = nil;
  ECPKPARAMETERS_it : function(): PASN1_ITEM; cdecl = nil;
  ECPKPARAMETERS_new : function(): PECPKPARAMETERS; cdecl = nil;
  ECPKPARAMETERS_free : procedure(a: PECPKPARAMETERS); cdecl = nil;
  ECPARAMETERS_it : function(): PASN1_ITEM; cdecl = nil;
  ECPARAMETERS_new : function(): PECPARAMETERS; cdecl = nil;
  ECPARAMETERS_free : procedure(a: PECPARAMETERS); cdecl = nil;
  EC_GROUP_get_basis_type : function(p1: PEC_GROUP): Integer; cdecl = nil;
  EC_GROUP_get_trinomial_basis : function(p1: PEC_GROUP; k: PCardinal): Integer; cdecl = nil;
  EC_GROUP_get_pentanomial_basis : function(p1: PEC_GROUP; k1: PCardinal; k2: PCardinal; k3: PCardinal): Integer; cdecl = nil;
  d2i_ECPKParameters : function(p1: PPEC_GROUP; vin: PPByte; len: Integer): PEC_GROUP; cdecl = nil;
  i2d_ECPKParameters : function(p1: PEC_GROUP; vout: PPByte): Integer; cdecl = nil;
  ECPKParameters_print : function(bp: PBIO; x: PEC_GROUP; off: Integer): Integer; cdecl = nil;
  ECPKParameters_print_fp : function(fp: PPointer; x: PEC_GROUP; off: Integer): Integer; cdecl = nil;
  EC_KEY_new : function(): PEC_KEY; cdecl = nil;
  EC_KEY_get_flags : function(key: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_set_flags : procedure(key: PEC_KEY; flags: Integer); cdecl = nil;
  EC_KEY_clear_flags : procedure(key: PEC_KEY; flags: Integer); cdecl = nil;
  EC_KEY_new_by_curve_name : function(nid: Integer): PEC_KEY; cdecl = nil;
  EC_KEY_free : procedure(key: PEC_KEY); cdecl = nil;
  EC_KEY_copy : function(dst: PEC_KEY; src: PEC_KEY): PEC_KEY; cdecl = nil;
  EC_KEY_dup : function(src: PEC_KEY): PEC_KEY; cdecl = nil;
  EC_KEY_up_ref : function(key: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_get0_engine : function(eckey: PEC_KEY): PENGINE; cdecl = nil;
  EC_KEY_get0_group : function(key: PEC_KEY): PEC_GROUP; cdecl = nil;
  EC_KEY_set_group : function(key: PEC_KEY; group: PEC_GROUP): Integer; cdecl = nil;
  EC_KEY_get0_private_key : function(key: PEC_KEY): PBIGNUM; cdecl = nil;
  EC_KEY_set_private_key : function(key: PEC_KEY; prv: PBIGNUM): Integer; cdecl = nil;
  EC_KEY_get0_public_key : function(key: PEC_KEY): PEC_POINT; cdecl = nil;
  EC_KEY_set_public_key : function(key: PEC_KEY; pub: PEC_POINT): Integer; cdecl = nil;
  EC_KEY_get_enc_flags : function(key: PEC_KEY): Cardinal; cdecl = nil;
  EC_KEY_set_enc_flags : procedure(eckey: PEC_KEY; flags: Cardinal); cdecl = nil;
  EC_KEY_get_conv_form : function(key: PEC_KEY): point_conversion_form_t; cdecl = nil;
  EC_KEY_set_conv_form : procedure(eckey: PEC_KEY; cform: point_conversion_form_t); cdecl = nil;
  EC_KEY_set_ex_data : function(key: PEC_KEY; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  EC_KEY_get_ex_data : function(key: PEC_KEY; idx: Integer): Pointer; cdecl = nil;
  EC_KEY_set_asn1_flag : procedure(eckey: PEC_KEY; asn1_flag: Integer); cdecl = nil;
  EC_KEY_precompute_mult : function(key: PEC_KEY; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_KEY_generate_key : function(key: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_check_key : function(key: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_can_sign : function(eckey: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_set_public_key_affine_coordinates : function(key: PEC_KEY; x: PBIGNUM; y: PBIGNUM): Integer; cdecl = nil;
  EC_KEY_key2buf : function(key: PEC_KEY; form: point_conversion_form_t; pbuf: PPByte; ctx: PBN_CTX): NativeUInt; cdecl = nil;
  EC_KEY_oct2key : function(key: PEC_KEY; buf: PByte; len: NativeUInt; ctx: PBN_CTX): Integer; cdecl = nil;
  EC_KEY_oct2priv : function(key: PEC_KEY; buf: PByte; len: NativeUInt): Integer; cdecl = nil;
  EC_KEY_priv2oct : function(key: PEC_KEY; buf: PByte; len: NativeUInt): NativeUInt; cdecl = nil;
  EC_KEY_priv2buf : function(eckey: PEC_KEY; pbuf: PPByte): NativeUInt; cdecl = nil;
  d2i_ECPrivateKey : function(key: PPEC_KEY; vin: PPByte; len: Integer): PEC_KEY; cdecl = nil;
  i2d_ECPrivateKey : function(key: PEC_KEY; vout: PPByte): Integer; cdecl = nil;
  d2i_ECParameters : function(key: PPEC_KEY; vin: PPByte; len: Integer): PEC_KEY; cdecl = nil;
  i2d_ECParameters : function(key: PEC_KEY; vout: PPByte): Integer; cdecl = nil;
  o2i_ECPublicKey : function(key: PPEC_KEY; vin: PPByte; len: Integer): PEC_KEY; cdecl = nil;
  i2o_ECPublicKey : function(key: PEC_KEY; vout: PPByte): Integer; cdecl = nil;
  ECParameters_print : function(bp: PBIO; key: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_print : function(bp: PBIO; key: PEC_KEY; off: Integer): Integer; cdecl = nil;
  ECParameters_print_fp : function(fp: PPointer; key: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_print_fp : function(fp: PPointer; key: PEC_KEY; off: Integer): Integer; cdecl = nil;
  EC_KEY_OpenSSL : function(): PEC_KEY_METHOD; cdecl = nil;
  EC_KEY_get_default_method : function(): PEC_KEY_METHOD; cdecl = nil;
  EC_KEY_set_default_method : procedure(meth: PEC_KEY_METHOD); cdecl = nil;
  EC_KEY_get_method : function(key: PEC_KEY): PEC_KEY_METHOD; cdecl = nil;
  EC_KEY_set_method : function(key: PEC_KEY; meth: PEC_KEY_METHOD): Integer; cdecl = nil;
  EC_KEY_new_method : function(engine: PENGINE): PEC_KEY; cdecl = nil;
  ECDH_KDF_X9_62 : function(vout: PByte; outlen: NativeUInt; Z: PByte; Zlen: NativeUInt; sinfo: PByte; sinfolen: NativeUInt; md: PEVP_MD): Integer; cdecl = nil;
  ECDH_compute_key : function(vout: Pointer; outlen: NativeUInt; pub_key: PEC_POINT; ecdh: PEC_KEY; KDF: ECDH_compute_key_KDF): Integer; cdecl = nil;
  ECDSA_SIG_new : function(): PECDSA_SIG; cdecl = nil;
  ECDSA_SIG_free : procedure(sig: PECDSA_SIG); cdecl = nil;
  i2d_ECDSA_SIG : function(sig: PECDSA_SIG; pp: PPByte): Integer; cdecl = nil;
  d2i_ECDSA_SIG : function(sig: PPECDSA_SIG; pp: PPByte; len: Integer): PECDSA_SIG; cdecl = nil;
  ECDSA_SIG_get0 : procedure(sig: PECDSA_SIG; pr: PPBIGNUM; ps: PPBIGNUM); cdecl = nil;
  ECDSA_SIG_get0_r : function(sig: PECDSA_SIG): PBIGNUM; cdecl = nil;
  ECDSA_SIG_get0_s : function(sig: PECDSA_SIG): PBIGNUM; cdecl = nil;
  ECDSA_SIG_set0 : function(sig: PECDSA_SIG; r: PBIGNUM; s: PBIGNUM): Integer; cdecl = nil;
  ECDSA_do_sign : function(dgst: PByte; dgst_len: Integer; eckey: PEC_KEY): PECDSA_SIG; cdecl = nil;
  ECDSA_do_sign_ex : function(dgst: PByte; dgstlen: Integer; kinv: PBIGNUM; rp: PBIGNUM; eckey: PEC_KEY): PECDSA_SIG; cdecl = nil;
  ECDSA_do_verify : function(dgst: PByte; dgst_len: Integer; sig: PECDSA_SIG; eckey: PEC_KEY): Integer; cdecl = nil;
  ECDSA_sign_setup : function(eckey: PEC_KEY; ctx: PBN_CTX; kinv: PPBIGNUM; rp: PPBIGNUM): Integer; cdecl = nil;
  ECDSA_sign : function(vtype: Integer; dgst: PByte; dgstlen: Integer; sig: PByte; siglen: PCardinal; eckey: PEC_KEY): Integer; cdecl = nil;
  ECDSA_sign_ex : function(vtype: Integer; dgst: PByte; dgstlen: Integer; sig: PByte; siglen: PCardinal; kinv: PBIGNUM; rp: PBIGNUM; eckey: PEC_KEY): Integer; cdecl = nil;
  ECDSA_verify : function(vtype: Integer; dgst: PByte; dgstlen: Integer; sig: PByte; siglen: Integer; eckey: PEC_KEY): Integer; cdecl = nil;
  ECDSA_size : function(eckey: PEC_KEY): Integer; cdecl = nil;
  EC_KEY_METHOD_new : function(meth: PEC_KEY_METHOD): PEC_KEY_METHOD; cdecl = nil;
  EC_KEY_METHOD_free : procedure(meth: PEC_KEY_METHOD); cdecl = nil;
  EC_KEY_METHOD_set_init : procedure(meth: PEC_KEY_METHOD; init: EC_KEY_METHOD_set_init_init; finish: EC_KEY_METHOD_set_init_finish; copy: EC_KEY_METHOD_set_init_copy; set_group: EC_KEY_METHOD_set_init_set_group; set_private: EC_KEY_METHOD_set_init_set_private; set_public: EC_KEY_METHOD_set_init_set_public); cdecl = nil;
  EC_KEY_METHOD_set_keygen : procedure(meth: PEC_KEY_METHOD; keygen: EC_KEY_METHOD_set_keygen_keygen); cdecl = nil;
  EC_KEY_METHOD_set_compute_key : procedure(meth: PEC_KEY_METHOD; ckey: EC_KEY_METHOD_set_compute_key_ckey); cdecl = nil;
  EC_KEY_METHOD_set_sign : procedure(meth: PEC_KEY_METHOD; sign: EC_KEY_METHOD_set_sign_sign; sign_setup: EC_KEY_METHOD_set_sign_sign_setup; sign_sig: EC_KEY_METHOD_set_sign_sign_sig); cdecl = nil;
  EC_KEY_METHOD_set_verify : procedure(meth: PEC_KEY_METHOD; verify: EC_KEY_METHOD_set_verify_verify; verify_sig: EC_KEY_METHOD_set_verify_verify_sig); cdecl = nil;
  EC_KEY_METHOD_get_init : procedure(meth: PEC_KEY_METHOD; pinit: Integer; pfinish: Integer; pcopy: Integer; pset_group: Integer; pset_private: Integer; pset_public: Integer); cdecl = nil;
  EC_KEY_METHOD_get_keygen : procedure(meth: PEC_KEY_METHOD; pkeygen: Integer); cdecl = nil;
  EC_KEY_METHOD_get_compute_key : procedure(meth: PEC_KEY_METHOD; pck: Integer); cdecl = nil;
  EC_KEY_METHOD_get_sign : procedure(meth: PEC_KEY_METHOD; psign: Integer; psign_setup: Integer; psign_sig: Integer); cdecl = nil;
  EC_KEY_METHOD_get_verify : procedure(meth: PEC_KEY_METHOD; pverify: Integer; pverify_sig: Integer); cdecl = nil;
  ERR_load_RSA_strings : function(): Integer; cdecl = nil;
  RSA_new : function(): PRSA; cdecl = nil;
  RSA_new_method : function(engine: PENGINE): PRSA; cdecl = nil;
  RSA_bits : function(rsa: PRSA): Integer; cdecl = nil;
  RSA_size : function(rsa: PRSA): Integer; cdecl = nil;
  RSA_security_bits : function(rsa: PRSA): Integer; cdecl = nil;
  RSA_set0_key : function(r: PRSA; n: PBIGNUM; e: PBIGNUM; d: PBIGNUM): Integer; cdecl = nil;
  RSA_set0_factors : function(r: PRSA; p: PBIGNUM; q: PBIGNUM): Integer; cdecl = nil;
  RSA_set0_crt_params : function(r: PRSA; dmp1: PBIGNUM; dmq1: PBIGNUM; iqmp: PBIGNUM): Integer; cdecl = nil;
  RSA_set0_multi_prime_params : function(r: PRSA; primes: PPBIGNUM; exps: PPBIGNUM; coeffs: PPBIGNUM; pnum: Integer): Integer; cdecl = nil;
  RSA_get0_key : procedure(r: PRSA; n: PPBIGNUM; e: PPBIGNUM; d: PPBIGNUM); cdecl = nil;
  RSA_get0_factors : procedure(r: PRSA; p: PPBIGNUM; q: PPBIGNUM); cdecl = nil;
  RSA_get_multi_prime_extra_count : function(r: PRSA): Integer; cdecl = nil;
  RSA_get0_multi_prime_factors : function(r: PRSA; primes: PPBIGNUM): Integer; cdecl = nil;
  RSA_get0_crt_params : procedure(r: PRSA; dmp1: PPBIGNUM; dmq1: PPBIGNUM; iqmp: PPBIGNUM); cdecl = nil;
  RSA_get0_multi_prime_crt_params : function(r: PRSA; exps: PPBIGNUM; coeffs: PPBIGNUM): Integer; cdecl = nil;
  RSA_get0_n : function(d: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_e : function(d: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_d : function(d: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_p : function(d: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_q : function(d: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_dmp1 : function(r: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_dmq1 : function(r: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_iqmp : function(r: PRSA): PBIGNUM; cdecl = nil;
  RSA_get0_pss_params : function(r: PRSA): PRSA_PSS_PARAMS; cdecl = nil;
  RSA_clear_flags : procedure(r: PRSA; flags: Integer); cdecl = nil;
  RSA_test_flags : function(r: PRSA; flags: Integer): Integer; cdecl = nil;
  RSA_set_flags : procedure(r: PRSA; flags: Integer); cdecl = nil;
  RSA_get_version : function(r: PRSA): Integer; cdecl = nil;
  RSA_get0_engine : function(r: PRSA): PENGINE; cdecl = nil;
  RSA_generate_key : function(bits: Integer; e: Cardinal; callback: RSA_generate_key_callback; cb_arg: Pointer): PRSA; cdecl = nil;
  RSA_generate_key_ex : function(rsa: PRSA; bits: Integer; e: PBIGNUM; cb: PBN_GENCB): Integer; cdecl = nil;
  RSA_generate_multi_prime_key : function(rsa: PRSA; bits: Integer; primes: Integer; e: PBIGNUM; cb: PBN_GENCB): Integer; cdecl = nil;
  RSA_X931_derive_ex : function(rsa: PRSA; p1: PBIGNUM; p2: PBIGNUM; q1: PBIGNUM; q2: PBIGNUM; Xp1: PBIGNUM; Xp2: PBIGNUM; Xp: PBIGNUM; Xq1: PBIGNUM; Xq2: PBIGNUM; Xq: PBIGNUM; e: PBIGNUM; cb: PBN_GENCB): Integer; cdecl = nil;
  RSA_X931_generate_key_ex : function(rsa: PRSA; bits: Integer; e: PBIGNUM; cb: PBN_GENCB): Integer; cdecl = nil;
  RSA_check_key : function(p1: PRSA): Integer; cdecl = nil;
  RSA_check_key_ex : function(p1: PRSA; cb: PBN_GENCB): Integer; cdecl = nil;
  RSA_public_encrypt : function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl = nil;
  RSA_private_encrypt : function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl = nil;
  RSA_public_decrypt : function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl = nil;
  RSA_private_decrypt : function(flen: Integer; from: PByte; vto: PByte; rsa: PRSA; padding: Integer): Integer; cdecl = nil;
  RSA_free : procedure(r: PRSA); cdecl = nil;
  RSA_up_ref : function(r: PRSA): Integer; cdecl = nil;
  RSA_flags : function(r: PRSA): Integer; cdecl = nil;
  RSA_set_default_method : procedure(meth: PRSA_METHOD); cdecl = nil;
  RSA_get_default_method : function(): PRSA_METHOD; cdecl = nil;
  RSA_null_method : function(): PRSA_METHOD; cdecl = nil;
  RSA_get_method : function(rsa: PRSA): PRSA_METHOD; cdecl = nil;
  RSA_set_method : function(rsa: PRSA; meth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_PKCS1_OpenSSL : function(): PRSA_METHOD; cdecl = nil;
  RSA_pkey_ctx_ctrl : function(ctx: PEVP_PKEY_CTX; optype: Integer; cmd: Integer; p1: Integer; p2: Pointer): Integer; cdecl = nil;
  d2i_RSAPublicKey : function(a: PPRSA; vin: PPByte; len: Integer): PRSA; cdecl = nil;
  i2d_RSAPublicKey : function(a: PRSA; vout: PPByte): Integer; cdecl = nil;
  RSAPublicKey_it : function(): PASN1_ITEM; cdecl = nil;
  d2i_RSAPrivateKey : function(a: PPRSA; vin: PPByte; len: Integer): PRSA; cdecl = nil;
  i2d_RSAPrivateKey : function(a: PRSA; vout: PPByte): Integer; cdecl = nil;
  RSAPrivateKey_it : function(): PASN1_ITEM; cdecl = nil;
  RSA_PSS_PARAMS_new : function(): PRSA_PSS_PARAMS; cdecl = nil;
  RSA_PSS_PARAMS_free : procedure(a: PRSA_PSS_PARAMS); cdecl = nil;
  d2i_RSA_PSS_PARAMS : function(a: PPRSA_PSS_PARAMS; vin: PPByte; len: Integer): PRSA_PSS_PARAMS; cdecl = nil;
  i2d_RSA_PSS_PARAMS : function(a: PRSA_PSS_PARAMS; vout: PPByte): Integer; cdecl = nil;
  RSA_PSS_PARAMS_it : function(): PASN1_ITEM; cdecl = nil;
  RSA_OAEP_PARAMS_new : function(): PRSA_OAEP_PARAMS; cdecl = nil;
  RSA_OAEP_PARAMS_free : procedure(a: PRSA_OAEP_PARAMS); cdecl = nil;
  d2i_RSA_OAEP_PARAMS : function(a: PPRSA_OAEP_PARAMS; vin: PPByte; len: Integer): PRSA_OAEP_PARAMS; cdecl = nil;
  i2d_RSA_OAEP_PARAMS : function(a: PRSA_OAEP_PARAMS; vout: PPByte): Integer; cdecl = nil;
  RSA_OAEP_PARAMS_it : function(): PASN1_ITEM; cdecl = nil;
  RSA_print_fp : function(fp: PPointer; r: PRSA; offset: Integer): Integer; cdecl = nil;
  RSA_print : function(bp: PBIO; r: PRSA; offset: Integer): Integer; cdecl = nil;
  RSA_sign : function(vtype: Integer; m: PByte; m_length: Cardinal; sigret: PByte; siglen: PCardinal; rsa: PRSA): Integer; cdecl = nil;
  RSA_verify : function(vtype: Integer; m: PByte; m_length: Cardinal; sigbuf: PByte; siglen: Cardinal; rsa: PRSA): Integer; cdecl = nil;
  RSA_sign_ASN1_OCTET_STRING : function(vtype: Integer; m: PByte; m_length: Cardinal; sigret: PByte; siglen: PCardinal; rsa: PRSA): Integer; cdecl = nil;
  RSA_verify_ASN1_OCTET_STRING : function(vtype: Integer; m: PByte; m_length: Cardinal; sigbuf: PByte; siglen: Cardinal; rsa: PRSA): Integer; cdecl = nil;
  RSA_blinding_on : function(rsa: PRSA; ctx: PBN_CTX): Integer; cdecl = nil;
  RSA_blinding_off : procedure(rsa: PRSA); cdecl = nil;
  RSA_setup_blinding : function(rsa: PRSA; ctx: PBN_CTX): PBN_BLINDING; cdecl = nil;
  RSA_padding_add_PKCS1_type_1 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer): Integer; cdecl = nil;
  RSA_padding_check_PKCS1_type_1 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; rsa_len: Integer): Integer; cdecl = nil;
  RSA_padding_add_PKCS1_type_2 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer): Integer; cdecl = nil;
  RSA_padding_check_PKCS1_type_2 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; rsa_len: Integer): Integer; cdecl = nil;
  PKCS1_MGF1 : function(mask: PByte; len: Integer; seed: PByte; seedlen: Integer; dgst: PEVP_MD): Integer; cdecl = nil;
  RSA_padding_add_PKCS1_OAEP : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; p: PByte; pl: Integer): Integer; cdecl = nil;
  RSA_padding_check_PKCS1_OAEP : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; rsa_len: Integer; p: PByte; pl: Integer): Integer; cdecl = nil;
  RSA_padding_add_PKCS1_OAEP_mgf1 : function(vto: PByte; tlen: Integer; from: PByte; flen: Integer; param: PByte; plen: Integer; md: PEVP_MD; mgf1md: PEVP_MD): Integer; cdecl = nil;
  RSA_padding_check_PKCS1_OAEP_mgf1 : function(vto: PByte; tlen: Integer; from: PByte; flen: Integer; num: Integer; param: PByte; plen: Integer; md: PEVP_MD; mgf1md: PEVP_MD): Integer; cdecl = nil;
  RSA_padding_add_SSLv23 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer): Integer; cdecl = nil;
  RSA_padding_check_SSLv23 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; rsa_len: Integer): Integer; cdecl = nil;
  RSA_padding_add_none : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer): Integer; cdecl = nil;
  RSA_padding_check_none : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; rsa_len: Integer): Integer; cdecl = nil;
  RSA_padding_add_X931 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer): Integer; cdecl = nil;
  RSA_padding_check_X931 : function(vto: PByte; tlen: Integer; f: PByte; fl: Integer; rsa_len: Integer): Integer; cdecl = nil;
  RSA_X931_hash_id : function(nid: Integer): Integer; cdecl = nil;
  RSA_verify_PKCS1_PSS : function(rsa: PRSA; mHash: PByte; Hash: PEVP_MD; EM: PByte; sLen: Integer): Integer; cdecl = nil;
  RSA_padding_add_PKCS1_PSS : function(rsa: PRSA; EM: PByte; mHash: PByte; Hash: PEVP_MD; sLen: Integer): Integer; cdecl = nil;
  RSA_verify_PKCS1_PSS_mgf1 : function(rsa: PRSA; mHash: PByte; Hash: PEVP_MD; mgf1Hash: PEVP_MD; EM: PByte; sLen: Integer): Integer; cdecl = nil;
  RSA_padding_add_PKCS1_PSS_mgf1 : function(rsa: PRSA; EM: PByte; mHash: PByte; Hash: PEVP_MD; mgf1Hash: PEVP_MD; sLen: Integer): Integer; cdecl = nil;
  RSA_set_ex_data : function(r: PRSA; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  RSA_get_ex_data : function(r: PRSA; idx: Integer): Pointer; cdecl = nil;
  RSAPublicKey_dup : function(rsa: PRSA): PRSA; cdecl = nil;
  RSAPrivateKey_dup : function(rsa: PRSA): PRSA; cdecl = nil;
  RSA_meth_new : function(name: PUTF8Char; flags: Integer): PRSA_METHOD; cdecl = nil;
  RSA_meth_free : procedure(meth: PRSA_METHOD); cdecl = nil;
  RSA_meth_dup : function(meth: PRSA_METHOD): PRSA_METHOD; cdecl = nil;
  RSA_meth_get0_name : function(meth: PRSA_METHOD): PUTF8Char; cdecl = nil;
  RSA_meth_set1_name : function(meth: PRSA_METHOD; name: PUTF8Char): Integer; cdecl = nil;
  RSA_meth_get_flags : function(meth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_flags : function(meth: PRSA_METHOD; flags: Integer): Integer; cdecl = nil;
  RSA_meth_get0_app_data : function(meth: PRSA_METHOD): Pointer; cdecl = nil;
  RSA_meth_set0_app_data : function(meth: PRSA_METHOD; app_data: Pointer): Integer; cdecl = nil;
//  RSA_meth_get_pub_enc : function(flen: Integerfrom: PBytevto: PBytersa: PRSApadding: Integermeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_pub_enc : function(rsa: PRSA_METHOD; pub_enc: RSA_meth_set_pub_enc_pub_enc): Integer; cdecl = nil;
//  RSA_meth_get_pub_dec : function(flen: Integerfrom: PBytevto: PBytersa: PRSApadding: Integermeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_pub_dec : function(rsa: PRSA_METHOD; pub_dec: RSA_meth_set_pub_dec_pub_dec): Integer; cdecl = nil;
//  RSA_meth_get_priv_enc : function(flen: Integerfrom: PBytevto: PBytersa: PRSApadding: Integermeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_priv_enc : function(rsa: PRSA_METHOD; priv_enc: RSA_meth_set_priv_enc_priv_enc): Integer; cdecl = nil;
//  RSA_meth_get_priv_dec : function(flen: Integerfrom: PBytevto: PBytersa: PRSApadding: Integermeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_priv_dec : function(rsa: PRSA_METHOD; priv_dec: RSA_meth_set_priv_dec_priv_dec): Integer; cdecl = nil;
//  RSA_meth_get_mod_exp : function(r0: PBIGNUMi: PBIGNUMrsa: PRSActx: PBN_CTXmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_mod_exp : function(rsa: PRSA_METHOD; mod_exp: RSA_meth_set_mod_exp_mod_exp): Integer; cdecl = nil;
//  RSA_meth_get_bn_mod_exp : function(r: PBIGNUMa: PBIGNUMp: PBIGNUMm: PBIGNUMctx: PBN_CTXm_ctx: PBN_MONT_CTXmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_bn_mod_exp : function(rsa: PRSA_METHOD; bn_mod_exp: RSA_meth_set_bn_mod_exp_bn_mod_exp): Integer; cdecl = nil;
//  RSA_meth_get_init : function(rsa: PRSAmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_init : function(rsa: PRSA_METHOD; init: RSA_meth_set_init_init): Integer; cdecl = nil;
//  RSA_meth_get_finish : function(rsa: PRSAmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_finish : function(rsa: PRSA_METHOD; finish: RSA_meth_set_finish_finish): Integer; cdecl = nil;
//  RSA_meth_get_sign : function(vtype: Integerm: PBytem_length: Cardinalsigret: PBytesiglen: PCardinalrsa: PRSAmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_sign : function(rsa: PRSA_METHOD; sign: RSA_meth_set_sign_sign): Integer; cdecl = nil;
//  RSA_meth_get_verify : function(dtype: Integerm: PBytem_length: Cardinalsigbuf: PBytesiglen: Cardinalrsa: PRSAmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_verify : function(rsa: PRSA_METHOD; verify: RSA_meth_set_verify_verify): Integer; cdecl = nil;
//  RSA_meth_get_keygen : function(rsa: PRSAbits: Integere: PBIGNUMcb: PBN_GENCBmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_keygen : function(rsa: PRSA_METHOD; keygen: RSA_meth_set_keygen_keygen): Integer; cdecl = nil;
//  RSA_meth_get_multi_prime_keygen : function(rsa: PRSAbits: Integerprimes: Integere: PBIGNUMcb: PBN_GENCBmeth: PRSA_METHOD): Integer; cdecl = nil;
  RSA_meth_set_multi_prime_keygen : function(meth: PRSA_METHOD; keygen: RSA_meth_set_multi_prime_keygen_keygen): Integer; cdecl = nil;
  ERR_load_DH_strings : function(): Integer; cdecl = nil;
  DHparams_it : function(): PASN1_ITEM; cdecl = nil;
  DHparams_dup : function(p1: PDH): PDH; cdecl = nil;
  DH_OpenSSL : function(): PDH_METHOD; cdecl = nil;
  DH_set_default_method : procedure(meth: PDH_METHOD); cdecl = nil;
  DH_get_default_method : function(): PDH_METHOD; cdecl = nil;
  DH_set_method : function(dh: PDH; meth: PDH_METHOD): Integer; cdecl = nil;
  DH_new_method : function(engine: PENGINE): PDH; cdecl = nil;
  DH_new : function(): PDH; cdecl = nil;
  DH_free : procedure(dh: PDH); cdecl = nil;
  DH_up_ref : function(dh: PDH): Integer; cdecl = nil;
  DH_bits : function(dh: PDH): Integer; cdecl = nil;
  DH_size : function(dh: PDH): Integer; cdecl = nil;
  DH_security_bits : function(dh: PDH): Integer; cdecl = nil;
  DH_set_ex_data : function(d: PDH; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  DH_get_ex_data : function(d: PDH; idx: Integer): Pointer; cdecl = nil;
  DH_generate_parameters : function(prime_len: Integer; generator: Integer; callback: DH_generate_parameters_callback; cb_arg: Pointer): PDH; cdecl = nil;
  DH_generate_parameters_ex : function(dh: PDH; prime_len: Integer; generator: Integer; cb: PBN_GENCB): Integer; cdecl = nil;
  DH_check_params_ex : function(dh: PDH): Integer; cdecl = nil;
  DH_check_ex : function(dh: PDH): Integer; cdecl = nil;
  DH_check_pub_key_ex : function(dh: PDH; pub_key: PBIGNUM): Integer; cdecl = nil;
  DH_check_params : function(dh: PDH; ret: PInteger): Integer; cdecl = nil;
  DH_check : function(dh: PDH; codes: PInteger): Integer; cdecl = nil;
  DH_check_pub_key : function(dh: PDH; pub_key: PBIGNUM; codes: PInteger): Integer; cdecl = nil;
  DH_generate_key : function(dh: PDH): Integer; cdecl = nil;
  DH_compute_key : function(key: PByte; pub_key: PBIGNUM; dh: PDH): Integer; cdecl = nil;
  DH_compute_key_padded : function(key: PByte; pub_key: PBIGNUM; dh: PDH): Integer; cdecl = nil;
  d2i_DHparams : function(a: PPDH; pp: PPByte; length: Integer): PDH; cdecl = nil;
  i2d_DHparams : function(a: PDH; pp: PPByte): Integer; cdecl = nil;
  d2i_DHxparams : function(a: PPDH; pp: PPByte; length: Integer): PDH; cdecl = nil;
  i2d_DHxparams : function(a: PDH; pp: PPByte): Integer; cdecl = nil;
  DHparams_print_fp : function(fp: PPointer; x: PDH): Integer; cdecl = nil;
  DHparams_print : function(bp: PBIO; x: PDH): Integer; cdecl = nil;
  DH_get_1024_160 : function(): PDH; cdecl = nil;
  DH_get_2048_224 : function(): PDH; cdecl = nil;
  DH_get_2048_256 : function(): PDH; cdecl = nil;
  DH_new_by_nid : function(nid: Integer): PDH; cdecl = nil;
  DH_get_nid : function(dh: PDH): Integer; cdecl = nil;
  DH_KDF_X9_42 : function(vout: PByte; outlen: NativeUInt; Z: PByte; Zlen: NativeUInt; key_oid: PASN1_OBJECT; ukm: PByte; ukmlen: NativeUInt; md: PEVP_MD): Integer; cdecl = nil;
  DH_get0_pqg : procedure(dh: PDH; p: PPBIGNUM; q: PPBIGNUM; g: PPBIGNUM); cdecl = nil;
  DH_set0_pqg : function(dh: PDH; p: PBIGNUM; q: PBIGNUM; g: PBIGNUM): Integer; cdecl = nil;
  DH_get0_key : procedure(dh: PDH; pub_key: PPBIGNUM; priv_key: PPBIGNUM); cdecl = nil;
  DH_set0_key : function(dh: PDH; pub_key: PBIGNUM; priv_key: PBIGNUM): Integer; cdecl = nil;
  DH_get0_p : function(dh: PDH): PBIGNUM; cdecl = nil;
  DH_get0_q : function(dh: PDH): PBIGNUM; cdecl = nil;
  DH_get0_g : function(dh: PDH): PBIGNUM; cdecl = nil;
  DH_get0_priv_key : function(dh: PDH): PBIGNUM; cdecl = nil;
  DH_get0_pub_key : function(dh: PDH): PBIGNUM; cdecl = nil;
  DH_clear_flags : procedure(dh: PDH; flags: Integer); cdecl = nil;
  DH_test_flags : function(dh: PDH; flags: Integer): Integer; cdecl = nil;
  DH_set_flags : procedure(dh: PDH; flags: Integer); cdecl = nil;
  DH_get0_engine : function(d: PDH): PENGINE; cdecl = nil;
  DH_get_length : function(dh: PDH): Integer; cdecl = nil;
  DH_set_length : function(dh: PDH; length: Integer): Integer; cdecl = nil;
  DH_meth_new : function(name: PUTF8Char; flags: Integer): PDH_METHOD; cdecl = nil;
  DH_meth_free : procedure(dhm: PDH_METHOD); cdecl = nil;
  DH_meth_dup : function(dhm: PDH_METHOD): PDH_METHOD; cdecl = nil;
  DH_meth_get0_name : function(dhm: PDH_METHOD): PUTF8Char; cdecl = nil;
  DH_meth_set1_name : function(dhm: PDH_METHOD; name: PUTF8Char): Integer; cdecl = nil;
  DH_meth_get_flags : function(dhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_flags : function(dhm: PDH_METHOD; flags: Integer): Integer; cdecl = nil;
  DH_meth_get0_app_data : function(dhm: PDH_METHOD): Pointer; cdecl = nil;
  DH_meth_set0_app_data : function(dhm: PDH_METHOD; app_data: Pointer): Integer; cdecl = nil;
//  DH_meth_get_generate_key : function(p1: PDHdhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_generate_key : function(dhm: PDH_METHOD; generate_key: DH_meth_set_generate_key_generate_key): Integer; cdecl = nil;
//  DH_meth_get_compute_key : function(key: PBytepub_key: PBIGNUMdh: PDHdhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_compute_key : function(dhm: PDH_METHOD; compute_key: DH_meth_set_compute_key_compute_key): Integer; cdecl = nil;
//  DH_meth_get_bn_mod_exp : function(p1: PDHp2: PBIGNUMp3: PBIGNUMp4: PBIGNUMp5: PBIGNUMp6: PBN_CTXp7: PBN_MONT_CTXdhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_bn_mod_exp : function(dhm: PDH_METHOD; bn_mod_exp: DH_meth_set_bn_mod_exp_bn_mod_exp): Integer; cdecl = nil;
//  DH_meth_get_init : function(p1: PDHdhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_init : function(dhm: PDH_METHOD; init: DH_meth_set_init_init): Integer; cdecl = nil;
//  DH_meth_get_finish : function(p1: PDHdhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_finish : function(dhm: PDH_METHOD; finish: DH_meth_set_finish_finish): Integer; cdecl = nil;
//  DH_meth_get_generate_params : function(p1: PDHp2: Integerp3: Integerp4: PBN_GENCBdhm: PDH_METHOD): Integer; cdecl = nil;
  DH_meth_set_generate_params : function(dhm: PDH_METHOD; generate_params: DH_meth_set_generate_params_generate_params): Integer; cdecl = nil;
  ERR_load_DSA_strings : function(): Integer; cdecl = nil;
  DSAparams_dup : function(x: PDSA): PDSA; cdecl = nil;
  DSA_SIG_new : function(): PDSA_SIG; cdecl = nil;
  DSA_SIG_free : procedure(a: PDSA_SIG); cdecl = nil;
  i2d_DSA_SIG : function(a: PDSA_SIG; pp: PPByte): Integer; cdecl = nil;
  d2i_DSA_SIG : function(v: PPDSA_SIG; pp: PPByte; length: Integer): PDSA_SIG; cdecl = nil;
  DSA_SIG_get0 : procedure(sig: PDSA_SIG; pr: PPBIGNUM; ps: PPBIGNUM); cdecl = nil;
  DSA_SIG_set0 : function(sig: PDSA_SIG; r: PBIGNUM; s: PBIGNUM): Integer; cdecl = nil;
  DSA_do_sign : function(dgst: PByte; dlen: Integer; dsa: PDSA): PDSA_SIG; cdecl = nil;
  DSA_do_verify : function(dgst: PByte; dgst_len: Integer; sig: PDSA_SIG; dsa: PDSA): Integer; cdecl = nil;
  DSA_OpenSSL : function(): PDSA_METHOD; cdecl = nil;
  DSA_set_default_method : procedure(p1: PDSA_METHOD); cdecl = nil;
  DSA_get_default_method : function(): PDSA_METHOD; cdecl = nil;
  DSA_set_method : function(dsa: PDSA; p2: PDSA_METHOD): Integer; cdecl = nil;
  DSA_get_method : function(d: PDSA): PDSA_METHOD; cdecl = nil;
  DSA_new : function(): PDSA; cdecl = nil;
  DSA_new_method : function(engine: PENGINE): PDSA; cdecl = nil;
  DSA_free : procedure(r: PDSA); cdecl = nil;
  DSA_up_ref : function(r: PDSA): Integer; cdecl = nil;
  DSA_size : function(p1: PDSA): Integer; cdecl = nil;
  DSA_bits : function(d: PDSA): Integer; cdecl = nil;
  DSA_security_bits : function(d: PDSA): Integer; cdecl = nil;
  DSA_sign_setup : function(dsa: PDSA; ctx_in: PBN_CTX; kinvp: PPBIGNUM; rp: PPBIGNUM): Integer; cdecl = nil;
  DSA_sign : function(vtype: Integer; dgst: PByte; dlen: Integer; sig: PByte; siglen: PCardinal; dsa: PDSA): Integer; cdecl = nil;
  DSA_verify : function(vtype: Integer; dgst: PByte; dgst_len: Integer; sigbuf: PByte; siglen: Integer; dsa: PDSA): Integer; cdecl = nil;
  DSA_set_ex_data : function(d: PDSA; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  DSA_get_ex_data : function(d: PDSA; idx: Integer): Pointer; cdecl = nil;
  d2i_DSAPublicKey : function(a: PPDSA; pp: PPByte; length: Integer): PDSA; cdecl = nil;
  d2i_DSAPrivateKey : function(a: PPDSA; pp: PPByte; length: Integer): PDSA; cdecl = nil;
  d2i_DSAparams : function(a: PPDSA; pp: PPByte; length: Integer): PDSA; cdecl = nil;
  DSA_generate_parameters : function(bits: Integer; seed: PByte; seed_len: Integer; counter_ret: PInteger; h_ret: PCardinal; callback: DSA_generate_parameters_callback; cb_arg: Pointer): PDSA; cdecl = nil;
  DSA_generate_parameters_ex : function(dsa: PDSA; bits: Integer; seed: PByte; seed_len: Integer; counter_ret: PInteger; h_ret: PCardinal; cb: PBN_GENCB): Integer; cdecl = nil;
  DSA_generate_key : function(a: PDSA): Integer; cdecl = nil;
  i2d_DSAPublicKey : function(a: PDSA; pp: PPByte): Integer; cdecl = nil;
  i2d_DSAPrivateKey : function(a: PDSA; pp: PPByte): Integer; cdecl = nil;
  i2d_DSAparams : function(a: PDSA; pp: PPByte): Integer; cdecl = nil;
  DSAparams_print : function(bp: PBIO; x: PDSA): Integer; cdecl = nil;
  DSA_print : function(bp: PBIO; x: PDSA; off: Integer): Integer; cdecl = nil;
  DSAparams_print_fp : function(fp: PPointer; x: PDSA): Integer; cdecl = nil;
  DSA_print_fp : function(bp: PPointer; x: PDSA; off: Integer): Integer; cdecl = nil;
  DSA_dup_DH : function(r: PDSA): PDH; cdecl = nil;
  DSA_get0_pqg : procedure(d: PDSA; p: PPBIGNUM; q: PPBIGNUM; g: PPBIGNUM); cdecl = nil;
  DSA_set0_pqg : function(d: PDSA; p: PBIGNUM; q: PBIGNUM; g: PBIGNUM): Integer; cdecl = nil;
  DSA_get0_key : procedure(d: PDSA; pub_key: PPBIGNUM; priv_key: PPBIGNUM); cdecl = nil;
  DSA_set0_key : function(d: PDSA; pub_key: PBIGNUM; priv_key: PBIGNUM): Integer; cdecl = nil;
  DSA_get0_p : function(d: PDSA): PBIGNUM; cdecl = nil;
  DSA_get0_q : function(d: PDSA): PBIGNUM; cdecl = nil;
  DSA_get0_g : function(d: PDSA): PBIGNUM; cdecl = nil;
  DSA_get0_pub_key : function(d: PDSA): PBIGNUM; cdecl = nil;
  DSA_get0_priv_key : function(d: PDSA): PBIGNUM; cdecl = nil;
  DSA_clear_flags : procedure(d: PDSA; flags: Integer); cdecl = nil;
  DSA_test_flags : function(d: PDSA; flags: Integer): Integer; cdecl = nil;
  DSA_set_flags : procedure(d: PDSA; flags: Integer); cdecl = nil;
  DSA_get0_engine : function(d: PDSA): PENGINE; cdecl = nil;
  DSA_meth_new : function(name: PUTF8Char; flags: Integer): PDSA_METHOD; cdecl = nil;
  DSA_meth_free : procedure(dsam: PDSA_METHOD); cdecl = nil;
  DSA_meth_dup : function(dsam: PDSA_METHOD): PDSA_METHOD; cdecl = nil;
  DSA_meth_get0_name : function(dsam: PDSA_METHOD): PUTF8Char; cdecl = nil;
  DSA_meth_set1_name : function(dsam: PDSA_METHOD; name: PUTF8Char): Integer; cdecl = nil;
  DSA_meth_get_flags : function(dsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_flags : function(dsam: PDSA_METHOD; flags: Integer): Integer; cdecl = nil;
  DSA_meth_get0_app_data : function(dsam: PDSA_METHOD): Pointer; cdecl = nil;
  DSA_meth_set0_app_data : function(dsam: PDSA_METHOD; app_data: Pointer): Integer; cdecl = nil;
//  DSA_meth_get_sign : function(p1: PBytep2: Integerp3: PDSAdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_sign : function(dsam: PDSA_METHOD; sign: DSA_meth_set_sign_sign): Integer; cdecl = nil;
//  DSA_meth_get_sign_setup : function(p1: PDSAp2: PBN_CTXp3: PPBIGNUMp4: PPBIGNUMdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_sign_setup : function(dsam: PDSA_METHOD; sign_setup: DSA_meth_set_sign_setup_sign_setup): Integer; cdecl = nil;
//  DSA_meth_get_verify : function(p1: PBytep2: Integerp3: PDSA_SIGp4: PDSAdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_verify : function(dsam: PDSA_METHOD; verify: DSA_meth_set_verify_verify): Integer; cdecl = nil;
//  DSA_meth_get_mod_exp : function(p1: PDSAp2: PBIGNUMp3: PBIGNUMp4: PBIGNUMp5: PBIGNUMp6: PBIGNUMp7: PBIGNUMp8: PBN_CTXp9: PBN_MONT_CTXdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_mod_exp : function(dsam: PDSA_METHOD; mod_exp: DSA_meth_set_mod_exp_mod_exp): Integer; cdecl = nil;
//  DSA_meth_get_bn_mod_exp : function(p1: PDSAp2: PBIGNUMp3: PBIGNUMp4: PBIGNUMp5: PBIGNUMp6: PBN_CTXp7: PBN_MONT_CTXdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_bn_mod_exp : function(dsam: PDSA_METHOD; bn_mod_exp: DSA_meth_set_bn_mod_exp_bn_mod_exp): Integer; cdecl = nil;
//  DSA_meth_get_init : function(p1: PDSAdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_init : function(dsam: PDSA_METHOD; init: DSA_meth_set_init_init): Integer; cdecl = nil;
//  DSA_meth_get_finish : function(p1: PDSAdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_finish : function(dsam: PDSA_METHOD; finish: DSA_meth_set_finish_finish): Integer; cdecl = nil;
//  DSA_meth_get_paramgen : function(p1: PDSAp2: Integerp3: PBytep4: Integerp5: PIntegerp6: PCardinalp7: PBN_GENCBdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_paramgen : function(dsam: PDSA_METHOD; paramgen: DSA_meth_set_paramgen_paramgen): Integer; cdecl = nil;
//  DSA_meth_get_keygen : function(p1: PDSAdsam: PDSA_METHOD): Integer; cdecl = nil;
  DSA_meth_set_keygen : function(dsam: PDSA_METHOD; keygen: DSA_meth_set_keygen_keygen): Integer; cdecl = nil;
  SHA1_Init : function(c: PSHA_CTX): Integer; cdecl = nil;
  SHA1_Update : function(c: PSHA_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  SHA1_Final : function(md: PByte; c: PSHA_CTX): Integer; cdecl = nil;
  SHA1 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  SHA1_Transform : procedure(c: PSHA_CTX; data: PByte); cdecl = nil;
  SHA224_Init : function(c: PSHA256_CTX): Integer; cdecl = nil;
  SHA224_Update : function(c: PSHA256_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  SHA224_Final : function(md: PByte; c: PSHA256_CTX): Integer; cdecl = nil;
  SHA224 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  SHA256_Init : function(c: PSHA256_CTX): Integer; cdecl = nil;
  SHA256_Update : function(c: PSHA256_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  SHA256_Final : function(md: PByte; c: PSHA256_CTX): Integer; cdecl = nil;
  SHA256 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  SHA256_Transform : procedure(c: PSHA256_CTX; data: PByte); cdecl = nil;
  SHA384_Init : function(c: PSHA512_CTX): Integer; cdecl = nil;
  SHA384_Update : function(c: PSHA512_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  SHA384_Final : function(md: PByte; c: PSHA512_CTX): Integer; cdecl = nil;
  SHA384 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  SHA512_Init : function(c: PSHA512_CTX): Integer; cdecl = nil;
  SHA512_Update : function(c: PSHA512_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  SHA512_Final : function(md: PByte; c: PSHA512_CTX): Integer; cdecl = nil;
  SHA512 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  SHA512_Transform : procedure(c: PSHA512_CTX; data: PByte); cdecl = nil;
  ERR_load_X509_strings : function(): Integer; cdecl = nil;
  OPENSSL_LH_error : function(lh: POPENSSL_LHASH): Integer; cdecl = nil;
  OPENSSL_LH_new : function(h: OPENSSL_LH_HASHFUNC; c: OPENSSL_LH_COMPFUNC): POPENSSL_LHASH; cdecl = nil;
  OPENSSL_LH_free : procedure(lh: POPENSSL_LHASH); cdecl = nil;
  OPENSSL_LH_insert : function(lh: POPENSSL_LHASH; data: Pointer): Pointer; cdecl = nil;
  OPENSSL_LH_delete : function(lh: POPENSSL_LHASH; data: Pointer): Pointer; cdecl = nil;
  OPENSSL_LH_retrieve : function(lh: POPENSSL_LHASH; data: Pointer): Pointer; cdecl = nil;
  OPENSSL_LH_doall : procedure(lh: POPENSSL_LHASH; func: OPENSSL_LH_DOALL_FUNC); cdecl = nil;
  OPENSSL_LH_doall_arg : procedure(lh: POPENSSL_LHASH; func: OPENSSL_LH_DOALL_FUNCARG; arg: Pointer); cdecl = nil;
  OPENSSL_LH_strhash : function(c: PUTF8Char): Cardinal; cdecl = nil;
  OPENSSL_LH_num_items : function(lh: POPENSSL_LHASH): Cardinal; cdecl = nil;
  OPENSSL_LH_get_down_load : function(lh: POPENSSL_LHASH): Cardinal; cdecl = nil;
  OPENSSL_LH_set_down_load : procedure(lh: POPENSSL_LHASH; down_load: Cardinal); cdecl = nil;
  OPENSSL_LH_stats : procedure(lh: POPENSSL_LHASH; fp: PPointer); cdecl = nil;
  OPENSSL_LH_node_stats : procedure(lh: POPENSSL_LHASH; fp: PPointer); cdecl = nil;
  OPENSSL_LH_node_usage_stats : procedure(lh: POPENSSL_LHASH; fp: PPointer); cdecl = nil;
  OPENSSL_LH_stats_bio : procedure(lh: POPENSSL_LHASH; vout: PBIO); cdecl = nil;
  OPENSSL_LH_node_stats_bio : procedure(lh: POPENSSL_LHASH; vout: PBIO); cdecl = nil;
  OPENSSL_LH_node_usage_stats_bio : procedure(lh: POPENSSL_LHASH; vout: PBIO); cdecl = nil;
  X509_STORE_set_depth : function(store: PX509_STORE; depth: Integer): Integer; cdecl = nil;
  X509_STORE_CTX_set_depth : procedure(ctx: PX509_STORE_CTX; depth: Integer); cdecl = nil;
  X509_OBJECT_idx_by_subject : function(h: Pstack_st_X509_OBJECT; vtype: X509_LOOKUP_TYPE; name: PX509_NAME): Integer; cdecl = nil;
  X509_OBJECT_retrieve_by_subject : function(h: Pstack_st_X509_OBJECT; vtype: X509_LOOKUP_TYPE; name: PX509_NAME): PX509_OBJECT; cdecl = nil;
  X509_OBJECT_retrieve_match : function(h: Pstack_st_X509_OBJECT; x: PX509_OBJECT): PX509_OBJECT; cdecl = nil;
  X509_OBJECT_up_ref_count : function(a: PX509_OBJECT): Integer; cdecl = nil;
  X509_OBJECT_new : function(): PX509_OBJECT; cdecl = nil;
  X509_OBJECT_free : procedure(a: PX509_OBJECT); cdecl = nil;
  X509_OBJECT_get_type : function(a: PX509_OBJECT): X509_LOOKUP_TYPE; cdecl = nil;
  X509_OBJECT_get0_X509 : function(a: PX509_OBJECT): PX509; cdecl = nil;
  X509_OBJECT_set1_X509 : function(a: PX509_OBJECT; obj: PX509): Integer; cdecl = nil;
  X509_OBJECT_get0_X509_CRL : function(a: PX509_OBJECT): PX509_CRL; cdecl = nil;
  X509_OBJECT_set1_X509_CRL : function(a: PX509_OBJECT; obj: PX509_CRL): Integer; cdecl = nil;
  X509_STORE_new : function(): PX509_STORE; cdecl = nil;
  X509_STORE_free : procedure(v: PX509_STORE); cdecl = nil;
  X509_STORE_lock : function(ctx: PX509_STORE): Integer; cdecl = nil;
  X509_STORE_unlock : function(ctx: PX509_STORE): Integer; cdecl = nil;
  X509_STORE_up_ref : function(v: PX509_STORE): Integer; cdecl = nil;
  X509_STORE_get0_objects : function(v: PX509_STORE): Pstack_st_X509_OBJECT; cdecl = nil;
  X509_STORE_CTX_get1_certs : function(st: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509; cdecl = nil;
  X509_STORE_get1_certs : function(st: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509; cdecl = nil;
  X509_STORE_get1_cert : function(st: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509; cdecl = nil;
  X509_STORE_CTX_get1_crls : function(st: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509_CRL; cdecl = nil;
  X509_STORE_get1_crls : function(st: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509_CRL; cdecl = nil;
  X509_STORE_get1_crl : function(st: PX509_STORE_CTX; nm: PX509_NAME): Pstack_st_X509_CRL; cdecl = nil;
  X509_STORE_set_flags : function(ctx: PX509_STORE; flags: Cardinal): Integer; cdecl = nil;
  X509_STORE_set_purpose : function(ctx: PX509_STORE; purpose: Integer): Integer; cdecl = nil;
  X509_STORE_set_trust : function(ctx: PX509_STORE; trust: Integer): Integer; cdecl = nil;
  X509_STORE_set1_param : function(ctx: PX509_STORE; pm: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  X509_STORE_get0_param : function(ctx: PX509_STORE): PX509_VERIFY_PARAM; cdecl = nil;
  X509_STORE_set_verify : procedure(ctx: PX509_STORE; verify: X509_STORE_CTX_verify_fn); cdecl = nil;
  X509_STORE_CTX_set_verify : procedure(ctx: PX509_STORE_CTX; verify: X509_STORE_CTX_verify_fn); cdecl = nil;
  X509_STORE_get_verify : function(ctx: PX509_STORE): X509_STORE_CTX_verify_fn; cdecl = nil;
  X509_STORE_set_verify_cb : procedure(ctx: PX509_STORE; verify_cb: X509_STORE_CTX_verify_cb); cdecl = nil;
  X509_STORE_get_verify_cb : function(ctx: PX509_STORE): X509_STORE_CTX_verify_cb; cdecl = nil;
  X509_STORE_set_get_issuer : procedure(ctx: PX509_STORE; get_issuer: X509_STORE_CTX_get_issuer_fn); cdecl = nil;
  X509_STORE_get_get_issuer : function(ctx: PX509_STORE): X509_STORE_CTX_get_issuer_fn; cdecl = nil;
  X509_STORE_set_check_issued : procedure(ctx: PX509_STORE; check_issued: X509_STORE_CTX_check_issued_fn); cdecl = nil;
  X509_STORE_get_check_issued : function(ctx: PX509_STORE): X509_STORE_CTX_check_issued_fn; cdecl = nil;
  X509_STORE_set_check_revocation : procedure(ctx: PX509_STORE; check_revocation: X509_STORE_CTX_check_revocation_fn); cdecl = nil;
  X509_STORE_get_check_revocation : function(ctx: PX509_STORE): X509_STORE_CTX_check_revocation_fn; cdecl = nil;
  X509_STORE_set_get_crl : procedure(ctx: PX509_STORE; get_crl: X509_STORE_CTX_get_crl_fn); cdecl = nil;
  X509_STORE_get_get_crl : function(ctx: PX509_STORE): X509_STORE_CTX_get_crl_fn; cdecl = nil;
  X509_STORE_set_check_crl : procedure(ctx: PX509_STORE; check_crl: X509_STORE_CTX_check_crl_fn); cdecl = nil;
  X509_STORE_get_check_crl : function(ctx: PX509_STORE): X509_STORE_CTX_check_crl_fn; cdecl = nil;
  X509_STORE_set_cert_crl : procedure(ctx: PX509_STORE; cert_crl: X509_STORE_CTX_cert_crl_fn); cdecl = nil;
  X509_STORE_get_cert_crl : function(ctx: PX509_STORE): X509_STORE_CTX_cert_crl_fn; cdecl = nil;
  X509_STORE_set_check_policy : procedure(ctx: PX509_STORE; check_policy: X509_STORE_CTX_check_policy_fn); cdecl = nil;
  X509_STORE_get_check_policy : function(ctx: PX509_STORE): X509_STORE_CTX_check_policy_fn; cdecl = nil;
  X509_STORE_set_lookup_certs : procedure(ctx: PX509_STORE; lookup_certs: X509_STORE_CTX_lookup_certs_fn); cdecl = nil;
  X509_STORE_get_lookup_certs : function(ctx: PX509_STORE): X509_STORE_CTX_lookup_certs_fn; cdecl = nil;
  X509_STORE_set_lookup_crls : procedure(ctx: PX509_STORE; lookup_crls: X509_STORE_CTX_lookup_crls_fn); cdecl = nil;
  X509_STORE_get_lookup_crls : function(ctx: PX509_STORE): X509_STORE_CTX_lookup_crls_fn; cdecl = nil;
  X509_STORE_set_cleanup : procedure(ctx: PX509_STORE; cleanup: X509_STORE_CTX_cleanup_fn); cdecl = nil;
  X509_STORE_get_cleanup : function(ctx: PX509_STORE): X509_STORE_CTX_cleanup_fn; cdecl = nil;
  X509_STORE_set_ex_data : function(ctx: PX509_STORE; idx: Integer; data: Pointer): Integer; cdecl = nil;
  X509_STORE_get_ex_data : function(ctx: PX509_STORE; idx: Integer): Pointer; cdecl = nil;
  X509_STORE_CTX_new : function(): PX509_STORE_CTX; cdecl = nil;
  X509_STORE_CTX_get1_issuer : function(issuer: PPX509; ctx: PX509_STORE_CTX; x: PX509): Integer; cdecl = nil;
  X509_STORE_CTX_free : procedure(ctx: PX509_STORE_CTX); cdecl = nil;
  X509_STORE_CTX_init : function(ctx: PX509_STORE_CTX; store: PX509_STORE; x509: PX509; chain: Pstack_st_X509): Integer; cdecl = nil;
  X509_STORE_CTX_set0_trusted_stack : procedure(ctx: PX509_STORE_CTX; sk: Pstack_st_X509); cdecl = nil;
  X509_STORE_CTX_trusted_stack : procedure(ctx: PX509_STORE_CTX; sk: Pstack_st_X509); cdecl = nil;
  X509_STORE_CTX_cleanup : procedure(ctx: PX509_STORE_CTX); cdecl = nil;
  X509_STORE_CTX_get0_store : function(ctx: PX509_STORE_CTX): PX509_STORE; cdecl = nil;
  X509_STORE_CTX_get0_cert : function(ctx: PX509_STORE_CTX): PX509; cdecl = nil;
  X509_STORE_CTX_get0_untrusted : function(ctx: PX509_STORE_CTX): Pstack_st_X509; cdecl = nil;
  X509_STORE_CTX_set0_untrusted : procedure(ctx: PX509_STORE_CTX; sk: Pstack_st_X509); cdecl = nil;
  X509_STORE_CTX_set_chain : procedure(ctx: PX509_STORE_CTX; sk: Pstack_st_X509); cdecl = nil;
  X509_STORE_CTX_set_verify_cb : procedure(ctx: PX509_STORE_CTX; verify: X509_STORE_CTX_verify_cb); cdecl = nil;
  X509_STORE_CTX_get_verify_cb : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_verify_cb; cdecl = nil;
  X509_STORE_CTX_get_verify : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_verify_fn; cdecl = nil;
  X509_STORE_CTX_get_get_issuer : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_get_issuer_fn; cdecl = nil;
  X509_STORE_CTX_get_check_issued : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_check_issued_fn; cdecl = nil;
  X509_STORE_CTX_get_check_revocation : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_check_revocation_fn; cdecl = nil;
  X509_STORE_CTX_get_get_crl : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_get_crl_fn; cdecl = nil;
  X509_STORE_CTX_get_check_crl : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_check_crl_fn; cdecl = nil;
  X509_STORE_CTX_get_cert_crl : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_cert_crl_fn; cdecl = nil;
  X509_STORE_CTX_get_check_policy : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_check_policy_fn; cdecl = nil;
  X509_STORE_CTX_get_lookup_certs : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_lookup_certs_fn; cdecl = nil;
  X509_STORE_CTX_get_lookup_crls : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_lookup_crls_fn; cdecl = nil;
  X509_STORE_CTX_get_cleanup : function(ctx: PX509_STORE_CTX): X509_STORE_CTX_cleanup_fn; cdecl = nil;
  X509_STORE_add_lookup : function(v: PX509_STORE; m: PX509_LOOKUP_METHOD): PX509_LOOKUP; cdecl = nil;
  X509_LOOKUP_hash_dir : function(): PX509_LOOKUP_METHOD; cdecl = nil;
  X509_LOOKUP_file : function(): PX509_LOOKUP_METHOD; cdecl = nil;
  X509_LOOKUP_meth_new : function(name: PUTF8Char): PX509_LOOKUP_METHOD; cdecl = nil;
  X509_LOOKUP_meth_free : procedure(method: PX509_LOOKUP_METHOD); cdecl = nil;
  X509_LOOKUP_meth_set_new_item : function(method: PX509_LOOKUP_METHOD; new_item: X509_LOOKUP_meth_set_new_item_new_item): Integer; cdecl = nil;
//  X509_LOOKUP_meth_get_new_item : function(ctx: PX509_LOOKUPmethod: PX509_LOOKUP_METHOD): Integer; cdecl = nil;
  X509_LOOKUP_meth_set_free : function(method: PX509_LOOKUP_METHOD; free_fn: X509_LOOKUP_meth_set_free_free_fn): Integer; cdecl = nil;
//  X509_LOOKUP_meth_get_free : function(ctx: PX509_LOOKUPmethod: PX509_LOOKUP_METHOD): Integer; cdecl = nil;
  X509_LOOKUP_meth_set_init : function(method: PX509_LOOKUP_METHOD; init: X509_LOOKUP_meth_set_init_init): Integer; cdecl = nil;
//  X509_LOOKUP_meth_get_init : function(ctx: PX509_LOOKUPmethod: PX509_LOOKUP_METHOD): Integer; cdecl = nil;
  X509_LOOKUP_meth_set_shutdown : function(method: PX509_LOOKUP_METHOD; shutdown: X509_LOOKUP_meth_set_shutdown_shutdown): Integer; cdecl = nil;
//  X509_LOOKUP_meth_get_shutdown : function(ctx: PX509_LOOKUPmethod: PX509_LOOKUP_METHOD): Integer; cdecl = nil;
  X509_LOOKUP_meth_set_ctrl : function(method: PX509_LOOKUP_METHOD; ctrl_fn: X509_LOOKUP_ctrl_fn): Integer; cdecl = nil;
  X509_LOOKUP_meth_get_ctrl : function(method: PX509_LOOKUP_METHOD): X509_LOOKUP_ctrl_fn; cdecl = nil;
  X509_LOOKUP_meth_set_get_by_subject : function(method: PX509_LOOKUP_METHOD; fn: X509_LOOKUP_get_by_subject_fn): Integer; cdecl = nil;
  X509_LOOKUP_meth_get_get_by_subject : function(method: PX509_LOOKUP_METHOD): X509_LOOKUP_get_by_subject_fn; cdecl = nil;
  X509_LOOKUP_meth_set_get_by_issuer_serial : function(method: PX509_LOOKUP_METHOD; fn: X509_LOOKUP_get_by_issuer_serial_fn): Integer; cdecl = nil;
  X509_LOOKUP_meth_get_get_by_issuer_serial : function(method: PX509_LOOKUP_METHOD): X509_LOOKUP_get_by_issuer_serial_fn; cdecl = nil;
  X509_LOOKUP_meth_set_get_by_fingerprint : function(method: PX509_LOOKUP_METHOD; fn: X509_LOOKUP_get_by_fingerprint_fn): Integer; cdecl = nil;
  X509_LOOKUP_meth_get_get_by_fingerprint : function(method: PX509_LOOKUP_METHOD): X509_LOOKUP_get_by_fingerprint_fn; cdecl = nil;
  X509_LOOKUP_meth_set_get_by_alias : function(method: PX509_LOOKUP_METHOD; fn: X509_LOOKUP_get_by_alias_fn): Integer; cdecl = nil;
  X509_LOOKUP_meth_get_get_by_alias : function(method: PX509_LOOKUP_METHOD): X509_LOOKUP_get_by_alias_fn; cdecl = nil;
  X509_STORE_add_cert : function(ctx: PX509_STORE; x: PX509): Integer; cdecl = nil;
  X509_STORE_add_crl : function(ctx: PX509_STORE; x: PX509_CRL): Integer; cdecl = nil;
  X509_STORE_CTX_get_by_subject : function(vs: PX509_STORE_CTX; vtype: X509_LOOKUP_TYPE; name: PX509_NAME; ret: PX509_OBJECT): Integer; cdecl = nil;
  X509_STORE_get_by_subject : function(vs: PX509_STORE_CTX; vtype: X509_LOOKUP_TYPE; name: PX509_NAME; ret: PX509_OBJECT): Integer; cdecl = nil;
  X509_STORE_CTX_get_obj_by_subject : function(vs: PX509_STORE_CTX; vtype: X509_LOOKUP_TYPE; name: PX509_NAME): PX509_OBJECT; cdecl = nil;
  X509_LOOKUP_ctrl : function(ctx: PX509_LOOKUP; cmd: Integer; argc: PUTF8Char; argl: Integer; ret: PPUTF8Char): Integer; cdecl = nil;
  X509_load_cert_file : function(ctx: PX509_LOOKUP; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  X509_load_crl_file : function(ctx: PX509_LOOKUP; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  X509_load_cert_crl_file : function(ctx: PX509_LOOKUP; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  X509_LOOKUP_new : function(method: PX509_LOOKUP_METHOD): PX509_LOOKUP; cdecl = nil;
  X509_LOOKUP_free : procedure(ctx: PX509_LOOKUP); cdecl = nil;
  X509_LOOKUP_init : function(ctx: PX509_LOOKUP): Integer; cdecl = nil;
  X509_LOOKUP_by_subject : function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; name: PX509_NAME; ret: PX509_OBJECT): Integer; cdecl = nil;
  X509_LOOKUP_by_issuer_serial : function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; name: PX509_NAME; serial: PASN1_INTEGER; ret: PX509_OBJECT): Integer; cdecl = nil;
  X509_LOOKUP_by_fingerprint : function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; bytes: PByte; len: Integer; ret: PX509_OBJECT): Integer; cdecl = nil;
  X509_LOOKUP_by_alias : function(ctx: PX509_LOOKUP; vtype: X509_LOOKUP_TYPE; str: PUTF8Char; len: Integer; ret: PX509_OBJECT): Integer; cdecl = nil;
  X509_LOOKUP_set_method_data : function(ctx: PX509_LOOKUP; data: Pointer): Integer; cdecl = nil;
  X509_LOOKUP_get_method_data : function(ctx: PX509_LOOKUP): Pointer; cdecl = nil;
  X509_LOOKUP_get_store : function(ctx: PX509_LOOKUP): PX509_STORE; cdecl = nil;
  X509_LOOKUP_shutdown : function(ctx: PX509_LOOKUP): Integer; cdecl = nil;
  X509_STORE_load_locations : function(ctx: PX509_STORE; vfile: PUTF8Char; dir: PUTF8Char): Integer; cdecl = nil;
  X509_STORE_set_default_paths : function(ctx: PX509_STORE): Integer; cdecl = nil;
  X509_STORE_CTX_set_ex_data : function(ctx: PX509_STORE_CTX; idx: Integer; data: Pointer): Integer; cdecl = nil;
  X509_STORE_CTX_get_ex_data : function(ctx: PX509_STORE_CTX; idx: Integer): Pointer; cdecl = nil;
  X509_STORE_CTX_get_error : function(ctx: PX509_STORE_CTX): Integer; cdecl = nil;
  X509_STORE_CTX_set_error : procedure(ctx: PX509_STORE_CTX; s: Integer); cdecl = nil;
  X509_STORE_CTX_get_error_depth : function(ctx: PX509_STORE_CTX): Integer; cdecl = nil;
  X509_STORE_CTX_set_error_depth : procedure(ctx: PX509_STORE_CTX; depth: Integer); cdecl = nil;
  X509_STORE_CTX_get_current_cert : function(ctx: PX509_STORE_CTX): PX509; cdecl = nil;
  X509_STORE_CTX_set_current_cert : procedure(ctx: PX509_STORE_CTX; x: PX509); cdecl = nil;
  X509_STORE_CTX_get0_current_issuer : function(ctx: PX509_STORE_CTX): PX509; cdecl = nil;
  X509_STORE_CTX_get0_current_crl : function(ctx: PX509_STORE_CTX): PX509_CRL; cdecl = nil;
  X509_STORE_CTX_get0_parent_ctx : function(ctx: PX509_STORE_CTX): PX509_STORE_CTX; cdecl = nil;
  X509_STORE_CTX_get0_chain : function(ctx: PX509_STORE_CTX): Pstack_st_X509; cdecl = nil;
  X509_STORE_CTX_get_chain : function(ctx: PX509_STORE_CTX): Pstack_st_X509; cdecl = nil;
  X509_STORE_CTX_get1_chain : function(ctx: PX509_STORE_CTX): Pstack_st_X509; cdecl = nil;
  X509_STORE_CTX_set_cert : procedure(c: PX509_STORE_CTX; x: PX509); cdecl = nil;
  X509_STORE_CTX_set0_verified_chain : procedure(c: PX509_STORE_CTX; sk: Pstack_st_X509); cdecl = nil;
  X509_STORE_CTX_set0_crls : procedure(c: PX509_STORE_CTX; sk: Pstack_st_X509_CRL); cdecl = nil;
  X509_STORE_CTX_set_purpose : function(ctx: PX509_STORE_CTX; purpose: Integer): Integer; cdecl = nil;
  X509_STORE_CTX_set_trust : function(ctx: PX509_STORE_CTX; trust: Integer): Integer; cdecl = nil;
  X509_STORE_CTX_purpose_inherit : function(ctx: PX509_STORE_CTX; def_purpose: Integer; purpose: Integer; trust: Integer): Integer; cdecl = nil;
  X509_STORE_CTX_set_flags : procedure(ctx: PX509_STORE_CTX; flags: Cardinal); cdecl = nil;
  X509_STORE_CTX_set_time : procedure(ctx: PX509_STORE_CTX; flags: Cardinal; t: Longint); cdecl = nil;
  X509_STORE_CTX_get0_policy_tree : function(ctx: PX509_STORE_CTX): PX509_POLICY_TREE; cdecl = nil;
  X509_STORE_CTX_get_explicit_policy : function(ctx: PX509_STORE_CTX): Integer; cdecl = nil;
  X509_STORE_CTX_get_num_untrusted : function(ctx: PX509_STORE_CTX): Integer; cdecl = nil;
  X509_STORE_CTX_get0_param : function(ctx: PX509_STORE_CTX): PX509_VERIFY_PARAM; cdecl = nil;
  X509_STORE_CTX_set0_param : procedure(ctx: PX509_STORE_CTX; param: PX509_VERIFY_PARAM); cdecl = nil;
  X509_STORE_CTX_set_default : function(ctx: PX509_STORE_CTX; name: PUTF8Char): Integer; cdecl = nil;
  X509_STORE_CTX_set0_dane : procedure(ctx: PX509_STORE_CTX; dane: PSSL_DANE); cdecl = nil;
  X509_VERIFY_PARAM_new : function(): PX509_VERIFY_PARAM; cdecl = nil;
  X509_VERIFY_PARAM_free : procedure(param: PX509_VERIFY_PARAM); cdecl = nil;
  X509_VERIFY_PARAM_inherit : function(vto: PX509_VERIFY_PARAM; from: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set1 : function(vto: PX509_VERIFY_PARAM; from: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set1_name : function(param: PX509_VERIFY_PARAM; name: PUTF8Char): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set_flags : function(param: PX509_VERIFY_PARAM; flags: Cardinal): Integer; cdecl = nil;
  X509_VERIFY_PARAM_clear_flags : function(param: PX509_VERIFY_PARAM; flags: Cardinal): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get_flags : function(param: PX509_VERIFY_PARAM): Cardinal; cdecl = nil;
  X509_VERIFY_PARAM_set_purpose : function(param: PX509_VERIFY_PARAM; purpose: Integer): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set_trust : function(param: PX509_VERIFY_PARAM; trust: Integer): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set_depth : procedure(param: PX509_VERIFY_PARAM; depth: Integer); cdecl = nil;
  X509_VERIFY_PARAM_set_auth_level : procedure(param: PX509_VERIFY_PARAM; auth_level: Integer); cdecl = nil;
  X509_VERIFY_PARAM_get_time : function(param: PX509_VERIFY_PARAM): Longint; cdecl = nil;
  X509_VERIFY_PARAM_set_time : procedure(param: PX509_VERIFY_PARAM; t: Longint); cdecl = nil;
  X509_VERIFY_PARAM_add0_policy : function(param: PX509_VERIFY_PARAM; policy: PASN1_OBJECT): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set1_policies : function(param: PX509_VERIFY_PARAM; policies: Pstack_st_ASN1_OBJECT): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set_inh_flags : function(param: PX509_VERIFY_PARAM; flags: UInt32): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get_inh_flags : function(param: PX509_VERIFY_PARAM): UInt32; cdecl = nil;
  X509_VERIFY_PARAM_set1_host : function(param: PX509_VERIFY_PARAM; name: PUTF8Char; namelen: NativeUInt): Integer; cdecl = nil;
  X509_VERIFY_PARAM_add1_host : function(param: PX509_VERIFY_PARAM; name: PUTF8Char; namelen: NativeUInt): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set_hostflags : procedure(param: PX509_VERIFY_PARAM; flags: Cardinal); cdecl = nil;
  X509_VERIFY_PARAM_get_hostflags : function(param: PX509_VERIFY_PARAM): Cardinal; cdecl = nil;
  X509_VERIFY_PARAM_get0_peername : function(p1: PX509_VERIFY_PARAM): PUTF8Char; cdecl = nil;
  X509_VERIFY_PARAM_move_peername : procedure(p1: PX509_VERIFY_PARAM; p2: PX509_VERIFY_PARAM); cdecl = nil;
  X509_VERIFY_PARAM_set1_email : function(param: PX509_VERIFY_PARAM; email: PUTF8Char; emaillen: NativeUInt): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set1_ip : function(param: PX509_VERIFY_PARAM; ip: PByte; iplen: NativeUInt): Integer; cdecl = nil;
  X509_VERIFY_PARAM_set1_ip_asc : function(param: PX509_VERIFY_PARAM; ipasc: PUTF8Char): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get_depth : function(param: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get_auth_level : function(param: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get0_name : function(param: PX509_VERIFY_PARAM): PUTF8Char; cdecl = nil;
  X509_VERIFY_PARAM_add0_table : function(param: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get_count : function(): Integer; cdecl = nil;
  X509_VERIFY_PARAM_get0 : function(id: Integer): PX509_VERIFY_PARAM; cdecl = nil;
  X509_VERIFY_PARAM_lookup : function(name: PUTF8Char): PX509_VERIFY_PARAM; cdecl = nil;
  X509_VERIFY_PARAM_table_cleanup : procedure(); cdecl = nil;
  X509_policy_check : function(ptree: PPX509_POLICY_TREE; pexplicit_policy: PInteger; certs: Pstack_st_X509; policy_oids: Pstack_st_ASN1_OBJECT; flags: Cardinal): Integer; cdecl = nil;
  X509_policy_tree_free : procedure(tree: PX509_POLICY_TREE); cdecl = nil;
  X509_policy_tree_level_count : function(tree: PX509_POLICY_TREE): Integer; cdecl = nil;
  X509_policy_tree_get0_level : function(tree: PX509_POLICY_TREE; i: Integer): PX509_POLICY_LEVEL; cdecl = nil;
  X509_policy_tree_get0_policies : function(tree: PX509_POLICY_TREE): Pstack_st_X509_POLICY_NODE; cdecl = nil;
  X509_policy_tree_get0_user_policies : function(tree: PX509_POLICY_TREE): Pstack_st_X509_POLICY_NODE; cdecl = nil;
  X509_policy_level_node_count : function(level: PX509_POLICY_LEVEL): Integer; cdecl = nil;
  X509_policy_level_get0_node : function(level: PX509_POLICY_LEVEL; i: Integer): PX509_POLICY_NODE; cdecl = nil;
  X509_policy_node_get0_policy : function(node: PX509_POLICY_NODE): PASN1_OBJECT; cdecl = nil;
  X509_policy_node_get0_qualifiers : function(node: PX509_POLICY_NODE): Pstack_st_POLICYQUALINFO; cdecl = nil;
  X509_policy_node_get0_parent : function(node: PX509_POLICY_NODE): PX509_POLICY_NODE; cdecl = nil;
  ERR_load_PKCS7_strings : function(): Integer; cdecl = nil;
  PKCS7_ISSUER_AND_SERIAL_new : function(): PPKCS7_ISSUER_AND_SERIAL; cdecl = nil;
  PKCS7_ISSUER_AND_SERIAL_free : procedure(a: PPKCS7_ISSUER_AND_SERIAL); cdecl = nil;
  d2i_PKCS7_ISSUER_AND_SERIAL : function(a: PPPKCS7_ISSUER_AND_SERIAL; vin: PPByte; len: Integer): PPKCS7_ISSUER_AND_SERIAL; cdecl = nil;
  i2d_PKCS7_ISSUER_AND_SERIAL : function(a: PPKCS7_ISSUER_AND_SERIAL; vout: PPByte): Integer; cdecl = nil;
  PKCS7_ISSUER_AND_SERIAL_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_ISSUER_AND_SERIAL_digest : function(data: PPKCS7_ISSUER_AND_SERIAL; vtype: PEVP_MD; md: PByte; len: PCardinal): Integer; cdecl = nil;
  d2i_PKCS7_fp : function(fp: PPointer; p7: PPPKCS7): PPKCS7; cdecl = nil;
  i2d_PKCS7_fp : function(fp: PPointer; p7: PPKCS7): Integer; cdecl = nil;
  PKCS7_dup : function(p7: PPKCS7): PPKCS7; cdecl = nil;
  d2i_PKCS7_bio : function(bp: PBIO; p7: PPPKCS7): PPKCS7; cdecl = nil;
  i2d_PKCS7_bio : function(bp: PBIO; p7: PPKCS7): Integer; cdecl = nil;
  i2d_PKCS7_bio_stream : function(vout: PBIO; p7: PPKCS7; vin: PBIO; flags: Integer): Integer; cdecl = nil;
  PEM_write_bio_PKCS7_stream : function(vout: PBIO; p7: PPKCS7; vin: PBIO; flags: Integer): Integer; cdecl = nil;
  PKCS7_SIGNER_INFO_new : function(): PPKCS7_SIGNER_INFO; cdecl = nil;
  PKCS7_SIGNER_INFO_free : procedure(a: PPKCS7_SIGNER_INFO); cdecl = nil;
  d2i_PKCS7_SIGNER_INFO : function(a: PPPKCS7_SIGNER_INFO; vin: PPByte; len: Integer): PPKCS7_SIGNER_INFO; cdecl = nil;
  i2d_PKCS7_SIGNER_INFO : function(a: PPKCS7_SIGNER_INFO; vout: PPByte): Integer; cdecl = nil;
  PKCS7_SIGNER_INFO_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_RECIP_INFO_new : function(): PPKCS7_RECIP_INFO; cdecl = nil;
  PKCS7_RECIP_INFO_free : procedure(a: PPKCS7_RECIP_INFO); cdecl = nil;
  d2i_PKCS7_RECIP_INFO : function(a: PPPKCS7_RECIP_INFO; vin: PPByte; len: Integer): PPKCS7_RECIP_INFO; cdecl = nil;
  i2d_PKCS7_RECIP_INFO : function(a: PPKCS7_RECIP_INFO; vout: PPByte): Integer; cdecl = nil;
  PKCS7_RECIP_INFO_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_SIGNED_new : function(): PPKCS7_SIGNED; cdecl = nil;
  PKCS7_SIGNED_free : procedure(a: PPKCS7_SIGNED); cdecl = nil;
  d2i_PKCS7_SIGNED : function(a: PPPKCS7_SIGNED; vin: PPByte; len: Integer): PPKCS7_SIGNED; cdecl = nil;
  i2d_PKCS7_SIGNED : function(a: PPKCS7_SIGNED; vout: PPByte): Integer; cdecl = nil;
  PKCS7_SIGNED_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_ENC_CONTENT_new : function(): PPKCS7_ENC_CONTENT; cdecl = nil;
  PKCS7_ENC_CONTENT_free : procedure(a: PPKCS7_ENC_CONTENT); cdecl = nil;
  d2i_PKCS7_ENC_CONTENT : function(a: PPPKCS7_ENC_CONTENT; vin: PPByte; len: Integer): PPKCS7_ENC_CONTENT; cdecl = nil;
  i2d_PKCS7_ENC_CONTENT : function(a: PPKCS7_ENC_CONTENT; vout: PPByte): Integer; cdecl = nil;
  PKCS7_ENC_CONTENT_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_ENVELOPE_new : function(): PPKCS7_ENVELOPE; cdecl = nil;
  PKCS7_ENVELOPE_free : procedure(a: PPKCS7_ENVELOPE); cdecl = nil;
  d2i_PKCS7_ENVELOPE : function(a: PPPKCS7_ENVELOPE; vin: PPByte; len: Integer): PPKCS7_ENVELOPE; cdecl = nil;
  i2d_PKCS7_ENVELOPE : function(a: PPKCS7_ENVELOPE; vout: PPByte): Integer; cdecl = nil;
  PKCS7_ENVELOPE_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_SIGN_ENVELOPE_new : function(): PPKCS7_SIGN_ENVELOPE; cdecl = nil;
  PKCS7_SIGN_ENVELOPE_free : procedure(a: PPKCS7_SIGN_ENVELOPE); cdecl = nil;
  d2i_PKCS7_SIGN_ENVELOPE : function(a: PPPKCS7_SIGN_ENVELOPE; vin: PPByte; len: Integer): PPKCS7_SIGN_ENVELOPE; cdecl = nil;
  i2d_PKCS7_SIGN_ENVELOPE : function(a: PPKCS7_SIGN_ENVELOPE; vout: PPByte): Integer; cdecl = nil;
  PKCS7_SIGN_ENVELOPE_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_DIGEST_new : function(): PPKCS7_DIGEST; cdecl = nil;
  PKCS7_DIGEST_free : procedure(a: PPKCS7_DIGEST); cdecl = nil;
  d2i_PKCS7_DIGEST : function(a: PPPKCS7_DIGEST; vin: PPByte; len: Integer): PPKCS7_DIGEST; cdecl = nil;
  i2d_PKCS7_DIGEST : function(a: PPKCS7_DIGEST; vout: PPByte): Integer; cdecl = nil;
  PKCS7_DIGEST_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_ENCRYPT_new : function(): PPKCS7_ENCRYPT; cdecl = nil;
  PKCS7_ENCRYPT_free : procedure(a: PPKCS7_ENCRYPT); cdecl = nil;
  d2i_PKCS7_ENCRYPT : function(a: PPPKCS7_ENCRYPT; vin: PPByte; len: Integer): PPKCS7_ENCRYPT; cdecl = nil;
  i2d_PKCS7_ENCRYPT : function(a: PPKCS7_ENCRYPT; vout: PPByte): Integer; cdecl = nil;
  PKCS7_ENCRYPT_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_new : function(): PPKCS7; cdecl = nil;
  PKCS7_free : procedure(a: PPKCS7); cdecl = nil;
  d2i_PKCS7 : function(a: PPPKCS7; vin: PPByte; len: Integer): PPKCS7; cdecl = nil;
  i2d_PKCS7 : function(a: PPKCS7; vout: PPByte): Integer; cdecl = nil;
  PKCS7_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_ATTR_SIGN_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS7_ATTR_VERIFY_it : function(): PASN1_ITEM; cdecl = nil;
  i2d_PKCS7_NDEF : function(a: PPKCS7; vout: PPByte): Integer; cdecl = nil;
  PKCS7_print_ctx : function(vout: PBIO; x: PPKCS7; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl = nil;
  PKCS7_ctrl : function(p7: PPKCS7; cmd: Integer; larg: Integer; parg: PUTF8Char): Integer; cdecl = nil;
  PKCS7_set_type : function(p7: PPKCS7; vtype: Integer): Integer; cdecl = nil;
  PKCS7_set0_type_other : function(p7: PPKCS7; vtype: Integer; other: PASN1_TYPE): Integer; cdecl = nil;
  PKCS7_set_content : function(p7: PPKCS7; p7_data: PPKCS7): Integer; cdecl = nil;
  PKCS7_SIGNER_INFO_set : function(p7i: PPKCS7_SIGNER_INFO; x509: PX509; pkey: PEVP_PKEY; dgst: PEVP_MD): Integer; cdecl = nil;
  PKCS7_SIGNER_INFO_sign : function(si: PPKCS7_SIGNER_INFO): Integer; cdecl = nil;
  PKCS7_add_signer : function(p7: PPKCS7; p7i: PPKCS7_SIGNER_INFO): Integer; cdecl = nil;
  PKCS7_add_certificate : function(p7: PPKCS7; x509: PX509): Integer; cdecl = nil;
  PKCS7_add_crl : function(p7: PPKCS7; x509: PX509_CRL): Integer; cdecl = nil;
  PKCS7_content_new : function(p7: PPKCS7; nid: Integer): Integer; cdecl = nil;
  PKCS7_dataVerify : function(cert_store: PX509_STORE; ctx: PX509_STORE_CTX; bio: PBIO; p7: PPKCS7; si: PPKCS7_SIGNER_INFO): Integer; cdecl = nil;
  PKCS7_signatureVerify : function(bio: PBIO; p7: PPKCS7; si: PPKCS7_SIGNER_INFO; x509: PX509): Integer; cdecl = nil;
  PKCS7_dataInit : function(p7: PPKCS7; bio: PBIO): PBIO; cdecl = nil;
  PKCS7_dataFinal : function(p7: PPKCS7; bio: PBIO): Integer; cdecl = nil;
  PKCS7_dataDecode : function(p7: PPKCS7; pkey: PEVP_PKEY; in_bio: PBIO; pcert: PX509): PBIO; cdecl = nil;
  PKCS7_add_signature : function(p7: PPKCS7; x509: PX509; pkey: PEVP_PKEY; dgst: PEVP_MD): PPKCS7_SIGNER_INFO; cdecl = nil;
  PKCS7_cert_from_signer_info : function(p7: PPKCS7; si: PPKCS7_SIGNER_INFO): PX509; cdecl = nil;
  PKCS7_set_digest : function(p7: PPKCS7; md: PEVP_MD): Integer; cdecl = nil;
  PKCS7_get_signer_info : function(p7: PPKCS7): Pstack_st_PKCS7_SIGNER_INFO; cdecl = nil;
  PKCS7_add_recipient : function(p7: PPKCS7; x509: PX509): PPKCS7_RECIP_INFO; cdecl = nil;
  PKCS7_SIGNER_INFO_get0_algs : procedure(si: PPKCS7_SIGNER_INFO; pk: PPEVP_PKEY; pdig: PPX509_ALGOR; psig: PPX509_ALGOR); cdecl = nil;
  PKCS7_RECIP_INFO_get0_alg : procedure(ri: PPKCS7_RECIP_INFO; penc: PPX509_ALGOR); cdecl = nil;
  PKCS7_add_recipient_info : function(p7: PPKCS7; ri: PPKCS7_RECIP_INFO): Integer; cdecl = nil;
  PKCS7_RECIP_INFO_set : function(p7i: PPKCS7_RECIP_INFO; x509: PX509): Integer; cdecl = nil;
  PKCS7_set_cipher : function(p7: PPKCS7; cipher: PEVP_CIPHER): Integer; cdecl = nil;
  PKCS7_stream : function(boundary: PPPByte; p7: PPKCS7): Integer; cdecl = nil;
  PKCS7_get_issuer_and_serial : function(p7: PPKCS7; idx: Integer): PPKCS7_ISSUER_AND_SERIAL; cdecl = nil;
  PKCS7_digest_from_attributes : function(sk: Pstack_st_X509_ATTRIBUTE): PASN1_OCTET_STRING; cdecl = nil;
  PKCS7_add_signed_attribute : function(p7si: PPKCS7_SIGNER_INFO; nid: Integer; vtype: Integer; data: Pointer): Integer; cdecl = nil;
  PKCS7_add_attribute : function(p7si: PPKCS7_SIGNER_INFO; nid: Integer; atrtype: Integer; value: Pointer): Integer; cdecl = nil;
  PKCS7_get_attribute : function(si: PPKCS7_SIGNER_INFO; nid: Integer): PASN1_TYPE; cdecl = nil;
  PKCS7_get_signed_attribute : function(si: PPKCS7_SIGNER_INFO; nid: Integer): PASN1_TYPE; cdecl = nil;
  PKCS7_set_signed_attributes : function(p7si: PPKCS7_SIGNER_INFO; sk: Pstack_st_X509_ATTRIBUTE): Integer; cdecl = nil;
  PKCS7_set_attributes : function(p7si: PPKCS7_SIGNER_INFO; sk: Pstack_st_X509_ATTRIBUTE): Integer; cdecl = nil;
  PKCS7_sign : function(signcert: PX509; pkey: PEVP_PKEY; certs: Pstack_st_X509; data: PBIO; flags: Integer): PPKCS7; cdecl = nil;
  PKCS7_sign_add_signer : function(p7: PPKCS7; signcert: PX509; pkey: PEVP_PKEY; md: PEVP_MD; flags: Integer): PPKCS7_SIGNER_INFO; cdecl = nil;
  PKCS7_final : function(p7: PPKCS7; data: PBIO; flags: Integer): Integer; cdecl = nil;
  PKCS7_verify : function(p7: PPKCS7; certs: Pstack_st_X509; store: PX509_STORE; indata: PBIO; vout: PBIO; flags: Integer): Integer; cdecl = nil;
  PKCS7_get0_signers : function(p7: PPKCS7; certs: Pstack_st_X509; flags: Integer): Pstack_st_X509; cdecl = nil;
  PKCS7_encrypt : function(certs: Pstack_st_X509; vin: PBIO; cipher: PEVP_CIPHER; flags: Integer): PPKCS7; cdecl = nil;
  PKCS7_decrypt : function(p7: PPKCS7; pkey: PEVP_PKEY; cert: PX509; data: PBIO; flags: Integer): Integer; cdecl = nil;
  PKCS7_add_attrib_smimecap : function(si: PPKCS7_SIGNER_INFO; cap: Pstack_st_X509_ALGOR): Integer; cdecl = nil;
  PKCS7_get_smimecap : function(si: PPKCS7_SIGNER_INFO): Pstack_st_X509_ALGOR; cdecl = nil;
  PKCS7_simple_smimecap : function(sk: Pstack_st_X509_ALGOR; nid: Integer; arg: Integer): Integer; cdecl = nil;
  PKCS7_add_attrib_content_type : function(si: PPKCS7_SIGNER_INFO; coid: PASN1_OBJECT): Integer; cdecl = nil;
  PKCS7_add0_attrib_signing_time : function(si: PPKCS7_SIGNER_INFO; t: PASN1_TIME): Integer; cdecl = nil;
  PKCS7_add1_attrib_digest : function(si: PPKCS7_SIGNER_INFO; md: PByte; mdlen: Integer): Integer; cdecl = nil;
  SMIME_write_PKCS7 : function(bio: PBIO; p7: PPKCS7; data: PBIO; flags: Integer): Integer; cdecl = nil;
  SMIME_read_PKCS7 : function(bio: PBIO; bcont: PPBIO): PPKCS7; cdecl = nil;
  BIO_new_PKCS7 : function(vout: PBIO; p7: PPKCS7): PBIO; cdecl = nil;
  X509_CRL_set_default_method : procedure(meth: PX509_CRL_METHOD); cdecl = nil;
  X509_CRL_METHOD_new : function(crl_init: X509_CRL_METHOD_new_crl_init; crl_free: X509_CRL_METHOD_new_crl_free; crl_lookup: X509_CRL_METHOD_new_crl_lookup; crl_verify: X509_CRL_METHOD_new_crl_verify): PX509_CRL_METHOD; cdecl = nil;
  X509_CRL_METHOD_free : procedure(m: PX509_CRL_METHOD); cdecl = nil;
  X509_CRL_set_meth_data : procedure(crl: PX509_CRL; dat: Pointer); cdecl = nil;
  X509_CRL_get_meth_data : function(crl: PX509_CRL): Pointer; cdecl = nil;
  X509_verify_cert_error_string : function(n: Integer): PUTF8Char; cdecl = nil;
  X509_verify : function(a: PX509; r: PEVP_PKEY): Integer; cdecl = nil;
  X509_REQ_verify : function(a: PX509_REQ; r: PEVP_PKEY): Integer; cdecl = nil;
  X509_CRL_verify : function(a: PX509_CRL; r: PEVP_PKEY): Integer; cdecl = nil;
  NETSCAPE_SPKI_verify : function(a: PNETSCAPE_SPKI; r: PEVP_PKEY): Integer; cdecl = nil;
  NETSCAPE_SPKI_b64_decode : function(str: PUTF8Char; len: Integer): PNETSCAPE_SPKI; cdecl = nil;
  NETSCAPE_SPKI_b64_encode : function(x: PNETSCAPE_SPKI): PUTF8Char; cdecl = nil;
  NETSCAPE_SPKI_get_pubkey : function(x: PNETSCAPE_SPKI): PEVP_PKEY; cdecl = nil;
  NETSCAPE_SPKI_set_pubkey : function(x: PNETSCAPE_SPKI; pkey: PEVP_PKEY): Integer; cdecl = nil;
  NETSCAPE_SPKI_print : function(vout: PBIO; spki: PNETSCAPE_SPKI): Integer; cdecl = nil;
  X509_signature_dump : function(bp: PBIO; sig: PASN1_STRING; indent: Integer): Integer; cdecl = nil;
  X509_signature_print : function(bp: PBIO; alg: PX509_ALGOR; sig: PASN1_STRING): Integer; cdecl = nil;
  X509_sign : function(x: PX509; pkey: PEVP_PKEY; md: PEVP_MD): Integer; cdecl = nil;
  X509_sign_ctx : function(x: PX509; ctx: PEVP_MD_CTX): Integer; cdecl = nil;
  X509_http_nbio : function(rctx: POCSP_REQ_CTX; pcert: PPX509): Integer; cdecl = nil;
  X509_REQ_sign : function(x: PX509_REQ; pkey: PEVP_PKEY; md: PEVP_MD): Integer; cdecl = nil;
  X509_REQ_sign_ctx : function(x: PX509_REQ; ctx: PEVP_MD_CTX): Integer; cdecl = nil;
  X509_CRL_sign : function(x: PX509_CRL; pkey: PEVP_PKEY; md: PEVP_MD): Integer; cdecl = nil;
  X509_CRL_sign_ctx : function(x: PX509_CRL; ctx: PEVP_MD_CTX): Integer; cdecl = nil;
  X509_CRL_http_nbio : function(rctx: POCSP_REQ_CTX; pcrl: PPX509_CRL): Integer; cdecl = nil;
  NETSCAPE_SPKI_sign : function(x: PNETSCAPE_SPKI; pkey: PEVP_PKEY; md: PEVP_MD): Integer; cdecl = nil;
  X509_pubkey_digest : function(data: PX509; vtype: PEVP_MD; md: PByte; len: PCardinal): Integer; cdecl = nil;
  X509_digest : function(data: PX509; vtype: PEVP_MD; md: PByte; len: PCardinal): Integer; cdecl = nil;
  X509_CRL_digest : function(data: PX509_CRL; vtype: PEVP_MD; md: PByte; len: PCardinal): Integer; cdecl = nil;
  X509_REQ_digest : function(data: PX509_REQ; vtype: PEVP_MD; md: PByte; len: PCardinal): Integer; cdecl = nil;
  X509_NAME_digest : function(data: PX509_NAME; vtype: PEVP_MD; md: PByte; len: PCardinal): Integer; cdecl = nil;
  d2i_X509_fp : function(fp: PPointer; x509: PPX509): PX509; cdecl = nil;
  i2d_X509_fp : function(fp: PPointer; x509: PX509): Integer; cdecl = nil;
  d2i_X509_CRL_fp : function(fp: PPointer; crl: PPX509_CRL): PX509_CRL; cdecl = nil;
  i2d_X509_CRL_fp : function(fp: PPointer; crl: PX509_CRL): Integer; cdecl = nil;
  d2i_X509_REQ_fp : function(fp: PPointer; req: PPX509_REQ): PX509_REQ; cdecl = nil;
  i2d_X509_REQ_fp : function(fp: PPointer; req: PX509_REQ): Integer; cdecl = nil;
  d2i_RSAPrivateKey_fp : function(fp: PPointer; rsa: PPRSA): PRSA; cdecl = nil;
  i2d_RSAPrivateKey_fp : function(fp: PPointer; rsa: PRSA): Integer; cdecl = nil;
  d2i_RSAPublicKey_fp : function(fp: PPointer; rsa: PPRSA): PRSA; cdecl = nil;
  i2d_RSAPublicKey_fp : function(fp: PPointer; rsa: PRSA): Integer; cdecl = nil;
  d2i_RSA_PUBKEY_fp : function(fp: PPointer; rsa: PPRSA): PRSA; cdecl = nil;
  i2d_RSA_PUBKEY_fp : function(fp: PPointer; rsa: PRSA): Integer; cdecl = nil;
  d2i_DSA_PUBKEY_fp : function(fp: PPointer; dsa: PPDSA): PDSA; cdecl = nil;
  i2d_DSA_PUBKEY_fp : function(fp: PPointer; dsa: PDSA): Integer; cdecl = nil;
  d2i_DSAPrivateKey_fp : function(fp: PPointer; dsa: PPDSA): PDSA; cdecl = nil;
  i2d_DSAPrivateKey_fp : function(fp: PPointer; dsa: PDSA): Integer; cdecl = nil;
  d2i_EC_PUBKEY_fp : function(fp: PPointer; eckey: PPEC_KEY): PEC_KEY; cdecl = nil;
  i2d_EC_PUBKEY_fp : function(fp: PPointer; eckey: PEC_KEY): Integer; cdecl = nil;
  d2i_ECPrivateKey_fp : function(fp: PPointer; eckey: PPEC_KEY): PEC_KEY; cdecl = nil;
  i2d_ECPrivateKey_fp : function(fp: PPointer; eckey: PEC_KEY): Integer; cdecl = nil;
  d2i_PKCS8_fp : function(fp: PPointer; p8: PPX509_SIG): PX509_SIG; cdecl = nil;
  i2d_PKCS8_fp : function(fp: PPointer; p8: PX509_SIG): Integer; cdecl = nil;
  d2i_PKCS8_PRIV_KEY_INFO_fp : function(fp: PPointer; p8inf: PPPKCS8_PRIV_KEY_INFO): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  i2d_PKCS8_PRIV_KEY_INFO_fp : function(fp: PPointer; p8inf: PPKCS8_PRIV_KEY_INFO): Integer; cdecl = nil;
  i2d_PKCS8PrivateKeyInfo_fp : function(fp: PPointer; key: PEVP_PKEY): Integer; cdecl = nil;
  i2d_PrivateKey_fp : function(fp: PPointer; pkey: PEVP_PKEY): Integer; cdecl = nil;
  d2i_PrivateKey_fp : function(fp: PPointer; a: PPEVP_PKEY): PEVP_PKEY; cdecl = nil;
  i2d_PUBKEY_fp : function(fp: PPointer; pkey: PEVP_PKEY): Integer; cdecl = nil;
  d2i_PUBKEY_fp : function(fp: PPointer; a: PPEVP_PKEY): PEVP_PKEY; cdecl = nil;
  d2i_X509_bio : function(bp: PBIO; x509: PPX509): PX509; cdecl = nil;
  i2d_X509_bio : function(bp: PBIO; x509: PX509): Integer; cdecl = nil;
  d2i_X509_CRL_bio : function(bp: PBIO; crl: PPX509_CRL): PX509_CRL; cdecl = nil;
  i2d_X509_CRL_bio : function(bp: PBIO; crl: PX509_CRL): Integer; cdecl = nil;
  d2i_X509_REQ_bio : function(bp: PBIO; req: PPX509_REQ): PX509_REQ; cdecl = nil;
  i2d_X509_REQ_bio : function(bp: PBIO; req: PX509_REQ): Integer; cdecl = nil;
  d2i_RSAPrivateKey_bio : function(bp: PBIO; rsa: PPRSA): PRSA; cdecl = nil;
  i2d_RSAPrivateKey_bio : function(bp: PBIO; rsa: PRSA): Integer; cdecl = nil;
  d2i_RSAPublicKey_bio : function(bp: PBIO; rsa: PPRSA): PRSA; cdecl = nil;
  i2d_RSAPublicKey_bio : function(bp: PBIO; rsa: PRSA): Integer; cdecl = nil;
  d2i_RSA_PUBKEY_bio : function(bp: PBIO; rsa: PPRSA): PRSA; cdecl = nil;
  i2d_RSA_PUBKEY_bio : function(bp: PBIO; rsa: PRSA): Integer; cdecl = nil;
  d2i_DSA_PUBKEY_bio : function(bp: PBIO; dsa: PPDSA): PDSA; cdecl = nil;
  i2d_DSA_PUBKEY_bio : function(bp: PBIO; dsa: PDSA): Integer; cdecl = nil;
  d2i_DSAPrivateKey_bio : function(bp: PBIO; dsa: PPDSA): PDSA; cdecl = nil;
  i2d_DSAPrivateKey_bio : function(bp: PBIO; dsa: PDSA): Integer; cdecl = nil;
  d2i_EC_PUBKEY_bio : function(bp: PBIO; eckey: PPEC_KEY): PEC_KEY; cdecl = nil;
  i2d_EC_PUBKEY_bio : function(bp: PBIO; eckey: PEC_KEY): Integer; cdecl = nil;
  d2i_ECPrivateKey_bio : function(bp: PBIO; eckey: PPEC_KEY): PEC_KEY; cdecl = nil;
  i2d_ECPrivateKey_bio : function(bp: PBIO; eckey: PEC_KEY): Integer; cdecl = nil;
  d2i_PKCS8_bio : function(bp: PBIO; p8: PPX509_SIG): PX509_SIG; cdecl = nil;
  i2d_PKCS8_bio : function(bp: PBIO; p8: PX509_SIG): Integer; cdecl = nil;
  d2i_PKCS8_PRIV_KEY_INFO_bio : function(bp: PBIO; p8inf: PPPKCS8_PRIV_KEY_INFO): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  i2d_PKCS8_PRIV_KEY_INFO_bio : function(bp: PBIO; p8inf: PPKCS8_PRIV_KEY_INFO): Integer; cdecl = nil;
  i2d_PKCS8PrivateKeyInfo_bio : function(bp: PBIO; key: PEVP_PKEY): Integer; cdecl = nil;
  i2d_PrivateKey_bio : function(bp: PBIO; pkey: PEVP_PKEY): Integer; cdecl = nil;
  d2i_PrivateKey_bio : function(bp: PBIO; a: PPEVP_PKEY): PEVP_PKEY; cdecl = nil;
  i2d_PUBKEY_bio : function(bp: PBIO; pkey: PEVP_PKEY): Integer; cdecl = nil;
  d2i_PUBKEY_bio : function(bp: PBIO; a: PPEVP_PKEY): PEVP_PKEY; cdecl = nil;
  X509_dup : function(x509: PX509): PX509; cdecl = nil;
  X509_ATTRIBUTE_dup : function(xa: PX509_ATTRIBUTE): PX509_ATTRIBUTE; cdecl = nil;
  X509_EXTENSION_dup : function(ex: PX509_EXTENSION): PX509_EXTENSION; cdecl = nil;
  X509_CRL_dup : function(crl: PX509_CRL): PX509_CRL; cdecl = nil;
  X509_REVOKED_dup : function(rev: PX509_REVOKED): PX509_REVOKED; cdecl = nil;
  X509_REQ_dup : function(req: PX509_REQ): PX509_REQ; cdecl = nil;
  X509_ALGOR_dup : function(xn: PX509_ALGOR): PX509_ALGOR; cdecl = nil;
  X509_ALGOR_set0 : function(alg: PX509_ALGOR; aobj: PASN1_OBJECT; ptype: Integer; pval: Pointer): Integer; cdecl = nil;
  X509_ALGOR_get0 : procedure(paobj: PPASN1_OBJECT; pptype: PInteger; ppval: PPointer; algor: PX509_ALGOR); cdecl = nil;
  X509_ALGOR_set_md : procedure(alg: PX509_ALGOR; md: PEVP_MD); cdecl = nil;
  X509_ALGOR_cmp : function(a: PX509_ALGOR; b: PX509_ALGOR): Integer; cdecl = nil;
  X509_NAME_dup : function(xn: PX509_NAME): PX509_NAME; cdecl = nil;
  X509_NAME_ENTRY_dup : function(ne: PX509_NAME_ENTRY): PX509_NAME_ENTRY; cdecl = nil;
  X509_cmp_time : function(s: PASN1_TIME; t: PLongint): Integer; cdecl = nil;
  X509_cmp_current_time : function(s: PASN1_TIME): Integer; cdecl = nil;
  X509_time_adj : function(s: PASN1_TIME; adj: Integer; t: PLongint): PASN1_TIME; cdecl = nil;
  X509_time_adj_ex : function(s: PASN1_TIME; offset_day: Integer; offset_sec: Integer; t: PLongint): PASN1_TIME; cdecl = nil;
  X509_gmtime_adj : function(s: PASN1_TIME; adj: Integer): PASN1_TIME; cdecl = nil;
  X509_get_default_cert_area : function(): PUTF8Char; cdecl = nil;
  X509_get_default_cert_dir : function(): PUTF8Char; cdecl = nil;
  X509_get_default_cert_file : function(): PUTF8Char; cdecl = nil;
  X509_get_default_cert_dir_env : function(): PUTF8Char; cdecl = nil;
  X509_get_default_cert_file_env : function(): PUTF8Char; cdecl = nil;
  X509_get_default_private_dir : function(): PUTF8Char; cdecl = nil;
  X509_to_X509_REQ : function(x: PX509; pkey: PEVP_PKEY; md: PEVP_MD): PX509_REQ; cdecl = nil;
  X509_REQ_to_X509 : function(r: PX509_REQ; days: Integer; pkey: PEVP_PKEY): PX509; cdecl = nil;
  X509_ALGOR_new : function(): PX509_ALGOR; cdecl = nil;
  X509_ALGOR_free : procedure(a: PX509_ALGOR); cdecl = nil;
  d2i_X509_ALGOR : function(a: PPX509_ALGOR; vin: PPByte; len: Integer): PX509_ALGOR; cdecl = nil;
  i2d_X509_ALGOR : function(a: PX509_ALGOR; vout: PPByte): Integer; cdecl = nil;
  X509_ALGOR_it : function(): PASN1_ITEM; cdecl = nil;
  d2i_X509_ALGORS : function(a: PPX509_ALGORS; vin: PPByte; len: Integer): PX509_ALGORS; cdecl = nil;
  i2d_X509_ALGORS : function(a: PX509_ALGORS; vout: PPByte): Integer; cdecl = nil;
  X509_ALGORS_it : function(): PASN1_ITEM; cdecl = nil;
  X509_VAL_new : function(): PX509_VAL; cdecl = nil;
  X509_VAL_free : procedure(a: PX509_VAL); cdecl = nil;
  d2i_X509_VAL : function(a: PPX509_VAL; vin: PPByte; len: Integer): PX509_VAL; cdecl = nil;
  i2d_X509_VAL : function(a: PX509_VAL; vout: PPByte): Integer; cdecl = nil;
  X509_VAL_it : function(): PASN1_ITEM; cdecl = nil;
  X509_PUBKEY_new : function(): PX509_PUBKEY; cdecl = nil;
  X509_PUBKEY_free : procedure(a: PX509_PUBKEY); cdecl = nil;
  d2i_X509_PUBKEY : function(a: PPX509_PUBKEY; vin: PPByte; len: Integer): PX509_PUBKEY; cdecl = nil;
  i2d_X509_PUBKEY : function(a: PX509_PUBKEY; vout: PPByte): Integer; cdecl = nil;
  X509_PUBKEY_it : function(): PASN1_ITEM; cdecl = nil;
  X509_PUBKEY_set : function(x: PPX509_PUBKEY; pkey: PEVP_PKEY): Integer; cdecl = nil;
  X509_PUBKEY_get0 : function(key: PX509_PUBKEY): PEVP_PKEY; cdecl = nil;
  X509_PUBKEY_get : function(key: PX509_PUBKEY): PEVP_PKEY; cdecl = nil;
  X509_get_pubkey_parameters : function(pkey: PEVP_PKEY; chain: Pstack_st_X509): Integer; cdecl = nil;
  X509_get_pathlen : function(x: PX509): Integer; cdecl = nil;
  i2d_PUBKEY : function(a: PEVP_PKEY; pp: PPByte): Integer; cdecl = nil;
  d2i_PUBKEY : function(a: PPEVP_PKEY; pp: PPByte; length: Integer): PEVP_PKEY; cdecl = nil;
  i2d_RSA_PUBKEY : function(a: PRSA; pp: PPByte): Integer; cdecl = nil;
  d2i_RSA_PUBKEY : function(a: PPRSA; pp: PPByte; length: Integer): PRSA; cdecl = nil;
  i2d_DSA_PUBKEY : function(a: PDSA; pp: PPByte): Integer; cdecl = nil;
  d2i_DSA_PUBKEY : function(a: PPDSA; pp: PPByte; length: Integer): PDSA; cdecl = nil;
  i2d_EC_PUBKEY : function(a: PEC_KEY; pp: PPByte): Integer; cdecl = nil;
  d2i_EC_PUBKEY : function(a: PPEC_KEY; pp: PPByte; length: Integer): PEC_KEY; cdecl = nil;
  X509_SIG_new : function(): PX509_SIG; cdecl = nil;
  X509_SIG_free : procedure(a: PX509_SIG); cdecl = nil;
  d2i_X509_SIG : function(a: PPX509_SIG; vin: PPByte; len: Integer): PX509_SIG; cdecl = nil;
  i2d_X509_SIG : function(a: PX509_SIG; vout: PPByte): Integer; cdecl = nil;
  X509_SIG_it : function(): PASN1_ITEM; cdecl = nil;
  X509_SIG_get0 : procedure(sig: PX509_SIG; palg: PPX509_ALGOR; pdigest: PPASN1_OCTET_STRING); cdecl = nil;
  X509_SIG_getm : procedure(sig: PX509_SIG; palg: PPX509_ALGOR; pdigest: PPASN1_OCTET_STRING); cdecl = nil;
  X509_REQ_INFO_new : function(): PX509_REQ_INFO; cdecl = nil;
  X509_REQ_INFO_free : procedure(a: PX509_REQ_INFO); cdecl = nil;
  d2i_X509_REQ_INFO : function(a: PPX509_REQ_INFO; vin: PPByte; len: Integer): PX509_REQ_INFO; cdecl = nil;
  i2d_X509_REQ_INFO : function(a: PX509_REQ_INFO; vout: PPByte): Integer; cdecl = nil;
  X509_REQ_INFO_it : function(): PASN1_ITEM; cdecl = nil;
  X509_REQ_new : function(): PX509_REQ; cdecl = nil;
  X509_REQ_free : procedure(a: PX509_REQ); cdecl = nil;
  d2i_X509_REQ : function(a: PPX509_REQ; vin: PPByte; len: Integer): PX509_REQ; cdecl = nil;
  i2d_X509_REQ : function(a: PX509_REQ; vout: PPByte): Integer; cdecl = nil;
  X509_REQ_it : function(): PASN1_ITEM; cdecl = nil;
  X509_ATTRIBUTE_new : function(): PX509_ATTRIBUTE; cdecl = nil;
  X509_ATTRIBUTE_free : procedure(a: PX509_ATTRIBUTE); cdecl = nil;
  d2i_X509_ATTRIBUTE : function(a: PPX509_ATTRIBUTE; vin: PPByte; len: Integer): PX509_ATTRIBUTE; cdecl = nil;
  i2d_X509_ATTRIBUTE : function(a: PX509_ATTRIBUTE; vout: PPByte): Integer; cdecl = nil;
  X509_ATTRIBUTE_it : function(): PASN1_ITEM; cdecl = nil;
  X509_ATTRIBUTE_create : function(nid: Integer; atrtype: Integer; value: Pointer): PX509_ATTRIBUTE; cdecl = nil;
  X509_EXTENSION_new : function(): PX509_EXTENSION; cdecl = nil;
  X509_EXTENSION_free : procedure(a: PX509_EXTENSION); cdecl = nil;
  d2i_X509_EXTENSION : function(a: PPX509_EXTENSION; vin: PPByte; len: Integer): PX509_EXTENSION; cdecl = nil;
  i2d_X509_EXTENSION : function(a: PX509_EXTENSION; vout: PPByte): Integer; cdecl = nil;
  X509_EXTENSION_it : function(): PASN1_ITEM; cdecl = nil;
  d2i_X509_EXTENSIONS : function(a: PPX509_EXTENSIONS; vin: PPByte; len: Integer): PX509_EXTENSIONS; cdecl = nil;
  i2d_X509_EXTENSIONS : function(a: PX509_EXTENSIONS; vout: PPByte): Integer; cdecl = nil;
  X509_EXTENSIONS_it : function(): PASN1_ITEM; cdecl = nil;
  X509_NAME_ENTRY_new : function(): PX509_NAME_ENTRY; cdecl = nil;
  X509_NAME_ENTRY_free : procedure(a: PX509_NAME_ENTRY); cdecl = nil;
  d2i_X509_NAME_ENTRY : function(a: PPX509_NAME_ENTRY; vin: PPByte; len: Integer): PX509_NAME_ENTRY; cdecl = nil;
  i2d_X509_NAME_ENTRY : function(a: PX509_NAME_ENTRY; vout: PPByte): Integer; cdecl = nil;
  X509_NAME_ENTRY_it : function(): PASN1_ITEM; cdecl = nil;
  X509_NAME_new : function(): PX509_NAME; cdecl = nil;
  X509_NAME_free : procedure(a: PX509_NAME); cdecl = nil;
  d2i_X509_NAME : function(a: PPX509_NAME; vin: PPByte; len: Integer): PX509_NAME; cdecl = nil;
  i2d_X509_NAME : function(a: PX509_NAME; vout: PPByte): Integer; cdecl = nil;
  X509_NAME_it : function(): PASN1_ITEM; cdecl = nil;
  X509_NAME_set : function(xn: PPX509_NAME; name: PX509_NAME): Integer; cdecl = nil;
  X509_CINF_new : function(): PX509_CINF; cdecl = nil;
  X509_CINF_free : procedure(a: PX509_CINF); cdecl = nil;
  d2i_X509_CINF : function(a: PPX509_CINF; vin: PPByte; len: Integer): PX509_CINF; cdecl = nil;
  i2d_X509_CINF : function(a: PX509_CINF; vout: PPByte): Integer; cdecl = nil;
  X509_CINF_it : function(): PASN1_ITEM; cdecl = nil;
  X509_new : function(): PX509; cdecl = nil;
  X509_free : procedure(a: PX509); cdecl = nil;
  d2i_X509 : function(a: PPX509; vin: PPByte; len: Integer): PX509; cdecl = nil;
  i2d_X509 : function(a: PX509; vout: PPByte): Integer; cdecl = nil;
  X509_it : function(): PASN1_ITEM; cdecl = nil;
  X509_CERT_AUX_new : function(): PX509_CERT_AUX; cdecl = nil;
  X509_CERT_AUX_free : procedure(a: PX509_CERT_AUX); cdecl = nil;
  d2i_X509_CERT_AUX : function(a: PPX509_CERT_AUX; vin: PPByte; len: Integer): PX509_CERT_AUX; cdecl = nil;
  i2d_X509_CERT_AUX : function(a: PX509_CERT_AUX; vout: PPByte): Integer; cdecl = nil;
  X509_CERT_AUX_it : function(): PASN1_ITEM; cdecl = nil;
  X509_set_ex_data : function(r: PX509; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  X509_get_ex_data : function(r: PX509; idx: Integer): Pointer; cdecl = nil;
  i2d_X509_AUX : function(a: PX509; pp: PPByte): Integer; cdecl = nil;
  d2i_X509_AUX : function(a: PPX509; pp: PPByte; length: Integer): PX509; cdecl = nil;
  i2d_re_X509_tbs : function(x: PX509; pp: PPByte): Integer; cdecl = nil;
  X509_SIG_INFO_get : function(siginf: PX509_SIG_INFO; mdnid: PInteger; pknid: PInteger; secbits: PInteger; flags: PUInt32): Integer; cdecl = nil;
  X509_SIG_INFO_set : procedure(siginf: PX509_SIG_INFO; mdnid: Integer; pknid: Integer; secbits: Integer; flags: UInt32); cdecl = nil;
  X509_get_signature_info : function(x: PX509; mdnid: PInteger; pknid: PInteger; secbits: PInteger; flags: PUInt32): Integer; cdecl = nil;
  X509_get0_signature : procedure(psig: PPASN1_BIT_STRING; palg: PPX509_ALGOR; x: PX509); cdecl = nil;
  X509_get_signature_nid : function(x: PX509): Integer; cdecl = nil;
  X509_trusted : function(x: PX509): Integer; cdecl = nil;
  X509_alias_set1 : function(x: PX509; name: PByte; len: Integer): Integer; cdecl = nil;
  X509_keyid_set1 : function(x: PX509; id: PByte; len: Integer): Integer; cdecl = nil;
  X509_alias_get0 : function(x: PX509; len: PInteger): PByte; cdecl = nil;
  X509_keyid_get0 : function(x: PX509; len: PInteger): PByte; cdecl = nil;
//  X509_TRUST_set_default : function(p1: Integer; p2: PX509; p3: Integer; trust: X509_TRUST_set_default_trust): Integer; cdecl = nil;
  X509_TRUST_set : function(t: PInteger; trust: Integer): Integer; cdecl = nil;
  X509_add1_trust_object : function(x: PX509; obj: PASN1_OBJECT): Integer; cdecl = nil;
  X509_add1_reject_object : function(x: PX509; obj: PASN1_OBJECT): Integer; cdecl = nil;
  X509_trust_clear : procedure(x: PX509); cdecl = nil;
  X509_reject_clear : procedure(x: PX509); cdecl = nil;
  X509_get0_trust_objects : function(x: PX509): Pstack_st_ASN1_OBJECT; cdecl = nil;
  X509_get0_reject_objects : function(x: PX509): Pstack_st_ASN1_OBJECT; cdecl = nil;
  X509_REVOKED_new : function(): PX509_REVOKED; cdecl = nil;
  X509_REVOKED_free : procedure(a: PX509_REVOKED); cdecl = nil;
  d2i_X509_REVOKED : function(a: PPX509_REVOKED; vin: PPByte; len: Integer): PX509_REVOKED; cdecl = nil;
  i2d_X509_REVOKED : function(a: PX509_REVOKED; vout: PPByte): Integer; cdecl = nil;
  X509_REVOKED_it : function(): PASN1_ITEM; cdecl = nil;
  X509_CRL_INFO_new : function(): PX509_CRL_INFO; cdecl = nil;
  X509_CRL_INFO_free : procedure(a: PX509_CRL_INFO); cdecl = nil;
  d2i_X509_CRL_INFO : function(a: PPX509_CRL_INFO; vin: PPByte; len: Integer): PX509_CRL_INFO; cdecl = nil;
  i2d_X509_CRL_INFO : function(a: PX509_CRL_INFO; vout: PPByte): Integer; cdecl = nil;
  X509_CRL_INFO_it : function(): PASN1_ITEM; cdecl = nil;
  X509_CRL_new : function(): PX509_CRL; cdecl = nil;
  X509_CRL_free : procedure(a: PX509_CRL); cdecl = nil;
  d2i_X509_CRL : function(a: PPX509_CRL; vin: PPByte; len: Integer): PX509_CRL; cdecl = nil;
  i2d_X509_CRL : function(a: PX509_CRL; vout: PPByte): Integer; cdecl = nil;
  X509_CRL_it : function(): PASN1_ITEM; cdecl = nil;
  X509_CRL_add0_revoked : function(crl: PX509_CRL; rev: PX509_REVOKED): Integer; cdecl = nil;
  X509_CRL_get0_by_serial : function(crl: PX509_CRL; ret: PPX509_REVOKED; serial: PASN1_INTEGER): Integer; cdecl = nil;
  X509_CRL_get0_by_cert : function(crl: PX509_CRL; ret: PPX509_REVOKED; x: PX509): Integer; cdecl = nil;
  X509_PKEY_new : function(): PX509_PKEY; cdecl = nil;
  X509_PKEY_free : procedure(a: PX509_PKEY); cdecl = nil;
  NETSCAPE_SPKI_new : function(): PNETSCAPE_SPKI; cdecl = nil;
  NETSCAPE_SPKI_free : procedure(a: PNETSCAPE_SPKI); cdecl = nil;
  d2i_NETSCAPE_SPKI : function(a: PPNETSCAPE_SPKI; vin: PPByte; len: Integer): PNETSCAPE_SPKI; cdecl = nil;
  i2d_NETSCAPE_SPKI : function(a: PNETSCAPE_SPKI; vout: PPByte): Integer; cdecl = nil;
  NETSCAPE_SPKI_it : function(): PASN1_ITEM; cdecl = nil;
  NETSCAPE_SPKAC_new : function(): PNETSCAPE_SPKAC; cdecl = nil;
  NETSCAPE_SPKAC_free : procedure(a: PNETSCAPE_SPKAC); cdecl = nil;
  d2i_NETSCAPE_SPKAC : function(a: PPNETSCAPE_SPKAC; vin: PPByte; len: Integer): PNETSCAPE_SPKAC; cdecl = nil;
  i2d_NETSCAPE_SPKAC : function(a: PNETSCAPE_SPKAC; vout: PPByte): Integer; cdecl = nil;
  NETSCAPE_SPKAC_it : function(): PASN1_ITEM; cdecl = nil;
  NETSCAPE_CERT_SEQUENCE_new : function(): PNETSCAPE_CERT_SEQUENCE; cdecl = nil;
  NETSCAPE_CERT_SEQUENCE_free : procedure(a: PNETSCAPE_CERT_SEQUENCE); cdecl = nil;
  d2i_NETSCAPE_CERT_SEQUENCE : function(a: PPNETSCAPE_CERT_SEQUENCE; vin: PPByte; len: Integer): PNETSCAPE_CERT_SEQUENCE; cdecl = nil;
  i2d_NETSCAPE_CERT_SEQUENCE : function(a: PNETSCAPE_CERT_SEQUENCE; vout: PPByte): Integer; cdecl = nil;
  NETSCAPE_CERT_SEQUENCE_it : function(): PASN1_ITEM; cdecl = nil;
  X509_INFO_new : function(): PX509_INFO; cdecl = nil;
  X509_INFO_free : procedure(a: PX509_INFO); cdecl = nil;
  X509_NAME_oneline : function(a: PX509_NAME; buf: PUTF8Char; size: Integer): PUTF8Char; cdecl = nil;
  ASN1_verify : function(i2d: Pi2d_of_void; algor1: PX509_ALGOR; signature: PASN1_BIT_STRING; data: PUTF8Char; pkey: PEVP_PKEY): Integer; cdecl = nil;
  ASN1_digest : function(i2d: Pi2d_of_void; vtype: PEVP_MD; data: PUTF8Char; md: PByte; len: PCardinal): Integer; cdecl = nil;
  ASN1_sign : function(i2d: Pi2d_of_void; algor1: PX509_ALGOR; algor2: PX509_ALGOR; signature: PASN1_BIT_STRING; data: PUTF8Char; pkey: PEVP_PKEY; vtype: PEVP_MD): Integer; cdecl = nil;
  ASN1_item_digest : function(it: PASN1_ITEM; vtype: PEVP_MD; data: Pointer; md: PByte; len: PCardinal): Integer; cdecl = nil;
  ASN1_item_verify : function(it: PASN1_ITEM; algor1: PX509_ALGOR; signature: PASN1_BIT_STRING; data: Pointer; pkey: PEVP_PKEY): Integer; cdecl = nil;
  ASN1_item_sign : function(it: PASN1_ITEM; algor1: PX509_ALGOR; algor2: PX509_ALGOR; signature: PASN1_BIT_STRING; data: Pointer; pkey: PEVP_PKEY; vtype: PEVP_MD): Integer; cdecl = nil;
  ASN1_item_sign_ctx : function(it: PASN1_ITEM; algor1: PX509_ALGOR; algor2: PX509_ALGOR; signature: PASN1_BIT_STRING; asn: Pointer; ctx: PEVP_MD_CTX): Integer; cdecl = nil;
  X509_get_version : function(x: PX509): Integer; cdecl = nil;
  X509_set_version : function(x: PX509; version: Integer): Integer; cdecl = nil;
  X509_set_serialNumber : function(x: PX509; serial: PASN1_INTEGER): Integer; cdecl = nil;
  X509_get_serialNumber : function(x: PX509): PASN1_INTEGER; cdecl = nil;
  X509_get0_serialNumber : function(x: PX509): PASN1_INTEGER; cdecl = nil;
  X509_set_issuer_name : function(x: PX509; name: PX509_NAME): Integer; cdecl = nil;
  X509_get_issuer_name : function(a: PX509): PX509_NAME; cdecl = nil;
  X509_set_subject_name : function(x: PX509; name: PX509_NAME): Integer; cdecl = nil;
  X509_get_subject_name : function(a: PX509): PX509_NAME; cdecl = nil;
  X509_get0_notBefore : function(x: PX509): PASN1_TIME; cdecl = nil;
  X509_getm_notBefore : function(x: PX509): PASN1_TIME; cdecl = nil;
  X509_get_notBefore : function(x: PX509): PASN1_TIME; cdecl = nil;
  X509_set1_notBefore : function(x: PX509; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_set_notBefore : function(x: PX509; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_get0_notAfter : function(x: PX509): PASN1_TIME; cdecl = nil;
  X509_getm_notAfter : function(x: PX509): PASN1_TIME; cdecl = nil;
  X509_get_notAfter : function(x: PX509): PASN1_TIME; cdecl = nil;
  X509_set1_notAfter : function(x: PX509; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_set_notAfter : function(x: PX509; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_set_pubkey : function(x: PX509; pkey: PEVP_PKEY): Integer; cdecl = nil;
  X509_up_ref : function(x: PX509): Integer; cdecl = nil;
  X509_get_signature_type : function(x: PX509): Integer; cdecl = nil;
  X509_get_X509_PUBKEY : function(x: PX509): PX509_PUBKEY; cdecl = nil;
  X509_get0_extensions : function(x: PX509): Pstack_st_X509_EXTENSION; cdecl = nil;
  X509_get0_uids : procedure(x: PX509; piuid: PPASN1_BIT_STRING; psuid: PPASN1_BIT_STRING); cdecl = nil;
  X509_get0_tbs_sigalg : function(x: PX509): PX509_ALGOR; cdecl = nil;
  X509_get0_pubkey : function(x: PX509): PEVP_PKEY; cdecl = nil;
  X509_get_pubkey : function(x: PX509): PEVP_PKEY; cdecl = nil;
  X509_get0_pubkey_bitstr : function(x: PX509): PASN1_BIT_STRING; cdecl = nil;
  X509_certificate_type : function(x: PX509; pubkey: PEVP_PKEY): Integer; cdecl = nil;
  X509_REQ_get_version : function(req: PX509_REQ): Integer; cdecl = nil;
  X509_REQ_set_version : function(x: PX509_REQ; version: Integer): Integer; cdecl = nil;
  X509_REQ_get_subject_name : function(req: PX509_REQ): PX509_NAME; cdecl = nil;
  X509_REQ_set_subject_name : function(req: PX509_REQ; name: PX509_NAME): Integer; cdecl = nil;
  X509_REQ_get0_signature : procedure(req: PX509_REQ; psig: PPASN1_BIT_STRING; palg: PPX509_ALGOR); cdecl = nil;
  X509_REQ_get_signature_nid : function(req: PX509_REQ): Integer; cdecl = nil;
  i2d_re_X509_REQ_tbs : function(req: PX509_REQ; pp: PPByte): Integer; cdecl = nil;
  X509_REQ_set_pubkey : function(x: PX509_REQ; pkey: PEVP_PKEY): Integer; cdecl = nil;
  X509_REQ_get_pubkey : function(req: PX509_REQ): PEVP_PKEY; cdecl = nil;
  X509_REQ_get0_pubkey : function(req: PX509_REQ): PEVP_PKEY; cdecl = nil;
  X509_REQ_get_X509_PUBKEY : function(req: PX509_REQ): PX509_PUBKEY; cdecl = nil;
  X509_REQ_extension_nid : function(nid: Integer): Integer; cdecl = nil;
  X509_REQ_get_extension_nids : function(): PInteger; cdecl = nil;
  X509_REQ_set_extension_nids : procedure(nids: PInteger); cdecl = nil;
  X509_REQ_get_extensions : function(req: PX509_REQ): Pstack_st_X509_EXTENSION; cdecl = nil;
  X509_REQ_add_extensions_nid : function(req: PX509_REQ; exts: Pstack_st_X509_EXTENSION; nid: Integer): Integer; cdecl = nil;
  X509_REQ_add_extensions : function(req: PX509_REQ; exts: Pstack_st_X509_EXTENSION): Integer; cdecl = nil;
  X509_REQ_get_attr_count : function(req: PX509_REQ): Integer; cdecl = nil;
  X509_REQ_get_attr_by_NID : function(req: PX509_REQ; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_REQ_get_attr_by_OBJ : function(req: PX509_REQ; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509_REQ_get_attr : function(req: PX509_REQ; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509_REQ_delete_attr : function(req: PX509_REQ; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509_REQ_add1_attr : function(req: PX509_REQ; attr: PX509_ATTRIBUTE): Integer; cdecl = nil;
  X509_REQ_add1_attr_by_OBJ : function(req: PX509_REQ; obj: PASN1_OBJECT; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  X509_REQ_add1_attr_by_NID : function(req: PX509_REQ; nid: Integer; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  X509_REQ_add1_attr_by_txt : function(req: PX509_REQ; attrname: PUTF8Char; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  X509_CRL_set_version : function(x: PX509_CRL; version: Integer): Integer; cdecl = nil;
  X509_CRL_set_issuer_name : function(x: PX509_CRL; name: PX509_NAME): Integer; cdecl = nil;
  X509_CRL_set1_lastUpdate : function(x: PX509_CRL; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_CRL_set_lastUpdate : function(x: PX509_CRL; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_CRL_set1_nextUpdate : function(x: PX509_CRL; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_CRL_set_nextUpdate : function(x: PX509_CRL; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_CRL_sort : function(crl: PX509_CRL): Integer; cdecl = nil;
  X509_CRL_up_ref : function(crl: PX509_CRL): Integer; cdecl = nil;
  X509_CRL_get_version : function(crl: PX509_CRL): Integer; cdecl = nil;
  X509_CRL_get0_lastUpdate : function(crl: PX509_CRL): PASN1_TIME; cdecl = nil;
  X509_CRL_get0_nextUpdate : function(crl: PX509_CRL): PASN1_TIME; cdecl = nil;
  X509_CRL_get_lastUpdate : function(crl: PX509_CRL): PASN1_TIME; cdecl = nil;
  X509_CRL_get_nextUpdate : function(crl: PX509_CRL): PASN1_TIME; cdecl = nil;
  X509_CRL_get_issuer : function(crl: PX509_CRL): PX509_NAME; cdecl = nil;
  X509_CRL_get0_extensions : function(crl: PX509_CRL): Pstack_st_X509_EXTENSION; cdecl = nil;
  X509_CRL_get_REVOKED : function(crl: PX509_CRL): Pstack_st_X509_REVOKED; cdecl = nil;
  X509_CRL_get0_signature : procedure(crl: PX509_CRL; psig: PPASN1_BIT_STRING; palg: PPX509_ALGOR); cdecl = nil;
  X509_CRL_get_signature_nid : function(crl: PX509_CRL): Integer; cdecl = nil;
  i2d_re_X509_CRL_tbs : function(req: PX509_CRL; pp: PPByte): Integer; cdecl = nil;
  X509_REVOKED_get0_serialNumber : function(x: PX509_REVOKED): PASN1_INTEGER; cdecl = nil;
  X509_REVOKED_set_serialNumber : function(x: PX509_REVOKED; serial: PASN1_INTEGER): Integer; cdecl = nil;
  X509_REVOKED_get0_revocationDate : function(x: PX509_REVOKED): PASN1_TIME; cdecl = nil;
  X509_REVOKED_set_revocationDate : function(r: PX509_REVOKED; tm: PASN1_TIME): Integer; cdecl = nil;
  X509_REVOKED_get0_extensions : function(r: PX509_REVOKED): Pstack_st_X509_EXTENSION; cdecl = nil;
  X509_CRL_diff : function(base: PX509_CRL; newer: PX509_CRL; skey: PEVP_PKEY; md: PEVP_MD; flags: Cardinal): PX509_CRL; cdecl = nil;
  X509_REQ_check_private_key : function(x509: PX509_REQ; pkey: PEVP_PKEY): Integer; cdecl = nil;
  X509_check_private_key : function(x509: PX509; pkey: PEVP_PKEY): Integer; cdecl = nil;
  X509_chain_check_suiteb : function(perror_depth: PInteger; x: PX509; chain: Pstack_st_X509; flags: Cardinal): Integer; cdecl = nil;
  X509_CRL_check_suiteb : function(crl: PX509_CRL; pk: PEVP_PKEY; flags: Cardinal): Integer; cdecl = nil;
  X509_chain_up_ref : function(chain: Pstack_st_X509): Pstack_st_X509; cdecl = nil;
  X509_issuer_and_serial_cmp : function(a: PX509; b: PX509): Integer; cdecl = nil;
  X509_issuer_and_serial_hash : function(a: PX509): Cardinal; cdecl = nil;
  X509_issuer_name_cmp : function(a: PX509; b: PX509): Integer; cdecl = nil;
  X509_issuer_name_hash : function(a: PX509): Cardinal; cdecl = nil;
  X509_subject_name_cmp : function(a: PX509; b: PX509): Integer; cdecl = nil;
  X509_subject_name_hash : function(x: PX509): Cardinal; cdecl = nil;
  X509_issuer_name_hash_old : function(a: PX509): Cardinal; cdecl = nil;
  X509_subject_name_hash_old : function(x: PX509): Cardinal; cdecl = nil;
  X509_cmp : function(a: PX509; b: PX509): Integer; cdecl = nil;
  X509_NAME_cmp : function(a: PX509_NAME; b: PX509_NAME): Integer; cdecl = nil;
  X509_NAME_hash : function(x: PX509_NAME): Cardinal; cdecl = nil;
  X509_NAME_hash_old : function(x: PX509_NAME): Cardinal; cdecl = nil;
  X509_CRL_cmp : function(a: PX509_CRL; b: PX509_CRL): Integer; cdecl = nil;
  X509_CRL_match : function(a: PX509_CRL; b: PX509_CRL): Integer; cdecl = nil;
  X509_aux_print : function(vout: PBIO; x: PX509; indent: Integer): Integer; cdecl = nil;
  X509_print_ex_fp : function(bp: PPointer; x: PX509; nmflag: Cardinal; cflag: Cardinal): Integer; cdecl = nil;
  X509_print_fp : function(bp: PPointer; x: PX509): Integer; cdecl = nil;
  X509_CRL_print_fp : function(bp: PPointer; x: PX509_CRL): Integer; cdecl = nil;
  X509_REQ_print_fp : function(bp: PPointer; req: PX509_REQ): Integer; cdecl = nil;
  X509_NAME_print_ex_fp : function(fp: PPointer; nm: PX509_NAME; indent: Integer; flags: Cardinal): Integer; cdecl = nil;
  X509_NAME_print : function(bp: PBIO; name: PX509_NAME; obase: Integer): Integer; cdecl = nil;
  X509_NAME_print_ex : function(vout: PBIO; nm: PX509_NAME; indent: Integer; flags: Cardinal): Integer; cdecl = nil;
  X509_print_ex : function(bp: PBIO; x: PX509; nmflag: Cardinal; cflag: Cardinal): Integer; cdecl = nil;
  X509_print : function(bp: PBIO; x: PX509): Integer; cdecl = nil;
  X509_ocspid_print : function(bp: PBIO; x: PX509): Integer; cdecl = nil;
  X509_CRL_print_ex : function(vout: PBIO; x: PX509_CRL; nmflag: Cardinal): Integer; cdecl = nil;
  X509_CRL_print : function(bp: PBIO; x: PX509_CRL): Integer; cdecl = nil;
  X509_REQ_print_ex : function(bp: PBIO; x: PX509_REQ; nmflag: Cardinal; cflag: Cardinal): Integer; cdecl = nil;
  X509_REQ_print : function(bp: PBIO; req: PX509_REQ): Integer; cdecl = nil;
  X509_NAME_entry_count : function(name: PX509_NAME): Integer; cdecl = nil;
  X509_NAME_get_text_by_NID : function(name: PX509_NAME; nid: Integer; buf: PUTF8Char; len: Integer): Integer; cdecl = nil;
  X509_NAME_get_text_by_OBJ : function(name: PX509_NAME; obj: PASN1_OBJECT; buf: PUTF8Char; len: Integer): Integer; cdecl = nil;
  X509_NAME_get_index_by_NID : function(name: PX509_NAME; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_NAME_get_index_by_OBJ : function(name: PX509_NAME; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509_NAME_get_entry : function(name: PX509_NAME; loc: Integer): PX509_NAME_ENTRY; cdecl = nil;
  X509_NAME_delete_entry : function(name: PX509_NAME; loc: Integer): PX509_NAME_ENTRY; cdecl = nil;
  X509_NAME_add_entry : function(name: PX509_NAME; ne: PX509_NAME_ENTRY; loc: Integer; vset: Integer): Integer; cdecl = nil;
  X509_NAME_add_entry_by_OBJ : function(name: PX509_NAME; obj: PASN1_OBJECT; vtype: Integer; bytes: PAnsiChar; len: Integer; loc: Integer; vset: Integer): Integer; cdecl = nil;
  X509_NAME_add_entry_by_NID : function(name: PX509_NAME; nid: Integer; vtype: Integer; bytes: PAnsiChar; len: Integer; loc: Integer; vset: Integer): Integer; cdecl = nil;
  X509_NAME_ENTRY_create_by_txt : function(ne: PPX509_NAME_ENTRY; field: PUTF8Char; vtype: Integer; bytes: PAnsiChar; len: Integer): PX509_NAME_ENTRY; cdecl = nil;
  X509_NAME_ENTRY_create_by_NID : function(ne: PPX509_NAME_ENTRY; nid: Integer; vtype: Integer; bytes: PAnsiChar; len: Integer): PX509_NAME_ENTRY; cdecl = nil;
  X509_NAME_add_entry_by_txt : function(name: PX509_NAME; field: PUTF8Char; vtype: Integer; bytes: PAnsiChar; len: Integer; loc: Integer; vset: Integer): Integer; cdecl = nil;
  X509_NAME_ENTRY_create_by_OBJ : function(ne: PPX509_NAME_ENTRY; obj: PASN1_OBJECT; vtype: Integer; bytes: PAnsiChar; len: Integer): PX509_NAME_ENTRY; cdecl = nil;
  X509_NAME_ENTRY_set_object : function(ne: PX509_NAME_ENTRY; obj: PASN1_OBJECT): Integer; cdecl = nil;
  X509_NAME_ENTRY_set_data : function(ne: PX509_NAME_ENTRY; vtype: Integer; bytes: PAnsiChar; len: Integer): Integer; cdecl = nil;
  X509_NAME_ENTRY_get_object : function(ne: PX509_NAME_ENTRY): PASN1_OBJECT; cdecl = nil;
  X509_NAME_ENTRY_get_data : function(ne: PX509_NAME_ENTRY): PASN1_STRING; cdecl = nil;
  X509_NAME_ENTRY_set : function(ne: PX509_NAME_ENTRY): Integer; cdecl = nil;
  X509_NAME_get0_der : function(nm: PX509_NAME; pder: PPByte; pderlen: PNativeUInt): Integer; cdecl = nil;
  X509v3_get_ext_count : function(x: Pstack_st_X509_EXTENSION): Integer; cdecl = nil;
  X509v3_get_ext_by_NID : function(x: Pstack_st_X509_EXTENSION; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509v3_get_ext_by_OBJ : function(x: Pstack_st_X509_EXTENSION; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509v3_get_ext_by_critical : function(x: Pstack_st_X509_EXTENSION; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509v3_get_ext : function(x: Pstack_st_X509_EXTENSION; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509v3_delete_ext : function(x: Pstack_st_X509_EXTENSION; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509v3_add_ext : function(x: PPstack_st_X509_EXTENSION; ex: PX509_EXTENSION; loc: Integer): Pstack_st_X509_EXTENSION; cdecl = nil;
  X509_get_ext_count : function(x: PX509): Integer; cdecl = nil;
  X509_get_ext_by_NID : function(x: PX509; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_get_ext_by_OBJ : function(x: PX509; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509_get_ext_by_critical : function(x: PX509; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_get_ext : function(x: PX509; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509_delete_ext : function(x: PX509; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509_add_ext : function(x: PX509; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  X509_get_ext_d2i : function(x: PX509; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  X509_add1_ext_i2d : function(x: PX509; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  X509_CRL_get_ext_count : function(x: PX509_CRL): Integer; cdecl = nil;
  X509_CRL_get_ext_by_NID : function(x: PX509_CRL; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_CRL_get_ext_by_OBJ : function(x: PX509_CRL; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509_CRL_get_ext_by_critical : function(x: PX509_CRL; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_CRL_get_ext : function(x: PX509_CRL; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509_CRL_delete_ext : function(x: PX509_CRL; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509_CRL_add_ext : function(x: PX509_CRL; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  X509_CRL_get_ext_d2i : function(x: PX509_CRL; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  X509_CRL_add1_ext_i2d : function(x: PX509_CRL; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  X509_REVOKED_get_ext_count : function(x: PX509_REVOKED): Integer; cdecl = nil;
  X509_REVOKED_get_ext_by_NID : function(x: PX509_REVOKED; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_REVOKED_get_ext_by_OBJ : function(x: PX509_REVOKED; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509_REVOKED_get_ext_by_critical : function(x: PX509_REVOKED; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509_REVOKED_get_ext : function(x: PX509_REVOKED; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509_REVOKED_delete_ext : function(x: PX509_REVOKED; loc: Integer): PX509_EXTENSION; cdecl = nil;
  X509_REVOKED_add_ext : function(x: PX509_REVOKED; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  X509_REVOKED_get_ext_d2i : function(x: PX509_REVOKED; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  X509_REVOKED_add1_ext_i2d : function(x: PX509_REVOKED; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  X509_EXTENSION_create_by_NID : function(ex: PPX509_EXTENSION; nid: Integer; crit: Integer; data: PASN1_OCTET_STRING): PX509_EXTENSION; cdecl = nil;
  X509_EXTENSION_create_by_OBJ : function(ex: PPX509_EXTENSION; obj: PASN1_OBJECT; crit: Integer; data: PASN1_OCTET_STRING): PX509_EXTENSION; cdecl = nil;
  X509_EXTENSION_set_object : function(ex: PX509_EXTENSION; obj: PASN1_OBJECT): Integer; cdecl = nil;
  X509_EXTENSION_set_critical : function(ex: PX509_EXTENSION; crit: Integer): Integer; cdecl = nil;
  X509_EXTENSION_set_data : function(ex: PX509_EXTENSION; data: PASN1_OCTET_STRING): Integer; cdecl = nil;
  X509_EXTENSION_get_object : function(ex: PX509_EXTENSION): PASN1_OBJECT; cdecl = nil;
  X509_EXTENSION_get_data : function(ne: PX509_EXTENSION): PASN1_OCTET_STRING; cdecl = nil;
  X509_EXTENSION_get_critical : function(ex: PX509_EXTENSION): Integer; cdecl = nil;
  X509at_get_attr_count : function(x: Pstack_st_X509_ATTRIBUTE): Integer; cdecl = nil;
  X509at_get_attr_by_NID : function(x: Pstack_st_X509_ATTRIBUTE; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  X509at_get_attr_by_OBJ : function(sk: Pstack_st_X509_ATTRIBUTE; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  X509at_get_attr : function(x: Pstack_st_X509_ATTRIBUTE; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509at_delete_attr : function(x: Pstack_st_X509_ATTRIBUTE; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509at_add1_attr : function(x: PPstack_st_X509_ATTRIBUTE; attr: PX509_ATTRIBUTE): Pstack_st_X509_ATTRIBUTE; cdecl = nil;
  X509at_add1_attr_by_OBJ : function(x: PPstack_st_X509_ATTRIBUTE; obj: PASN1_OBJECT; vtype: Integer; bytes: PByte; len: Integer): Pstack_st_X509_ATTRIBUTE; cdecl = nil;
  X509at_add1_attr_by_NID : function(x: PPstack_st_X509_ATTRIBUTE; nid: Integer; vtype: Integer; bytes: PByte; len: Integer): Pstack_st_X509_ATTRIBUTE; cdecl = nil;
  X509at_add1_attr_by_txt : function(x: PPstack_st_X509_ATTRIBUTE; attrname: PUTF8Char; vtype: Integer; bytes: PByte; len: Integer): Pstack_st_X509_ATTRIBUTE; cdecl = nil;
  X509at_get0_data_by_OBJ : function(x: Pstack_st_X509_ATTRIBUTE; obj: PASN1_OBJECT; lastpos: Integer; vtype: Integer): Pointer; cdecl = nil;
  X509_ATTRIBUTE_create_by_NID : function(attr: PPX509_ATTRIBUTE; nid: Integer; atrtype: Integer; data: Pointer; len: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509_ATTRIBUTE_create_by_OBJ : function(attr: PPX509_ATTRIBUTE; obj: PASN1_OBJECT; atrtype: Integer; data: Pointer; len: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509_ATTRIBUTE_create_by_txt : function(attr: PPX509_ATTRIBUTE; atrname: PUTF8Char; vtype: Integer; bytes: PByte; len: Integer): PX509_ATTRIBUTE; cdecl = nil;
  X509_ATTRIBUTE_set1_object : function(attr: PX509_ATTRIBUTE; obj: PASN1_OBJECT): Integer; cdecl = nil;
  X509_ATTRIBUTE_set1_data : function(attr: PX509_ATTRIBUTE; attrtype: Integer; data: Pointer; len: Integer): Integer; cdecl = nil;
  X509_ATTRIBUTE_get0_data : function(attr: PX509_ATTRIBUTE; idx: Integer; atrtype: Integer; data: Pointer): Pointer; cdecl = nil;
  X509_ATTRIBUTE_count : function(attr: PX509_ATTRIBUTE): Integer; cdecl = nil;
  X509_ATTRIBUTE_get0_object : function(attr: PX509_ATTRIBUTE): PASN1_OBJECT; cdecl = nil;
  X509_ATTRIBUTE_get0_type : function(attr: PX509_ATTRIBUTE; idx: Integer): PASN1_TYPE; cdecl = nil;
  EVP_PKEY_get_attr_count : function(key: PEVP_PKEY): Integer; cdecl = nil;
  EVP_PKEY_get_attr_by_NID : function(key: PEVP_PKEY; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  EVP_PKEY_get_attr_by_OBJ : function(key: PEVP_PKEY; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  EVP_PKEY_get_attr : function(key: PEVP_PKEY; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  EVP_PKEY_delete_attr : function(key: PEVP_PKEY; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  EVP_PKEY_add1_attr : function(key: PEVP_PKEY; attr: PX509_ATTRIBUTE): Integer; cdecl = nil;
  EVP_PKEY_add1_attr_by_OBJ : function(key: PEVP_PKEY; obj: PASN1_OBJECT; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  EVP_PKEY_add1_attr_by_NID : function(key: PEVP_PKEY; nid: Integer; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  EVP_PKEY_add1_attr_by_txt : function(key: PEVP_PKEY; attrname: PUTF8Char; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  X509_verify_cert : function(ctx: PX509_STORE_CTX): Integer; cdecl = nil;
  X509_find_by_issuer_and_serial : function(sk: Pstack_st_X509; name: PX509_NAME; serial: PASN1_INTEGER): PX509; cdecl = nil;
  X509_find_by_subject : function(sk: Pstack_st_X509; name: PX509_NAME): PX509; cdecl = nil;
  PBEPARAM_new : function(): PPBEPARAM; cdecl = nil;
  PBEPARAM_free : procedure(a: PPBEPARAM); cdecl = nil;
  d2i_PBEPARAM : function(a: PPPBEPARAM; vin: PPByte; len: Integer): PPBEPARAM; cdecl = nil;
  i2d_PBEPARAM : function(a: PPBEPARAM; vout: PPByte): Integer; cdecl = nil;
  PBEPARAM_it : function(): PASN1_ITEM; cdecl = nil;
  PBE2PARAM_new : function(): PPBE2PARAM; cdecl = nil;
  PBE2PARAM_free : procedure(a: PPBE2PARAM); cdecl = nil;
  d2i_PBE2PARAM : function(a: PPPBE2PARAM; vin: PPByte; len: Integer): PPBE2PARAM; cdecl = nil;
  i2d_PBE2PARAM : function(a: PPBE2PARAM; vout: PPByte): Integer; cdecl = nil;
  PBE2PARAM_it : function(): PASN1_ITEM; cdecl = nil;
  PBKDF2PARAM_new : function(): PPBKDF2PARAM; cdecl = nil;
  PBKDF2PARAM_free : procedure(a: PPBKDF2PARAM); cdecl = nil;
  d2i_PBKDF2PARAM : function(a: PPPBKDF2PARAM; vin: PPByte; len: Integer): PPBKDF2PARAM; cdecl = nil;
  i2d_PBKDF2PARAM : function(a: PPBKDF2PARAM; vout: PPByte): Integer; cdecl = nil;
  PBKDF2PARAM_it : function(): PASN1_ITEM; cdecl = nil;
  SCRYPT_PARAMS_new : function(): PSCRYPT_PARAMS; cdecl = nil;
  SCRYPT_PARAMS_free : procedure(a: PSCRYPT_PARAMS); cdecl = nil;
  d2i_SCRYPT_PARAMS : function(a: PPSCRYPT_PARAMS; vin: PPByte; len: Integer): PSCRYPT_PARAMS; cdecl = nil;
  i2d_SCRYPT_PARAMS : function(a: PSCRYPT_PARAMS; vout: PPByte): Integer; cdecl = nil;
  SCRYPT_PARAMS_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS5_pbe_set0_algor : function(algor: PX509_ALGOR; alg: Integer; iter: Integer; salt: PByte; saltlen: Integer): Integer; cdecl = nil;
  PKCS5_pbe_set : function(alg: Integer; iter: Integer; salt: PByte; saltlen: Integer): PX509_ALGOR; cdecl = nil;
  PKCS5_pbe2_set : function(cipher: PEVP_CIPHER; iter: Integer; salt: PByte; saltlen: Integer): PX509_ALGOR; cdecl = nil;
  PKCS5_pbe2_set_iv : function(cipher: PEVP_CIPHER; iter: Integer; salt: PByte; saltlen: Integer; aiv: PByte; prf_nid: Integer): PX509_ALGOR; cdecl = nil;
  PKCS5_pbe2_set_scrypt : function(cipher: PEVP_CIPHER; salt: PByte; saltlen: Integer; aiv: PByte; N: UInt64; r: UInt64; p: UInt64): PX509_ALGOR; cdecl = nil;
  PKCS5_pbkdf2_set : function(iter: Integer; salt: PByte; saltlen: Integer; prf_nid: Integer; keylen: Integer): PX509_ALGOR; cdecl = nil;
  PKCS8_PRIV_KEY_INFO_new : function(): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PKCS8_PRIV_KEY_INFO_free : procedure(a: PPKCS8_PRIV_KEY_INFO); cdecl = nil;
  d2i_PKCS8_PRIV_KEY_INFO : function(a: PPPKCS8_PRIV_KEY_INFO; vin: PPByte; len: Integer): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  i2d_PKCS8_PRIV_KEY_INFO : function(a: PPKCS8_PRIV_KEY_INFO; vout: PPByte): Integer; cdecl = nil;
  PKCS8_PRIV_KEY_INFO_it : function(): PASN1_ITEM; cdecl = nil;
  EVP_PKCS82PKEY : function(p8: PPKCS8_PRIV_KEY_INFO): PEVP_PKEY; cdecl = nil;
  EVP_PKEY2PKCS8 : function(pkey: PEVP_PKEY): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PKCS8_pkey_set0 : function(priv: PPKCS8_PRIV_KEY_INFO; aobj: PASN1_OBJECT; version: Integer; ptype: Integer; pval: Pointer; penc: PByte; penclen: Integer): Integer; cdecl = nil;
  PKCS8_pkey_get0 : function(ppkalg: PPASN1_OBJECT; pk: PPByte; ppklen: PInteger; pa: PPX509_ALGOR; p8: PPKCS8_PRIV_KEY_INFO): Integer; cdecl = nil;
  PKCS8_pkey_get0_attrs : function(p8: PPKCS8_PRIV_KEY_INFO): Pstack_st_X509_ATTRIBUTE; cdecl = nil;
  PKCS8_pkey_add1_attr_by_NID : function(p8: PPKCS8_PRIV_KEY_INFO; nid: Integer; vtype: Integer; bytes: PByte; len: Integer): Integer; cdecl = nil;
  X509_PUBKEY_set0_param : function(pub: PX509_PUBKEY; aobj: PASN1_OBJECT; ptype: Integer; pval: Pointer; penc: PByte; penclen: Integer): Integer; cdecl = nil;
  X509_PUBKEY_get0_param : function(ppkalg: PPASN1_OBJECT; pk: PPByte; ppklen: PInteger; pa: PPX509_ALGOR; pub: PX509_PUBKEY): Integer; cdecl = nil;
  X509_check_trust : function(x: PX509; id: Integer; flags: Integer): Integer; cdecl = nil;
  X509_TRUST_get_count : function(): Integer; cdecl = nil;
  X509_TRUST_get0 : function(idx: Integer): PX509_TRUST; cdecl = nil;
  X509_TRUST_get_by_id : function(id: Integer): Integer; cdecl = nil;
  X509_TRUST_add : function(id: Integer; flags: Integer; ck: X509_TRUST_add_ck; name: PUTF8Char; arg1: Integer; arg2: Pointer): Integer; cdecl = nil;
  X509_TRUST_cleanup : procedure(); cdecl = nil;
  X509_TRUST_get_flags : function(xp: PX509_TRUST): Integer; cdecl = nil;
  X509_TRUST_get0_name : function(xp: PX509_TRUST): PUTF8Char; cdecl = nil;
  X509_TRUST_get_trust : function(xp: PX509_TRUST): Integer; cdecl = nil;
  ERR_load_CONF_strings : function(): Integer; cdecl = nil;
  CONF_set_default_method : function(meth: PCONF_METHOD): Integer; cdecl = nil;
  CONF_set_nconf : procedure(conf: PCONF; hash: Plhash_st_CONF_VALUE); cdecl = nil;
  CONF_load : function(conf: Plhash_st_CONF_VALUE; vfile: PUTF8Char; eline: PInteger): Plhash_st_CONF_VALUE; cdecl = nil;
  CONF_load_fp : function(conf: Plhash_st_CONF_VALUE; fp: PPointer; eline: PInteger): Plhash_st_CONF_VALUE; cdecl = nil;
  CONF_load_bio : function(conf: Plhash_st_CONF_VALUE; bp: PBIO; eline: PInteger): Plhash_st_CONF_VALUE; cdecl = nil;
  CONF_get_section : function(conf: Plhash_st_CONF_VALUE; section: PUTF8Char): Pstack_st_CONF_VALUE; cdecl = nil;
  CONF_get_string : function(conf: Plhash_st_CONF_VALUE; group: PUTF8Char; name: PUTF8Char): PUTF8Char; cdecl = nil;
  CONF_get_number : function(conf: Plhash_st_CONF_VALUE; group: PUTF8Char; name: PUTF8Char): Integer; cdecl = nil;
  CONF_free : procedure(conf: Plhash_st_CONF_VALUE); cdecl = nil;
  CONF_dump_fp : function(conf: Plhash_st_CONF_VALUE; vout: PPointer): Integer; cdecl = nil;
  CONF_dump_bio : function(conf: Plhash_st_CONF_VALUE; vout: PBIO): Integer; cdecl = nil;
  OPENSSL_config : procedure(config_name: PUTF8Char); cdecl = nil;
  NCONF_new : function(meth: PCONF_METHOD): PCONF; cdecl = nil;
  NCONF_default : function(): PCONF_METHOD; cdecl = nil;
  NCONF_WIN32 : function(): PCONF_METHOD; cdecl = nil;
  NCONF_free : procedure(conf: PCONF); cdecl = nil;
  NCONF_free_data : procedure(conf: PCONF); cdecl = nil;
  NCONF_load : function(conf: PCONF; vfile: PUTF8Char; eline: PInteger): Integer; cdecl = nil;
  NCONF_load_fp : function(conf: PCONF; fp: PPointer; eline: PInteger): Integer; cdecl = nil;
  NCONF_load_bio : function(conf: PCONF; bp: PBIO; eline: PInteger): Integer; cdecl = nil;
  NCONF_get_section : function(conf: PCONF; section: PUTF8Char): Pstack_st_CONF_VALUE; cdecl = nil;
  NCONF_get_string : function(conf: PCONF; group: PUTF8Char; name: PUTF8Char): PUTF8Char; cdecl = nil;
  NCONF_get_number_e : function(conf: PCONF; group: PUTF8Char; name: PUTF8Char; result: PInteger): Integer; cdecl = nil;
  NCONF_dump_fp : function(conf: PCONF; vout: PPointer): Integer; cdecl = nil;
  NCONF_dump_bio : function(conf: PCONF; vout: PBIO): Integer; cdecl = nil;
  CONF_modules_load : function(cnf: PCONF; appname: PUTF8Char; flags: Cardinal): Integer; cdecl = nil;
  CONF_modules_load_file : function(filename: PUTF8Char; appname: PUTF8Char; flags: Cardinal): Integer; cdecl = nil;
  CONF_modules_unload : procedure(all: Integer); cdecl = nil;
  CONF_modules_finish : procedure(); cdecl = nil;
  CONF_module_add : function(name: PUTF8Char; ifunc: Pconf_init_func; ffunc: Pconf_finish_func): Integer; cdecl = nil;
  CONF_imodule_get_name : function(md: PCONF_IMODULE): PUTF8Char; cdecl = nil;
  CONF_imodule_get_value : function(md: PCONF_IMODULE): PUTF8Char; cdecl = nil;
  CONF_imodule_get_usr_data : function(md: PCONF_IMODULE): Pointer; cdecl = nil;
  CONF_imodule_set_usr_data : procedure(md: PCONF_IMODULE; usr_data: Pointer); cdecl = nil;
  CONF_imodule_get_module : function(md: PCONF_IMODULE): PCONF_MODULE; cdecl = nil;
  CONF_imodule_get_flags : function(md: PCONF_IMODULE): Cardinal; cdecl = nil;
  CONF_imodule_set_flags : procedure(md: PCONF_IMODULE; flags: Cardinal); cdecl = nil;
  CONF_module_get_usr_data : function(pmod: PCONF_MODULE): Pointer; cdecl = nil;
  CONF_module_set_usr_data : procedure(pmod: PCONF_MODULE; usr_data: Pointer); cdecl = nil;
  CONF_get1_default_config_file : function(): PUTF8Char; cdecl = nil;
  CONF_parse_list : function(list: PUTF8Char; sep: Integer; nospc: Integer; list_cb: CONF_parse_list_list_cb; arg: Pointer): Integer; cdecl = nil;
  OPENSSL_load_builtin_modules : procedure(); cdecl = nil;
  ERR_load_X509V3_strings : function(): Integer; cdecl = nil;
  PROXY_POLICY_new : function(): PPROXY_POLICY; cdecl = nil;
  PROXY_POLICY_free : procedure(a: PPROXY_POLICY); cdecl = nil;
  d2i_PROXY_POLICY : function(a: PPPROXY_POLICY; vin: PPByte; len: Integer): PPROXY_POLICY; cdecl = nil;
  i2d_PROXY_POLICY : function(a: PPROXY_POLICY; vout: PPByte): Integer; cdecl = nil;
  PROXY_POLICY_it : function(): PASN1_ITEM; cdecl = nil;
  PROXY_CERT_INFO_EXTENSION_new : function(): PPROXY_CERT_INFO_EXTENSION; cdecl = nil;
  PROXY_CERT_INFO_EXTENSION_free : procedure(a: PPROXY_CERT_INFO_EXTENSION); cdecl = nil;
  d2i_PROXY_CERT_INFO_EXTENSION : function(a: PPPROXY_CERT_INFO_EXTENSION; vin: PPByte; len: Integer): PPROXY_CERT_INFO_EXTENSION; cdecl = nil;
  i2d_PROXY_CERT_INFO_EXTENSION : function(a: PPROXY_CERT_INFO_EXTENSION; vout: PPByte): Integer; cdecl = nil;
  PROXY_CERT_INFO_EXTENSION_it : function(): PASN1_ITEM; cdecl = nil;
  BASIC_CONSTRAINTS_new : function(): PBASIC_CONSTRAINTS; cdecl = nil;
  BASIC_CONSTRAINTS_free : procedure(a: PBASIC_CONSTRAINTS); cdecl = nil;
  d2i_BASIC_CONSTRAINTS : function(a: PPBASIC_CONSTRAINTS; vin: PPByte; len: Integer): PBASIC_CONSTRAINTS; cdecl = nil;
  i2d_BASIC_CONSTRAINTS : function(a: PBASIC_CONSTRAINTS; vout: PPByte): Integer; cdecl = nil;
  BASIC_CONSTRAINTS_it : function(): PASN1_ITEM; cdecl = nil;
  SXNET_new : function(): PSXNET; cdecl = nil;
  SXNET_free : procedure(a: PSXNET); cdecl = nil;
  d2i_SXNET : function(a: PPSXNET; vin: PPByte; len: Integer): PSXNET; cdecl = nil;
  i2d_SXNET : function(a: PSXNET; vout: PPByte): Integer; cdecl = nil;
  SXNET_it : function(): PASN1_ITEM; cdecl = nil;
  SXNETID_new : function(): PSXNETID; cdecl = nil;
  SXNETID_free : procedure(a: PSXNETID); cdecl = nil;
  d2i_SXNETID : function(a: PPSXNETID; vin: PPByte; len: Integer): PSXNETID; cdecl = nil;
  i2d_SXNETID : function(a: PSXNETID; vout: PPByte): Integer; cdecl = nil;
  SXNETID_it : function(): PASN1_ITEM; cdecl = nil;
  SXNET_add_id_asc : function(psx: PPSXNET; zone: PUTF8Char; user: PUTF8Char; userlen: Integer): Integer; cdecl = nil;
  SXNET_add_id_ulong : function(psx: PPSXNET; lzone: Cardinal; user: PUTF8Char; userlen: Integer): Integer; cdecl = nil;
  SXNET_add_id_INTEGER : function(psx: PPSXNET; izone: PASN1_INTEGER; user: PUTF8Char; userlen: Integer): Integer; cdecl = nil;
  SXNET_get_id_asc : function(sx: PSXNET; zone: PUTF8Char): PASN1_OCTET_STRING; cdecl = nil;
  SXNET_get_id_ulong : function(sx: PSXNET; lzone: Cardinal): PASN1_OCTET_STRING; cdecl = nil;
  SXNET_get_id_INTEGER : function(sx: PSXNET; zone: PASN1_INTEGER): PASN1_OCTET_STRING; cdecl = nil;
  AUTHORITY_KEYID_new : function(): PAUTHORITY_KEYID; cdecl = nil;
  AUTHORITY_KEYID_free : procedure(a: PAUTHORITY_KEYID); cdecl = nil;
  d2i_AUTHORITY_KEYID : function(a: PPAUTHORITY_KEYID; vin: PPByte; len: Integer): PAUTHORITY_KEYID; cdecl = nil;
  i2d_AUTHORITY_KEYID : function(a: PAUTHORITY_KEYID; vout: PPByte): Integer; cdecl = nil;
  AUTHORITY_KEYID_it : function(): PASN1_ITEM; cdecl = nil;
  PKEY_USAGE_PERIOD_new : function(): PPKEY_USAGE_PERIOD; cdecl = nil;
  PKEY_USAGE_PERIOD_free : procedure(a: PPKEY_USAGE_PERIOD); cdecl = nil;
  d2i_PKEY_USAGE_PERIOD : function(a: PPPKEY_USAGE_PERIOD; vin: PPByte; len: Integer): PPKEY_USAGE_PERIOD; cdecl = nil;
  i2d_PKEY_USAGE_PERIOD : function(a: PPKEY_USAGE_PERIOD; vout: PPByte): Integer; cdecl = nil;
  PKEY_USAGE_PERIOD_it : function(): PASN1_ITEM; cdecl = nil;
  GENERAL_NAME_new : function(): PGENERAL_NAME; cdecl = nil;
  GENERAL_NAME_free : procedure(a: PGENERAL_NAME); cdecl = nil;
  d2i_GENERAL_NAME : function(a: PPGENERAL_NAME; vin: PPByte; len: Integer): PGENERAL_NAME; cdecl = nil;
  i2d_GENERAL_NAME : function(a: PGENERAL_NAME; vout: PPByte): Integer; cdecl = nil;
  GENERAL_NAME_it : function(): PASN1_ITEM; cdecl = nil;
  GENERAL_NAME_dup : function(a: PGENERAL_NAME): PGENERAL_NAME; cdecl = nil;
  GENERAL_NAME_cmp : function(a: PGENERAL_NAME; b: PGENERAL_NAME): Integer; cdecl = nil;
  v2i_ASN1_BIT_STRING : function(method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; nval: Pstack_st_CONF_VALUE): PASN1_BIT_STRING; cdecl = nil;
  i2v_ASN1_BIT_STRING : function(method: PX509V3_EXT_METHOD; bits: PASN1_BIT_STRING; extlist: Pstack_st_CONF_VALUE): Pstack_st_CONF_VALUE; cdecl = nil;
  i2s_ASN1_IA5STRING : function(method: PX509V3_EXT_METHOD; ia5: PASN1_IA5STRING): PUTF8Char; cdecl = nil;
  s2i_ASN1_IA5STRING : function(method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; str: PUTF8Char): PASN1_IA5STRING; cdecl = nil;
  i2v_GENERAL_NAME : function(method: PX509V3_EXT_METHOD; gen: PGENERAL_NAME; ret: Pstack_st_CONF_VALUE): Pstack_st_CONF_VALUE; cdecl = nil;
  GENERAL_NAME_print : function(vout: PBIO; gen: PGENERAL_NAME): Integer; cdecl = nil;
  GENERAL_NAMES_new : function(): PGENERAL_NAMES; cdecl = nil;
  GENERAL_NAMES_free : procedure(a: PGENERAL_NAMES); cdecl = nil;
  d2i_GENERAL_NAMES : function(a: PPGENERAL_NAMES; vin: PPByte; len: Integer): PGENERAL_NAMES; cdecl = nil;
  i2d_GENERAL_NAMES : function(a: PGENERAL_NAMES; vout: PPByte): Integer; cdecl = nil;
  GENERAL_NAMES_it : function(): PASN1_ITEM; cdecl = nil;
  i2v_GENERAL_NAMES : function(method: PX509V3_EXT_METHOD; gen: PGENERAL_NAMES; extlist: Pstack_st_CONF_VALUE): Pstack_st_CONF_VALUE; cdecl = nil;
  v2i_GENERAL_NAMES : function(method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; nval: Pstack_st_CONF_VALUE): PGENERAL_NAMES; cdecl = nil;
  OTHERNAME_new : function(): POTHERNAME; cdecl = nil;
  OTHERNAME_free : procedure(a: POTHERNAME); cdecl = nil;
  d2i_OTHERNAME : function(a: PPOTHERNAME; vin: PPByte; len: Integer): POTHERNAME; cdecl = nil;
  i2d_OTHERNAME : function(a: POTHERNAME; vout: PPByte): Integer; cdecl = nil;
  OTHERNAME_it : function(): PASN1_ITEM; cdecl = nil;
  EDIPARTYNAME_new : function(): PEDIPARTYNAME; cdecl = nil;
  EDIPARTYNAME_free : procedure(a: PEDIPARTYNAME); cdecl = nil;
  d2i_EDIPARTYNAME : function(a: PPEDIPARTYNAME; vin: PPByte; len: Integer): PEDIPARTYNAME; cdecl = nil;
  i2d_EDIPARTYNAME : function(a: PEDIPARTYNAME; vout: PPByte): Integer; cdecl = nil;
  EDIPARTYNAME_it : function(): PASN1_ITEM; cdecl = nil;
  OTHERNAME_cmp : function(a: POTHERNAME; b: POTHERNAME): Integer; cdecl = nil;
  GENERAL_NAME_set0_value : procedure(a: PGENERAL_NAME; vtype: Integer; value: Pointer); cdecl = nil;
  GENERAL_NAME_get0_value : function(a: PGENERAL_NAME; ptype: PInteger): Pointer; cdecl = nil;
  GENERAL_NAME_set0_othername : function(gen: PGENERAL_NAME; oid: PASN1_OBJECT; value: PASN1_TYPE): Integer; cdecl = nil;
  GENERAL_NAME_get0_otherName : function(gen: PGENERAL_NAME; poid: PPASN1_OBJECT; pvalue: PPASN1_TYPE): Integer; cdecl = nil;
  i2s_ASN1_OCTET_STRING : function(method: PX509V3_EXT_METHOD; ia5: PASN1_OCTET_STRING): PUTF8Char; cdecl = nil;
  s2i_ASN1_OCTET_STRING : function(method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; str: PUTF8Char): PASN1_OCTET_STRING; cdecl = nil;
  EXTENDED_KEY_USAGE_new : function(): PEXTENDED_KEY_USAGE; cdecl = nil;
  EXTENDED_KEY_USAGE_free : procedure(a: PEXTENDED_KEY_USAGE); cdecl = nil;
  d2i_EXTENDED_KEY_USAGE : function(a: PPEXTENDED_KEY_USAGE; vin: PPByte; len: Integer): PEXTENDED_KEY_USAGE; cdecl = nil;
  i2d_EXTENDED_KEY_USAGE : function(a: PEXTENDED_KEY_USAGE; vout: PPByte): Integer; cdecl = nil;
  EXTENDED_KEY_USAGE_it : function(): PASN1_ITEM; cdecl = nil;
  i2a_ACCESS_DESCRIPTION : function(bp: PBIO; a: PACCESS_DESCRIPTION): Integer; cdecl = nil;
  TLS_FEATURE_new : function(): PTLS_FEATURE; cdecl = nil;
  TLS_FEATURE_free : procedure(a: PTLS_FEATURE); cdecl = nil;
  CERTIFICATEPOLICIES_new : function(): PCERTIFICATEPOLICIES; cdecl = nil;
  CERTIFICATEPOLICIES_free : procedure(a: PCERTIFICATEPOLICIES); cdecl = nil;
  d2i_CERTIFICATEPOLICIES : function(a: PPCERTIFICATEPOLICIES; vin: PPByte; len: Integer): PCERTIFICATEPOLICIES; cdecl = nil;
  i2d_CERTIFICATEPOLICIES : function(a: PCERTIFICATEPOLICIES; vout: PPByte): Integer; cdecl = nil;
  CERTIFICATEPOLICIES_it : function(): PASN1_ITEM; cdecl = nil;
  POLICYINFO_new : function(): PPOLICYINFO; cdecl = nil;
  POLICYINFO_free : procedure(a: PPOLICYINFO); cdecl = nil;
  d2i_POLICYINFO : function(a: PPPOLICYINFO; vin: PPByte; len: Integer): PPOLICYINFO; cdecl = nil;
  i2d_POLICYINFO : function(a: PPOLICYINFO; vout: PPByte): Integer; cdecl = nil;
  POLICYINFO_it : function(): PASN1_ITEM; cdecl = nil;
  POLICYQUALINFO_new : function(): PPOLICYQUALINFO; cdecl = nil;
  POLICYQUALINFO_free : procedure(a: PPOLICYQUALINFO); cdecl = nil;
  d2i_POLICYQUALINFO : function(a: PPPOLICYQUALINFO; vin: PPByte; len: Integer): PPOLICYQUALINFO; cdecl = nil;
  i2d_POLICYQUALINFO : function(a: PPOLICYQUALINFO; vout: PPByte): Integer; cdecl = nil;
  POLICYQUALINFO_it : function(): PASN1_ITEM; cdecl = nil;
  USERNOTICE_new : function(): PUSERNOTICE; cdecl = nil;
  USERNOTICE_free : procedure(a: PUSERNOTICE); cdecl = nil;
  d2i_USERNOTICE : function(a: PPUSERNOTICE; vin: PPByte; len: Integer): PUSERNOTICE; cdecl = nil;
  i2d_USERNOTICE : function(a: PUSERNOTICE; vout: PPByte): Integer; cdecl = nil;
  USERNOTICE_it : function(): PASN1_ITEM; cdecl = nil;
  NOTICEREF_new : function(): PNOTICEREF; cdecl = nil;
  NOTICEREF_free : procedure(a: PNOTICEREF); cdecl = nil;
  d2i_NOTICEREF : function(a: PPNOTICEREF; vin: PPByte; len: Integer): PNOTICEREF; cdecl = nil;
  i2d_NOTICEREF : function(a: PNOTICEREF; vout: PPByte): Integer; cdecl = nil;
  NOTICEREF_it : function(): PASN1_ITEM; cdecl = nil;
  CRL_DIST_POINTS_new : function(): PCRL_DIST_POINTS; cdecl = nil;
  CRL_DIST_POINTS_free : procedure(a: PCRL_DIST_POINTS); cdecl = nil;
  d2i_CRL_DIST_POINTS : function(a: PPCRL_DIST_POINTS; vin: PPByte; len: Integer): PCRL_DIST_POINTS; cdecl = nil;
  i2d_CRL_DIST_POINTS : function(a: PCRL_DIST_POINTS; vout: PPByte): Integer; cdecl = nil;
  CRL_DIST_POINTS_it : function(): PASN1_ITEM; cdecl = nil;
  DIST_POINT_new : function(): PDIST_POINT; cdecl = nil;
  DIST_POINT_free : procedure(a: PDIST_POINT); cdecl = nil;
  d2i_DIST_POINT : function(a: PPDIST_POINT; vin: PPByte; len: Integer): PDIST_POINT; cdecl = nil;
  i2d_DIST_POINT : function(a: PDIST_POINT; vout: PPByte): Integer; cdecl = nil;
  DIST_POINT_it : function(): PASN1_ITEM; cdecl = nil;
  DIST_POINT_NAME_new : function(): PDIST_POINT_NAME; cdecl = nil;
  DIST_POINT_NAME_free : procedure(a: PDIST_POINT_NAME); cdecl = nil;
  d2i_DIST_POINT_NAME : function(a: PPDIST_POINT_NAME; vin: PPByte; len: Integer): PDIST_POINT_NAME; cdecl = nil;
  i2d_DIST_POINT_NAME : function(a: PDIST_POINT_NAME; vout: PPByte): Integer; cdecl = nil;
  DIST_POINT_NAME_it : function(): PASN1_ITEM; cdecl = nil;
  ISSUING_DIST_POINT_new : function(): PISSUING_DIST_POINT; cdecl = nil;
  ISSUING_DIST_POINT_free : procedure(a: PISSUING_DIST_POINT); cdecl = nil;
  d2i_ISSUING_DIST_POINT : function(a: PPISSUING_DIST_POINT; vin: PPByte; len: Integer): PISSUING_DIST_POINT; cdecl = nil;
  i2d_ISSUING_DIST_POINT : function(a: PISSUING_DIST_POINT; vout: PPByte): Integer; cdecl = nil;
  ISSUING_DIST_POINT_it : function(): PASN1_ITEM; cdecl = nil;
  DIST_POINT_set_dpname : function(dpn: PDIST_POINT_NAME; iname: PX509_NAME): Integer; cdecl = nil;
  NAME_CONSTRAINTS_check : function(x: PX509; nc: PNAME_CONSTRAINTS): Integer; cdecl = nil;
  NAME_CONSTRAINTS_check_CN : function(x: PX509; nc: PNAME_CONSTRAINTS): Integer; cdecl = nil;
  ACCESS_DESCRIPTION_new : function(): PACCESS_DESCRIPTION; cdecl = nil;
  ACCESS_DESCRIPTION_free : procedure(a: PACCESS_DESCRIPTION); cdecl = nil;
  d2i_ACCESS_DESCRIPTION : function(a: PPACCESS_DESCRIPTION; vin: PPByte; len: Integer): PACCESS_DESCRIPTION; cdecl = nil;
  i2d_ACCESS_DESCRIPTION : function(a: PACCESS_DESCRIPTION; vout: PPByte): Integer; cdecl = nil;
  ACCESS_DESCRIPTION_it : function(): PASN1_ITEM; cdecl = nil;
  AUTHORITY_INFO_ACCESS_new : function(): PAUTHORITY_INFO_ACCESS; cdecl = nil;
  AUTHORITY_INFO_ACCESS_free : procedure(a: PAUTHORITY_INFO_ACCESS); cdecl = nil;
  d2i_AUTHORITY_INFO_ACCESS : function(a: PPAUTHORITY_INFO_ACCESS; vin: PPByte; len: Integer): PAUTHORITY_INFO_ACCESS; cdecl = nil;
  i2d_AUTHORITY_INFO_ACCESS : function(a: PAUTHORITY_INFO_ACCESS; vout: PPByte): Integer; cdecl = nil;
  AUTHORITY_INFO_ACCESS_it : function(): PASN1_ITEM; cdecl = nil;
  POLICY_MAPPING_it : function(): PASN1_ITEM; cdecl = nil;
  POLICY_MAPPING_new : function(): PPOLICY_MAPPING; cdecl = nil;
  POLICY_MAPPING_free : procedure(a: PPOLICY_MAPPING); cdecl = nil;
  POLICY_MAPPINGS_it : function(): PASN1_ITEM; cdecl = nil;
  GENERAL_SUBTREE_it : function(): PASN1_ITEM; cdecl = nil;
  GENERAL_SUBTREE_new : function(): PGENERAL_SUBTREE; cdecl = nil;
  GENERAL_SUBTREE_free : procedure(a: PGENERAL_SUBTREE); cdecl = nil;
  NAME_CONSTRAINTS_it : function(): PASN1_ITEM; cdecl = nil;
  NAME_CONSTRAINTS_new : function(): PNAME_CONSTRAINTS; cdecl = nil;
  NAME_CONSTRAINTS_free : procedure(a: PNAME_CONSTRAINTS); cdecl = nil;
  POLICY_CONSTRAINTS_new : function(): PPOLICY_CONSTRAINTS; cdecl = nil;
  POLICY_CONSTRAINTS_free : procedure(a: PPOLICY_CONSTRAINTS); cdecl = nil;
  POLICY_CONSTRAINTS_it : function(): PASN1_ITEM; cdecl = nil;
  a2i_GENERAL_NAME : function(vout: PGENERAL_NAME; method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; gen_type: Integer; value: PUTF8Char; is_nc: Integer): PGENERAL_NAME; cdecl = nil;
  v2i_GENERAL_NAME : function(method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; cnf: PCONF_VALUE): PGENERAL_NAME; cdecl = nil;
  v2i_GENERAL_NAME_ex : function(vout: PGENERAL_NAME; method: PX509V3_EXT_METHOD; ctx: PX509V3_CTX; cnf: PCONF_VALUE; is_nc: Integer): PGENERAL_NAME; cdecl = nil;
  X509V3_conf_free : procedure(val: PCONF_VALUE); cdecl = nil;
  X509V3_EXT_nconf_nid : function(conf: PCONF; ctx: PX509V3_CTX; ext_nid: Integer; value: PUTF8Char): PX509_EXTENSION; cdecl = nil;
  X509V3_EXT_nconf : function(conf: PCONF; ctx: PX509V3_CTX; name: PUTF8Char; value: PUTF8Char): PX509_EXTENSION; cdecl = nil;
  X509V3_EXT_add_nconf_sk : function(conf: PCONF; ctx: PX509V3_CTX; section: PUTF8Char; sk: PPstack_st_X509_EXTENSION): Integer; cdecl = nil;
  X509V3_EXT_add_nconf : function(conf: PCONF; ctx: PX509V3_CTX; section: PUTF8Char; cert: PX509): Integer; cdecl = nil;
  X509V3_EXT_REQ_add_nconf : function(conf: PCONF; ctx: PX509V3_CTX; section: PUTF8Char; req: PX509_REQ): Integer; cdecl = nil;
  X509V3_EXT_CRL_add_nconf : function(conf: PCONF; ctx: PX509V3_CTX; section: PUTF8Char; crl: PX509_CRL): Integer; cdecl = nil;
  X509V3_EXT_conf_nid : function(conf: Plhash_st_CONF_VALUE; ctx: PX509V3_CTX; ext_nid: Integer; value: PUTF8Char): PX509_EXTENSION; cdecl = nil;
  X509V3_EXT_conf : function(conf: Plhash_st_CONF_VALUE; ctx: PX509V3_CTX; name: PUTF8Char; value: PUTF8Char): PX509_EXTENSION; cdecl = nil;
  X509V3_EXT_add_conf : function(conf: Plhash_st_CONF_VALUE; ctx: PX509V3_CTX; section: PUTF8Char; cert: PX509): Integer; cdecl = nil;
  X509V3_EXT_REQ_add_conf : function(conf: Plhash_st_CONF_VALUE; ctx: PX509V3_CTX; section: PUTF8Char; req: PX509_REQ): Integer; cdecl = nil;
  X509V3_EXT_CRL_add_conf : function(conf: Plhash_st_CONF_VALUE; ctx: PX509V3_CTX; section: PUTF8Char; crl: PX509_CRL): Integer; cdecl = nil;
  X509V3_add_value_bool_nf : function(name: PUTF8Char; asn1_bool: Integer; extlist: PPstack_st_CONF_VALUE): Integer; cdecl = nil;
  X509V3_get_value_bool : function(value: PCONF_VALUE; asn1_bool: PInteger): Integer; cdecl = nil;
  X509V3_get_value_int : function(value: PCONF_VALUE; aint: PPASN1_INTEGER): Integer; cdecl = nil;
  X509V3_set_nconf : procedure(ctx: PX509V3_CTX; conf: PCONF); cdecl = nil;
  X509V3_set_conf_lhash : procedure(ctx: PX509V3_CTX; lhash: Plhash_st_CONF_VALUE); cdecl = nil;
  X509V3_get_string : function(ctx: PX509V3_CTX; name: PUTF8Char; section: PUTF8Char): PUTF8Char; cdecl = nil;
  X509V3_get_section : function(ctx: PX509V3_CTX; section: PUTF8Char): Pstack_st_CONF_VALUE; cdecl = nil;
  X509V3_string_free : procedure(ctx: PX509V3_CTX; str: PUTF8Char); cdecl = nil;
  X509V3_section_free : procedure(ctx: PX509V3_CTX; section: Pstack_st_CONF_VALUE); cdecl = nil;
  X509V3_set_ctx : procedure(ctx: PX509V3_CTX; issuer: PX509; subject: PX509; req: PX509_REQ; crl: PX509_CRL; flags: Integer); cdecl = nil;
  X509V3_add_value : function(name: PUTF8Char; value: PUTF8Char; extlist: PPstack_st_CONF_VALUE): Integer; cdecl = nil;
  X509V3_add_value_uchar : function(name: PUTF8Char; value: PByte; extlist: PPstack_st_CONF_VALUE): Integer; cdecl = nil;
  X509V3_add_value_bool : function(name: PUTF8Char; asn1_bool: Integer; extlist: PPstack_st_CONF_VALUE): Integer; cdecl = nil;
  X509V3_add_value_int : function(name: PUTF8Char; aint: PASN1_INTEGER; extlist: PPstack_st_CONF_VALUE): Integer; cdecl = nil;
  i2s_ASN1_INTEGER : function(meth: PX509V3_EXT_METHOD; aint: PASN1_INTEGER): PUTF8Char; cdecl = nil;
  s2i_ASN1_INTEGER : function(meth: PX509V3_EXT_METHOD; value: PUTF8Char): PASN1_INTEGER; cdecl = nil;
  i2s_ASN1_ENUMERATED : function(meth: PX509V3_EXT_METHOD; aint: PASN1_ENUMERATED): PUTF8Char; cdecl = nil;
  i2s_ASN1_ENUMERATED_TABLE : function(meth: PX509V3_EXT_METHOD; aint: PASN1_ENUMERATED): PUTF8Char; cdecl = nil;
  X509V3_EXT_add : function(ext: PX509V3_EXT_METHOD): Integer; cdecl = nil;
  X509V3_EXT_add_list : function(extlist: PX509V3_EXT_METHOD): Integer; cdecl = nil;
  X509V3_EXT_add_alias : function(nid_to: Integer; nid_from: Integer): Integer; cdecl = nil;
  X509V3_EXT_cleanup : procedure(); cdecl = nil;
  X509V3_EXT_get : function(ext: PX509_EXTENSION): PX509V3_EXT_METHOD; cdecl = nil;
  X509V3_EXT_get_nid : function(nid: Integer): PX509V3_EXT_METHOD; cdecl = nil;
  X509V3_add_standard_extensions : function(): Integer; cdecl = nil;
  X509V3_parse_list : function(line: PUTF8Char): Pstack_st_CONF_VALUE; cdecl = nil;
  X509V3_EXT_d2i : function(ext: PX509_EXTENSION): Pointer; cdecl = nil;
  X509V3_get_d2i : function(x: Pstack_st_X509_EXTENSION; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  X509V3_EXT_i2d : function(ext_nid: Integer; crit: Integer; ext_struc: Pointer): PX509_EXTENSION; cdecl = nil;
  X509V3_add1_i2d : function(x: PPstack_st_X509_EXTENSION; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  X509V3_EXT_val_prn : procedure(vout: PBIO; val: Pstack_st_CONF_VALUE; indent: Integer; ml: Integer); cdecl = nil;
  X509V3_EXT_print : function(vout: PBIO; ext: PX509_EXTENSION; flag: Cardinal; indent: Integer): Integer; cdecl = nil;
  X509V3_EXT_print_fp : function(vout: PPointer; ext: PX509_EXTENSION; flag: Integer; indent: Integer): Integer; cdecl = nil;
  X509V3_extensions_print : function(vout: PBIO; title: PUTF8Char; exts: Pstack_st_X509_EXTENSION; flag: Cardinal; indent: Integer): Integer; cdecl = nil;
  X509_check_ca : function(x: PX509): Integer; cdecl = nil;
  X509_check_purpose : function(x: PX509; id: Integer; ca: Integer): Integer; cdecl = nil;
  X509_supported_extension : function(ex: PX509_EXTENSION): Integer; cdecl = nil;
  X509_PURPOSE_set : function(p: PInteger; purpose: Integer): Integer; cdecl = nil;
  X509_check_issued : function(issuer: PX509; subject: PX509): Integer; cdecl = nil;
  X509_check_akid : function(issuer: PX509; akid: PAUTHORITY_KEYID): Integer; cdecl = nil;
  X509_set_proxy_flag : procedure(x: PX509); cdecl = nil;
  X509_set_proxy_pathlen : procedure(x: PX509; l: Integer); cdecl = nil;
  X509_get_proxy_pathlen : function(x: PX509): Integer; cdecl = nil;
  X509_get_extension_flags : function(x: PX509): UInt32; cdecl = nil;
  X509_get_key_usage : function(x: PX509): UInt32; cdecl = nil;
  X509_get_extended_key_usage : function(x: PX509): UInt32; cdecl = nil;
  X509_get0_subject_key_id : function(x: PX509): PASN1_OCTET_STRING; cdecl = nil;
  X509_get0_authority_key_id : function(x: PX509): PASN1_OCTET_STRING; cdecl = nil;
  X509_get0_authority_issuer : function(x: PX509): PGENERAL_NAMES; cdecl = nil;
  X509_get0_authority_serial : function(x: PX509): PASN1_INTEGER; cdecl = nil;
  X509_PURPOSE_get_count : function(): Integer; cdecl = nil;
  X509_PURPOSE_get0 : function(idx: Integer): PX509_PURPOSE; cdecl = nil;
  X509_PURPOSE_get_by_sname : function(sname: PUTF8Char): Integer; cdecl = nil;
  X509_PURPOSE_get_by_id : function(id: Integer): Integer; cdecl = nil;
  X509_PURPOSE_add : function(id: Integer; trust: Integer; flags: Integer; ck: X509_PURPOSE_add_ck; name: PUTF8Char; sname: PUTF8Char; arg: Pointer): Integer; cdecl = nil;
  X509_PURPOSE_get0_name : function(xp: PX509_PURPOSE): PUTF8Char; cdecl = nil;
  X509_PURPOSE_get0_sname : function(xp: PX509_PURPOSE): PUTF8Char; cdecl = nil;
  X509_PURPOSE_get_trust : function(xp: PX509_PURPOSE): Integer; cdecl = nil;
  X509_PURPOSE_cleanup : procedure(); cdecl = nil;
  X509_PURPOSE_get_id : function(p1: PX509_PURPOSE): Integer; cdecl = nil;
  X509_get1_email : function(x: PX509): Pstack_st_OPENSSL_STRING; cdecl = nil;
  X509_REQ_get1_email : function(x: PX509_REQ): Pstack_st_OPENSSL_STRING; cdecl = nil;
  X509_email_free : procedure(sk: Pstack_st_OPENSSL_STRING); cdecl = nil;
  X509_get1_ocsp : function(x: PX509): Pstack_st_OPENSSL_STRING; cdecl = nil;
  X509_check_host : function(x: PX509; chk: PUTF8Char; chklen: NativeUInt; flags: Cardinal; peername: PPUTF8Char): Integer; cdecl = nil;
  X509_check_email : function(x: PX509; chk: PUTF8Char; chklen: NativeUInt; flags: Cardinal): Integer; cdecl = nil;
  X509_check_ip : function(x: PX509; chk: PByte; chklen: NativeUInt; flags: Cardinal): Integer; cdecl = nil;
  X509_check_ip_asc : function(x: PX509; ipasc: PUTF8Char; flags: Cardinal): Integer; cdecl = nil;
  a2i_IPADDRESS : function(ipasc: PUTF8Char): PASN1_OCTET_STRING; cdecl = nil;
  a2i_IPADDRESS_NC : function(ipasc: PUTF8Char): PASN1_OCTET_STRING; cdecl = nil;
  X509V3_NAME_from_section : function(nm: PX509_NAME; dn_sk: Pstack_st_CONF_VALUE; chtype: Cardinal): Integer; cdecl = nil;
  X509_POLICY_NODE_print : procedure(vout: PBIO; node: PX509_POLICY_NODE; indent: Integer); cdecl = nil;
  ASRange_new : function(): PASRange; cdecl = nil;
  ASRange_free : procedure(a: PASRange); cdecl = nil;
  d2i_ASRange : function(a: PPASRange; vin: PPByte; len: Integer): PASRange; cdecl = nil;
  i2d_ASRange : function(a: PASRange; vout: PPByte): Integer; cdecl = nil;
  ASRange_it : function(): PASN1_ITEM; cdecl = nil;
  ASIdOrRange_new : function(): PASIdOrRange; cdecl = nil;
  ASIdOrRange_free : procedure(a: PASIdOrRange); cdecl = nil;
  d2i_ASIdOrRange : function(a: PPASIdOrRange; vin: PPByte; len: Integer): PASIdOrRange; cdecl = nil;
  i2d_ASIdOrRange : function(a: PASIdOrRange; vout: PPByte): Integer; cdecl = nil;
  ASIdOrRange_it : function(): PASN1_ITEM; cdecl = nil;
  ASIdentifierChoice_new : function(): PASIdentifierChoice; cdecl = nil;
  ASIdentifierChoice_free : procedure(a: PASIdentifierChoice); cdecl = nil;
  d2i_ASIdentifierChoice : function(a: PPASIdentifierChoice; vin: PPByte; len: Integer): PASIdentifierChoice; cdecl = nil;
  i2d_ASIdentifierChoice : function(a: PASIdentifierChoice; vout: PPByte): Integer; cdecl = nil;
  ASIdentifierChoice_it : function(): PASN1_ITEM; cdecl = nil;
  ASIdentifiers_new : function(): PASIdentifiers; cdecl = nil;
  ASIdentifiers_free : procedure(a: PASIdentifiers); cdecl = nil;
  d2i_ASIdentifiers : function(a: PPASIdentifiers; vin: PPByte; len: Integer): PASIdentifiers; cdecl = nil;
  i2d_ASIdentifiers : function(a: PASIdentifiers; vout: PPByte): Integer; cdecl = nil;
  ASIdentifiers_it : function(): PASN1_ITEM; cdecl = nil;
  IPAddressRange_new : function(): PIPAddressRange; cdecl = nil;
  IPAddressRange_free : procedure(a: PIPAddressRange); cdecl = nil;
  d2i_IPAddressRange : function(a: PPIPAddressRange; vin: PPByte; len: Integer): PIPAddressRange; cdecl = nil;
  i2d_IPAddressRange : function(a: PIPAddressRange; vout: PPByte): Integer; cdecl = nil;
  IPAddressRange_it : function(): PASN1_ITEM; cdecl = nil;
  IPAddressOrRange_new : function(): PIPAddressOrRange; cdecl = nil;
  IPAddressOrRange_free : procedure(a: PIPAddressOrRange); cdecl = nil;
  d2i_IPAddressOrRange : function(a: PPIPAddressOrRange; vin: PPByte; len: Integer): PIPAddressOrRange; cdecl = nil;
  i2d_IPAddressOrRange : function(a: PIPAddressOrRange; vout: PPByte): Integer; cdecl = nil;
  IPAddressOrRange_it : function(): PASN1_ITEM; cdecl = nil;
  IPAddressChoice_new : function(): PIPAddressChoice; cdecl = nil;
  IPAddressChoice_free : procedure(a: PIPAddressChoice); cdecl = nil;
  d2i_IPAddressChoice : function(a: PPIPAddressChoice; vin: PPByte; len: Integer): PIPAddressChoice; cdecl = nil;
  i2d_IPAddressChoice : function(a: PIPAddressChoice; vout: PPByte): Integer; cdecl = nil;
  IPAddressChoice_it : function(): PASN1_ITEM; cdecl = nil;
  IPAddressFamily_new : function(): PIPAddressFamily; cdecl = nil;
  IPAddressFamily_free : procedure(a: PIPAddressFamily); cdecl = nil;
  d2i_IPAddressFamily : function(a: PPIPAddressFamily; vin: PPByte; len: Integer): PIPAddressFamily; cdecl = nil;
  i2d_IPAddressFamily : function(a: PIPAddressFamily; vout: PPByte): Integer; cdecl = nil;
  IPAddressFamily_it : function(): PASN1_ITEM; cdecl = nil;
  X509v3_asid_add_inherit : function(asid: PASIdentifiers; which: Integer): Integer; cdecl = nil;
  X509v3_asid_add_id_or_range : function(asid: PASIdentifiers; which: Integer; min: PASN1_INTEGER; max: PASN1_INTEGER): Integer; cdecl = nil;
  X509v3_addr_add_inherit : function(addr: PIPAddrBlocks; afi: Cardinal; safi: PCardinal): Integer; cdecl = nil;
  X509v3_addr_add_prefix : function(addr: PIPAddrBlocks; afi: Cardinal; safi: PCardinal; a: PByte; prefixlen: Integer): Integer; cdecl = nil;
  X509v3_addr_add_range : function(addr: PIPAddrBlocks; afi: Cardinal; safi: PCardinal; min: PByte; max: PByte): Integer; cdecl = nil;
  X509v3_addr_get_afi : function(f: PIPAddressFamily): Cardinal; cdecl = nil;
  X509v3_addr_get_range : function(aor: PIPAddressOrRange; afi: Cardinal; min: PByte; max: PByte; length: Integer): Integer; cdecl = nil;
  X509v3_asid_is_canonical : function(asid: PASIdentifiers): Integer; cdecl = nil;
  X509v3_addr_is_canonical : function(addr: PIPAddrBlocks): Integer; cdecl = nil;
  X509v3_asid_canonize : function(asid: PASIdentifiers): Integer; cdecl = nil;
  X509v3_addr_canonize : function(addr: PIPAddrBlocks): Integer; cdecl = nil;
  X509v3_asid_inherits : function(asid: PASIdentifiers): Integer; cdecl = nil;
  X509v3_addr_inherits : function(addr: PIPAddrBlocks): Integer; cdecl = nil;
  X509v3_asid_subset : function(a: PASIdentifiers; b: PASIdentifiers): Integer; cdecl = nil;
  X509v3_addr_subset : function(a: PIPAddrBlocks; b: PIPAddrBlocks): Integer; cdecl = nil;
  X509v3_asid_validate_path : function(p1: PX509_STORE_CTX): Integer; cdecl = nil;
  X509v3_addr_validate_path : function(p1: PX509_STORE_CTX): Integer; cdecl = nil;
  X509v3_asid_validate_resource_set : function(chain: Pstack_st_X509; ext: PASIdentifiers; allow_inheritance: Integer): Integer; cdecl = nil;
  X509v3_addr_validate_resource_set : function(chain: Pstack_st_X509; ext: PIPAddrBlocks; allow_inheritance: Integer): Integer; cdecl = nil;
  NAMING_AUTHORITY_new : function(): PNAMING_AUTHORITY; cdecl = nil;
  NAMING_AUTHORITY_free : procedure(a: PNAMING_AUTHORITY); cdecl = nil;
  d2i_NAMING_AUTHORITY : function(a: PPNAMING_AUTHORITY; vin: PPByte; len: Integer): PNAMING_AUTHORITY; cdecl = nil;
  i2d_NAMING_AUTHORITY : function(a: PNAMING_AUTHORITY; vout: PPByte): Integer; cdecl = nil;
  NAMING_AUTHORITY_it : function(): PASN1_ITEM; cdecl = nil;
  PROFESSION_INFO_new : function(): PPROFESSION_INFO; cdecl = nil;
  PROFESSION_INFO_free : procedure(a: PPROFESSION_INFO); cdecl = nil;
  d2i_PROFESSION_INFO : function(a: PPPROFESSION_INFO; vin: PPByte; len: Integer): PPROFESSION_INFO; cdecl = nil;
  i2d_PROFESSION_INFO : function(a: PPROFESSION_INFO; vout: PPByte): Integer; cdecl = nil;
  PROFESSION_INFO_it : function(): PASN1_ITEM; cdecl = nil;
  ADMISSIONS_new : function(): PADMISSIONS; cdecl = nil;
  ADMISSIONS_free : procedure(a: PADMISSIONS); cdecl = nil;
  d2i_ADMISSIONS : function(a: PPADMISSIONS; vin: PPByte; len: Integer): PADMISSIONS; cdecl = nil;
  i2d_ADMISSIONS : function(a: PADMISSIONS; vout: PPByte): Integer; cdecl = nil;
  ADMISSIONS_it : function(): PASN1_ITEM; cdecl = nil;
  ADMISSION_SYNTAX_new : function(): PADMISSION_SYNTAX; cdecl = nil;
  ADMISSION_SYNTAX_free : procedure(a: PADMISSION_SYNTAX); cdecl = nil;
  d2i_ADMISSION_SYNTAX : function(a: PPADMISSION_SYNTAX; vin: PPByte; len: Integer): PADMISSION_SYNTAX; cdecl = nil;
  i2d_ADMISSION_SYNTAX : function(a: PADMISSION_SYNTAX; vout: PPByte): Integer; cdecl = nil;
  ADMISSION_SYNTAX_it : function(): PASN1_ITEM; cdecl = nil;
  NAMING_AUTHORITY_get0_authorityId : function(n: PNAMING_AUTHORITY): PASN1_OBJECT; cdecl = nil;
  NAMING_AUTHORITY_get0_authorityURL : function(n: PNAMING_AUTHORITY): PASN1_IA5STRING; cdecl = nil;
  NAMING_AUTHORITY_get0_authorityText : function(n: PNAMING_AUTHORITY): PASN1_STRING; cdecl = nil;
  NAMING_AUTHORITY_set0_authorityId : procedure(n: PNAMING_AUTHORITY; namingAuthorityId: PASN1_OBJECT); cdecl = nil;
  NAMING_AUTHORITY_set0_authorityURL : procedure(n: PNAMING_AUTHORITY; namingAuthorityUrl: PASN1_IA5STRING); cdecl = nil;
  NAMING_AUTHORITY_set0_authorityText : procedure(n: PNAMING_AUTHORITY; namingAuthorityText: PASN1_STRING); cdecl = nil;
  ADMISSION_SYNTAX_get0_admissionAuthority : function(vas: PADMISSION_SYNTAX): PGENERAL_NAME; cdecl = nil;
  ADMISSION_SYNTAX_set0_admissionAuthority : procedure(vas: PADMISSION_SYNTAX; aa: PGENERAL_NAME); cdecl = nil;
  ADMISSION_SYNTAX_get0_contentsOfAdmissions : function(vas: PADMISSION_SYNTAX): Pstack_st_ADMISSIONS; cdecl = nil;
  ADMISSION_SYNTAX_set0_contentsOfAdmissions : procedure(vas: PADMISSION_SYNTAX; a: Pstack_st_ADMISSIONS); cdecl = nil;
  ADMISSIONS_get0_admissionAuthority : function(a: PADMISSIONS): PGENERAL_NAME; cdecl = nil;
  ADMISSIONS_set0_admissionAuthority : procedure(a: PADMISSIONS; aa: PGENERAL_NAME); cdecl = nil;
  ADMISSIONS_get0_namingAuthority : function(a: PADMISSIONS): PNAMING_AUTHORITY; cdecl = nil;
  ADMISSIONS_set0_namingAuthority : procedure(a: PADMISSIONS; na: PNAMING_AUTHORITY); cdecl = nil;
  ADMISSIONS_get0_professionInfos : function(a: PADMISSIONS): PPROFESSION_INFOS; cdecl = nil;
  ADMISSIONS_set0_professionInfos : procedure(a: PADMISSIONS; pi: PPROFESSION_INFOS); cdecl = nil;
  PROFESSION_INFO_get0_addProfessionInfo : function(pi: PPROFESSION_INFO): PASN1_OCTET_STRING; cdecl = nil;
  PROFESSION_INFO_set0_addProfessionInfo : procedure(pi: PPROFESSION_INFO; aos: PASN1_OCTET_STRING); cdecl = nil;
  PROFESSION_INFO_get0_namingAuthority : function(pi: PPROFESSION_INFO): PNAMING_AUTHORITY; cdecl = nil;
  PROFESSION_INFO_set0_namingAuthority : procedure(pi: PPROFESSION_INFO; na: PNAMING_AUTHORITY); cdecl = nil;
  PROFESSION_INFO_get0_professionItems : function(pi: PPROFESSION_INFO): Pstack_st_ASN1_STRING; cdecl = nil;
  PROFESSION_INFO_set0_professionItems : procedure(pi: PPROFESSION_INFO; vas: Pstack_st_ASN1_STRING); cdecl = nil;
  PROFESSION_INFO_get0_professionOIDs : function(pi: PPROFESSION_INFO): Pstack_st_ASN1_OBJECT; cdecl = nil;
  PROFESSION_INFO_set0_professionOIDs : procedure(pi: PPROFESSION_INFO; po: Pstack_st_ASN1_OBJECT); cdecl = nil;
  PROFESSION_INFO_get0_registrationNumber : function(pi: PPROFESSION_INFO): PASN1_PRINTABLESTRING; cdecl = nil;
  PROFESSION_INFO_set0_registrationNumber : procedure(pi: PPROFESSION_INFO; rn: PASN1_PRINTABLESTRING); cdecl = nil;
  ERR_load_CMS_strings : function(): Integer; cdecl = nil;
  CMS_ContentInfo_new : function(): PCMS_ContentInfo; cdecl = nil;
  CMS_ContentInfo_free : procedure(a: PCMS_ContentInfo); cdecl = nil;
  d2i_CMS_ContentInfo : function(a: PPCMS_ContentInfo; vin: PPByte; len: Integer): PCMS_ContentInfo; cdecl = nil;
  i2d_CMS_ContentInfo : function(a: PCMS_ContentInfo; vout: PPByte): Integer; cdecl = nil;
  CMS_ContentInfo_it : function(): PASN1_ITEM; cdecl = nil;
  CMS_ReceiptRequest_new : function(): PCMS_ReceiptRequest; cdecl = nil;
  CMS_ReceiptRequest_free : procedure(a: PCMS_ReceiptRequest); cdecl = nil;
  d2i_CMS_ReceiptRequest : function(a: PPCMS_ReceiptRequest; vin: PPByte; len: Integer): PCMS_ReceiptRequest; cdecl = nil;
  i2d_CMS_ReceiptRequest : function(a: PCMS_ReceiptRequest; vout: PPByte): Integer; cdecl = nil;
  CMS_ReceiptRequest_it : function(): PASN1_ITEM; cdecl = nil;
  CMS_ContentInfo_print_ctx : function(vout: PBIO; x: PCMS_ContentInfo; indent: Integer; pctx: PASN1_PCTX): Integer; cdecl = nil;
  CMS_get0_type : function(cms: PCMS_ContentInfo): PASN1_OBJECT; cdecl = nil;
  CMS_dataInit : function(cms: PCMS_ContentInfo; icont: PBIO): PBIO; cdecl = nil;
  CMS_dataFinal : function(cms: PCMS_ContentInfo; bio: PBIO): Integer; cdecl = nil;
  CMS_get0_content : function(cms: PCMS_ContentInfo): PPASN1_OCTET_STRING; cdecl = nil;
  CMS_is_detached : function(cms: PCMS_ContentInfo): Integer; cdecl = nil;
  CMS_set_detached : function(cms: PCMS_ContentInfo; detached: Integer): Integer; cdecl = nil;
  CMS_stream : function(boundary: PPPByte; cms: PCMS_ContentInfo): Integer; cdecl = nil;
  d2i_CMS_bio : function(bp: PBIO; cms: PPCMS_ContentInfo): PCMS_ContentInfo; cdecl = nil;
  i2d_CMS_bio : function(bp: PBIO; cms: PCMS_ContentInfo): Integer; cdecl = nil;
  BIO_new_CMS : function(vout: PBIO; cms: PCMS_ContentInfo): PBIO; cdecl = nil;
  i2d_CMS_bio_stream : function(vout: PBIO; cms: PCMS_ContentInfo; vin: PBIO; flags: Integer): Integer; cdecl = nil;
  PEM_write_bio_CMS_stream : function(vout: PBIO; cms: PCMS_ContentInfo; vin: PBIO; flags: Integer): Integer; cdecl = nil;
  SMIME_read_CMS : function(bio: PBIO; bcont: PPBIO): PCMS_ContentInfo; cdecl = nil;
  SMIME_write_CMS : function(bio: PBIO; cms: PCMS_ContentInfo; data: PBIO; flags: Integer): Integer; cdecl = nil;
  CMS_final : function(cms: PCMS_ContentInfo; data: PBIO; dcont: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_sign : function(signcert: PX509; pkey: PEVP_PKEY; certs: Pstack_st_X509; data: PBIO; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_sign_receipt : function(si: PCMS_SignerInfo; signcert: PX509; pkey: PEVP_PKEY; certs: Pstack_st_X509; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_data : function(cms: PCMS_ContentInfo; vout: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_data_create : function(vin: PBIO; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_digest_verify : function(cms: PCMS_ContentInfo; dcont: PBIO; vout: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_digest_create : function(vin: PBIO; md: PEVP_MD; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_EncryptedData_decrypt : function(cms: PCMS_ContentInfo; key: PByte; keylen: NativeUInt; dcont: PBIO; vout: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_EncryptedData_encrypt : function(vin: PBIO; cipher: PEVP_CIPHER; key: PByte; keylen: NativeUInt; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_EncryptedData_set1_key : function(cms: PCMS_ContentInfo; ciph: PEVP_CIPHER; key: PByte; keylen: NativeUInt): Integer; cdecl = nil;
  CMS_verify : function(cms: PCMS_ContentInfo; certs: Pstack_st_X509; store: PX509_STORE; dcont: PBIO; vout: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_verify_receipt : function(rcms: PCMS_ContentInfo; ocms: PCMS_ContentInfo; certs: Pstack_st_X509; store: PX509_STORE; flags: Cardinal): Integer; cdecl = nil;
  CMS_get0_signers : function(cms: PCMS_ContentInfo): Pstack_st_X509; cdecl = nil;
  CMS_encrypt : function(certs: Pstack_st_X509; vin: PBIO; cipher: PEVP_CIPHER; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_decrypt : function(cms: PCMS_ContentInfo; pkey: PEVP_PKEY; cert: PX509; dcont: PBIO; vout: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_decrypt_set1_pkey : function(cms: PCMS_ContentInfo; pk: PEVP_PKEY; cert: PX509): Integer; cdecl = nil;
  CMS_decrypt_set1_key : function(cms: PCMS_ContentInfo; key: PByte; keylen: NativeUInt; id: PByte; idlen: NativeUInt): Integer; cdecl = nil;
  CMS_decrypt_set1_password : function(cms: PCMS_ContentInfo; pass: PByte; passlen: Int64): Integer; cdecl = nil;
  CMS_get0_RecipientInfos : function(cms: PCMS_ContentInfo): Pstack_st_CMS_RecipientInfo; cdecl = nil;
  CMS_RecipientInfo_type : function(ri: PCMS_RecipientInfo): Integer; cdecl = nil;
  CMS_RecipientInfo_get0_pkey_ctx : function(ri: PCMS_RecipientInfo): PEVP_PKEY_CTX; cdecl = nil;
  CMS_EnvelopedData_create : function(cipher: PEVP_CIPHER): PCMS_ContentInfo; cdecl = nil;
  CMS_add1_recipient_cert : function(cms: PCMS_ContentInfo; recip: PX509; flags: Cardinal): PCMS_RecipientInfo; cdecl = nil;
  CMS_RecipientInfo_set0_pkey : function(ri: PCMS_RecipientInfo; pkey: PEVP_PKEY): Integer; cdecl = nil;
  CMS_RecipientInfo_ktri_cert_cmp : function(ri: PCMS_RecipientInfo; cert: PX509): Integer; cdecl = nil;
  CMS_RecipientInfo_ktri_get0_algs : function(ri: PCMS_RecipientInfo; pk: PPEVP_PKEY; recip: PPX509; palg: PPX509_ALGOR): Integer; cdecl = nil;
  CMS_RecipientInfo_ktri_get0_signer_id : function(ri: PCMS_RecipientInfo; keyid: PPASN1_OCTET_STRING; issuer: PPX509_NAME; sno: PPASN1_INTEGER): Integer; cdecl = nil;
  CMS_add0_recipient_key : function(cms: PCMS_ContentInfo; nid: Integer; key: PByte; keylen: NativeUInt; id: PByte; idlen: NativeUInt; date: PASN1_GENERALIZEDTIME; otherTypeId: PASN1_OBJECT; otherType: PASN1_TYPE): PCMS_RecipientInfo; cdecl = nil;
  CMS_RecipientInfo_kekri_get0_id : function(ri: PCMS_RecipientInfo; palg: PPX509_ALGOR; pid: PPASN1_OCTET_STRING; pdate: PPASN1_GENERALIZEDTIME; potherid: PPASN1_OBJECT; pothertype: PPASN1_TYPE): Integer; cdecl = nil;
  CMS_RecipientInfo_set0_key : function(ri: PCMS_RecipientInfo; key: PByte; keylen: NativeUInt): Integer; cdecl = nil;
  CMS_RecipientInfo_kekri_id_cmp : function(ri: PCMS_RecipientInfo; id: PByte; idlen: NativeUInt): Integer; cdecl = nil;
  CMS_RecipientInfo_set0_password : function(ri: PCMS_RecipientInfo; pass: PByte; passlen: Int64): Integer; cdecl = nil;
  CMS_add0_recipient_password : function(cms: PCMS_ContentInfo; iter: Integer; wrap_nid: Integer; pbe_nid: Integer; pass: PByte; passlen: Int64; kekciph: PEVP_CIPHER): PCMS_RecipientInfo; cdecl = nil;
  CMS_RecipientInfo_decrypt : function(cms: PCMS_ContentInfo; ri: PCMS_RecipientInfo): Integer; cdecl = nil;
  CMS_RecipientInfo_encrypt : function(cms: PCMS_ContentInfo; ri: PCMS_RecipientInfo): Integer; cdecl = nil;
  CMS_uncompress : function(cms: PCMS_ContentInfo; dcont: PBIO; vout: PBIO; flags: Cardinal): Integer; cdecl = nil;
  CMS_compress : function(vin: PBIO; comp_nid: Integer; flags: Cardinal): PCMS_ContentInfo; cdecl = nil;
  CMS_set1_eContentType : function(cms: PCMS_ContentInfo; oid: PASN1_OBJECT): Integer; cdecl = nil;
  CMS_get0_eContentType : function(cms: PCMS_ContentInfo): PASN1_OBJECT; cdecl = nil;
  CMS_add0_CertificateChoices : function(cms: PCMS_ContentInfo): PCMS_CertificateChoices; cdecl = nil;
  CMS_add0_cert : function(cms: PCMS_ContentInfo; cert: PX509): Integer; cdecl = nil;
  CMS_add1_cert : function(cms: PCMS_ContentInfo; cert: PX509): Integer; cdecl = nil;
  CMS_get1_certs : function(cms: PCMS_ContentInfo): Pstack_st_X509; cdecl = nil;
  CMS_add0_RevocationInfoChoice : function(cms: PCMS_ContentInfo): PCMS_RevocationInfoChoice; cdecl = nil;
  CMS_add0_crl : function(cms: PCMS_ContentInfo; crl: PX509_CRL): Integer; cdecl = nil;
  CMS_add1_crl : function(cms: PCMS_ContentInfo; crl: PX509_CRL): Integer; cdecl = nil;
  CMS_get1_crls : function(cms: PCMS_ContentInfo): Pstack_st_X509_CRL; cdecl = nil;
  CMS_SignedData_init : function(cms: PCMS_ContentInfo): Integer; cdecl = nil;
  CMS_add1_signer : function(cms: PCMS_ContentInfo; signer: PX509; pk: PEVP_PKEY; md: PEVP_MD; flags: Cardinal): PCMS_SignerInfo; cdecl = nil;
  CMS_SignerInfo_get0_pkey_ctx : function(si: PCMS_SignerInfo): PEVP_PKEY_CTX; cdecl = nil;
  CMS_SignerInfo_get0_md_ctx : function(si: PCMS_SignerInfo): PEVP_MD_CTX; cdecl = nil;
  CMS_get0_SignerInfos : function(cms: PCMS_ContentInfo): Pstack_st_CMS_SignerInfo; cdecl = nil;
  CMS_SignerInfo_set1_signer_cert : procedure(si: PCMS_SignerInfo; signer: PX509); cdecl = nil;
  CMS_SignerInfo_get0_signer_id : function(si: PCMS_SignerInfo; keyid: PPASN1_OCTET_STRING; issuer: PPX509_NAME; sno: PPASN1_INTEGER): Integer; cdecl = nil;
  CMS_SignerInfo_cert_cmp : function(si: PCMS_SignerInfo; cert: PX509): Integer; cdecl = nil;
  CMS_set1_signers_certs : function(cms: PCMS_ContentInfo; certs: Pstack_st_X509; flags: Cardinal): Integer; cdecl = nil;
  CMS_SignerInfo_get0_algs : procedure(si: PCMS_SignerInfo; pk: PPEVP_PKEY; signer: PPX509; pdig: PPX509_ALGOR; psig: PPX509_ALGOR); cdecl = nil;
  CMS_SignerInfo_get0_signature : function(si: PCMS_SignerInfo): PASN1_OCTET_STRING; cdecl = nil;
  CMS_SignerInfo_sign : function(si: PCMS_SignerInfo): Integer; cdecl = nil;
  CMS_SignerInfo_verify : function(si: PCMS_SignerInfo): Integer; cdecl = nil;
  CMS_SignerInfo_verify_content : function(si: PCMS_SignerInfo; chain: PBIO): Integer; cdecl = nil;
  CMS_add_smimecap : function(si: PCMS_SignerInfo; algs: Pstack_st_X509_ALGOR): Integer; cdecl = nil;
  CMS_add_simple_smimecap : function(algs: PPstack_st_X509_ALGOR; algnid: Integer; keysize: Integer): Integer; cdecl = nil;
  CMS_add_standard_smimecap : function(smcap: PPstack_st_X509_ALGOR): Integer; cdecl = nil;
  CMS_signed_get_attr_count : function(si: PCMS_SignerInfo): Integer; cdecl = nil;
  CMS_signed_get_attr_by_NID : function(si: PCMS_SignerInfo; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  CMS_signed_get_attr_by_OBJ : function(si: PCMS_SignerInfo; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  CMS_signed_get_attr : function(si: PCMS_SignerInfo; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  CMS_signed_delete_attr : function(si: PCMS_SignerInfo; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  CMS_signed_add1_attr : function(si: PCMS_SignerInfo; attr: PX509_ATTRIBUTE): Integer; cdecl = nil;
  CMS_signed_add1_attr_by_OBJ : function(si: PCMS_SignerInfo; obj: PASN1_OBJECT; vtype: Integer; bytes: Pointer; len: Integer): Integer; cdecl = nil;
  CMS_signed_add1_attr_by_NID : function(si: PCMS_SignerInfo; nid: Integer; vtype: Integer; bytes: Pointer; len: Integer): Integer; cdecl = nil;
  CMS_signed_add1_attr_by_txt : function(si: PCMS_SignerInfo; attrname: PUTF8Char; vtype: Integer; bytes: Pointer; len: Integer): Integer; cdecl = nil;
  CMS_signed_get0_data_by_OBJ : function(si: PCMS_SignerInfo; oid: PASN1_OBJECT; lastpos: Integer; vtype: Integer): Pointer; cdecl = nil;
  CMS_unsigned_get_attr_count : function(si: PCMS_SignerInfo): Integer; cdecl = nil;
  CMS_unsigned_get_attr_by_NID : function(si: PCMS_SignerInfo; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  CMS_unsigned_get_attr_by_OBJ : function(si: PCMS_SignerInfo; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  CMS_unsigned_get_attr : function(si: PCMS_SignerInfo; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  CMS_unsigned_delete_attr : function(si: PCMS_SignerInfo; loc: Integer): PX509_ATTRIBUTE; cdecl = nil;
  CMS_unsigned_add1_attr : function(si: PCMS_SignerInfo; attr: PX509_ATTRIBUTE): Integer; cdecl = nil;
  CMS_unsigned_add1_attr_by_OBJ : function(si: PCMS_SignerInfo; obj: PASN1_OBJECT; vtype: Integer; bytes: Pointer; len: Integer): Integer; cdecl = nil;
  CMS_unsigned_add1_attr_by_NID : function(si: PCMS_SignerInfo; nid: Integer; vtype: Integer; bytes: Pointer; len: Integer): Integer; cdecl = nil;
  CMS_unsigned_add1_attr_by_txt : function(si: PCMS_SignerInfo; attrname: PUTF8Char; vtype: Integer; bytes: Pointer; len: Integer): Integer; cdecl = nil;
  CMS_unsigned_get0_data_by_OBJ : function(si: PCMS_SignerInfo; oid: PASN1_OBJECT; lastpos: Integer; vtype: Integer): Pointer; cdecl = nil;
  CMS_get1_ReceiptRequest : function(si: PCMS_SignerInfo; prr: PPCMS_ReceiptRequest): Integer; cdecl = nil;
  CMS_ReceiptRequest_create0 : function(id: PByte; idlen: Integer; allorfirst: Integer; receiptList: Pstack_st_GENERAL_NAMES; receiptsTo: Pstack_st_GENERAL_NAMES): PCMS_ReceiptRequest; cdecl = nil;
  CMS_add1_ReceiptRequest : function(si: PCMS_SignerInfo; rr: PCMS_ReceiptRequest): Integer; cdecl = nil;
  CMS_ReceiptRequest_get0_values : procedure(rr: PCMS_ReceiptRequest; pcid: PPASN1_STRING; pallorfirst: PInteger; plist: PPstack_st_GENERAL_NAMES; prto: PPstack_st_GENERAL_NAMES); cdecl = nil;
  CMS_RecipientInfo_kari_get0_alg : function(ri: PCMS_RecipientInfo; palg: PPX509_ALGOR; pukm: PPASN1_OCTET_STRING): Integer; cdecl = nil;
  CMS_RecipientInfo_kari_get0_reks : function(ri: PCMS_RecipientInfo): Pstack_st_CMS_RecipientEncryptedKey; cdecl = nil;
  CMS_RecipientInfo_kari_get0_orig_id : function(ri: PCMS_RecipientInfo; pubalg: PPX509_ALGOR; pubkey: PPASN1_BIT_STRING; keyid: PPASN1_OCTET_STRING; issuer: PPX509_NAME; sno: PPASN1_INTEGER): Integer; cdecl = nil;
  CMS_RecipientInfo_kari_orig_id_cmp : function(ri: PCMS_RecipientInfo; cert: PX509): Integer; cdecl = nil;
  CMS_RecipientEncryptedKey_get0_id : function(rek: PCMS_RecipientEncryptedKey; keyid: PPASN1_OCTET_STRING; tm: PPASN1_GENERALIZEDTIME; other: PPCMS_OtherKeyAttribute; issuer: PPX509_NAME; sno: PPASN1_INTEGER): Integer; cdecl = nil;
  CMS_RecipientEncryptedKey_cert_cmp : function(rek: PCMS_RecipientEncryptedKey; cert: PX509): Integer; cdecl = nil;
  CMS_RecipientInfo_kari_set0_pkey : function(ri: PCMS_RecipientInfo; pk: PEVP_PKEY): Integer; cdecl = nil;
  CMS_RecipientInfo_kari_get0_ctx : function(ri: PCMS_RecipientInfo): PEVP_CIPHER_CTX; cdecl = nil;
  CMS_RecipientInfo_kari_decrypt : function(cms: PCMS_ContentInfo; ri: PCMS_RecipientInfo; rek: PCMS_RecipientEncryptedKey): Integer; cdecl = nil;
  CMS_SharedInfo_encode : function(pder: PPByte; kekalg: PX509_ALGOR; ukm: PASN1_OCTET_STRING; keylen: Integer): Integer; cdecl = nil;
  ERR_load_COMP_strings : function(): Integer; cdecl = nil;
  COMP_CTX_new : function(meth: PCOMP_METHOD): PCOMP_CTX; cdecl = nil;
  COMP_CTX_get_method : function(ctx: PCOMP_CTX): PCOMP_METHOD; cdecl = nil;
  COMP_CTX_get_type : function(comp: PCOMP_CTX): Integer; cdecl = nil;
  COMP_get_type : function(meth: PCOMP_METHOD): Integer; cdecl = nil;
  COMP_get_name : function(meth: PCOMP_METHOD): PUTF8Char; cdecl = nil;
  COMP_CTX_free : procedure(ctx: PCOMP_CTX); cdecl = nil;
  COMP_compress_block : function(ctx: PCOMP_CTX; vout: PByte; olen: Integer; vin: PByte; ilen: Integer): Integer; cdecl = nil;
  COMP_expand_block : function(ctx: PCOMP_CTX; vout: PByte; olen: Integer; vin: PByte; ilen: Integer): Integer; cdecl = nil;
  COMP_zlib : function(): PCOMP_METHOD; cdecl = nil;
  _CONF_new_section : function(conf: PCONF; section: PUTF8Char): PCONF_VALUE; cdecl = nil;
  _CONF_get_section : function(conf: PCONF; section: PUTF8Char): PCONF_VALUE; cdecl = nil;
  _CONF_get_section_values : function(conf: PCONF; section: PUTF8Char): Pstack_st_CONF_VALUE; cdecl = nil;
  _CONF_add_string : function(conf: PCONF; section: PCONF_VALUE; value: PCONF_VALUE): Integer; cdecl = nil;
  _CONF_get_string : function(conf: PCONF; section: PUTF8Char; name: PUTF8Char): PUTF8Char; cdecl = nil;
  _CONF_get_number : function(conf: PCONF; section: PUTF8Char; name: PUTF8Char): Integer; cdecl = nil;
  _CONF_new_data : function(conf: PCONF): Integer; cdecl = nil;
  _CONF_free_data : procedure(conf: PCONF); cdecl = nil;
  ERR_load_CT_strings : function(): Integer; cdecl = nil;
  CT_POLICY_EVAL_CTX_new : function(): PCT_POLICY_EVAL_CTX; cdecl = nil;
  CT_POLICY_EVAL_CTX_free : procedure(ctx: PCT_POLICY_EVAL_CTX); cdecl = nil;
  CT_POLICY_EVAL_CTX_get0_cert : function(ctx: PCT_POLICY_EVAL_CTX): PX509; cdecl = nil;
  CT_POLICY_EVAL_CTX_set1_cert : function(ctx: PCT_POLICY_EVAL_CTX; cert: PX509): Integer; cdecl = nil;
  CT_POLICY_EVAL_CTX_get0_issuer : function(ctx: PCT_POLICY_EVAL_CTX): PX509; cdecl = nil;
  CT_POLICY_EVAL_CTX_set1_issuer : function(ctx: PCT_POLICY_EVAL_CTX; issuer: PX509): Integer; cdecl = nil;
  CT_POLICY_EVAL_CTX_get0_log_store : function(ctx: PCT_POLICY_EVAL_CTX): PCTLOG_STORE; cdecl = nil;
  CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE : procedure(ctx: PCT_POLICY_EVAL_CTX; log_store: PCTLOG_STORE); cdecl = nil;
  CT_POLICY_EVAL_CTX_get_time : function(ctx: PCT_POLICY_EVAL_CTX): UInt64; cdecl = nil;
  CT_POLICY_EVAL_CTX_set_time : procedure(ctx: PCT_POLICY_EVAL_CTX; time_in_ms: UInt64); cdecl = nil;
  SCT_new : function(): PSCT; cdecl = nil;
  SCT_new_from_base64 : function(version: Byte; logid_base64: PUTF8Char; entry_type: ct_log_entry_type_t; timestamp: UInt64; extensions_base64: PUTF8Char; signature_base64: PUTF8Char): PSCT; cdecl = nil;
  SCT_free : procedure(sct: PSCT); cdecl = nil;
  SCT_LIST_free : procedure(a: Pstack_st_SCT); cdecl = nil;
  SCT_get_version : function(sct: PSCT): sct_version_t; cdecl = nil;
  SCT_set_version : function(sct: PSCT; version: sct_version_t): Integer; cdecl = nil;
  SCT_get_log_entry_type : function(sct: PSCT): ct_log_entry_type_t; cdecl = nil;
  SCT_set_log_entry_type : function(sct: PSCT; entry_type: ct_log_entry_type_t): Integer; cdecl = nil;
  SCT_get0_log_id : function(sct: PSCT; log_id: PPByte): NativeUInt; cdecl = nil;
  SCT_set0_log_id : function(sct: PSCT; log_id: PByte; log_id_len: NativeUInt): Integer; cdecl = nil;
  SCT_set1_log_id : function(sct: PSCT; log_id: PByte; log_id_len: NativeUInt): Integer; cdecl = nil;
  SCT_get_timestamp : function(sct: PSCT): UInt64; cdecl = nil;
  SCT_set_timestamp : procedure(sct: PSCT; timestamp: UInt64); cdecl = nil;
  SCT_get_signature_nid : function(sct: PSCT): Integer; cdecl = nil;
  SCT_set_signature_nid : function(sct: PSCT; nid: Integer): Integer; cdecl = nil;
  SCT_get0_extensions : function(sct: PSCT; ext: PPByte): NativeUInt; cdecl = nil;
  SCT_set0_extensions : procedure(sct: PSCT; ext: PByte; ext_len: NativeUInt); cdecl = nil;
  SCT_set1_extensions : function(sct: PSCT; ext: PByte; ext_len: NativeUInt): Integer; cdecl = nil;
  SCT_get0_signature : function(sct: PSCT; sig: PPByte): NativeUInt; cdecl = nil;
  SCT_set0_signature : procedure(sct: PSCT; sig: PByte; sig_len: NativeUInt); cdecl = nil;
  SCT_set1_signature : function(sct: PSCT; sig: PByte; sig_len: NativeUInt): Integer; cdecl = nil;
  SCT_get_source : function(sct: PSCT): sct_source_t; cdecl = nil;
  SCT_set_source : function(sct: PSCT; source: sct_source_t): Integer; cdecl = nil;
  SCT_validation_status_string : function(sct: PSCT): PUTF8Char; cdecl = nil;
  SCT_print : procedure(sct: PSCT; vout: PBIO; indent: Integer; logs: PCTLOG_STORE); cdecl = nil;
  SCT_LIST_print : procedure(sct_list: Pstack_st_SCT; vout: PBIO; indent: Integer; separator: PUTF8Char; logs: PCTLOG_STORE); cdecl = nil;
  SCT_get_validation_status : function(sct: PSCT): sct_validation_status_t; cdecl = nil;
  SCT_validate : function(sct: PSCT; ctx: PCT_POLICY_EVAL_CTX): Integer; cdecl = nil;
  SCT_LIST_validate : function(scts: Pstack_st_SCT; ctx: PCT_POLICY_EVAL_CTX): Integer; cdecl = nil;
  i2o_SCT_LIST : function(a: Pstack_st_SCT; pp: PPByte): Integer; cdecl = nil;
  o2i_SCT_LIST : function(a: PPstack_st_SCT; pp: PPByte; len: NativeUInt): Pstack_st_SCT; cdecl = nil;
  i2d_SCT_LIST : function(a: Pstack_st_SCT; pp: PPByte): Integer; cdecl = nil;
  d2i_SCT_LIST : function(a: PPstack_st_SCT; pp: PPByte; len: Integer): Pstack_st_SCT; cdecl = nil;
  i2o_SCT : function(sct: PSCT; vout: PPByte): Integer; cdecl = nil;
  o2i_SCT : function(psct: PPSCT; vin: PPByte; len: NativeUInt): PSCT; cdecl = nil;
  CTLOG_new : function(public_key: PEVP_PKEY; name: PUTF8Char): PCTLOG; cdecl = nil;
  CTLOG_new_from_base64 : function(ct_log: PPCTLOG; pkey_base64: PUTF8Char; name: PUTF8Char): Integer; cdecl = nil;
  CTLOG_free : procedure(log: PCTLOG); cdecl = nil;
  CTLOG_get0_name : function(log: PCTLOG): PUTF8Char; cdecl = nil;
  CTLOG_get0_log_id : procedure(log: PCTLOG; log_id: PPUInt8; log_id_len: PNativeUInt); cdecl = nil;
  CTLOG_get0_public_key : function(log: PCTLOG): PEVP_PKEY; cdecl = nil;
  CTLOG_STORE_new : function(): PCTLOG_STORE; cdecl = nil;
  CTLOG_STORE_free : procedure(store: PCTLOG_STORE); cdecl = nil;
  CTLOG_STORE_get0_log_by_id : function(store: PCTLOG_STORE; log_id: PUInt8; log_id_len: NativeUInt): PCTLOG; cdecl = nil;
  CTLOG_STORE_load_file : function(store: PCTLOG_STORE; vfile: PUTF8Char): Integer; cdecl = nil;
  CTLOG_STORE_load_default_file : function(store: PCTLOG_STORE): Integer; cdecl = nil;
  _shadow_DES_check_key : function(): PInteger; cdecl = nil;
  DES_options : function(): PUTF8Char; cdecl = nil;
  DES_ecb3_encrypt : procedure(input: Pconst_DES_cblock; output: PDES_cblock; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule; enc: Integer); cdecl = nil;
  DES_cbc_cksum : function(input: PByte; output: PDES_cblock; length: Integer; schedule: PDES_key_schedule; ivec: Pconst_DES_cblock): DES_LONG; cdecl = nil;
  DES_cbc_encrypt : procedure(input: PByte; output: PByte; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; enc: Integer); cdecl = nil;
  DES_ncbc_encrypt : procedure(input: PByte; output: PByte; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; enc: Integer); cdecl = nil;
  DES_xcbc_encrypt : procedure(input: PByte; output: PByte; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; inw: Pconst_DES_cblock; outw: Pconst_DES_cblock; enc: Integer); cdecl = nil;
  DES_cfb_encrypt : procedure(vin: PByte; vout: PByte; numbits: Integer; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; enc: Integer); cdecl = nil;
  DES_ecb_encrypt : procedure(input: Pconst_DES_cblock; output: PDES_cblock; ks: PDES_key_schedule; enc: Integer); cdecl = nil;
  DES_encrypt1 : procedure(data: PDES_LONG; ks: PDES_key_schedule; enc: Integer); cdecl = nil;
  DES_encrypt2 : procedure(data: PDES_LONG; ks: PDES_key_schedule; enc: Integer); cdecl = nil;
  DES_encrypt3 : procedure(data: PDES_LONG; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule); cdecl = nil;
  DES_decrypt3 : procedure(data: PDES_LONG; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule); cdecl = nil;
  DES_ede3_cbc_encrypt : procedure(input: PByte; output: PByte; length: Integer; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule; ivec: PDES_cblock; enc: Integer); cdecl = nil;
  DES_ede3_cfb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule; ivec: PDES_cblock; num: PInteger; enc: Integer); cdecl = nil;
  DES_ede3_cfb_encrypt : procedure(vin: PByte; vout: PByte; numbits: Integer; length: Integer; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule; ivec: PDES_cblock; enc: Integer); cdecl = nil;
  DES_ede3_ofb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ks3: PDES_key_schedule; ivec: PDES_cblock; num: PInteger); cdecl = nil;
  DES_fcrypt : function(buf: PUTF8Char; salt: PUTF8Char; ret: PUTF8Char): PUTF8Char; cdecl = nil;
  DES_crypt : function(buf: PUTF8Char; salt: PUTF8Char): PUTF8Char; cdecl = nil;
  DES_ofb_encrypt : procedure(vin: PByte; vout: PByte; numbits: Integer; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock); cdecl = nil;
  DES_pcbc_encrypt : procedure(input: PByte; output: PByte; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; enc: Integer); cdecl = nil;
  DES_quad_cksum : function(input: PByte; output: PDES_cblock; length: Integer; out_count: Integer; seed: PDES_cblock): DES_LONG; cdecl = nil;
  DES_random_key : function(ret: PDES_cblock): Integer; cdecl = nil;
  DES_set_odd_parity : procedure(key: PDES_cblock); cdecl = nil;
  DES_fixup_key_parity : procedure(key: PDES_cblock); cdecl = nil;
  DES_check_key_parity : function(key: Pconst_DES_cblock): Integer; cdecl = nil;
  DES_is_weak_key : function(key: Pconst_DES_cblock): Integer; cdecl = nil;
  DES_set_key : function(key: Pconst_DES_cblock; schedule: PDES_key_schedule): Integer; cdecl = nil;
  DES_key_sched : function(key: Pconst_DES_cblock; schedule: PDES_key_schedule): Integer; cdecl = nil;
  DES_set_key_checked : function(key: Pconst_DES_cblock; schedule: PDES_key_schedule): Integer; cdecl = nil;
  DES_set_key_unchecked : procedure(key: Pconst_DES_cblock; schedule: PDES_key_schedule); cdecl = nil;
  DES_string_to_key : procedure(str: PUTF8Char; key: PDES_cblock); cdecl = nil;
  DES_string_to_2keys : procedure(str: PUTF8Char; key1: PDES_cblock; key2: PDES_cblock); cdecl = nil;
  DES_cfb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; num: PInteger; enc: Integer); cdecl = nil;
  DES_ofb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PDES_key_schedule; ivec: PDES_cblock; num: PInteger); cdecl = nil;
  _openssl_ebcdic2ascii : function(dest: Pointer; srce: Pointer; count: NativeUInt): Pointer; cdecl = nil;
  _openssl_ascii2ebcdic : function(dest: Pointer; srce: Pointer; count: NativeUInt): Pointer; cdecl = nil;
  ERR_load_RAND_strings : function(): Integer; cdecl = nil;
  RAND_set_rand_method : function(meth: PRAND_METHOD): Integer; cdecl = nil;
  RAND_get_rand_method : function(): PRAND_METHOD; cdecl = nil;
  RAND_set_rand_engine : function(engine: PENGINE): Integer; cdecl = nil;
  RAND_OpenSSL : function(): PRAND_METHOD; cdecl = nil;
  RAND_bytes : function(buf: PByte; num: Integer): Integer; cdecl = nil;
  RAND_priv_bytes : function(buf: PByte; num: Integer): Integer; cdecl = nil;
  RAND_pseudo_bytes : function(buf: PByte; num: Integer): Integer; cdecl = nil;
  RAND_seed : procedure(buf: Pointer; num: Integer); cdecl = nil;
  RAND_keep_random_devices_open : procedure(keep: Integer); cdecl = nil;
  RAND_add : procedure(buf: Pointer; num: Integer; randomness: Double); cdecl = nil;
  RAND_load_file : function(vfile: PUTF8Char; max_bytes: Integer): Integer; cdecl = nil;
  RAND_write_file : function(vfile: PUTF8Char): Integer; cdecl = nil;
  RAND_file_name : function(vfile: PUTF8Char; num: NativeUInt): PUTF8Char; cdecl = nil;
  RAND_status : function(): Integer; cdecl = nil;
  RAND_poll : function(): Integer; cdecl = nil;
  ERR_load_PEM_strings : function(): Integer; cdecl = nil;
  PEM_get_EVP_CIPHER_INFO : function(header: PUTF8Char; cipher: PEVP_CIPHER_INFO): Integer; cdecl = nil;
  PEM_do_header : function(cipher: PEVP_CIPHER_INFO; data: PByte; len: PInteger; callback: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read_bio : function(bp: PBIO; name: PPUTF8Char; header: PPUTF8Char; data: PPByte; len: PInteger): Integer; cdecl = nil;
  PEM_read_bio_ex : function(bp: PBIO; name: PPUTF8Char; header: PPUTF8Char; data: PPByte; len: PInteger; flags: Cardinal): Integer; cdecl = nil;
  PEM_bytes_read_bio_secmem : function(pdata: PPByte; plen: PInteger; pnm: PPUTF8Char; name: PUTF8Char; bp: PBIO; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_bio : function(bp: PBIO; name: PUTF8Char; hdr: PUTF8Char; data: PByte; len: Integer): Integer; cdecl = nil;
  PEM_bytes_read_bio : function(pdata: PPByte; plen: PInteger; pnm: PPUTF8Char; name: PUTF8Char; bp: PBIO; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_ASN1_read_bio : function(d2i: Pd2i_of_void; name: PUTF8Char; bp: PBIO; x: PPointer; cb: Ppem_password_cb; u: Pointer): Pointer; cdecl = nil;
  PEM_ASN1_write_bio : function(i2d: Pi2d_of_void; name: PUTF8Char; bp: PBIO; x: Pointer; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_X509_INFO_read_bio : function(bp: PBIO; sk: Pstack_st_X509_INFO; cb: Ppem_password_cb; u: Pointer): Pstack_st_X509_INFO; cdecl = nil;
  PEM_X509_INFO_write_bio : function(bp: PBIO; xi: PX509_INFO; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cd: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read : function(fp: PPointer; name: PPUTF8Char; header: PPUTF8Char; data: PPByte; len: PInteger): Integer; cdecl = nil;
  PEM_write : function(fp: PPointer; name: PUTF8Char; hdr: PUTF8Char; data: PByte; len: Integer): Integer; cdecl = nil;
  PEM_ASN1_read : function(d2i: Pd2i_of_void; name: PUTF8Char; fp: PPointer; x: PPointer; cb: Ppem_password_cb; u: Pointer): Pointer; cdecl = nil;
  PEM_ASN1_write : function(i2d: Pi2d_of_void; name: PUTF8Char; fp: PPointer; x: Pointer; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; callback: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_X509_INFO_read : function(fp: PPointer; sk: Pstack_st_X509_INFO; cb: Ppem_password_cb; u: Pointer): Pstack_st_X509_INFO; cdecl = nil;
  PEM_SignInit : function(ctx: PEVP_MD_CTX; vtype: PEVP_MD): Integer; cdecl = nil;
  PEM_SignUpdate : function(ctx: PEVP_MD_CTX; d: PByte; cnt: Cardinal): Integer; cdecl = nil;
  PEM_SignFinal : function(ctx: PEVP_MD_CTX; sigret: PByte; siglen: PCardinal; pkey: PEVP_PKEY): Integer; cdecl = nil;
  PEM_def_callback : function(buf: PUTF8Char; num: Integer; rwflag: Integer; userdata: Pointer): Integer; cdecl = nil;
  PEM_proc_type : procedure(buf: PUTF8Char; vtype: Integer); cdecl = nil;
  PEM_dek_info : procedure(buf: PUTF8Char; vtype: PUTF8Char; len: Integer; str: PUTF8Char); cdecl = nil;
  PEM_read_bio_X509 : function(bp: PBIO; x: PPX509; cb: Ppem_password_cb; u: Pointer): PX509; cdecl = nil;
  PEM_read_X509 : function(fp: PPointer; x: PPX509; cb: Ppem_password_cb; u: Pointer): PX509; cdecl = nil;
  PEM_write_bio_X509 : function(bp: PBIO; x: PX509): Integer; cdecl = nil;
  PEM_write_X509 : function(fp: PPointer; x: PX509): Integer; cdecl = nil;
  PEM_read_bio_X509_AUX : function(bp: PBIO; x: PPX509; cb: Ppem_password_cb; u: Pointer): PX509; cdecl = nil;
  PEM_read_X509_AUX : function(fp: PPointer; x: PPX509; cb: Ppem_password_cb; u: Pointer): PX509; cdecl = nil;
  PEM_write_bio_X509_AUX : function(bp: PBIO; x: PX509): Integer; cdecl = nil;
  PEM_write_X509_AUX : function(fp: PPointer; x: PX509): Integer; cdecl = nil;
  PEM_read_bio_X509_REQ : function(bp: PBIO; x: PPX509_REQ; cb: Ppem_password_cb; u: Pointer): PX509_REQ; cdecl = nil;
  PEM_read_X509_REQ : function(fp: PPointer; x: PPX509_REQ; cb: Ppem_password_cb; u: Pointer): PX509_REQ; cdecl = nil;
  PEM_write_bio_X509_REQ : function(bp: PBIO; x: PX509_REQ): Integer; cdecl = nil;
  PEM_write_X509_REQ : function(fp: PPointer; x: PX509_REQ): Integer; cdecl = nil;
  PEM_write_bio_X509_REQ_NEW : function(bp: PBIO; x: PX509_REQ): Integer; cdecl = nil;
  PEM_write_X509_REQ_NEW : function(fp: PPointer; x: PX509_REQ): Integer; cdecl = nil;
  PEM_read_bio_X509_CRL : function(bp: PBIO; x: PPX509_CRL; cb: Ppem_password_cb; u: Pointer): PX509_CRL; cdecl = nil;
  PEM_read_X509_CRL : function(fp: PPointer; x: PPX509_CRL; cb: Ppem_password_cb; u: Pointer): PX509_CRL; cdecl = nil;
  PEM_write_bio_X509_CRL : function(bp: PBIO; x: PX509_CRL): Integer; cdecl = nil;
  PEM_write_X509_CRL : function(fp: PPointer; x: PX509_CRL): Integer; cdecl = nil;
  PEM_read_bio_PKCS7 : function(bp: PBIO; x: PPPKCS7; cb: Ppem_password_cb; u: Pointer): PPKCS7; cdecl = nil;
  PEM_read_PKCS7 : function(fp: PPointer; x: PPPKCS7; cb: Ppem_password_cb; u: Pointer): PPKCS7; cdecl = nil;
  PEM_write_bio_PKCS7 : function(bp: PBIO; x: PPKCS7): Integer; cdecl = nil;
  PEM_write_PKCS7 : function(fp: PPointer; x: PPKCS7): Integer; cdecl = nil;
  PEM_read_bio_NETSCAPE_CERT_SEQUENCE : function(bp: PBIO; x: PPNETSCAPE_CERT_SEQUENCE; cb: Ppem_password_cb; u: Pointer): PNETSCAPE_CERT_SEQUENCE; cdecl = nil;
  PEM_read_NETSCAPE_CERT_SEQUENCE : function(fp: PPointer; x: PPNETSCAPE_CERT_SEQUENCE; cb: Ppem_password_cb; u: Pointer): PNETSCAPE_CERT_SEQUENCE; cdecl = nil;
  PEM_write_bio_NETSCAPE_CERT_SEQUENCE : function(bp: PBIO; x: PNETSCAPE_CERT_SEQUENCE): Integer; cdecl = nil;
  PEM_write_NETSCAPE_CERT_SEQUENCE : function(fp: PPointer; x: PNETSCAPE_CERT_SEQUENCE): Integer; cdecl = nil;
  PEM_read_bio_PKCS8 : function(bp: PBIO; x: PPX509_SIG; cb: Ppem_password_cb; u: Pointer): PX509_SIG; cdecl = nil;
  PEM_read_PKCS8 : function(fp: PPointer; x: PPX509_SIG; cb: Ppem_password_cb; u: Pointer): PX509_SIG; cdecl = nil;
  PEM_write_bio_PKCS8 : function(bp: PBIO; x: PX509_SIG): Integer; cdecl = nil;
  PEM_write_PKCS8 : function(fp: PPointer; x: PX509_SIG): Integer; cdecl = nil;
  PEM_read_bio_PKCS8_PRIV_KEY_INFO : function(bp: PBIO; x: PPPKCS8_PRIV_KEY_INFO; cb: Ppem_password_cb; u: Pointer): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PEM_read_PKCS8_PRIV_KEY_INFO : function(fp: PPointer; x: PPPKCS8_PRIV_KEY_INFO; cb: Ppem_password_cb; u: Pointer): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PEM_write_bio_PKCS8_PRIV_KEY_INFO : function(bp: PBIO; x: PPKCS8_PRIV_KEY_INFO): Integer; cdecl = nil;
  PEM_write_PKCS8_PRIV_KEY_INFO : function(fp: PPointer; x: PPKCS8_PRIV_KEY_INFO): Integer; cdecl = nil;
  PEM_read_bio_RSAPrivateKey : function(bp: PBIO; x: PPRSA; cb: Ppem_password_cb; u: Pointer): PRSA; cdecl = nil;
  PEM_read_RSAPrivateKey : function(fp: PPointer; x: PPRSA; cb: Ppem_password_cb; u: Pointer): PRSA; cdecl = nil;
  PEM_write_bio_RSAPrivateKey : function(bp: PBIO; x: PRSA; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_RSAPrivateKey : function(fp: PPointer; x: PRSA; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read_bio_RSAPublicKey : function(bp: PBIO; x: PPRSA; cb: Ppem_password_cb; u: Pointer): PRSA; cdecl = nil;
  PEM_read_RSAPublicKey : function(fp: PPointer; x: PPRSA; cb: Ppem_password_cb; u: Pointer): PRSA; cdecl = nil;
  PEM_write_bio_RSAPublicKey : function(bp: PBIO; x: PRSA): Integer; cdecl = nil;
  PEM_write_RSAPublicKey : function(fp: PPointer; x: PRSA): Integer; cdecl = nil;
  PEM_read_bio_RSA_PUBKEY : function(bp: PBIO; x: PPRSA; cb: Ppem_password_cb; u: Pointer): PRSA; cdecl = nil;
  PEM_read_RSA_PUBKEY : function(fp: PPointer; x: PPRSA; cb: Ppem_password_cb; u: Pointer): PRSA; cdecl = nil;
  PEM_write_bio_RSA_PUBKEY : function(bp: PBIO; x: PRSA): Integer; cdecl = nil;
  PEM_write_RSA_PUBKEY : function(fp: PPointer; x: PRSA): Integer; cdecl = nil;
  PEM_read_bio_DSAPrivateKey : function(bp: PBIO; x: PPDSA; cb: Ppem_password_cb; u: Pointer): PDSA; cdecl = nil;
  PEM_read_DSAPrivateKey : function(fp: PPointer; x: PPDSA; cb: Ppem_password_cb; u: Pointer): PDSA; cdecl = nil;
  PEM_write_bio_DSAPrivateKey : function(bp: PBIO; x: PDSA; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_DSAPrivateKey : function(fp: PPointer; x: PDSA; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read_bio_DSA_PUBKEY : function(bp: PBIO; x: PPDSA; cb: Ppem_password_cb; u: Pointer): PDSA; cdecl = nil;
  PEM_read_DSA_PUBKEY : function(fp: PPointer; x: PPDSA; cb: Ppem_password_cb; u: Pointer): PDSA; cdecl = nil;
  PEM_write_bio_DSA_PUBKEY : function(bp: PBIO; x: PDSA): Integer; cdecl = nil;
  PEM_write_DSA_PUBKEY : function(fp: PPointer; x: PDSA): Integer; cdecl = nil;
  PEM_read_bio_DSAparams : function(bp: PBIO; x: PPDSA; cb: Ppem_password_cb; u: Pointer): PDSA; cdecl = nil;
  PEM_read_DSAparams : function(fp: PPointer; x: PPDSA; cb: Ppem_password_cb; u: Pointer): PDSA; cdecl = nil;
  PEM_write_bio_DSAparams : function(bp: PBIO; x: PDSA): Integer; cdecl = nil;
  PEM_write_DSAparams : function(fp: PPointer; x: PDSA): Integer; cdecl = nil;
  PEM_read_bio_ECPKParameters : function(bp: PBIO; x: PPEC_GROUP; cb: Ppem_password_cb; u: Pointer): PEC_GROUP; cdecl = nil;
  PEM_read_ECPKParameters : function(fp: PPointer; x: PPEC_GROUP; cb: Ppem_password_cb; u: Pointer): PEC_GROUP; cdecl = nil;
  PEM_write_bio_ECPKParameters : function(bp: PBIO; x: PEC_GROUP): Integer; cdecl = nil;
  PEM_write_ECPKParameters : function(fp: PPointer; x: PEC_GROUP): Integer; cdecl = nil;
  PEM_read_bio_ECPrivateKey : function(bp: PBIO; x: PPEC_KEY; cb: Ppem_password_cb; u: Pointer): PEC_KEY; cdecl = nil;
  PEM_read_ECPrivateKey : function(fp: PPointer; x: PPEC_KEY; cb: Ppem_password_cb; u: Pointer): PEC_KEY; cdecl = nil;
  PEM_write_bio_ECPrivateKey : function(bp: PBIO; x: PEC_KEY; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_ECPrivateKey : function(fp: PPointer; x: PEC_KEY; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read_bio_EC_PUBKEY : function(bp: PBIO; x: PPEC_KEY; cb: Ppem_password_cb; u: Pointer): PEC_KEY; cdecl = nil;
  PEM_read_EC_PUBKEY : function(fp: PPointer; x: PPEC_KEY; cb: Ppem_password_cb; u: Pointer): PEC_KEY; cdecl = nil;
  PEM_write_bio_EC_PUBKEY : function(bp: PBIO; x: PEC_KEY): Integer; cdecl = nil;
  PEM_write_EC_PUBKEY : function(fp: PPointer; x: PEC_KEY): Integer; cdecl = nil;
  PEM_read_bio_DHparams : function(bp: PBIO; x: PPDH; cb: Ppem_password_cb; u: Pointer): PDH; cdecl = nil;
  PEM_read_DHparams : function(fp: PPointer; x: PPDH; cb: Ppem_password_cb; u: Pointer): PDH; cdecl = nil;
  PEM_write_bio_DHparams : function(bp: PBIO; x: PDH): Integer; cdecl = nil;
  PEM_write_DHparams : function(fp: PPointer; x: PDH): Integer; cdecl = nil;
  PEM_write_bio_DHxparams : function(bp: PBIO; x: PDH): Integer; cdecl = nil;
  PEM_write_DHxparams : function(fp: PPointer; x: PDH): Integer; cdecl = nil;
  PEM_read_bio_PrivateKey : function(bp: PBIO; x: PPEVP_PKEY; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  PEM_read_PrivateKey : function(fp: PPointer; x: PPEVP_PKEY; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  PEM_write_bio_PrivateKey : function(bp: PBIO; x: PEVP_PKEY; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_PrivateKey : function(fp: PPointer; x: PEVP_PKEY; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read_bio_PUBKEY : function(bp: PBIO; x: PPEVP_PKEY; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  PEM_read_PUBKEY : function(fp: PPointer; x: PPEVP_PKEY; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  PEM_write_bio_PUBKEY : function(bp: PBIO; x: PEVP_PKEY): Integer; cdecl = nil;
  PEM_write_PUBKEY : function(fp: PPointer; x: PEVP_PKEY): Integer; cdecl = nil;
  PEM_write_bio_PrivateKey_traditional : function(bp: PBIO; x: PEVP_PKEY; enc: PEVP_CIPHER; kstr: PByte; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_bio_PKCS8PrivateKey_nid : function(bp: PBIO; x: PEVP_PKEY; nid: Integer; kstr: PUTF8Char; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_bio_PKCS8PrivateKey : function(p1: PBIO; p2: PEVP_PKEY; p3: PEVP_CIPHER; p4: PUTF8Char; p5: Integer; p6: Ppem_password_cb; p7: Pointer): Integer; cdecl = nil;
  i2d_PKCS8PrivateKey_bio : function(bp: PBIO; x: PEVP_PKEY; enc: PEVP_CIPHER; kstr: PUTF8Char; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  i2d_PKCS8PrivateKey_nid_bio : function(bp: PBIO; x: PEVP_PKEY; nid: Integer; kstr: PUTF8Char; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  d2i_PKCS8PrivateKey_bio : function(bp: PBIO; x: PPEVP_PKEY; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  i2d_PKCS8PrivateKey_fp : function(fp: PPointer; x: PEVP_PKEY; enc: PEVP_CIPHER; kstr: PUTF8Char; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  i2d_PKCS8PrivateKey_nid_fp : function(fp: PPointer; x: PEVP_PKEY; nid: Integer; kstr: PUTF8Char; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_write_PKCS8PrivateKey_nid : function(fp: PPointer; x: PEVP_PKEY; nid: Integer; kstr: PUTF8Char; klen: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  d2i_PKCS8PrivateKey_fp : function(fp: PPointer; x: PPEVP_PKEY; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  PEM_write_PKCS8PrivateKey : function(fp: PPointer; x: PEVP_PKEY; enc: PEVP_CIPHER; kstr: PUTF8Char; klen: Integer; cd: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  PEM_read_bio_Parameters : function(bp: PBIO; x: PPEVP_PKEY): PEVP_PKEY; cdecl = nil;
  PEM_write_bio_Parameters : function(bp: PBIO; x: PEVP_PKEY): Integer; cdecl = nil;
  b2i_PrivateKey : function(vin: PPByte; length: Integer): PEVP_PKEY; cdecl = nil;
  b2i_PublicKey : function(vin: PPByte; length: Integer): PEVP_PKEY; cdecl = nil;
  b2i_PrivateKey_bio : function(vin: PBIO): PEVP_PKEY; cdecl = nil;
  b2i_PublicKey_bio : function(vin: PBIO): PEVP_PKEY; cdecl = nil;
  i2b_PrivateKey_bio : function(vout: PBIO; pk: PEVP_PKEY): Integer; cdecl = nil;
  i2b_PublicKey_bio : function(vout: PBIO; pk: PEVP_PKEY): Integer; cdecl = nil;
  b2i_PVK_bio : function(vin: PBIO; cb: Ppem_password_cb; u: Pointer): PEVP_PKEY; cdecl = nil;
  i2b_PVK_bio : function(vout: PBIO; pk: PEVP_PKEY; enclevel: Integer; cb: Ppem_password_cb; u: Pointer): Integer; cdecl = nil;
  ERR_load_UI_strings : function(): Integer; cdecl = nil;
  UI_new : function(): PUI; cdecl = nil;
  UI_new_method : function(method: PUI_METHOD): PUI; cdecl = nil;
  UI_free : procedure(ui: PUI); cdecl = nil;
  UI_add_input_string : function(ui: PUI; prompt: PUTF8Char; flags: Integer; result_buf: PUTF8Char; minsize: Integer; maxsize: Integer): Integer; cdecl = nil;
  UI_dup_input_string : function(ui: PUI; prompt: PUTF8Char; flags: Integer; result_buf: PUTF8Char; minsize: Integer; maxsize: Integer): Integer; cdecl = nil;
  UI_add_verify_string : function(ui: PUI; prompt: PUTF8Char; flags: Integer; result_buf: PUTF8Char; minsize: Integer; maxsize: Integer; test_buf: PUTF8Char): Integer; cdecl = nil;
  UI_dup_verify_string : function(ui: PUI; prompt: PUTF8Char; flags: Integer; result_buf: PUTF8Char; minsize: Integer; maxsize: Integer; test_buf: PUTF8Char): Integer; cdecl = nil;
  UI_add_input_boolean : function(ui: PUI; prompt: PUTF8Char; action_desc: PUTF8Char; ok_chars: PUTF8Char; cancel_chars: PUTF8Char; flags: Integer; result_buf: PUTF8Char): Integer; cdecl = nil;
  UI_dup_input_boolean : function(ui: PUI; prompt: PUTF8Char; action_desc: PUTF8Char; ok_chars: PUTF8Char; cancel_chars: PUTF8Char; flags: Integer; result_buf: PUTF8Char): Integer; cdecl = nil;
  UI_add_info_string : function(ui: PUI; text: PUTF8Char): Integer; cdecl = nil;
  UI_dup_info_string : function(ui: PUI; text: PUTF8Char): Integer; cdecl = nil;
  UI_add_error_string : function(ui: PUI; text: PUTF8Char): Integer; cdecl = nil;
  UI_dup_error_string : function(ui: PUI; text: PUTF8Char): Integer; cdecl = nil;
  UI_construct_prompt : function(ui_method: PUI; object_desc: PUTF8Char; object_name: PUTF8Char): PUTF8Char; cdecl = nil;
  UI_add_user_data : function(ui: PUI; user_data: Pointer): Pointer; cdecl = nil;
  UI_dup_user_data : function(ui: PUI; user_data: Pointer): Integer; cdecl = nil;
  UI_get0_user_data : function(ui: PUI): Pointer; cdecl = nil;
  UI_get0_result : function(ui: PUI; i: Integer): PUTF8Char; cdecl = nil;
  UI_get_result_length : function(ui: PUI; i: Integer): Integer; cdecl = nil;
  UI_process : function(ui: PUI): Integer; cdecl = nil;
  UI_ctrl : function(ui: PUI; cmd: Integer; i: Integer; p: Pointer; f: UI_ctrl_f): Integer; cdecl = nil;
  UI_set_ex_data : function(r: PUI; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  UI_get_ex_data : function(r: PUI; idx: Integer): Pointer; cdecl = nil;
  UI_set_default_method : procedure(meth: PUI_METHOD); cdecl = nil;
  UI_get_default_method : function(): PUI_METHOD; cdecl = nil;
  UI_get_method : function(ui: PUI): PUI_METHOD; cdecl = nil;
  UI_set_method : function(ui: PUI; meth: PUI_METHOD): PUI_METHOD; cdecl = nil;
  UI_OpenSSL : function(): PUI_METHOD; cdecl = nil;
  UI_null : function(): PUI_METHOD; cdecl = nil;
  UI_create_method : function(name: PUTF8Char): PUI_METHOD; cdecl = nil;
  UI_destroy_method : procedure(ui_method: PUI_METHOD); cdecl = nil;
  UI_method_set_opener : function(method: PUI_METHOD; opener: UI_method_set_opener_opener): Integer; cdecl = nil;
  UI_method_set_writer : function(method: PUI_METHOD; writer: UI_method_set_writer_writer): Integer; cdecl = nil;
  UI_method_set_flusher : function(method: PUI_METHOD; flusher: UI_method_set_flusher_flusher): Integer; cdecl = nil;
  UI_method_set_reader : function(method: PUI_METHOD; reader: UI_method_set_reader_reader): Integer; cdecl = nil;
  UI_method_set_closer : function(method: PUI_METHOD; closer: UI_method_set_closer_closer): Integer; cdecl = nil;
  UI_method_set_data_duplicator : function(method: PUI_METHOD; duplicator: UI_method_set_data_duplicator_duplicator; vdestructor: UI_method_set_data_duplicator_destructor): Integer; cdecl = nil;
  UI_method_set_prompt_constructor : function(method: PUI_METHOD; prompt_constructor: UI_method_set_prompt_constructor_prompt_constructor): Integer; cdecl = nil;
  UI_method_set_ex_data : function(method: PUI_METHOD; idx: Integer; data: Pointer): Integer; cdecl = nil;

//  UI_method_get_opener : function(p1: PUImethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_writer : function(p1: PUIp2: PUI_STRINGmethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_flusher : function(p1: PUImethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_reader : function(p1: PUIp2: PUI_STRINGmethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_closer : function(p1: PUImethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_prompt_constructor : function(p1: PUIp2: PUTF8Charp3: PUTF8Charmethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_data_duplicator : function(p1: PUIp2: Pointermethod: PUI_METHOD): Integer; cdecl = nil;
//  UI_method_get_data_destructor : function(p1: PUIp2: Pointermethod: PUI_METHOD): Integer; cdecl = nil;
  UI_method_get_ex_data : function(method: PUI_METHOD; idx: Integer): Pointer; cdecl = nil;
  UI_get_string_type : function(uis: PUI_STRING): UI_string_types; cdecl = nil;
  UI_get_input_flags : function(uis: PUI_STRING): Integer; cdecl = nil;
  UI_get0_output_string : function(uis: PUI_STRING): PUTF8Char; cdecl = nil;
  UI_get0_action_string : function(uis: PUI_STRING): PUTF8Char; cdecl = nil;
  UI_get0_result_string : function(uis: PUI_STRING): PUTF8Char; cdecl = nil;
  UI_get_result_string_length : function(uis: PUI_STRING): Integer; cdecl = nil;
  UI_get0_test_string : function(uis: PUI_STRING): PUTF8Char; cdecl = nil;
  UI_get_result_minsize : function(uis: PUI_STRING): Integer; cdecl = nil;
  UI_get_result_maxsize : function(uis: PUI_STRING): Integer; cdecl = nil;
  UI_set_result : function(ui: PUI; uis: PUI_STRING; result: PUTF8Char): Integer; cdecl = nil;
  UI_set_result_ex : function(ui: PUI; uis: PUI_STRING; result: PUTF8Char; len: Integer): Integer; cdecl = nil;
  UI_UTIL_read_pw_string : function(buf: PUTF8Char; length: Integer; prompt: PUTF8Char; verify: Integer): Integer; cdecl = nil;
  UI_UTIL_read_pw : function(buf: PUTF8Char; buff: PUTF8Char; size: Integer; prompt: PUTF8Char; verify: Integer): Integer; cdecl = nil;
  UI_UTIL_wrap_read_pem_callback : function(cb: Ppem_password_cb; rwflag: Integer): PUI_METHOD; cdecl = nil;
  ERR_put_error : procedure(lib: Integer; func: Integer; reason: Integer; vfile: PUTF8Char; line: Integer); cdecl = nil;
  ERR_set_error_data : procedure(data: PUTF8Char; flags: Integer); cdecl = nil;
  ERR_get_error : function(): Cardinal; cdecl = nil;
  ERR_get_error_line : function(vfile: PPUTF8Char; line: PInteger): Cardinal; cdecl = nil;
  ERR_get_error_line_data : function(vfile: PPUTF8Char; line: PInteger; data: PPUTF8Char; flags: PInteger): Cardinal; cdecl = nil;
  ERR_peek_error : function(): Cardinal; cdecl = nil;
  ERR_peek_error_line : function(vfile: PPUTF8Char; line: PInteger): Cardinal; cdecl = nil;
  ERR_peek_error_line_data : function(vfile: PPUTF8Char; line: PInteger; data: PPUTF8Char; flags: PInteger): Cardinal; cdecl = nil;
  ERR_peek_last_error : function(): Cardinal; cdecl = nil;
  ERR_peek_last_error_line : function(vfile: PPUTF8Char; line: PInteger): Cardinal; cdecl = nil;
  ERR_peek_last_error_line_data : function(vfile: PPUTF8Char; line: PInteger; data: PPUTF8Char; flags: PInteger): Cardinal; cdecl = nil;
  ERR_clear_error : procedure(); cdecl = nil;
  ERR_error_string : function(e: Cardinal; buf: PUTF8Char): PUTF8Char; cdecl = nil;
  ERR_error_string_n : procedure(e: Cardinal; buf: PUTF8Char; len: NativeUInt); cdecl = nil;
  ERR_lib_error_string : function(e: Cardinal): PUTF8Char; cdecl = nil;
  ERR_func_error_string : function(e: Cardinal): PUTF8Char; cdecl = nil;
  ERR_reason_error_string : function(e: Cardinal): PUTF8Char; cdecl = nil;
  ERR_print_errors_cb : procedure(cb: ERR_print_errors_cb_cb; u: Pointer); cdecl = nil;
  ERR_print_errors_fp : procedure(fp: PPointer); cdecl = nil;
  ERR_print_errors : procedure(bp: PBIO); cdecl = nil;
  ERR_add_error_data : procedure(num: Integer)varargs; cdecl = nil;
  ERR_add_error_vdata : procedure(num: Integer; args: Pointer); cdecl = nil;
  ERR_load_strings : function(lib: Integer; str: PERR_STRING_DATA): Integer; cdecl = nil;
  ERR_load_strings_const : function(str: PERR_STRING_DATA): Integer; cdecl = nil;
  ERR_unload_strings : function(lib: Integer; str: PERR_STRING_DATA): Integer; cdecl = nil;
  ERR_load_ERR_strings : function(): Integer; cdecl = nil;
  ERR_remove_thread_state : procedure(p1: Pointer); cdecl = nil;
  ERR_remove_state : procedure(pid: Cardinal); cdecl = nil;
  ERR_get_state : function(): PERR_STATE; cdecl = nil;
  ERR_get_next_error_library : function(): Integer; cdecl = nil;
  ERR_set_mark : function(): Integer; cdecl = nil;
  ERR_pop_to_mark : function(): Integer; cdecl = nil;
  ERR_clear_last_mark : function(): Integer; cdecl = nil;
  ERR_load_ENGINE_strings : function(): Integer; cdecl = nil;
  ENGINE_get_first : function(): PENGINE; cdecl = nil;
  ENGINE_get_last : function(): PENGINE; cdecl = nil;
  ENGINE_get_next : function(e: PENGINE): PENGINE; cdecl = nil;
  ENGINE_get_prev : function(e: PENGINE): PENGINE; cdecl = nil;
  ENGINE_add : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_remove : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_by_id : function(id: PUTF8Char): PENGINE; cdecl = nil;
  ENGINE_load_builtin_engines : procedure(); cdecl = nil;
  ENGINE_get_table_flags : function(): Cardinal; cdecl = nil;
  ENGINE_set_table_flags : procedure(flags: Cardinal); cdecl = nil;
  ENGINE_register_RSA : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_RSA : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_RSA : procedure(); cdecl = nil;
  ENGINE_register_DSA : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_DSA : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_DSA : procedure(); cdecl = nil;
  ENGINE_register_EC : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_EC : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_EC : procedure(); cdecl = nil;
  ENGINE_register_DH : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_DH : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_DH : procedure(); cdecl = nil;
  ENGINE_register_RAND : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_RAND : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_RAND : procedure(); cdecl = nil;
  ENGINE_register_ciphers : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_ciphers : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_ciphers : procedure(); cdecl = nil;
  ENGINE_register_digests : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_digests : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_digests : procedure(); cdecl = nil;
  ENGINE_register_pkey_meths : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_pkey_meths : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_pkey_meths : procedure(); cdecl = nil;
  ENGINE_register_pkey_asn1_meths : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_unregister_pkey_asn1_meths : procedure(e: PENGINE); cdecl = nil;
  ENGINE_register_all_pkey_asn1_meths : procedure(); cdecl = nil;
  ENGINE_register_complete : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_register_all_complete : function(): Integer; cdecl = nil;
  ENGINE_ctrl : function(e: PENGINE; cmd: Integer; i: Integer; p: Pointer; f: ENGINE_ctrl_f): Integer; cdecl = nil;
  ENGINE_cmd_is_executable : function(e: PENGINE; cmd: Integer): Integer; cdecl = nil;
  ENGINE_ctrl_cmd : function(e: PENGINE; cmd_name: PUTF8Char; i: Integer; p: Pointer; f: ENGINE_ctrl_cmd_f; cmd_optional: Integer): Integer; cdecl = nil;
  ENGINE_ctrl_cmd_string : function(e: PENGINE; cmd_name: PUTF8Char; arg: PUTF8Char; cmd_optional: Integer): Integer; cdecl = nil;
  ENGINE_new : function(): PENGINE; cdecl = nil;
  ENGINE_free : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_up_ref : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_id : function(e: PENGINE; id: PUTF8Char): Integer; cdecl = nil;
  ENGINE_set_name : function(e: PENGINE; name: PUTF8Char): Integer; cdecl = nil;
  ENGINE_set_RSA : function(e: PENGINE; rsa_meth: PRSA_METHOD): Integer; cdecl = nil;
  ENGINE_set_DSA : function(e: PENGINE; dsa_meth: PDSA_METHOD): Integer; cdecl = nil;
  ENGINE_set_EC : function(e: PENGINE; ecdsa_meth: PEC_KEY_METHOD): Integer; cdecl = nil;
  ENGINE_set_DH : function(e: PENGINE; dh_meth: PDH_METHOD): Integer; cdecl = nil;
  ENGINE_set_RAND : function(e: PENGINE; rand_meth: PRAND_METHOD): Integer; cdecl = nil;
  ENGINE_set_destroy_function : function(e: PENGINE; destroy_f: ENGINE_GEN_INT_FUNC_PTR): Integer; cdecl = nil;
  ENGINE_set_init_function : function(e: PENGINE; init_f: ENGINE_GEN_INT_FUNC_PTR): Integer; cdecl = nil;
  ENGINE_set_finish_function : function(e: PENGINE; finish_f: ENGINE_GEN_INT_FUNC_PTR): Integer; cdecl = nil;
  ENGINE_set_ctrl_function : function(e: PENGINE; ctrl_f: ENGINE_CTRL_FUNC_PTR): Integer; cdecl = nil;
  ENGINE_set_load_privkey_function : function(e: PENGINE; loadpriv_f: ENGINE_LOAD_KEY_PTR): Integer; cdecl = nil;
  ENGINE_set_load_pubkey_function : function(e: PENGINE; loadpub_f: ENGINE_LOAD_KEY_PTR): Integer; cdecl = nil;
  ENGINE_set_load_ssl_client_cert_function : function(e: PENGINE; loadssl_f: ENGINE_SSL_CLIENT_CERT_PTR): Integer; cdecl = nil;
  ENGINE_set_ciphers : function(e: PENGINE; f: ENGINE_CIPHERS_PTR): Integer; cdecl = nil;
  ENGINE_set_digests : function(e: PENGINE; f: ENGINE_DIGESTS_PTR): Integer; cdecl = nil;
  ENGINE_set_pkey_meths : function(e: PENGINE; f: ENGINE_PKEY_METHS_PTR): Integer; cdecl = nil;
  ENGINE_set_pkey_asn1_meths : function(e: PENGINE; f: ENGINE_PKEY_ASN1_METHS_PTR): Integer; cdecl = nil;
  ENGINE_set_flags : function(e: PENGINE; flags: Integer): Integer; cdecl = nil;
  ENGINE_set_cmd_defns : function(e: PENGINE; defns: PENGINE_CMD_DEFN): Integer; cdecl = nil;
  ENGINE_set_ex_data : function(e: PENGINE; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  ENGINE_get_ex_data : function(e: PENGINE; idx: Integer): Pointer; cdecl = nil;
  ENGINE_get_id : function(e: PENGINE): PUTF8Char; cdecl = nil;
  ENGINE_get_name : function(e: PENGINE): PUTF8Char; cdecl = nil;
  ENGINE_get_RSA : function(e: PENGINE): PRSA_METHOD; cdecl = nil;
  ENGINE_get_DSA : function(e: PENGINE): PDSA_METHOD; cdecl = nil;
  ENGINE_get_EC : function(e: PENGINE): PEC_KEY_METHOD; cdecl = nil;
  ENGINE_get_DH : function(e: PENGINE): PDH_METHOD; cdecl = nil;
  ENGINE_get_RAND : function(e: PENGINE): PRAND_METHOD; cdecl = nil;
  ENGINE_get_destroy_function : function(e: PENGINE): ENGINE_GEN_INT_FUNC_PTR; cdecl = nil;
  ENGINE_get_init_function : function(e: PENGINE): ENGINE_GEN_INT_FUNC_PTR; cdecl = nil;
  ENGINE_get_finish_function : function(e: PENGINE): ENGINE_GEN_INT_FUNC_PTR; cdecl = nil;
  ENGINE_get_ctrl_function : function(e: PENGINE): ENGINE_CTRL_FUNC_PTR; cdecl = nil;
  ENGINE_get_load_privkey_function : function(e: PENGINE): ENGINE_LOAD_KEY_PTR; cdecl = nil;
  ENGINE_get_load_pubkey_function : function(e: PENGINE): ENGINE_LOAD_KEY_PTR; cdecl = nil;
  ENGINE_get_ssl_client_cert_function : function(e: PENGINE): ENGINE_SSL_CLIENT_CERT_PTR; cdecl = nil;
  ENGINE_get_ciphers : function(e: PENGINE): ENGINE_CIPHERS_PTR; cdecl = nil;
  ENGINE_get_digests : function(e: PENGINE): ENGINE_DIGESTS_PTR; cdecl = nil;
  ENGINE_get_pkey_meths : function(e: PENGINE): ENGINE_PKEY_METHS_PTR; cdecl = nil;
  ENGINE_get_pkey_asn1_meths : function(e: PENGINE): ENGINE_PKEY_ASN1_METHS_PTR; cdecl = nil;
  ENGINE_get_cipher : function(e: PENGINE; nid: Integer): PEVP_CIPHER; cdecl = nil;
  ENGINE_get_digest : function(e: PENGINE; nid: Integer): PEVP_MD; cdecl = nil;
  ENGINE_get_pkey_meth : function(e: PENGINE; nid: Integer): PEVP_PKEY_METHOD; cdecl = nil;
  ENGINE_get_pkey_asn1_meth : function(e: PENGINE; nid: Integer): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  ENGINE_get_pkey_asn1_meth_str : function(e: PENGINE; str: PUTF8Char; len: Integer): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  ENGINE_pkey_asn1_find_str : function(pe: PPENGINE; str: PUTF8Char; len: Integer): PEVP_PKEY_ASN1_METHOD; cdecl = nil;
  ENGINE_get_cmd_defns : function(e: PENGINE): PENGINE_CMD_DEFN; cdecl = nil;
  ENGINE_get_flags : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_init : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_finish : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_load_private_key : function(e: PENGINE; key_id: PUTF8Char; ui_method: PUI_METHOD; callback_data: Pointer): PEVP_PKEY; cdecl = nil;
  ENGINE_load_public_key : function(e: PENGINE; key_id: PUTF8Char; ui_method: PUI_METHOD; callback_data: Pointer): PEVP_PKEY; cdecl = nil;
  ENGINE_load_ssl_client_cert : function(e: PENGINE; s: PSSL; ca_dn: Pstack_st_X509_NAME; pcert: PPX509; ppkey: PPEVP_PKEY; pother: PPstack_st_X509; ui_method: PUI_METHOD; callback_data: Pointer): Integer; cdecl = nil;
  ENGINE_get_default_RSA : function(): PENGINE; cdecl = nil;
  ENGINE_get_default_DSA : function(): PENGINE; cdecl = nil;
  ENGINE_get_default_EC : function(): PENGINE; cdecl = nil;
  ENGINE_get_default_DH : function(): PENGINE; cdecl = nil;
  ENGINE_get_default_RAND : function(): PENGINE; cdecl = nil;
  ENGINE_get_cipher_engine : function(nid: Integer): PENGINE; cdecl = nil;
  ENGINE_get_digest_engine : function(nid: Integer): PENGINE; cdecl = nil;
  ENGINE_get_pkey_meth_engine : function(nid: Integer): PENGINE; cdecl = nil;
  ENGINE_get_pkey_asn1_meth_engine : function(nid: Integer): PENGINE; cdecl = nil;
  ENGINE_set_default_RSA : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_string : function(e: PENGINE; def_list: PUTF8Char): Integer; cdecl = nil;
  ENGINE_set_default_DSA : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_EC : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_DH : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_RAND : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_ciphers : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_digests : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_pkey_meths : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default_pkey_asn1_meths : function(e: PENGINE): Integer; cdecl = nil;
  ENGINE_set_default : function(e: PENGINE; flags: Cardinal): Integer; cdecl = nil;
  ENGINE_add_conf_module : procedure(); cdecl = nil;
  ENGINE_get_static_state : function(): Pointer; cdecl = nil;
  HMAC_size : function(e: PHMAC_CTX): NativeUInt; cdecl = nil;
  HMAC_CTX_new : function(): PHMAC_CTX; cdecl = nil;
  HMAC_CTX_reset : function(ctx: PHMAC_CTX): Integer; cdecl = nil;
  HMAC_CTX_free : procedure(ctx: PHMAC_CTX); cdecl = nil;
  HMAC_Init : function(ctx: PHMAC_CTX; key: Pointer; len: Integer; md: PEVP_MD): Integer; cdecl = nil;
  HMAC_Init_ex : function(ctx: PHMAC_CTX; key: Pointer; len: Integer; md: PEVP_MD; impl: PENGINE): Integer; cdecl = nil;
  HMAC_Update : function(ctx: PHMAC_CTX; data: PByte; len: NativeUInt): Integer; cdecl = nil;
  HMAC_Final : function(ctx: PHMAC_CTX; md: PByte; len: PCardinal): Integer; cdecl = nil;
  HMAC : function(evp_md: PEVP_MD; key: Pointer; key_len: Integer; d: PByte; n: NativeUInt; md: PByte; var md_len: Cardinal): PByte; cdecl = nil;
  HMAC_CTX_copy : function(dctx: PHMAC_CTX; sctx: PHMAC_CTX): Integer; cdecl = nil;
  HMAC_CTX_set_flags : procedure(ctx: PHMAC_CTX; flags: Cardinal); cdecl = nil;
  HMAC_CTX_get_md : function(ctx: PHMAC_CTX): PEVP_MD; cdecl = nil;
  IDEA_options : function(): PUTF8Char; cdecl = nil;
  IDEA_ecb_encrypt : procedure(vin: PByte; vout: PByte; ks: PIDEA_KEY_SCHEDULE); cdecl = nil;
  IDEA_set_encrypt_key : procedure(key: PByte; ks: PIDEA_KEY_SCHEDULE); cdecl = nil;
  IDEA_set_decrypt_key : procedure(ek: PIDEA_KEY_SCHEDULE; dk: PIDEA_KEY_SCHEDULE); cdecl = nil;
  IDEA_cbc_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks: PIDEA_KEY_SCHEDULE; iv: PByte; enc: Integer); cdecl = nil;
  IDEA_cfb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks: PIDEA_KEY_SCHEDULE; iv: PByte; num: PInteger; enc: Integer); cdecl = nil;
  IDEA_ofb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks: PIDEA_KEY_SCHEDULE; iv: PByte; num: PInteger); cdecl = nil;
  IDEA_encrypt : procedure(vin: PCardinal; ks: PIDEA_KEY_SCHEDULE); cdecl = nil;
  ERR_load_KDF_strings : function(): Integer; cdecl = nil;
  MD4_Init : function(c: PMD4_CTX): Integer; cdecl = nil;
  MD4_Update : function(c: PMD4_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  MD4_Final : function(md: PByte; c: PMD4_CTX): Integer; cdecl = nil;
  MD4 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  MD4_Transform : procedure(c: PMD4_CTX; b: PByte); cdecl = nil;
  MD5_Init : function(c: PMD5_CTX): Integer; cdecl = nil;
  MD5_Update : function(c: PMD5_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  MD5_Final : function(md: PByte; c: PMD5_CTX): Integer; cdecl = nil;
  MD5 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  MD5_Transform : procedure(c: PMD5_CTX; b: PByte); cdecl = nil;
  MDC2_Init : function(c: PMDC2_CTX): Integer; cdecl = nil;
  MDC2_Update : function(c: PMDC2_CTX; data: PByte; len: NativeUInt): Integer; cdecl = nil;
  MDC2_Final : function(md: PByte; c: PMDC2_CTX): Integer; cdecl = nil;
  MDC2 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  CRYPTO_cbc128_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; block: block128_f); cdecl = nil;
  CRYPTO_cbc128_decrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; block: block128_f); cdecl = nil;
  CRYPTO_ctr128_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; ecount_buf: PByte; num: PCardinal; block: block128_f); cdecl = nil;
  CRYPTO_ctr128_encrypt_ctr32 : procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; ecount_buf: PByte; num: PCardinal; ctr: ctr128_f); cdecl = nil;
  CRYPTO_ofb128_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; num: PInteger; block: block128_f); cdecl = nil;
  CRYPTO_cfb128_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; num: PInteger; enc: Integer; block: block128_f); cdecl = nil;
  CRYPTO_cfb128_8_encrypt : procedure(vin: PByte; vout: PByte; length: NativeUInt; key: Pointer; ivec: PByte; num: PInteger; enc: Integer; block: block128_f); cdecl = nil;
  CRYPTO_cfb128_1_encrypt : procedure(vin: PByte; vout: PByte; bits: NativeUInt; key: Pointer; ivec: PByte; num: PInteger; enc: Integer; block: block128_f); cdecl = nil;
  CRYPTO_cts128_encrypt_block : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_cts128_encrypt : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; cbc: cbc128_f): NativeUInt; cdecl = nil;
  CRYPTO_cts128_decrypt_block : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_cts128_decrypt : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; cbc: cbc128_f): NativeUInt; cdecl = nil;
  CRYPTO_nistcts128_encrypt_block : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_nistcts128_encrypt : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; cbc: cbc128_f): NativeUInt; cdecl = nil;
  CRYPTO_nistcts128_decrypt_block : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_nistcts128_decrypt : function(vin: PByte; vout: PByte; len: NativeUInt; key: Pointer; ivec: PByte; cbc: cbc128_f): NativeUInt; cdecl = nil;
  CRYPTO_gcm128_new : function(key: Pointer; block: block128_f): PGCM128_CONTEXT; cdecl = nil;
  CRYPTO_gcm128_init : procedure(ctx: PGCM128_CONTEXT; key: Pointer; block: block128_f); cdecl = nil;
  CRYPTO_gcm128_setiv : procedure(ctx: PGCM128_CONTEXT; iv: PByte; len: NativeUInt); cdecl = nil;
  CRYPTO_gcm128_aad : function(ctx: PGCM128_CONTEXT; aad: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_gcm128_encrypt : function(ctx: PGCM128_CONTEXT; vin: PByte; vout: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_gcm128_decrypt : function(ctx: PGCM128_CONTEXT; vin: PByte; vout: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_gcm128_encrypt_ctr32 : function(ctx: PGCM128_CONTEXT; vin: PByte; vout: PByte; len: NativeUInt; stream: ctr128_f): Integer; cdecl = nil;
  CRYPTO_gcm128_decrypt_ctr32 : function(ctx: PGCM128_CONTEXT; vin: PByte; vout: PByte; len: NativeUInt; stream: ctr128_f): Integer; cdecl = nil;
  CRYPTO_gcm128_finish : function(ctx: PGCM128_CONTEXT; tag: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_gcm128_tag : procedure(ctx: PGCM128_CONTEXT; tag: PByte; len: NativeUInt); cdecl = nil;
  CRYPTO_gcm128_release : procedure(ctx: PGCM128_CONTEXT); cdecl = nil;
  CRYPTO_ccm128_init : procedure(ctx: PCCM128_CONTEXT; M: Cardinal; L: Cardinal; key: Pointer; block: block128_f); cdecl = nil;
  CRYPTO_ccm128_setiv : function(ctx: PCCM128_CONTEXT; nonce: PByte; nlen: NativeUInt; mlen: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ccm128_aad : procedure(ctx: PCCM128_CONTEXT; aad: PByte; alen: NativeUInt); cdecl = nil;
  CRYPTO_ccm128_encrypt : function(ctx: PCCM128_CONTEXT; inp: PByte; vout: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ccm128_decrypt : function(ctx: PCCM128_CONTEXT; inp: PByte; vout: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ccm128_encrypt_ccm64 : function(ctx: PCCM128_CONTEXT; inp: PByte; vout: PByte; len: NativeUInt; stream: ccm128_f): Integer; cdecl = nil;
  CRYPTO_ccm128_decrypt_ccm64 : function(ctx: PCCM128_CONTEXT; inp: PByte; vout: PByte; len: NativeUInt; stream: ccm128_f): Integer; cdecl = nil;
  CRYPTO_ccm128_tag : function(ctx: PCCM128_CONTEXT; tag: PByte; len: NativeUInt): NativeUInt; cdecl = nil;
  CRYPTO_xts128_encrypt : function(ctx: PXTS128_CONTEXT; iv: PByte; inp: PByte; vout: PByte; len: NativeUInt; enc: Integer): Integer; cdecl = nil;
  CRYPTO_128_wrap : function(key: Pointer; iv: PByte; vout: PByte; vin: PByte; inlen: NativeUInt; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_128_unwrap : function(key: Pointer; iv: PByte; vout: PByte; vin: PByte; inlen: NativeUInt; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_128_wrap_pad : function(key: Pointer; icv: PByte; vout: PByte; vin: PByte; inlen: NativeUInt; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_128_unwrap_pad : function(key: Pointer; icv: PByte; vout: PByte; vin: PByte; inlen: NativeUInt; block: block128_f): NativeUInt; cdecl = nil;
  CRYPTO_ocb128_new : function(keyenc: Pointer; keydec: Pointer; encrypt: block128_f; decrypt: block128_f; stream: ocb128_f): POCB128_CONTEXT; cdecl = nil;
  CRYPTO_ocb128_init : function(ctx: POCB128_CONTEXT; keyenc: Pointer; keydec: Pointer; encrypt: block128_f; decrypt: block128_f; stream: ocb128_f): Integer; cdecl = nil;
  CRYPTO_ocb128_copy_ctx : function(dest: POCB128_CONTEXT; src: POCB128_CONTEXT; keyenc: Pointer; keydec: Pointer): Integer; cdecl = nil;
  CRYPTO_ocb128_setiv : function(ctx: POCB128_CONTEXT; iv: PByte; len: NativeUInt; taglen: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ocb128_aad : function(ctx: POCB128_CONTEXT; aad: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ocb128_encrypt : function(ctx: POCB128_CONTEXT; vin: PByte; vout: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ocb128_decrypt : function(ctx: POCB128_CONTEXT; vin: PByte; vout: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ocb128_finish : function(ctx: POCB128_CONTEXT; tag: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ocb128_tag : function(ctx: POCB128_CONTEXT; tag: PByte; len: NativeUInt): Integer; cdecl = nil;
  CRYPTO_ocb128_cleanup : procedure(ctx: POCB128_CONTEXT); cdecl = nil;
  ERR_load_OCSP_strings : function(): Integer; cdecl = nil;
  OCSP_CERTID_dup : function(id: POCSP_CERTID): POCSP_CERTID; cdecl = nil;
  OCSP_sendreq_bio : function(b: PBIO; path: PUTF8Char; req: POCSP_REQUEST): POCSP_RESPONSE; cdecl = nil;
  OCSP_sendreq_new : function(io: PBIO; path: PUTF8Char; req: POCSP_REQUEST; maxline: Integer): POCSP_REQ_CTX; cdecl = nil;
  OCSP_REQ_CTX_nbio : function(rctx: POCSP_REQ_CTX): Integer; cdecl = nil;
  OCSP_sendreq_nbio : function(presp: PPOCSP_RESPONSE; rctx: POCSP_REQ_CTX): Integer; cdecl = nil;
  OCSP_REQ_CTX_new : function(io: PBIO; maxline: Integer): POCSP_REQ_CTX; cdecl = nil;
  OCSP_REQ_CTX_free : procedure(rctx: POCSP_REQ_CTX); cdecl = nil;
  OCSP_set_max_response_length : procedure(rctx: POCSP_REQ_CTX; len: Cardinal); cdecl = nil;
  OCSP_REQ_CTX_i2d : function(rctx: POCSP_REQ_CTX; it: PASN1_ITEM; val: PASN1_VALUE): Integer; cdecl = nil;
  OCSP_REQ_CTX_nbio_d2i : function(rctx: POCSP_REQ_CTX; pval: PPASN1_VALUE; it: PASN1_ITEM): Integer; cdecl = nil;
  OCSP_REQ_CTX_get0_mem_bio : function(rctx: POCSP_REQ_CTX): PBIO; cdecl = nil;
  OCSP_REQ_CTX_http : function(rctx: POCSP_REQ_CTX; op: PUTF8Char; path: PUTF8Char): Integer; cdecl = nil;
  OCSP_REQ_CTX_set1_req : function(rctx: POCSP_REQ_CTX; req: POCSP_REQUEST): Integer; cdecl = nil;
  OCSP_REQ_CTX_add1_header : function(rctx: POCSP_REQ_CTX; name: PUTF8Char; value: PUTF8Char): Integer; cdecl = nil;
  OCSP_cert_to_id : function(dgst: PEVP_MD; subject: PX509; issuer: PX509): POCSP_CERTID; cdecl = nil;
  OCSP_cert_id_new : function(dgst: PEVP_MD; issuerName: PX509_NAME; issuerKey: PASN1_BIT_STRING; serialNumber: PASN1_INTEGER): POCSP_CERTID; cdecl = nil;
  OCSP_request_add0_id : function(req: POCSP_REQUEST; cid: POCSP_CERTID): POCSP_ONEREQ; cdecl = nil;
  OCSP_request_add1_nonce : function(req: POCSP_REQUEST; val: PByte; len: Integer): Integer; cdecl = nil;
  OCSP_basic_add1_nonce : function(resp: POCSP_BASICRESP; val: PByte; len: Integer): Integer; cdecl = nil;
  OCSP_check_nonce : function(req: POCSP_REQUEST; bs: POCSP_BASICRESP): Integer; cdecl = nil;
  OCSP_copy_nonce : function(resp: POCSP_BASICRESP; req: POCSP_REQUEST): Integer; cdecl = nil;
  OCSP_request_set1_name : function(req: POCSP_REQUEST; nm: PX509_NAME): Integer; cdecl = nil;
  OCSP_request_add1_cert : function(req: POCSP_REQUEST; cert: PX509): Integer; cdecl = nil;
  OCSP_request_sign : function(req: POCSP_REQUEST; signer: PX509; key: PEVP_PKEY; dgst: PEVP_MD; certs: Pstack_st_X509; flags: Cardinal): Integer; cdecl = nil;
  OCSP_response_status : function(resp: POCSP_RESPONSE): Integer; cdecl = nil;
  OCSP_response_get1_basic : function(resp: POCSP_RESPONSE): POCSP_BASICRESP; cdecl = nil;
  OCSP_resp_get0_signature : function(bs: POCSP_BASICRESP): PASN1_OCTET_STRING; cdecl = nil;
  OCSP_resp_get0_tbs_sigalg : function(bs: POCSP_BASICRESP): PX509_ALGOR; cdecl = nil;
  OCSP_resp_get0_respdata : function(bs: POCSP_BASICRESP): POCSP_RESPDATA; cdecl = nil;
  OCSP_resp_get0_signer : function(bs: POCSP_BASICRESP; signer: PPX509; extra_certs: Pstack_st_X509): Integer; cdecl = nil;
  OCSP_resp_count : function(bs: POCSP_BASICRESP): Integer; cdecl = nil;
  OCSP_resp_get0 : function(bs: POCSP_BASICRESP; idx: Integer): POCSP_SINGLERESP; cdecl = nil;
  OCSP_resp_get0_produced_at : function(bs: POCSP_BASICRESP): PASN1_GENERALIZEDTIME; cdecl = nil;
  OCSP_resp_get0_certs : function(bs: POCSP_BASICRESP): Pstack_st_X509; cdecl = nil;
  OCSP_resp_get0_id : function(bs: POCSP_BASICRESP; pid: PPASN1_OCTET_STRING; pname: PPX509_NAME): Integer; cdecl = nil;
  OCSP_resp_get1_id : function(bs: POCSP_BASICRESP; pid: PPASN1_OCTET_STRING; pname: PPX509_NAME): Integer; cdecl = nil;
  OCSP_resp_find : function(bs: POCSP_BASICRESP; id: POCSP_CERTID; last: Integer): Integer; cdecl = nil;
  OCSP_single_get0_status : function(single: POCSP_SINGLERESP; reason: PInteger; revtime: PPASN1_GENERALIZEDTIME; thisupd: PPASN1_GENERALIZEDTIME; nextupd: PPASN1_GENERALIZEDTIME): Integer; cdecl = nil;
  OCSP_resp_find_status : function(bs: POCSP_BASICRESP; id: POCSP_CERTID; status: PInteger; reason: PInteger; revtime: PPASN1_GENERALIZEDTIME; thisupd: PPASN1_GENERALIZEDTIME; nextupd: PPASN1_GENERALIZEDTIME): Integer; cdecl = nil;
  OCSP_check_validity : function(thisupd: PASN1_GENERALIZEDTIME; nextupd: PASN1_GENERALIZEDTIME; sec: Integer; maxsec: Integer): Integer; cdecl = nil;
  OCSP_request_verify : function(req: POCSP_REQUEST; certs: Pstack_st_X509; store: PX509_STORE; flags: Cardinal): Integer; cdecl = nil;
  OCSP_parse_url : function(url: PUTF8Char; phost: PPUTF8Char; pport: PPUTF8Char; ppath: PPUTF8Char; pssl: PInteger): Integer; cdecl = nil;
  OCSP_id_issuer_cmp : function(a: POCSP_CERTID; b: POCSP_CERTID): Integer; cdecl = nil;
  OCSP_id_cmp : function(a: POCSP_CERTID; b: POCSP_CERTID): Integer; cdecl = nil;
  OCSP_request_onereq_count : function(req: POCSP_REQUEST): Integer; cdecl = nil;
  OCSP_request_onereq_get0 : function(req: POCSP_REQUEST; i: Integer): POCSP_ONEREQ; cdecl = nil;
  OCSP_onereq_get0_id : function(one: POCSP_ONEREQ): POCSP_CERTID; cdecl = nil;
  OCSP_id_get0_info : function(piNameHash: PPASN1_OCTET_STRING; pmd: PPASN1_OBJECT; pikeyHash: PPASN1_OCTET_STRING; pserial: PPASN1_INTEGER; cid: POCSP_CERTID): Integer; cdecl = nil;
  OCSP_request_is_signed : function(req: POCSP_REQUEST): Integer; cdecl = nil;
  OCSP_response_create : function(status: Integer; bs: POCSP_BASICRESP): POCSP_RESPONSE; cdecl = nil;
  OCSP_basic_add1_status : function(rsp: POCSP_BASICRESP; cid: POCSP_CERTID; status: Integer; reason: Integer; revtime: PASN1_TIME; thisupd: PASN1_TIME; nextupd: PASN1_TIME): POCSP_SINGLERESP; cdecl = nil;
  OCSP_basic_add1_cert : function(resp: POCSP_BASICRESP; cert: PX509): Integer; cdecl = nil;
  OCSP_basic_sign : function(brsp: POCSP_BASICRESP; signer: PX509; key: PEVP_PKEY; dgst: PEVP_MD; certs: Pstack_st_X509; flags: Cardinal): Integer; cdecl = nil;
  OCSP_basic_sign_ctx : function(brsp: POCSP_BASICRESP; signer: PX509; ctx: PEVP_MD_CTX; certs: Pstack_st_X509; flags: Cardinal): Integer; cdecl = nil;
  OCSP_RESPID_set_by_name : function(respid: POCSP_RESPID; cert: PX509): Integer; cdecl = nil;
  OCSP_RESPID_set_by_key : function(respid: POCSP_RESPID; cert: PX509): Integer; cdecl = nil;
  OCSP_RESPID_match : function(respid: POCSP_RESPID; cert: PX509): Integer; cdecl = nil;
  OCSP_crlID_new : function(url: PUTF8Char; n: PInteger; tim: PUTF8Char): PX509_EXTENSION; cdecl = nil;
  OCSP_accept_responses_new : function(oids: PPUTF8Char): PX509_EXTENSION; cdecl = nil;
  OCSP_archive_cutoff_new : function(tim: PUTF8Char): PX509_EXTENSION; cdecl = nil;
  OCSP_url_svcloc_new : function(issuer: PX509_NAME; urls: PPUTF8Char): PX509_EXTENSION; cdecl = nil;
  OCSP_REQUEST_get_ext_count : function(x: POCSP_REQUEST): Integer; cdecl = nil;
  OCSP_REQUEST_get_ext_by_NID : function(x: POCSP_REQUEST; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_REQUEST_get_ext_by_OBJ : function(x: POCSP_REQUEST; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  OCSP_REQUEST_get_ext_by_critical : function(x: POCSP_REQUEST; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_REQUEST_get_ext : function(x: POCSP_REQUEST; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_REQUEST_delete_ext : function(x: POCSP_REQUEST; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_REQUEST_get1_ext_d2i : function(x: POCSP_REQUEST; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  OCSP_REQUEST_add1_ext_i2d : function(x: POCSP_REQUEST; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  OCSP_REQUEST_add_ext : function(x: POCSP_REQUEST; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  OCSP_ONEREQ_get_ext_count : function(x: POCSP_ONEREQ): Integer; cdecl = nil;
  OCSP_ONEREQ_get_ext_by_NID : function(x: POCSP_ONEREQ; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_ONEREQ_get_ext_by_OBJ : function(x: POCSP_ONEREQ; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  OCSP_ONEREQ_get_ext_by_critical : function(x: POCSP_ONEREQ; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_ONEREQ_get_ext : function(x: POCSP_ONEREQ; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_ONEREQ_delete_ext : function(x: POCSP_ONEREQ; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_ONEREQ_get1_ext_d2i : function(x: POCSP_ONEREQ; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  OCSP_ONEREQ_add1_ext_i2d : function(x: POCSP_ONEREQ; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  OCSP_ONEREQ_add_ext : function(x: POCSP_ONEREQ; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  OCSP_BASICRESP_get_ext_count : function(x: POCSP_BASICRESP): Integer; cdecl = nil;
  OCSP_BASICRESP_get_ext_by_NID : function(x: POCSP_BASICRESP; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_BASICRESP_get_ext_by_OBJ : function(x: POCSP_BASICRESP; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  OCSP_BASICRESP_get_ext_by_critical : function(x: POCSP_BASICRESP; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_BASICRESP_get_ext : function(x: POCSP_BASICRESP; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_BASICRESP_delete_ext : function(x: POCSP_BASICRESP; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_BASICRESP_get1_ext_d2i : function(x: POCSP_BASICRESP; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  OCSP_BASICRESP_add1_ext_i2d : function(x: POCSP_BASICRESP; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  OCSP_BASICRESP_add_ext : function(x: POCSP_BASICRESP; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  OCSP_SINGLERESP_get_ext_count : function(x: POCSP_SINGLERESP): Integer; cdecl = nil;
  OCSP_SINGLERESP_get_ext_by_NID : function(x: POCSP_SINGLERESP; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_SINGLERESP_get_ext_by_OBJ : function(x: POCSP_SINGLERESP; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  OCSP_SINGLERESP_get_ext_by_critical : function(x: POCSP_SINGLERESP; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  OCSP_SINGLERESP_get_ext : function(x: POCSP_SINGLERESP; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_SINGLERESP_delete_ext : function(x: POCSP_SINGLERESP; loc: Integer): PX509_EXTENSION; cdecl = nil;
  OCSP_SINGLERESP_get1_ext_d2i : function(x: POCSP_SINGLERESP; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  OCSP_SINGLERESP_add1_ext_i2d : function(x: POCSP_SINGLERESP; nid: Integer; value: Pointer; crit: Integer; flags: Cardinal): Integer; cdecl = nil;
  OCSP_SINGLERESP_add_ext : function(x: POCSP_SINGLERESP; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  OCSP_SINGLERESP_get0_id : function(x: POCSP_SINGLERESP): POCSP_CERTID; cdecl = nil;
  OCSP_SINGLERESP_new : function(): POCSP_SINGLERESP; cdecl = nil;
  OCSP_SINGLERESP_free : procedure(a: POCSP_SINGLERESP); cdecl = nil;
  d2i_OCSP_SINGLERESP : function(a: PPOCSP_SINGLERESP; vin: PPByte; len: Integer): POCSP_SINGLERESP; cdecl = nil;
  i2d_OCSP_SINGLERESP : function(a: POCSP_SINGLERESP; vout: PPByte): Integer; cdecl = nil;
  OCSP_SINGLERESP_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_CERTSTATUS_new : function(): POCSP_CERTSTATUS; cdecl = nil;
  OCSP_CERTSTATUS_free : procedure(a: POCSP_CERTSTATUS); cdecl = nil;
  d2i_OCSP_CERTSTATUS : function(a: PPOCSP_CERTSTATUS; vin: PPByte; len: Integer): POCSP_CERTSTATUS; cdecl = nil;
  i2d_OCSP_CERTSTATUS : function(a: POCSP_CERTSTATUS; vout: PPByte): Integer; cdecl = nil;
  OCSP_CERTSTATUS_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_REVOKEDINFO_new : function(): POCSP_REVOKEDINFO; cdecl = nil;
  OCSP_REVOKEDINFO_free : procedure(a: POCSP_REVOKEDINFO); cdecl = nil;
  d2i_OCSP_REVOKEDINFO : function(a: PPOCSP_REVOKEDINFO; vin: PPByte; len: Integer): POCSP_REVOKEDINFO; cdecl = nil;
  i2d_OCSP_REVOKEDINFO : function(a: POCSP_REVOKEDINFO; vout: PPByte): Integer; cdecl = nil;
  OCSP_REVOKEDINFO_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_BASICRESP_new : function(): POCSP_BASICRESP; cdecl = nil;
  OCSP_BASICRESP_free : procedure(a: POCSP_BASICRESP); cdecl = nil;
  d2i_OCSP_BASICRESP : function(a: PPOCSP_BASICRESP; vin: PPByte; len: Integer): POCSP_BASICRESP; cdecl = nil;
  i2d_OCSP_BASICRESP : function(a: POCSP_BASICRESP; vout: PPByte): Integer; cdecl = nil;
  OCSP_BASICRESP_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_RESPDATA_new : function(): POCSP_RESPDATA; cdecl = nil;
  OCSP_RESPDATA_free : procedure(a: POCSP_RESPDATA); cdecl = nil;
  d2i_OCSP_RESPDATA : function(a: PPOCSP_RESPDATA; vin: PPByte; len: Integer): POCSP_RESPDATA; cdecl = nil;
  i2d_OCSP_RESPDATA : function(a: POCSP_RESPDATA; vout: PPByte): Integer; cdecl = nil;
  OCSP_RESPDATA_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_RESPID_new : function(): POCSP_RESPID; cdecl = nil;
  OCSP_RESPID_free : procedure(a: POCSP_RESPID); cdecl = nil;
  d2i_OCSP_RESPID : function(a: PPOCSP_RESPID; vin: PPByte; len: Integer): POCSP_RESPID; cdecl = nil;
  i2d_OCSP_RESPID : function(a: POCSP_RESPID; vout: PPByte): Integer; cdecl = nil;
  OCSP_RESPID_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_RESPONSE_new : function(): POCSP_RESPONSE; cdecl = nil;
  OCSP_RESPONSE_free : procedure(a: POCSP_RESPONSE); cdecl = nil;
  d2i_OCSP_RESPONSE : function(a: PPOCSP_RESPONSE; vin: PPByte; len: Integer): POCSP_RESPONSE; cdecl = nil;
  i2d_OCSP_RESPONSE : function(a: POCSP_RESPONSE; vout: PPByte): Integer; cdecl = nil;
  OCSP_RESPONSE_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_RESPBYTES_new : function(): POCSP_RESPBYTES; cdecl = nil;
  OCSP_RESPBYTES_free : procedure(a: POCSP_RESPBYTES); cdecl = nil;
  d2i_OCSP_RESPBYTES : function(a: PPOCSP_RESPBYTES; vin: PPByte; len: Integer): POCSP_RESPBYTES; cdecl = nil;
  i2d_OCSP_RESPBYTES : function(a: POCSP_RESPBYTES; vout: PPByte): Integer; cdecl = nil;
  OCSP_RESPBYTES_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_ONEREQ_new : function(): POCSP_ONEREQ; cdecl = nil;
  OCSP_ONEREQ_free : procedure(a: POCSP_ONEREQ); cdecl = nil;
  d2i_OCSP_ONEREQ : function(a: PPOCSP_ONEREQ; vin: PPByte; len: Integer): POCSP_ONEREQ; cdecl = nil;
  i2d_OCSP_ONEREQ : function(a: POCSP_ONEREQ; vout: PPByte): Integer; cdecl = nil;
  OCSP_ONEREQ_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_CERTID_new : function(): POCSP_CERTID; cdecl = nil;
  OCSP_CERTID_free : procedure(a: POCSP_CERTID); cdecl = nil;
  d2i_OCSP_CERTID : function(a: PPOCSP_CERTID; vin: PPByte; len: Integer): POCSP_CERTID; cdecl = nil;
  i2d_OCSP_CERTID : function(a: POCSP_CERTID; vout: PPByte): Integer; cdecl = nil;
  OCSP_CERTID_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_REQUEST_new : function(): POCSP_REQUEST; cdecl = nil;
  OCSP_REQUEST_free : procedure(a: POCSP_REQUEST); cdecl = nil;
  d2i_OCSP_REQUEST : function(a: PPOCSP_REQUEST; vin: PPByte; len: Integer): POCSP_REQUEST; cdecl = nil;
  i2d_OCSP_REQUEST : function(a: POCSP_REQUEST; vout: PPByte): Integer; cdecl = nil;
  OCSP_REQUEST_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_SIGNATURE_new : function(): POCSP_SIGNATURE; cdecl = nil;
  OCSP_SIGNATURE_free : procedure(a: POCSP_SIGNATURE); cdecl = nil;
  d2i_OCSP_SIGNATURE : function(a: PPOCSP_SIGNATURE; vin: PPByte; len: Integer): POCSP_SIGNATURE; cdecl = nil;
  i2d_OCSP_SIGNATURE : function(a: POCSP_SIGNATURE; vout: PPByte): Integer; cdecl = nil;
  OCSP_SIGNATURE_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_REQINFO_new : function(): POCSP_REQINFO; cdecl = nil;
  OCSP_REQINFO_free : procedure(a: POCSP_REQINFO); cdecl = nil;
  d2i_OCSP_REQINFO : function(a: PPOCSP_REQINFO; vin: PPByte; len: Integer): POCSP_REQINFO; cdecl = nil;
  i2d_OCSP_REQINFO : function(a: POCSP_REQINFO; vout: PPByte): Integer; cdecl = nil;
  OCSP_REQINFO_it : function(): PASN1_ITEM; cdecl = nil;
//  OCSP_CRLID_new : function(): POCSP_CRLID; cdecl = nil;
  OCSP_CRLID_free : procedure(a: POCSP_CRLID); cdecl = nil;
  d2i_OCSP_CRLID : function(a: PPOCSP_CRLID; vin: PPByte; len: Integer): POCSP_CRLID; cdecl = nil;
  i2d_OCSP_CRLID : function(a: POCSP_CRLID; vout: PPByte): Integer; cdecl = nil;
  OCSP_CRLID_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_SERVICELOC_new : function(): POCSP_SERVICELOC; cdecl = nil;
  OCSP_SERVICELOC_free : procedure(a: POCSP_SERVICELOC); cdecl = nil;
  d2i_OCSP_SERVICELOC : function(a: PPOCSP_SERVICELOC; vin: PPByte; len: Integer): POCSP_SERVICELOC; cdecl = nil;
  i2d_OCSP_SERVICELOC : function(a: POCSP_SERVICELOC; vout: PPByte): Integer; cdecl = nil;
  OCSP_SERVICELOC_it : function(): PASN1_ITEM; cdecl = nil;
  OCSP_response_status_str : function(s: Integer): PUTF8Char; cdecl = nil;
  OCSP_cert_status_str : function(s: Integer): PUTF8Char; cdecl = nil;
  OCSP_crl_reason_str : function(s: Integer): PUTF8Char; cdecl = nil;
  OCSP_REQUEST_print : function(bp: PBIO; a: POCSP_REQUEST; flags: Cardinal): Integer; cdecl = nil;
  OCSP_RESPONSE_print : function(bp: PBIO; o: POCSP_RESPONSE; flags: Cardinal): Integer; cdecl = nil;
  OCSP_basic_verify : function(bs: POCSP_BASICRESP; certs: Pstack_st_X509; st: PX509_STORE; flags: Cardinal): Integer; cdecl = nil;
  ERR_load_PKCS12_strings : function(): Integer; cdecl = nil;
  PKCS12_get_attr : function(bag: PPKCS12_SAFEBAG; attr_nid: Integer): PASN1_TYPE; cdecl = nil;
  PKCS8_get_attr : function(p8: PPKCS8_PRIV_KEY_INFO; attr_nid: Integer): PASN1_TYPE; cdecl = nil;
  PKCS12_mac_present : function(p12: PPKCS12): Integer; cdecl = nil;
  PKCS12_get0_mac : procedure(pmac: PPASN1_OCTET_STRING; pmacalg: PPX509_ALGOR; psalt: PPASN1_OCTET_STRING; piter: PPASN1_INTEGER; p12: PPKCS12); cdecl = nil;
  PKCS12_SAFEBAG_get0_attr : function(bag: PPKCS12_SAFEBAG; attr_nid: Integer): PASN1_TYPE; cdecl = nil;
  PKCS12_SAFEBAG_get0_type : function(bag: PPKCS12_SAFEBAG): PASN1_OBJECT; cdecl = nil;
  PKCS12_SAFEBAG_get_nid : function(bag: PPKCS12_SAFEBAG): Integer; cdecl = nil;
  PKCS12_bag_type : function(bag: PPKCS12_SAFEBAG): Integer; cdecl = nil;
  M_PKCS12_bag_type : function(bag: PPKCS12_SAFEBAG): Integer; cdecl = nil;
  PKCS12_SAFEBAG_get_bag_nid : function(bag: PPKCS12_SAFEBAG): Integer; cdecl = nil;
  M_PKCS12_crl_bag_type : function(bag: PPKCS12_SAFEBAG): Integer; cdecl = nil;
  PKCS12_cert_bag_type : function(bag: PPKCS12_SAFEBAG): Integer; cdecl = nil;
  PKCS12_SAFEBAG_get1_cert : function(bag: PPKCS12_SAFEBAG): PX509; cdecl = nil;
  PKCS12_certbag2x509 : function(bag: PPKCS12_SAFEBAG): PX509; cdecl = nil;
  PKCS12_SAFEBAG_get1_crl : function(bag: PPKCS12_SAFEBAG): PX509_CRL; cdecl = nil;
  PKCS12_certbag2scrl : function(bag: PPKCS12_SAFEBAG): PX509_CRL; cdecl = nil;
  PKCS12_SAFEBAG_get0_safes : function(bag: PPKCS12_SAFEBAG): Pstack_st_PKCS12_SAFEBAG; cdecl = nil;
  PKCS12_SAFEBAG_get0_p8inf : function(bag: PPKCS12_SAFEBAG): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PKCS12_SAFEBAG_get0_pkcs8 : function(bag: PPKCS12_SAFEBAG): PX509_SIG; cdecl = nil;
  PKCS12_SAFEBAG_create_cert : function(x509: PX509): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_x5092certbag : function(x509: PX509): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_SAFEBAG_create_crl : function(crl: PX509_CRL): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_x509crl2certbag : function(crl: PX509_CRL): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_SAFEBAG_create0_p8inf : function(p8: PPKCS8_PRIV_KEY_INFO): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_SAFEBAG_create0_pkcs8 : function(p8: PX509_SIG): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_SAFEBAG_create_pkcs8_encrypt : function(pbe_nid: Integer; pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; p8inf: PPKCS8_PRIV_KEY_INFO): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_MAKE_SHKEYBAG : function(pbe_nid: Integer; pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; p8inf: PPKCS8_PRIV_KEY_INFO): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_item_pack_safebag : function(obj: Pointer; it: PASN1_ITEM; nid1: Integer; nid2: Integer): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS8_decrypt : function(p8: PX509_SIG; pass: PUTF8Char; passlen: Integer): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PKCS12_decrypt_skey : function(bag: PPKCS12_SAFEBAG; pass: PUTF8Char; passlen: Integer): PPKCS8_PRIV_KEY_INFO; cdecl = nil;
  PKCS8_encrypt : function(pbe_nid: Integer; cipher: PEVP_CIPHER; pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; p8: PPKCS8_PRIV_KEY_INFO): PX509_SIG; cdecl = nil;
  PKCS8_set0_pbe : function(pass: PUTF8Char; passlen: Integer; p8inf: PPKCS8_PRIV_KEY_INFO; pbe: PX509_ALGOR): PX509_SIG; cdecl = nil;
  PKCS12_pack_p7data : function(sk: Pstack_st_PKCS12_SAFEBAG): PPKCS7; cdecl = nil;
  PKCS12_unpack_p7data : function(p7: PPKCS7): Pstack_st_PKCS12_SAFEBAG; cdecl = nil;
  PKCS12_pack_p7encdata : function(pbe_nid: Integer; pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; bags: Pstack_st_PKCS12_SAFEBAG): PPKCS7; cdecl = nil;
  PKCS12_unpack_p7encdata : function(p7: PPKCS7; pass: PUTF8Char; passlen: Integer): Pstack_st_PKCS12_SAFEBAG; cdecl = nil;
  PKCS12_pack_authsafes : function(p12: PPKCS12; safes: Pstack_st_PKCS7): Integer; cdecl = nil;
  PKCS12_unpack_authsafes : function(p12: PPKCS12): Pstack_st_PKCS7; cdecl = nil;
  PKCS12_add_localkeyid : function(bag: PPKCS12_SAFEBAG; name: PByte; namelen: Integer): Integer; cdecl = nil;
  PKCS12_add_friendlyname_asc : function(bag: PPKCS12_SAFEBAG; name: PUTF8Char; namelen: Integer): Integer; cdecl = nil;
  PKCS12_add_friendlyname_utf8 : function(bag: PPKCS12_SAFEBAG; name: PUTF8Char; namelen: Integer): Integer; cdecl = nil;
  PKCS12_add_friendlyname : function(bag: PPKCS12_SAFEBAG; name: PUTF8Char; namelen: Integer): Integer; cdecl = nil;
  PKCS12_add_CSPName_asc : function(bag: PPKCS12_SAFEBAG; name: PUTF8Char; namelen: Integer): Integer; cdecl = nil;
  PKCS12_add_friendlyname_uni : function(bag: PPKCS12_SAFEBAG; name: PByte; namelen: Integer): Integer; cdecl = nil;
  PKCS8_add_keyusage : function(p8: PPKCS8_PRIV_KEY_INFO; usage: Integer): Integer; cdecl = nil;
  PKCS12_get_attr_gen : function(attrs: Pstack_st_X509_ATTRIBUTE; attr_nid: Integer): PASN1_TYPE; cdecl = nil;
  PKCS12_get_friendlyname : function(bag: PPKCS12_SAFEBAG): PUTF8Char; cdecl = nil;
  PKCS12_SAFEBAG_get0_attrs : function(bag: PPKCS12_SAFEBAG): Pstack_st_X509_ATTRIBUTE; cdecl = nil;
  PKCS12_pbe_crypt : function(algor: PX509_ALGOR; pass: PUTF8Char; passlen: Integer; vin: PByte; inlen: Integer; data: PPByte; datalen: PInteger; en_de: Integer): PByte; cdecl = nil;
  PKCS12_item_decrypt_d2i : function(algor: PX509_ALGOR; it: PASN1_ITEM; pass: PUTF8Char; passlen: Integer; oct: PASN1_OCTET_STRING; zbuf: Integer): Pointer; cdecl = nil;
  PKCS12_item_i2d_encrypt : function(algor: PX509_ALGOR; it: PASN1_ITEM; pass: PUTF8Char; passlen: Integer; obj: Pointer; zbuf: Integer): PASN1_OCTET_STRING; cdecl = nil;
  PKCS12_init : function(mode: Integer): PPKCS12; cdecl = nil;
  PKCS12_key_gen_asc : function(pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; id: Integer; iter: Integer; n: Integer; vout: PByte; md_type: PEVP_MD): Integer; cdecl = nil;
  PKCS12_key_gen_uni : function(pass: PByte; passlen: Integer; salt: PByte; saltlen: Integer; id: Integer; iter: Integer; n: Integer; vout: PByte; md_type: PEVP_MD): Integer; cdecl = nil;
  PKCS12_key_gen_utf8 : function(pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; id: Integer; iter: Integer; n: Integer; vout: PByte; md_type: PEVP_MD): Integer; cdecl = nil;
  PKCS12_key_gen : function(pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; id: Integer; iter: Integer; n: Integer; vout: PByte; md_type: PEVP_MD): Integer; cdecl = nil;
  PKCS12_PBE_keyivgen : function(ctx: PEVP_CIPHER_CTX; pass: PUTF8Char; passlen: Integer; param: PASN1_TYPE; cipher: PEVP_CIPHER; md_type: PEVP_MD; en_de: Integer): Integer; cdecl = nil;
  PKCS12_gen_mac : function(p12: PPKCS12; pass: PUTF8Char; passlen: Integer; mac: PByte; maclen: PCardinal): Integer; cdecl = nil;
  PKCS12_verify_mac : function(p12: PPKCS12; pass: PUTF8Char; passlen: Integer): Integer; cdecl = nil;
  PKCS12_set_mac : function(p12: PPKCS12; pass: PUTF8Char; passlen: Integer; salt: PByte; saltlen: Integer; iter: Integer; md_type: PEVP_MD): Integer; cdecl = nil;
  PKCS12_setup_mac : function(p12: PPKCS12; iter: Integer; salt: PByte; saltlen: Integer; md_type: PEVP_MD): Integer; cdecl = nil;
  OPENSSL_asc2uni : function(asc: PUTF8Char; asclen: Integer; uni: PPByte; unilen: PInteger): PByte; cdecl = nil;
  OPENSSL_uni2asc : function(uni: PByte; unilen: Integer): PUTF8Char; cdecl = nil;
  OPENSSL_utf82uni : function(asc: PUTF8Char; asclen: Integer; uni: PPByte; unilen: PInteger): PByte; cdecl = nil;
  OPENSSL_uni2utf8 : function(uni: PByte; unilen: Integer): PUTF8Char; cdecl = nil;
  PKCS12_new : function(): PPKCS12; cdecl = nil;
  PKCS12_free : procedure(a: PPKCS12); cdecl = nil;
  d2i_PKCS12 : function(a: PPPKCS12; vin: PPByte; len: Integer): PPKCS12; cdecl = nil;
  i2d_PKCS12 : function(a: PPKCS12; vout: PPByte): Integer; cdecl = nil;
  PKCS12_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS12_MAC_DATA_new : function(): PPKCS12_MAC_DATA; cdecl = nil;
  PKCS12_MAC_DATA_free : procedure(a: PPKCS12_MAC_DATA); cdecl = nil;
  d2i_PKCS12_MAC_DATA : function(a: PPPKCS12_MAC_DATA; vin: PPByte; len: Integer): PPKCS12_MAC_DATA; cdecl = nil;
  i2d_PKCS12_MAC_DATA : function(a: PPKCS12_MAC_DATA; vout: PPByte): Integer; cdecl = nil;
  PKCS12_MAC_DATA_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS12_SAFEBAG_new : function(): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_SAFEBAG_free : procedure(a: PPKCS12_SAFEBAG); cdecl = nil;
  d2i_PKCS12_SAFEBAG : function(a: PPPKCS12_SAFEBAG; vin: PPByte; len: Integer): PPKCS12_SAFEBAG; cdecl = nil;
  i2d_PKCS12_SAFEBAG : function(a: PPKCS12_SAFEBAG; vout: PPByte): Integer; cdecl = nil;
  PKCS12_SAFEBAG_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS12_BAGS_new : function(): PPKCS12_BAGS; cdecl = nil;
  PKCS12_BAGS_free : procedure(a: PPKCS12_BAGS); cdecl = nil;
  d2i_PKCS12_BAGS : function(a: PPPKCS12_BAGS; vin: PPByte; len: Integer): PPKCS12_BAGS; cdecl = nil;
  i2d_PKCS12_BAGS : function(a: PPKCS12_BAGS; vout: PPByte): Integer; cdecl = nil;
  PKCS12_BAGS_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS12_SAFEBAGS_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS12_AUTHSAFES_it : function(): PASN1_ITEM; cdecl = nil;
  PKCS12_PBE_add : procedure(); cdecl = nil;
  PKCS12_parse : function(p12: PPKCS12; pass: PUTF8Char; pkey: PPEVP_PKEY; cert: PPX509; ca: PPstack_st_X509): Integer; cdecl = nil;
  PKCS12_create : function(pass: PUTF8Char; name: PUTF8Char; pkey: PEVP_PKEY; cert: PX509; ca: Pstack_st_X509; nid_key: Integer; nid_cert: Integer; iter: Integer; mac_iter: Integer; keytype: Integer): PPKCS12; cdecl = nil;
  PKCS12_add_cert : function(pbags: PPstack_st_PKCS12_SAFEBAG; cert: PX509): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_add_key : function(pbags: PPstack_st_PKCS12_SAFEBAG; key: PEVP_PKEY; key_usage: Integer; iter: Integer; key_nid: Integer; pass: PUTF8Char): PPKCS12_SAFEBAG; cdecl = nil;
  PKCS12_add_safe : function(psafes: PPstack_st_PKCS7; bags: Pstack_st_PKCS12_SAFEBAG; safe_nid: Integer; iter: Integer; pass: PUTF8Char): Integer; cdecl = nil;
  PKCS12_add_safes : function(safes: Pstack_st_PKCS7; p7_nid: Integer): PPKCS12; cdecl = nil;
  i2d_PKCS12_bio : function(bp: PBIO; p12: PPKCS12): Integer; cdecl = nil;
  i2d_PKCS12_fp : function(fp: PPointer; p12: PPKCS12): Integer; cdecl = nil;
  d2i_PKCS12_bio : function(bp: PBIO; p12: PPPKCS12): PPKCS12; cdecl = nil;
  d2i_PKCS12_fp : function(fp: PPointer; p12: PPPKCS12): PPKCS12; cdecl = nil;
  PKCS12_newpass : function(p12: PPKCS12; oldpass: PUTF8Char; newpass: PUTF8Char): Integer; cdecl = nil;
  RAND_DRBG_new : function(vtype: Integer; flags: Cardinal; parent: PRAND_DRBG): PRAND_DRBG; cdecl = nil;
  RAND_DRBG_secure_new : function(vtype: Integer; flags: Cardinal; parent: PRAND_DRBG): PRAND_DRBG; cdecl = nil;
  RAND_DRBG_set : function(drbg: PRAND_DRBG; vtype: Integer; flags: Cardinal): Integer; cdecl = nil;
  RAND_DRBG_set_defaults : function(vtype: Integer; flags: Cardinal): Integer; cdecl = nil;
  RAND_DRBG_instantiate : function(drbg: PRAND_DRBG; pers: PByte; perslen: NativeUInt): Integer; cdecl = nil;
  RAND_DRBG_uninstantiate : function(drbg: PRAND_DRBG): Integer; cdecl = nil;
  RAND_DRBG_free : procedure(drbg: PRAND_DRBG); cdecl = nil;
  RAND_DRBG_reseed : function(drbg: PRAND_DRBG; adin: PByte; adinlen: NativeUInt; prediction_resistance: Integer): Integer; cdecl = nil;
  RAND_DRBG_generate : function(drbg: PRAND_DRBG; vout: PByte; outlen: NativeUInt; prediction_resistance: Integer; adin: PByte; adinlen: NativeUInt): Integer; cdecl = nil;
  RAND_DRBG_bytes : function(drbg: PRAND_DRBG; vout: PByte; outlen: NativeUInt): Integer; cdecl = nil;
  RAND_DRBG_set_reseed_interval : function(drbg: PRAND_DRBG; interval: Cardinal): Integer; cdecl = nil;
  RAND_DRBG_set_reseed_time_interval : function(drbg: PRAND_DRBG; interval: Longint): Integer; cdecl = nil;
  RAND_DRBG_set_reseed_defaults : function(master_reseed_interval: Cardinal; slave_reseed_interval: Cardinal; master_reseed_time_interval: Longint; slave_reseed_time_interval: Longint): Integer; cdecl = nil;
  RAND_DRBG_get0_master : function(): PRAND_DRBG; cdecl = nil;
  RAND_DRBG_get0_public : function(): PRAND_DRBG; cdecl = nil;
  RAND_DRBG_get0_private : function(): PRAND_DRBG; cdecl = nil;
  RAND_DRBG_set_ex_data : function(drbg: PRAND_DRBG; idx: Integer; arg: Pointer): Integer; cdecl = nil;
  RAND_DRBG_get_ex_data : function(drbg: PRAND_DRBG; idx: Integer): Pointer; cdecl = nil;
  RAND_DRBG_set_callbacks : function(drbg: PRAND_DRBG; get_entropy: RAND_DRBG_get_entropy_fn; cleanup_entropy: RAND_DRBG_cleanup_entropy_fn; get_nonce: RAND_DRBG_get_nonce_fn; cleanup_nonce: RAND_DRBG_cleanup_nonce_fn): Integer; cdecl = nil;
  RC2_set_key : procedure(key: PRC2_KEY; len: Integer; data: PByte; bits: Integer); cdecl = nil;
  RC2_ecb_encrypt : procedure(vin: PByte; vout: PByte; key: PRC2_KEY; enc: Integer); cdecl = nil;
  RC2_encrypt : procedure(data: PCardinal; key: PRC2_KEY); cdecl = nil;
  RC2_decrypt : procedure(data: PCardinal; key: PRC2_KEY); cdecl = nil;
  RC2_cbc_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; ks: PRC2_KEY; iv: PByte; enc: Integer); cdecl = nil;
  RC2_cfb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PRC2_KEY; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  RC2_ofb64_encrypt : procedure(vin: PByte; vout: PByte; length: Integer; schedule: PRC2_KEY; ivec: PByte; num: PInteger); cdecl = nil;
  RC4_options : function(): PUTF8Char; cdecl = nil;
  RC4_set_key : procedure(key: PRC4_KEY; len: Integer; data: PByte); cdecl = nil;
  RC4 : procedure(key: PRC4_KEY; len: NativeUInt; indata: PByte; outdata: PByte); cdecl = nil;
  RIPEMD160_Init : function(c: PRIPEMD160_CTX): Integer; cdecl = nil;
  RIPEMD160_Update : function(c: PRIPEMD160_CTX; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  RIPEMD160_Final : function(md: PByte; c: PRIPEMD160_CTX): Integer; cdecl = nil;
  RIPEMD160 : function(d: PByte; n: NativeUInt; md: PByte): PByte; cdecl = nil;
  RIPEMD160_Transform : procedure(c: PRIPEMD160_CTX; b: PByte); cdecl = nil;
  SEED_set_key : procedure(rawkey: PByte; ks: PSEED_KEY_SCHEDULE); cdecl = nil;
  SEED_encrypt : procedure(s: PByte; d: PByte; ks: PSEED_KEY_SCHEDULE); cdecl = nil;
  SEED_decrypt : procedure(s: PByte; d: PByte; ks: PSEED_KEY_SCHEDULE); cdecl = nil;
  SEED_ecb_encrypt : procedure(vin: PByte; vout: PByte; ks: PSEED_KEY_SCHEDULE; enc: Integer); cdecl = nil;
  SEED_cbc_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; ks: PSEED_KEY_SCHEDULE; ivec: PByte; enc: Integer); cdecl = nil;
  SEED_cfb128_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; ks: PSEED_KEY_SCHEDULE; ivec: PByte; num: PInteger; enc: Integer); cdecl = nil;
  SEED_ofb128_encrypt : procedure(vin: PByte; vout: PByte; len: NativeUInt; ks: PSEED_KEY_SCHEDULE; ivec: PByte; num: PInteger); cdecl = nil;
  SRP_user_pwd_free : procedure(user_pwd: PSRP_user_pwd); cdecl = nil;
  SRP_VBASE_new : function(seed_key: PUTF8Char): PSRP_VBASE; cdecl = nil;
  SRP_VBASE_free : procedure(vb: PSRP_VBASE); cdecl = nil;
  SRP_VBASE_init : function(vb: PSRP_VBASE; verifier_file: PUTF8Char): Integer; cdecl = nil;
  SRP_VBASE_get_by_user : function(vb: PSRP_VBASE; username: PUTF8Char): PSRP_user_pwd; cdecl = nil;
  SRP_VBASE_get1_by_user : function(vb: PSRP_VBASE; username: PUTF8Char): PSRP_user_pwd; cdecl = nil;
  SRP_create_verifier : function(user: PUTF8Char; pass: PUTF8Char; salt: PPUTF8Char; verifier: PPUTF8Char; N: PUTF8Char; g: PUTF8Char): PUTF8Char; cdecl = nil;
  SRP_create_verifier_BN : function(user: PUTF8Char; pass: PUTF8Char; salt: PPBIGNUM; verifier: PPBIGNUM; N: PBIGNUM; g: PBIGNUM): Integer; cdecl = nil;
  SRP_check_known_gN_param : function(g: PBIGNUM; N: PBIGNUM): PUTF8Char; cdecl = nil;
  SRP_get_default_gN : function(id: PUTF8Char): PSRP_gN; cdecl = nil;
  SRP_Calc_server_key : function(A: PBIGNUM; v: PBIGNUM; u: PBIGNUM; b: PBIGNUM; N: PBIGNUM): PBIGNUM; cdecl = nil;
  SRP_Calc_B : function(b: PBIGNUM; N: PBIGNUM; g: PBIGNUM; v: PBIGNUM): PBIGNUM; cdecl = nil;
  SRP_Verify_A_mod_N : function(A: PBIGNUM; N: PBIGNUM): Integer; cdecl = nil;
  SRP_Calc_u : function(A: PBIGNUM; B: PBIGNUM; N: PBIGNUM): PBIGNUM; cdecl = nil;
  SRP_Calc_x : function(s: PBIGNUM; user: PUTF8Char; pass: PUTF8Char): PBIGNUM; cdecl = nil;
  SRP_Calc_A : function(a: PBIGNUM; N: PBIGNUM; g: PBIGNUM): PBIGNUM; cdecl = nil;
  SRP_Calc_client_key : function(N: PBIGNUM; B: PBIGNUM; g: PBIGNUM; x: PBIGNUM; a: PBIGNUM; u: PBIGNUM): PBIGNUM; cdecl = nil;
  SRP_Verify_B_mod_N : function(B: PBIGNUM; N: PBIGNUM): Integer; cdecl = nil;
  DTLSv1_listen : function(s: PSSL; client: PBIO_ADDR): Integer; cdecl = nil;
  DTLS_set_timer_cb : procedure(s: PSSL; cb: DTLS_timer_cb); cdecl = nil;
  ERR_load_OSSL_STORE_strings : function(): Integer; cdecl = nil;
  OSSL_STORE_open : function(uri: PUTF8Char; ui_method: PUI_METHOD; ui_data: Pointer; post_process: OSSL_STORE_post_process_info_fn; post_process_data: Pointer): POSSL_STORE_CTX; cdecl = nil;
  OSSL_STORE_ctrl : function(ctx: POSSL_STORE_CTX; cmd: Integer): Integer varargs; cdecl = nil;
  OSSL_STORE_vctrl : function(ctx: POSSL_STORE_CTX; cmd: Integer; args: Pointer): Integer; cdecl = nil;
  OSSL_STORE_load : function(ctx: POSSL_STORE_CTX): POSSL_STORE_INFO; cdecl = nil;
  OSSL_STORE_eof : function(ctx: POSSL_STORE_CTX): Integer; cdecl = nil;
  OSSL_STORE_error : function(ctx: POSSL_STORE_CTX): Integer; cdecl = nil;
  OSSL_STORE_close : function(ctx: POSSL_STORE_CTX): Integer; cdecl = nil;
  OSSL_STORE_INFO_new_NAME : function(name: PUTF8Char): POSSL_STORE_INFO; cdecl = nil;
  OSSL_STORE_INFO_set0_NAME_description : function(info: POSSL_STORE_INFO; desc: PUTF8Char): Integer; cdecl = nil;
  OSSL_STORE_INFO_new_PARAMS : function(params: PEVP_PKEY): POSSL_STORE_INFO; cdecl = nil;
  OSSL_STORE_INFO_new_PKEY : function(pkey: PEVP_PKEY): POSSL_STORE_INFO; cdecl = nil;
  OSSL_STORE_INFO_new_CERT : function(x509: PX509): POSSL_STORE_INFO; cdecl = nil;
  OSSL_STORE_INFO_new_CRL : function(crl: PX509_CRL): POSSL_STORE_INFO; cdecl = nil;
  OSSL_STORE_INFO_get_type : function(info: POSSL_STORE_INFO): Integer; cdecl = nil;
  OSSL_STORE_INFO_get0_NAME : function(info: POSSL_STORE_INFO): PUTF8Char; cdecl = nil;
  OSSL_STORE_INFO_get1_NAME : function(info: POSSL_STORE_INFO): PUTF8Char; cdecl = nil;
  OSSL_STORE_INFO_get0_NAME_description : function(info: POSSL_STORE_INFO): PUTF8Char; cdecl = nil;
  OSSL_STORE_INFO_get1_NAME_description : function(info: POSSL_STORE_INFO): PUTF8Char; cdecl = nil;
  OSSL_STORE_INFO_get0_PARAMS : function(info: POSSL_STORE_INFO): PEVP_PKEY; cdecl = nil;
  OSSL_STORE_INFO_get1_PARAMS : function(info: POSSL_STORE_INFO): PEVP_PKEY; cdecl = nil;
  OSSL_STORE_INFO_get0_PKEY : function(info: POSSL_STORE_INFO): PEVP_PKEY; cdecl = nil;
  OSSL_STORE_INFO_get1_PKEY : function(info: POSSL_STORE_INFO): PEVP_PKEY; cdecl = nil;
  OSSL_STORE_INFO_get0_CERT : function(info: POSSL_STORE_INFO): PX509; cdecl = nil;
  OSSL_STORE_INFO_get1_CERT : function(info: POSSL_STORE_INFO): PX509; cdecl = nil;
  OSSL_STORE_INFO_get0_CRL : function(info: POSSL_STORE_INFO): PX509_CRL; cdecl = nil;
  OSSL_STORE_INFO_get1_CRL : function(info: POSSL_STORE_INFO): PX509_CRL; cdecl = nil;
  OSSL_STORE_INFO_type_string : function(vtype: Integer): PUTF8Char; cdecl = nil;
  OSSL_STORE_INFO_free : procedure(info: POSSL_STORE_INFO); cdecl = nil;
  OSSL_STORE_supports_search : function(ctx: POSSL_STORE_CTX; search_type: Integer): Integer; cdecl = nil;
  OSSL_STORE_SEARCH_by_name : function(name: PX509_NAME): POSSL_STORE_SEARCH; cdecl = nil;
  OSSL_STORE_SEARCH_by_issuer_serial : function(name: PX509_NAME; serial: PASN1_INTEGER): POSSL_STORE_SEARCH; cdecl = nil;
  OSSL_STORE_SEARCH_by_key_fingerprint : function(digest: PEVP_MD; bytes: PByte; len: NativeUInt): POSSL_STORE_SEARCH; cdecl = nil;
  OSSL_STORE_SEARCH_by_alias : function(alias: PUTF8Char): POSSL_STORE_SEARCH; cdecl = nil;
  OSSL_STORE_SEARCH_free : procedure(search: POSSL_STORE_SEARCH); cdecl = nil;
  OSSL_STORE_SEARCH_get_type : function(criterion: POSSL_STORE_SEARCH): Integer; cdecl = nil;
  OSSL_STORE_SEARCH_get0_name : function(criterion: POSSL_STORE_SEARCH): PX509_NAME; cdecl = nil;
  OSSL_STORE_SEARCH_get0_serial : function(criterion: POSSL_STORE_SEARCH): PASN1_INTEGER; cdecl = nil;
  OSSL_STORE_SEARCH_get0_bytes : function(criterion: POSSL_STORE_SEARCH; length: PNativeUInt): PByte; cdecl = nil;
  OSSL_STORE_SEARCH_get0_string : function(criterion: POSSL_STORE_SEARCH): PUTF8Char; cdecl = nil;
  OSSL_STORE_SEARCH_get0_digest : function(criterion: POSSL_STORE_SEARCH): PEVP_MD; cdecl = nil;
  OSSL_STORE_expect : function(ctx: POSSL_STORE_CTX; expected_type: Integer): Integer; cdecl = nil;
  OSSL_STORE_find : function(ctx: POSSL_STORE_CTX; search: POSSL_STORE_SEARCH): Integer; cdecl = nil;
  OSSL_STORE_LOADER_new : function(e: PENGINE; scheme: PUTF8Char): POSSL_STORE_LOADER; cdecl = nil;
  OSSL_STORE_LOADER_get0_engine : function(loader: POSSL_STORE_LOADER): PENGINE; cdecl = nil;
  OSSL_STORE_LOADER_get0_scheme : function(loader: POSSL_STORE_LOADER): PUTF8Char; cdecl = nil;
  OSSL_STORE_LOADER_set_open : function(loader: POSSL_STORE_LOADER; open_function: OSSL_STORE_open_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_ctrl : function(loader: POSSL_STORE_LOADER; ctrl_function: OSSL_STORE_ctrl_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_expect : function(loader: POSSL_STORE_LOADER; expect_function: OSSL_STORE_expect_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_find : function(loader: POSSL_STORE_LOADER; find_function: OSSL_STORE_find_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_load : function(loader: POSSL_STORE_LOADER; load_function: OSSL_STORE_load_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_eof : function(loader: POSSL_STORE_LOADER; eof_function: OSSL_STORE_eof_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_error : function(loader: POSSL_STORE_LOADER; error_function: OSSL_STORE_error_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_set_close : function(loader: POSSL_STORE_LOADER; close_function: OSSL_STORE_close_fn): Integer; cdecl = nil;
  OSSL_STORE_LOADER_free : procedure(loader: POSSL_STORE_LOADER); cdecl = nil;
  OSSL_STORE_register_loader : function(loader: POSSL_STORE_LOADER): Integer; cdecl = nil;
  OSSL_STORE_unregister_loader : function(scheme: PUTF8Char): POSSL_STORE_LOADER; cdecl = nil;
  OSSL_STORE_do_all_loaders : function(do_function: OSSL_STORE_do_all_loaders_do_function; do_arg: Pointer): Integer; cdecl = nil;
  ERR_load_TS_strings : function(): Integer; cdecl = nil;
  TS_REQ_new : function(): PTS_REQ; cdecl = nil;
  TS_REQ_free : procedure(a: PTS_REQ); cdecl = nil;
  i2d_TS_REQ : function(a: PTS_REQ; pp: PPByte): Integer; cdecl = nil;
  d2i_TS_REQ : function(a: PPTS_REQ; pp: PPByte; length: Integer): PTS_REQ; cdecl = nil;
  TS_REQ_dup : function(a: PTS_REQ): PTS_REQ; cdecl = nil;
  d2i_TS_REQ_fp : function(fp: PPointer; a: PPTS_REQ): PTS_REQ; cdecl = nil;
  i2d_TS_REQ_fp : function(fp: PPointer; a: PTS_REQ): Integer; cdecl = nil;
  d2i_TS_REQ_bio : function(fp: PBIO; a: PPTS_REQ): PTS_REQ; cdecl = nil;
  i2d_TS_REQ_bio : function(fp: PBIO; a: PTS_REQ): Integer; cdecl = nil;
  TS_MSG_IMPRINT_new : function(): PTS_MSG_IMPRINT; cdecl = nil;
  TS_MSG_IMPRINT_free : procedure(a: PTS_MSG_IMPRINT); cdecl = nil;
  i2d_TS_MSG_IMPRINT : function(a: PTS_MSG_IMPRINT; pp: PPByte): Integer; cdecl = nil;
  d2i_TS_MSG_IMPRINT : function(a: PPTS_MSG_IMPRINT; pp: PPByte; length: Integer): PTS_MSG_IMPRINT; cdecl = nil;
  TS_MSG_IMPRINT_dup : function(a: PTS_MSG_IMPRINT): PTS_MSG_IMPRINT; cdecl = nil;
  d2i_TS_MSG_IMPRINT_fp : function(fp: PPointer; a: PPTS_MSG_IMPRINT): PTS_MSG_IMPRINT; cdecl = nil;
  i2d_TS_MSG_IMPRINT_fp : function(fp: PPointer; a: PTS_MSG_IMPRINT): Integer; cdecl = nil;
  d2i_TS_MSG_IMPRINT_bio : function(bio: PBIO; a: PPTS_MSG_IMPRINT): PTS_MSG_IMPRINT; cdecl = nil;
  i2d_TS_MSG_IMPRINT_bio : function(bio: PBIO; a: PTS_MSG_IMPRINT): Integer; cdecl = nil;
  TS_RESP_new : function(): PTS_RESP; cdecl = nil;
  TS_RESP_free : procedure(a: PTS_RESP); cdecl = nil;
  i2d_TS_RESP : function(a: PTS_RESP; pp: PPByte): Integer; cdecl = nil;
  d2i_TS_RESP : function(a: PPTS_RESP; pp: PPByte; length: Integer): PTS_RESP; cdecl = nil;
  PKCS7_to_TS_TST_INFO : function(token: PPKCS7): PTS_TST_INFO; cdecl = nil;
  TS_RESP_dup : function(a: PTS_RESP): PTS_RESP; cdecl = nil;
  d2i_TS_RESP_fp : function(fp: PPointer; a: PPTS_RESP): PTS_RESP; cdecl = nil;
  i2d_TS_RESP_fp : function(fp: PPointer; a: PTS_RESP): Integer; cdecl = nil;
  d2i_TS_RESP_bio : function(bio: PBIO; a: PPTS_RESP): PTS_RESP; cdecl = nil;
  i2d_TS_RESP_bio : function(bio: PBIO; a: PTS_RESP): Integer; cdecl = nil;
  TS_STATUS_INFO_new : function(): PTS_STATUS_INFO; cdecl = nil;
  TS_STATUS_INFO_free : procedure(a: PTS_STATUS_INFO); cdecl = nil;
  i2d_TS_STATUS_INFO : function(a: PTS_STATUS_INFO; pp: PPByte): Integer; cdecl = nil;
  d2i_TS_STATUS_INFO : function(a: PPTS_STATUS_INFO; pp: PPByte; length: Integer): PTS_STATUS_INFO; cdecl = nil;
  TS_STATUS_INFO_dup : function(a: PTS_STATUS_INFO): PTS_STATUS_INFO; cdecl = nil;
  TS_TST_INFO_new : function(): PTS_TST_INFO; cdecl = nil;
  TS_TST_INFO_free : procedure(a: PTS_TST_INFO); cdecl = nil;
  i2d_TS_TST_INFO : function(a: PTS_TST_INFO; pp: PPByte): Integer; cdecl = nil;
  d2i_TS_TST_INFO : function(a: PPTS_TST_INFO; pp: PPByte; length: Integer): PTS_TST_INFO; cdecl = nil;
  TS_TST_INFO_dup : function(a: PTS_TST_INFO): PTS_TST_INFO; cdecl = nil;
  d2i_TS_TST_INFO_fp : function(fp: PPointer; a: PPTS_TST_INFO): PTS_TST_INFO; cdecl = nil;
  i2d_TS_TST_INFO_fp : function(fp: PPointer; a: PTS_TST_INFO): Integer; cdecl = nil;
  d2i_TS_TST_INFO_bio : function(bio: PBIO; a: PPTS_TST_INFO): PTS_TST_INFO; cdecl = nil;
  i2d_TS_TST_INFO_bio : function(bio: PBIO; a: PTS_TST_INFO): Integer; cdecl = nil;
  TS_ACCURACY_new : function(): PTS_ACCURACY; cdecl = nil;
  TS_ACCURACY_free : procedure(a: PTS_ACCURACY); cdecl = nil;
  i2d_TS_ACCURACY : function(a: PTS_ACCURACY; pp: PPByte): Integer; cdecl = nil;
  d2i_TS_ACCURACY : function(a: PPTS_ACCURACY; pp: PPByte; length: Integer): PTS_ACCURACY; cdecl = nil;
  TS_ACCURACY_dup : function(a: PTS_ACCURACY): PTS_ACCURACY; cdecl = nil;
  ESS_ISSUER_SERIAL_new : function(): PESS_ISSUER_SERIAL; cdecl = nil;
  ESS_ISSUER_SERIAL_free : procedure(a: PESS_ISSUER_SERIAL); cdecl = nil;
  i2d_ESS_ISSUER_SERIAL : function(a: PESS_ISSUER_SERIAL; pp: PPByte): Integer; cdecl = nil;
  d2i_ESS_ISSUER_SERIAL : function(a: PPESS_ISSUER_SERIAL; pp: PPByte; length: Integer): PESS_ISSUER_SERIAL; cdecl = nil;
  ESS_ISSUER_SERIAL_dup : function(a: PESS_ISSUER_SERIAL): PESS_ISSUER_SERIAL; cdecl = nil;
  ESS_CERT_ID_new : function(): PESS_CERT_ID; cdecl = nil;
  ESS_CERT_ID_free : procedure(a: PESS_CERT_ID); cdecl = nil;
  i2d_ESS_CERT_ID : function(a: PESS_CERT_ID; pp: PPByte): Integer; cdecl = nil;
  d2i_ESS_CERT_ID : function(a: PPESS_CERT_ID; pp: PPByte; length: Integer): PESS_CERT_ID; cdecl = nil;
  ESS_CERT_ID_dup : function(a: PESS_CERT_ID): PESS_CERT_ID; cdecl = nil;
  ESS_SIGNING_CERT_new : function(): PESS_SIGNING_CERT; cdecl = nil;
  ESS_SIGNING_CERT_free : procedure(a: PESS_SIGNING_CERT); cdecl = nil;
  i2d_ESS_SIGNING_CERT : function(a: PESS_SIGNING_CERT; pp: PPByte): Integer; cdecl = nil;
  d2i_ESS_SIGNING_CERT : function(a: PPESS_SIGNING_CERT; pp: PPByte; length: Integer): PESS_SIGNING_CERT; cdecl = nil;
  ESS_SIGNING_CERT_dup : function(a: PESS_SIGNING_CERT): PESS_SIGNING_CERT; cdecl = nil;
  ESS_CERT_ID_V2_new : function(): PESS_CERT_ID_V2; cdecl = nil;
  ESS_CERT_ID_V2_free : procedure(a: PESS_CERT_ID_V2); cdecl = nil;
  i2d_ESS_CERT_ID_V2 : function(a: PESS_CERT_ID_V2; pp: PPByte): Integer; cdecl = nil;
  d2i_ESS_CERT_ID_V2 : function(a: PPESS_CERT_ID_V2; pp: PPByte; length: Integer): PESS_CERT_ID_V2; cdecl = nil;
  ESS_CERT_ID_V2_dup : function(a: PESS_CERT_ID_V2): PESS_CERT_ID_V2; cdecl = nil;
  ESS_SIGNING_CERT_V2_new : function(): PESS_SIGNING_CERT_V2; cdecl = nil;
  ESS_SIGNING_CERT_V2_free : procedure(a: PESS_SIGNING_CERT_V2); cdecl = nil;
  i2d_ESS_SIGNING_CERT_V2 : function(a: PESS_SIGNING_CERT_V2; pp: PPByte): Integer; cdecl = nil;
  d2i_ESS_SIGNING_CERT_V2 : function(a: PPESS_SIGNING_CERT_V2; pp: PPByte; length: Integer): PESS_SIGNING_CERT_V2; cdecl = nil;
  ESS_SIGNING_CERT_V2_dup : function(a: PESS_SIGNING_CERT_V2): PESS_SIGNING_CERT_V2; cdecl = nil;
  TS_REQ_set_version : function(a: PTS_REQ; version: Integer): Integer; cdecl = nil;
  TS_REQ_get_version : function(a: PTS_REQ): Integer; cdecl = nil;
  TS_STATUS_INFO_set_status : function(a: PTS_STATUS_INFO; i: Integer): Integer; cdecl = nil;
  TS_STATUS_INFO_get0_status : function(a: PTS_STATUS_INFO): PASN1_INTEGER; cdecl = nil;
  TS_STATUS_INFO_get0_text : function(a: PTS_STATUS_INFO): Pstack_st_ASN1_UTF8STRING; cdecl = nil;
  TS_STATUS_INFO_get0_failure_info : function(a: PTS_STATUS_INFO): PASN1_BIT_STRING; cdecl = nil;
  TS_REQ_set_msg_imprint : function(a: PTS_REQ; msg_imprint: PTS_MSG_IMPRINT): Integer; cdecl = nil;
  TS_REQ_get_msg_imprint : function(a: PTS_REQ): PTS_MSG_IMPRINT; cdecl = nil;
  TS_MSG_IMPRINT_set_algo : function(a: PTS_MSG_IMPRINT; alg: PX509_ALGOR): Integer; cdecl = nil;
  TS_MSG_IMPRINT_get_algo : function(a: PTS_MSG_IMPRINT): PX509_ALGOR; cdecl = nil;
  TS_MSG_IMPRINT_set_msg : function(a: PTS_MSG_IMPRINT; d: PByte; len: Integer): Integer; cdecl = nil;
  TS_MSG_IMPRINT_get_msg : function(a: PTS_MSG_IMPRINT): PASN1_OCTET_STRING; cdecl = nil;
  TS_REQ_set_policy_id : function(a: PTS_REQ; policy: PASN1_OBJECT): Integer; cdecl = nil;
  TS_REQ_get_policy_id : function(a: PTS_REQ): PASN1_OBJECT; cdecl = nil;
  TS_REQ_set_nonce : function(a: PTS_REQ; nonce: PASN1_INTEGER): Integer; cdecl = nil;
  TS_REQ_get_nonce : function(a: PTS_REQ): PASN1_INTEGER; cdecl = nil;
  TS_REQ_set_cert_req : function(a: PTS_REQ; cert_req: Integer): Integer; cdecl = nil;
  TS_REQ_get_cert_req : function(a: PTS_REQ): Integer; cdecl = nil;
  TS_REQ_get_exts : function(a: PTS_REQ): Pstack_st_X509_EXTENSION; cdecl = nil;
  TS_REQ_ext_free : procedure(a: PTS_REQ); cdecl = nil;
  TS_REQ_get_ext_count : function(a: PTS_REQ): Integer; cdecl = nil;
  TS_REQ_get_ext_by_NID : function(a: PTS_REQ; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  TS_REQ_get_ext_by_OBJ : function(a: PTS_REQ; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  TS_REQ_get_ext_by_critical : function(a: PTS_REQ; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  TS_REQ_get_ext : function(a: PTS_REQ; loc: Integer): PX509_EXTENSION; cdecl = nil;
  TS_REQ_delete_ext : function(a: PTS_REQ; loc: Integer): PX509_EXTENSION; cdecl = nil;
  TS_REQ_add_ext : function(a: PTS_REQ; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  TS_REQ_get_ext_d2i : function(a: PTS_REQ; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  TS_REQ_print_bio : function(bio: PBIO; a: PTS_REQ): Integer; cdecl = nil;
  TS_RESP_set_status_info : function(a: PTS_RESP; info: PTS_STATUS_INFO): Integer; cdecl = nil;
  TS_RESP_get_status_info : function(a: PTS_RESP): PTS_STATUS_INFO; cdecl = nil;
  TS_RESP_set_tst_info : procedure(a: PTS_RESP; p7: PPKCS7; tst_info: PTS_TST_INFO); cdecl = nil;
  TS_RESP_get_token : function(a: PTS_RESP): PPKCS7; cdecl = nil;
  TS_RESP_get_tst_info : function(a: PTS_RESP): PTS_TST_INFO; cdecl = nil;
  TS_TST_INFO_set_version : function(a: PTS_TST_INFO; version: Integer): Integer; cdecl = nil;
  TS_TST_INFO_get_version : function(a: PTS_TST_INFO): Integer; cdecl = nil;
  TS_TST_INFO_set_policy_id : function(a: PTS_TST_INFO; policy_id: PASN1_OBJECT): Integer; cdecl = nil;
  TS_TST_INFO_get_policy_id : function(a: PTS_TST_INFO): PASN1_OBJECT; cdecl = nil;
  TS_TST_INFO_set_msg_imprint : function(a: PTS_TST_INFO; msg_imprint: PTS_MSG_IMPRINT): Integer; cdecl = nil;
  TS_TST_INFO_get_msg_imprint : function(a: PTS_TST_INFO): PTS_MSG_IMPRINT; cdecl = nil;
  TS_TST_INFO_set_serial : function(a: PTS_TST_INFO; serial: PASN1_INTEGER): Integer; cdecl = nil;
  TS_TST_INFO_get_serial : function(a: PTS_TST_INFO): PASN1_INTEGER; cdecl = nil;
  TS_TST_INFO_set_time : function(a: PTS_TST_INFO; gtime: PASN1_GENERALIZEDTIME): Integer; cdecl = nil;
  TS_TST_INFO_get_time : function(a: PTS_TST_INFO): PASN1_GENERALIZEDTIME; cdecl = nil;
  TS_TST_INFO_set_accuracy : function(a: PTS_TST_INFO; accuracy: PTS_ACCURACY): Integer; cdecl = nil;
  TS_TST_INFO_get_accuracy : function(a: PTS_TST_INFO): PTS_ACCURACY; cdecl = nil;
  TS_ACCURACY_set_seconds : function(a: PTS_ACCURACY; seconds: PASN1_INTEGER): Integer; cdecl = nil;
  TS_ACCURACY_get_seconds : function(a: PTS_ACCURACY): PASN1_INTEGER; cdecl = nil;
  TS_ACCURACY_set_millis : function(a: PTS_ACCURACY; millis: PASN1_INTEGER): Integer; cdecl = nil;
  TS_ACCURACY_get_millis : function(a: PTS_ACCURACY): PASN1_INTEGER; cdecl = nil;
  TS_ACCURACY_set_micros : function(a: PTS_ACCURACY; micros: PASN1_INTEGER): Integer; cdecl = nil;
  TS_ACCURACY_get_micros : function(a: PTS_ACCURACY): PASN1_INTEGER; cdecl = nil;
  TS_TST_INFO_set_ordering : function(a: PTS_TST_INFO; ordering: Integer): Integer; cdecl = nil;
  TS_TST_INFO_get_ordering : function(a: PTS_TST_INFO): Integer; cdecl = nil;
  TS_TST_INFO_set_nonce : function(a: PTS_TST_INFO; nonce: PASN1_INTEGER): Integer; cdecl = nil;
  TS_TST_INFO_get_nonce : function(a: PTS_TST_INFO): PASN1_INTEGER; cdecl = nil;
  TS_TST_INFO_set_tsa : function(a: PTS_TST_INFO; tsa: PGENERAL_NAME): Integer; cdecl = nil;
  TS_TST_INFO_get_tsa : function(a: PTS_TST_INFO): PGENERAL_NAME; cdecl = nil;
  TS_TST_INFO_get_exts : function(a: PTS_TST_INFO): Pstack_st_X509_EXTENSION; cdecl = nil;
  TS_TST_INFO_ext_free : procedure(a: PTS_TST_INFO); cdecl = nil;
  TS_TST_INFO_get_ext_count : function(a: PTS_TST_INFO): Integer; cdecl = nil;
  TS_TST_INFO_get_ext_by_NID : function(a: PTS_TST_INFO; nid: Integer; lastpos: Integer): Integer; cdecl = nil;
  TS_TST_INFO_get_ext_by_OBJ : function(a: PTS_TST_INFO; obj: PASN1_OBJECT; lastpos: Integer): Integer; cdecl = nil;
  TS_TST_INFO_get_ext_by_critical : function(a: PTS_TST_INFO; crit: Integer; lastpos: Integer): Integer; cdecl = nil;
  TS_TST_INFO_get_ext : function(a: PTS_TST_INFO; loc: Integer): PX509_EXTENSION; cdecl = nil;
  TS_TST_INFO_delete_ext : function(a: PTS_TST_INFO; loc: Integer): PX509_EXTENSION; cdecl = nil;
  TS_TST_INFO_add_ext : function(a: PTS_TST_INFO; ex: PX509_EXTENSION; loc: Integer): Integer; cdecl = nil;
  TS_TST_INFO_get_ext_d2i : function(a: PTS_TST_INFO; nid: Integer; crit: PInteger; idx: PInteger): Pointer; cdecl = nil;
  TS_RESP_CTX_new : function(): PTS_RESP_CTX; cdecl = nil;
  TS_RESP_CTX_free : procedure(ctx: PTS_RESP_CTX); cdecl = nil;
  TS_RESP_CTX_set_signer_cert : function(ctx: PTS_RESP_CTX; signer: PX509): Integer; cdecl = nil;
  TS_RESP_CTX_set_signer_key : function(ctx: PTS_RESP_CTX; key: PEVP_PKEY): Integer; cdecl = nil;
  TS_RESP_CTX_set_signer_digest : function(ctx: PTS_RESP_CTX; signer_digest: PEVP_MD): Integer; cdecl = nil;
  TS_RESP_CTX_set_ess_cert_id_digest : function(ctx: PTS_RESP_CTX; md: PEVP_MD): Integer; cdecl = nil;
  TS_RESP_CTX_set_def_policy : function(ctx: PTS_RESP_CTX; def_policy: PASN1_OBJECT): Integer; cdecl = nil;
  TS_RESP_CTX_set_certs : function(ctx: PTS_RESP_CTX; certs: Pstack_st_X509): Integer; cdecl = nil;
  TS_RESP_CTX_add_policy : function(ctx: PTS_RESP_CTX; policy: PASN1_OBJECT): Integer; cdecl = nil;
  TS_RESP_CTX_add_md : function(ctx: PTS_RESP_CTX; md: PEVP_MD): Integer; cdecl = nil;
  TS_RESP_CTX_set_accuracy : function(ctx: PTS_RESP_CTX; secs: Integer; millis: Integer; micros: Integer): Integer; cdecl = nil;
  TS_RESP_CTX_set_clock_precision_digits : function(ctx: PTS_RESP_CTX; clock_precision_digits: Cardinal): Integer; cdecl = nil;
  TS_RESP_CTX_add_flags : procedure(ctx: PTS_RESP_CTX; flags: Integer); cdecl = nil;
  TS_RESP_CTX_set_serial_cb : procedure(ctx: PTS_RESP_CTX; cb: TS_serial_cb; data: Pointer); cdecl = nil;
  TS_RESP_CTX_set_time_cb : procedure(ctx: PTS_RESP_CTX; cb: TS_time_cb; data: Pointer); cdecl = nil;
  TS_RESP_CTX_set_extension_cb : procedure(ctx: PTS_RESP_CTX; cb: TS_extension_cb; data: Pointer); cdecl = nil;
  TS_RESP_CTX_set_status_info : function(ctx: PTS_RESP_CTX; status: Integer; text: PUTF8Char): Integer; cdecl = nil;
  TS_RESP_CTX_set_status_info_cond : function(ctx: PTS_RESP_CTX; status: Integer; text: PUTF8Char): Integer; cdecl = nil;
  TS_RESP_CTX_add_failure_info : function(ctx: PTS_RESP_CTX; failure: Integer): Integer; cdecl = nil;
  TS_RESP_CTX_get_request : function(ctx: PTS_RESP_CTX): PTS_REQ; cdecl = nil;
  TS_RESP_CTX_get_tst_info : function(ctx: PTS_RESP_CTX): PTS_TST_INFO; cdecl = nil;
  TS_RESP_create_response : function(ctx: PTS_RESP_CTX; req_bio: PBIO): PTS_RESP; cdecl = nil;
  TS_RESP_verify_signature : function(token: PPKCS7; certs: Pstack_st_X509; store: PX509_STORE; signer_out: PPX509): Integer; cdecl = nil;
  TS_RESP_verify_response : function(ctx: PTS_VERIFY_CTX; response: PTS_RESP): Integer; cdecl = nil;
  TS_RESP_verify_token : function(ctx: PTS_VERIFY_CTX; token: PPKCS7): Integer; cdecl = nil;
  TS_VERIFY_CTX_new : function(): PTS_VERIFY_CTX; cdecl = nil;
  TS_VERIFY_CTX_init : procedure(ctx: PTS_VERIFY_CTX); cdecl = nil;
  TS_VERIFY_CTX_free : procedure(ctx: PTS_VERIFY_CTX); cdecl = nil;
  TS_VERIFY_CTX_cleanup : procedure(ctx: PTS_VERIFY_CTX); cdecl = nil;
  TS_VERIFY_CTX_set_flags : function(ctx: PTS_VERIFY_CTX; f: Integer): Integer; cdecl = nil;
  TS_VERIFY_CTX_add_flags : function(ctx: PTS_VERIFY_CTX; f: Integer): Integer; cdecl = nil;
  TS_VERIFY_CTX_set_data : function(ctx: PTS_VERIFY_CTX; b: PBIO): PBIO; cdecl = nil;
  TS_VERIFY_CTX_set_imprint : function(ctx: PTS_VERIFY_CTX; hexstr: PByte; len: Integer): PByte; cdecl = nil;
  TS_VERIFY_CTX_set_store : function(ctx: PTS_VERIFY_CTX; s: PX509_STORE): PX509_STORE; cdecl = nil;
  TS_VERIFY_CTS_set_certs : function(ctx: PTS_VERIFY_CTX; certs: Pstack_st_X509): Pstack_st_X509; cdecl = nil;
  TS_REQ_to_TS_VERIFY_CTX : function(req: PTS_REQ; ctx: PTS_VERIFY_CTX): PTS_VERIFY_CTX; cdecl = nil;
  TS_RESP_print_bio : function(bio: PBIO; a: PTS_RESP): Integer; cdecl = nil;
  TS_STATUS_INFO_print_bio : function(bio: PBIO; a: PTS_STATUS_INFO): Integer; cdecl = nil;
  TS_TST_INFO_print_bio : function(bio: PBIO; a: PTS_TST_INFO): Integer; cdecl = nil;
  TS_ASN1_INTEGER_print_bio : function(bio: PBIO; num: PASN1_INTEGER): Integer; cdecl = nil;
  TS_OBJ_print_bio : function(bio: PBIO; obj: PASN1_OBJECT): Integer; cdecl = nil;
  TS_ext_print_bio : function(bio: PBIO; extensions: Pstack_st_X509_EXTENSION): Integer; cdecl = nil;
  TS_X509_ALGOR_print_bio : function(bio: PBIO; alg: PX509_ALGOR): Integer; cdecl = nil;
  TS_MSG_IMPRINT_print_bio : function(bio: PBIO; msg: PTS_MSG_IMPRINT): Integer; cdecl = nil;
  TS_CONF_load_cert : function(vfile: PUTF8Char): PX509; cdecl = nil;
  TS_CONF_load_certs : function(vfile: PUTF8Char): Pstack_st_X509; cdecl = nil;
  TS_CONF_load_key : function(vfile: PUTF8Char; pass: PUTF8Char): PEVP_PKEY; cdecl = nil;
  TS_CONF_get_tsa_section : function(conf: PCONF; section: PUTF8Char): PUTF8Char; cdecl = nil;
  TS_CONF_set_serial : function(conf: PCONF; section: PUTF8Char; cb: TS_serial_cb; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_crypto_device : function(conf: PCONF; section: PUTF8Char; device: PUTF8Char): Integer; cdecl = nil;
  TS_CONF_set_default_engine : function(name: PUTF8Char): Integer; cdecl = nil;
  TS_CONF_set_signer_cert : function(conf: PCONF; section: PUTF8Char; cert: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_certs : function(conf: PCONF; section: PUTF8Char; certs: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_signer_key : function(conf: PCONF; section: PUTF8Char; key: PUTF8Char; pass: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_signer_digest : function(conf: PCONF; section: PUTF8Char; md: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_def_policy : function(conf: PCONF; section: PUTF8Char; policy: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_policies : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_digests : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_accuracy : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_clock_precision_digits : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_ordering : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_tsa_name : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_ess_cert_id_chain : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TS_CONF_set_ess_cert_id_digest : function(conf: PCONF; section: PUTF8Char; ctx: PTS_RESP_CTX): Integer; cdecl = nil;
  TXT_DB_read : function(vin: PBIO; num: Integer): PTXT_DB; cdecl = nil;
  TXT_DB_write : function(vout: PBIO; db: PTXT_DB): Integer; cdecl = nil;
  TXT_DB_create_index : function(db: PTXT_DB; field: Integer; qual: TXT_DB_create_index_qual; hash: OPENSSL_LH_HASHFUNC; cmp: OPENSSL_LH_COMPFUNC): Integer; cdecl = nil;
  TXT_DB_free : procedure(db: PTXT_DB); cdecl = nil;
  TXT_DB_get_by_index : function(db: PTXT_DB; idx: Integer; value: POPENSSL_STRING): POPENSSL_STRING; cdecl = nil;
  TXT_DB_insert : function(db: PTXT_DB; value: POPENSSL_STRING): Integer; cdecl = nil;
  WHIRLPOOL_Init : function(c: PWHIRLPOOL_CTX): Integer; cdecl = nil;
  WHIRLPOOL_Update : function(c: PWHIRLPOOL_CTX; inp: Pointer; bytes: NativeUInt): Integer; cdecl = nil;
  WHIRLPOOL_BitUpdate : procedure(c: PWHIRLPOOL_CTX; inp: Pointer; bits: NativeUInt); cdecl = nil;
  WHIRLPOOL_Final : function(md: PByte; c: PWHIRLPOOL_CTX): Integer; cdecl = nil;
  WHIRLPOOL : function(inp: Pointer; bytes: NativeUInt; md: PByte): PByte; cdecl = nil;

const
  GSSLCryptoImports : array[0..4352] of TOSSLImports = (
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_options                               ; N: 'AES_options'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_set_encrypt_key                       ; N: 'AES_set_encrypt_key'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_set_decrypt_key                       ; N: 'AES_set_decrypt_key'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_encrypt                               ; N: 'AES_encrypt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_decrypt                               ; N: 'AES_decrypt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_ecb_encrypt                           ; N: 'AES_ecb_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_cbc_encrypt                           ; N: 'AES_cbc_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_cfb128_encrypt                        ; N: 'AES_cfb128_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_cfb1_encrypt                          ; N: 'AES_cfb1_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_cfb8_encrypt                          ; N: 'AES_cfb8_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_ofb128_encrypt                        ; N: 'AES_ofb128_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_ige_encrypt                           ; N: 'AES_ige_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_bi_ige_encrypt                        ; N: 'AES_bi_ige_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_wrap_key                              ; N: 'AES_wrap_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AES_unwrap_key                            ; N: 'AES_unwrap_key'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_num                            ; N: 'OPENSSL_sk_num'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_value                          ; N: 'OPENSSL_sk_value'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_set                            ; N: 'OPENSSL_sk_set'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_new                            ; N: 'OPENSSL_sk_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_new_null                       ; N: 'OPENSSL_sk_new_null'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_new_reserve                    ; N: 'OPENSSL_sk_new_reserve'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_reserve                        ; N: 'OPENSSL_sk_reserve'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_free                           ; N: 'OPENSSL_sk_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_pop_free                       ; N: 'OPENSSL_sk_pop_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_deep_copy                      ; N: 'OPENSSL_sk_deep_copy'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_insert                         ; N: 'OPENSSL_sk_insert'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_delete                         ; N: 'OPENSSL_sk_delete'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_delete_ptr                     ; N: 'OPENSSL_sk_delete_ptr'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_find                           ; N: 'OPENSSL_sk_find'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_find_ex                        ; N: 'OPENSSL_sk_find_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_push                           ; N: 'OPENSSL_sk_push'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_unshift                        ; N: 'OPENSSL_sk_unshift'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_shift                          ; N: 'OPENSSL_sk_shift'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_pop                            ; N: 'OPENSSL_sk_pop'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_zero                           ; N: 'OPENSSL_sk_zero'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_set_cmp_func                   ; N: 'OPENSSL_sk_set_cmp_func'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_dup                            ; N: 'OPENSSL_sk_dup'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_sort                           ; N: 'OPENSSL_sk_sort'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_sk_is_sorted                      ; N: 'OPENSSL_sk_is_sorted'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_CRYPTO_strings                   ; N: 'ERR_load_CRYPTO_strings'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_lock_new                    ; N: 'CRYPTO_THREAD_lock_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_read_lock                   ; N: 'CRYPTO_THREAD_read_lock'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_write_lock                  ; N: 'CRYPTO_THREAD_write_lock'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_unlock                      ; N: 'CRYPTO_THREAD_unlock'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_lock_free                   ; N: 'CRYPTO_THREAD_lock_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_atomic_add                         ; N: 'CRYPTO_atomic_add'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_mem_ctrl                           ; N: 'CRYPTO_mem_ctrl'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_strlcpy                           ; N: 'OPENSSL_strlcpy'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_strlcat                           ; N: 'OPENSSL_strlcat'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_strnlen                           ; N: 'OPENSSL_strnlen'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_buf2hexstr                        ; N: 'OPENSSL_buf2hexstr'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_hexstr2buf                        ; N: 'OPENSSL_hexstr2buf'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_hexchar2int                       ; N: 'OPENSSL_hexchar2int'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OpenSSL_version_num                       ; N: 'OpenSSL_version_num'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSLeay                                    ; N: 'OpenSSL_version_num'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OpenSSL_version                           ; N: 'OpenSSL_version'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSLeay_version                            ; N: 'OpenSSL_version'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_issetugid                         ; N: 'OPENSSL_issetugid'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_get_ex_new_index                   ; N: 'CRYPTO_get_ex_new_index'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_free_ex_index                      ; N: 'CRYPTO_free_ex_index'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_new_ex_data                        ; N: 'CRYPTO_new_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_dup_ex_data                        ; N: 'CRYPTO_dup_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_free_ex_data                       ; N: 'CRYPTO_free_ex_data'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_set_ex_data                        ; N: 'CRYPTO_set_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_get_ex_data                        ; N: 'CRYPTO_get_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_set_mem_functions                  ; N: 'CRYPTO_set_mem_functions'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_set_mem_debug                      ; N: 'CRYPTO_set_mem_debug'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_get_mem_functions                  ; N: 'CRYPTO_get_mem_functions'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_malloc                             ; N: 'CRYPTO_malloc'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_zalloc                             ; N: 'CRYPTO_zalloc'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_memdup                             ; N: 'CRYPTO_memdup'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_strdup                             ; N: 'CRYPTO_strdup'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_strndup                            ; N: 'CRYPTO_strndup'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_free                               ; N: 'CRYPTO_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_clear_free                         ; N: 'CRYPTO_clear_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_realloc                            ; N: 'CRYPTO_realloc'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_clear_realloc                      ; N: 'CRYPTO_clear_realloc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_malloc_init                 ; N: 'CRYPTO_secure_malloc_init'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_malloc_done                 ; N: 'CRYPTO_secure_malloc_done'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_malloc                      ; N: 'CRYPTO_secure_malloc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_zalloc                      ; N: 'CRYPTO_secure_zalloc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_free                        ; N: 'CRYPTO_secure_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_clear_free                  ; N: 'CRYPTO_secure_clear_free'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_allocated                   ; N: 'CRYPTO_secure_allocated'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_malloc_initialized          ; N: 'CRYPTO_secure_malloc_initialized'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_actual_size                 ; N: 'CRYPTO_secure_actual_size'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_secure_used                        ; N: 'CRYPTO_secure_used'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_cleanse                           ; N: 'OPENSSL_cleanse'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_die                               ; N: 'OPENSSL_die'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_isservice                         ; N: 'OPENSSL_isservice'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@FIPS_mode                                 ; N: 'FIPS_mode'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@FIPS_mode_set                             ; N: 'FIPS_mode_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_init                              ; N: 'OPENSSL_init'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_gmtime                            ; N: 'OPENSSL_gmtime'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_gmtime_adj                        ; N: 'OPENSSL_gmtime_adj'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_gmtime_diff                       ; N: 'OPENSSL_gmtime_diff'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_memcmp                             ; N: 'CRYPTO_memcmp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_cleanup                           ; N: 'OPENSSL_cleanup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_init_crypto                       ; N: 'OPENSSL_init_crypto'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_atexit                            ; N: 'OPENSSL_atexit'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_thread_stop                       ; N: 'OPENSSL_thread_stop'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_INIT_new                          ; N: 'OPENSSL_INIT_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_INIT_set_config_filename          ; N: 'OPENSSL_INIT_set_config_filename'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_INIT_set_config_file_flags        ; N: 'OPENSSL_INIT_set_config_file_flags'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_INIT_set_config_appname           ; N: 'OPENSSL_INIT_set_config_appname'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_INIT_free                         ; N: 'OPENSSL_INIT_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_run_once                    ; N: 'CRYPTO_THREAD_run_once'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_init_local                  ; N: 'CRYPTO_THREAD_init_local'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_get_local                   ; N: 'CRYPTO_THREAD_get_local'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_set_local                   ; N: 'CRYPTO_THREAD_set_local'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_cleanup_local               ; N: 'CRYPTO_THREAD_cleanup_local'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_get_current_id              ; N: 'CRYPTO_THREAD_get_current_id'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_THREAD_compare_id                  ; N: 'CRYPTO_THREAD_compare_id'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_BIO_strings                      ; N: 'ERR_load_BIO_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_new_index                         ; N: 'BIO_get_new_index'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_flags                             ; N: 'BIO_set_flags'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_test_flags                            ; N: 'BIO_test_flags'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_clear_flags                           ; N: 'BIO_clear_flags'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_callback                          ; N: 'BIO_get_callback'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_callback                          ; N: 'BIO_set_callback'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_callback_ex                       ; N: 'BIO_get_callback_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_callback_ex                       ; N: 'BIO_set_callback_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_callback_arg                      ; N: 'BIO_get_callback_arg'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_callback_arg                      ; N: 'BIO_set_callback_arg'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_method_name                           ; N: 'BIO_method_name'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_method_type                           ; N: 'BIO_method_type'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ctrl_pending                          ; N: 'BIO_ctrl_pending'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ctrl_wpending                         ; N: 'BIO_ctrl_wpending'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ctrl_get_write_guarantee              ; N: 'BIO_ctrl_get_write_guarantee'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ctrl_get_read_request                 ; N: 'BIO_ctrl_get_read_request'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ctrl_reset_read_request               ; N: 'BIO_ctrl_reset_read_request'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_ex_data                           ; N: 'BIO_set_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_ex_data                           ; N: 'BIO_get_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_number_read                           ; N: 'BIO_number_read'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_number_written                        ; N: 'BIO_number_written'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_asn1_set_prefix                       ; N: 'BIO_asn1_set_prefix'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_asn1_get_prefix                       ; N: 'BIO_asn1_get_prefix'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_asn1_set_suffix                       ; N: 'BIO_asn1_set_suffix'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_asn1_get_suffix                       ; N: 'BIO_asn1_get_suffix'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_file                                ; N: 'BIO_s_file'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_file                              ; N: 'BIO_new_file'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_fp                                ; N: 'BIO_new_fp'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new                                   ; N: 'BIO_new'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_free                                  ; N: 'BIO_free'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_data                              ; N: 'BIO_set_data'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_data                              ; N: 'BIO_get_data'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_init                              ; N: 'BIO_set_init'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_init                              ; N: 'BIO_get_init'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_shutdown                          ; N: 'BIO_set_shutdown'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_shutdown                          ; N: 'BIO_get_shutdown'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_vfree                                 ; N: 'BIO_vfree'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_up_ref                                ; N: 'BIO_up_ref'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_read                                  ; N: 'BIO_read'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_read_ex                               ; N: 'BIO_read_ex'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_gets                                  ; N: 'BIO_gets'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_write                                 ; N: 'BIO_write'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_write_ex                              ; N: 'BIO_write_ex'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_puts                                  ; N: 'BIO_puts'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_indent                                ; N: 'BIO_indent'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ctrl                                  ; N: 'BIO_ctrl'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_callback_ctrl                         ; N: 'BIO_callback_ctrl'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ptr_ctrl                              ; N: 'BIO_ptr_ctrl'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_int_ctrl                              ; N: 'BIO_int_ctrl'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_push                                  ; N: 'BIO_push'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_pop                                   ; N: 'BIO_pop'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_free_all                              ; N: 'BIO_free_all'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_find_type                             ; N: 'BIO_find_type'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_next                                  ; N: 'BIO_next'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_next                              ; N: 'BIO_set_next'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_retry_BIO                         ; N: 'BIO_get_retry_BIO'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_retry_reason                      ; N: 'BIO_get_retry_reason'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_retry_reason                      ; N: 'BIO_set_retry_reason'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dup_chain                             ; N: 'BIO_dup_chain'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_nread0                                ; N: 'BIO_nread0'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_nread                                 ; N: 'BIO_nread'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_nwrite0                               ; N: 'BIO_nwrite0'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_nwrite                                ; N: 'BIO_nwrite'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_debug_callback                        ; N: 'BIO_debug_callback'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_mem                                 ; N: 'BIO_s_mem'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_secmem                              ; N: 'BIO_s_secmem'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_mem_buf                           ; N: 'BIO_new_mem_buf'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_socket                              ; N: 'BIO_s_socket'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_connect                             ; N: 'BIO_s_connect'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_accept                              ; N: 'BIO_s_accept'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_fd                                  ; N: 'BIO_s_fd'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_log                                 ; N: 'BIO_s_log'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_bio                                 ; N: 'BIO_s_bio'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_null                                ; N: 'BIO_s_null'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_null                                ; N: 'BIO_f_null'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_buffer                              ; N: 'BIO_f_buffer'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_linebuffer                          ; N: 'BIO_f_linebuffer'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_nbio_test                           ; N: 'BIO_f_nbio_test'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_s_datagram                            ; N: 'BIO_s_datagram'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dgram_non_fatal_error                 ; N: 'BIO_dgram_non_fatal_error'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_dgram                             ; N: 'BIO_new_dgram'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_sock_should_retry                     ; N: 'BIO_sock_should_retry'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_sock_non_fatal_error                  ; N: 'BIO_sock_non_fatal_error'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_fd_should_retry                       ; N: 'BIO_fd_should_retry'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_fd_non_fatal_error                    ; N: 'BIO_fd_non_fatal_error'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dump_cb                               ; N: 'BIO_dump_cb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dump_indent_cb                        ; N: 'BIO_dump_indent_cb'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dump                                  ; N: 'BIO_dump'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dump_indent                           ; N: 'BIO_dump_indent'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dump_fp                               ; N: 'BIO_dump_fp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_dump_indent_fp                        ; N: 'BIO_dump_indent_fp'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_hex_string                            ; N: 'BIO_hex_string'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_new                              ; N: 'BIO_ADDR_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_rawmake                          ; N: 'BIO_ADDR_rawmake'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_free                             ; N: 'BIO_ADDR_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_clear                            ; N: 'BIO_ADDR_clear'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_family                           ; N: 'BIO_ADDR_family'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_rawaddress                       ; N: 'BIO_ADDR_rawaddress'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_rawport                          ; N: 'BIO_ADDR_rawport'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_hostname_string                  ; N: 'BIO_ADDR_hostname_string'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_service_string                   ; N: 'BIO_ADDR_service_string'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDR_path_string                      ; N: 'BIO_ADDR_path_string'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDRINFO_next                         ; N: 'BIO_ADDRINFO_next'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDRINFO_family                       ; N: 'BIO_ADDRINFO_family'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDRINFO_socktype                     ; N: 'BIO_ADDRINFO_socktype'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDRINFO_protocol                     ; N: 'BIO_ADDRINFO_protocol'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDRINFO_address                      ; N: 'BIO_ADDRINFO_address'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ADDRINFO_free                         ; N: 'BIO_ADDRINFO_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_parse_hostserv                        ; N: 'BIO_parse_hostserv'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_lookup                                ; N: 'BIO_lookup'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_lookup_ex                             ; N: 'BIO_lookup_ex'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_sock_error                            ; N: 'BIO_sock_error'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_socket_ioctl                          ; N: 'BIO_socket_ioctl'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_socket_nbio                           ; N: 'BIO_socket_nbio'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_sock_init                             ; N: 'BIO_sock_init'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_tcp_ndelay                        ; N: 'BIO_set_tcp_ndelay'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_gethostbyname                         ; N: 'BIO_gethostbyname'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_port                              ; N: 'BIO_get_port'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_host_ip                           ; N: 'BIO_get_host_ip'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_get_accept_socket                     ; N: 'BIO_get_accept_socket'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_accept                                ; N: 'BIO_accept'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_sock_info                             ; N: 'BIO_sock_info'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_socket                                ; N: 'BIO_socket'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_connect                               ; N: 'BIO_connect'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_bind                                  ; N: 'BIO_bind'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_listen                                ; N: 'BIO_listen'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_accept_ex                             ; N: 'BIO_accept_ex'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_closesocket                           ; N: 'BIO_closesocket'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_socket                            ; N: 'BIO_new_socket'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_connect                           ; N: 'BIO_new_connect'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_accept                            ; N: 'BIO_new_accept'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_fd                                ; N: 'BIO_new_fd'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_bio_pair                          ; N: 'BIO_new_bio_pair'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_copy_next_retry                       ; N: 'BIO_copy_next_retry'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_printf                                ; N: 'BIO_printf'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_vprintf                               ; N: 'BIO_vprintf'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_snprintf                              ; N: 'BIO_snprintf'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_vsnprintf                             ; N: 'BIO_vsnprintf'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_new                              ; N: 'BIO_meth_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_free                             ; N: 'BIO_meth_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_write                        ; N: 'BIO_meth_get_write'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_write_ex                     ; N: 'BIO_meth_get_write_ex'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_write                        ; N: 'BIO_meth_set_write'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_write_ex                     ; N: 'BIO_meth_set_write_ex'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_read                         ; N: 'BIO_meth_set_read'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_read                         ; N: 'BIO_meth_get_read'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_read_ex                      ; N: 'BIO_meth_get_read_ex'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_read_ex                      ; N: 'BIO_meth_set_read_ex'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_puts                         ; N: 'BIO_meth_get_puts'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_puts                         ; N: 'BIO_meth_set_puts'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_gets                         ; N: 'BIO_meth_get_gets'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_gets                         ; N: 'BIO_meth_set_gets'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_ctrl                         ; N: 'BIO_meth_get_ctrl'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_ctrl                         ; N: 'BIO_meth_set_ctrl'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_create                       ; N: 'BIO_meth_get_create'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_create                       ; N: 'BIO_meth_set_create'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_destroy                      ; N: 'BIO_meth_get_destroy'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_destroy                      ; N: 'BIO_meth_set_destroy'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_get_callback_ctrl                ; N: 'BIO_meth_get_callback_ctrl'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_meth_set_callback_ctrl                ; N: 'BIO_meth_set_callback_ctrl'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_ASN1_strings                     ; N: 'ERR_load_ASN1_strings'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_BN_strings                       ; N: 'ERR_load_BN_strings'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_set_flags                              ; N: 'BN_set_flags'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_flags                              ; N: 'BN_get_flags'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_with_flags                             ; N: 'BN_with_flags'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GENCB_call                             ; N: 'BN_GENCB_call'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GENCB_new                              ; N: 'BN_GENCB_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GENCB_free                             ; N: 'BN_GENCB_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GENCB_set_old                          ; N: 'BN_GENCB_set_old'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GENCB_set                              ; N: 'BN_GENCB_set'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GENCB_get_arg                          ; N: 'BN_GENCB_get_arg'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_abs_is_word                            ; N: 'BN_abs_is_word'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_zero                                ; N: 'BN_is_zero'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_one                                 ; N: 'BN_is_one'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_word                                ; N: 'BN_is_word'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_odd                                 ; N: 'BN_is_odd'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_zero_ex                                ; N: 'BN_zero_ex'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_value_one                              ; N: 'BN_value_one'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_options                                ; N: 'BN_options'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_CTX_new                                ; N: 'BN_CTX_new'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_CTX_secure_new                         ; N: 'BN_CTX_secure_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_CTX_free                               ; N: 'BN_CTX_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_CTX_start                              ; N: 'BN_CTX_start'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_CTX_get                                ; N: 'BN_CTX_get'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_CTX_end                                ; N: 'BN_CTX_end'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_rand                                   ; N: 'BN_rand'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_priv_rand                              ; N: 'BN_priv_rand'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_rand_range                             ; N: 'BN_rand_range'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_priv_rand_range                        ; N: 'BN_priv_rand_range'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_pseudo_rand                            ; N: 'BN_pseudo_rand'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_pseudo_rand_range                      ; N: 'BN_pseudo_rand_range'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_num_bits                               ; N: 'BN_num_bits'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_num_bits_word                          ; N: 'BN_num_bits_word'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_security_bits                          ; N: 'BN_security_bits'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_new                                    ; N: 'BN_new'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_secure_new                             ; N: 'BN_secure_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_clear_free                             ; N: 'BN_clear_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_copy                                   ; N: 'BN_copy'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_swap                                   ; N: 'BN_swap'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bin2bn                                 ; N: 'BN_bin2bn'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bn2bin                                 ; N: 'BN_bn2bin'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bn2binpad                              ; N: 'BN_bn2binpad'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_lebin2bn                               ; N: 'BN_lebin2bn'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bn2lebinpad                            ; N: 'BN_bn2lebinpad'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mpi2bn                                 ; N: 'BN_mpi2bn'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bn2mpi                                 ; N: 'BN_bn2mpi'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_sub                                    ; N: 'BN_sub'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_usub                                   ; N: 'BN_usub'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_uadd                                   ; N: 'BN_uadd'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_add                                    ; N: 'BN_add'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mul                                    ; N: 'BN_mul'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_sqr                                    ; N: 'BN_sqr'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_set_negative                           ; N: 'BN_set_negative'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_negative                            ; N: 'BN_is_negative'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_div                                    ; N: 'BN_div'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_nnmod                                  ; N: 'BN_nnmod'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_add                                ; N: 'BN_mod_add'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_add_quick                          ; N: 'BN_mod_add_quick'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_sub                                ; N: 'BN_mod_sub'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_sub_quick                          ; N: 'BN_mod_sub_quick'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_mul                                ; N: 'BN_mod_mul'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_sqr                                ; N: 'BN_mod_sqr'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_lshift1                            ; N: 'BN_mod_lshift1'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_lshift1_quick                      ; N: 'BN_mod_lshift1_quick'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_lshift                             ; N: 'BN_mod_lshift'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_lshift_quick                       ; N: 'BN_mod_lshift_quick'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_word                               ; N: 'BN_mod_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_div_word                               ; N: 'BN_div_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mul_word                               ; N: 'BN_mul_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_add_word                               ; N: 'BN_add_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_sub_word                               ; N: 'BN_sub_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_set_word                               ; N: 'BN_set_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_word                               ; N: 'BN_get_word'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_cmp                                    ; N: 'BN_cmp'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_free                                   ; N: 'BN_free'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_bit_set                             ; N: 'BN_is_bit_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_lshift                                 ; N: 'BN_lshift'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_lshift1                                ; N: 'BN_lshift1'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_exp                                    ; N: 'BN_exp'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp                                ; N: 'BN_mod_exp'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp_mont                           ; N: 'BN_mod_exp_mont'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp_mont_consttime                 ; N: 'BN_mod_exp_mont_consttime'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp_mont_word                      ; N: 'BN_mod_exp_mont_word'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp2_mont                          ; N: 'BN_mod_exp2_mont'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp_simple                         ; N: 'BN_mod_exp_simple'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mask_bits                              ; N: 'BN_mask_bits'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_print_fp                               ; N: 'BN_print_fp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_print                                  ; N: 'BN_print'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_reciprocal                             ; N: 'BN_reciprocal'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_rshift                                 ; N: 'BN_rshift'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_rshift1                                ; N: 'BN_rshift1'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_clear                                  ; N: 'BN_clear'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_dup                                    ; N: 'BN_dup'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_ucmp                                   ; N: 'BN_ucmp'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_set_bit                                ; N: 'BN_set_bit'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_clear_bit                              ; N: 'BN_clear_bit'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bn2hex                                 ; N: 'BN_bn2hex'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bn2dec                                 ; N: 'BN_bn2dec'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_hex2bn                                 ; N: 'BN_hex2bn'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_dec2bn                                 ; N: 'BN_dec2bn'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_asc2bn                                 ; N: 'BN_asc2bn'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_gcd                                    ; N: 'BN_gcd'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_kronecker                              ; N: 'BN_kronecker'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_inverse                            ; N: 'BN_mod_inverse'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_sqrt                               ; N: 'BN_mod_sqrt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_consttime_swap                         ; N: 'BN_consttime_swap'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_generate_prime                         ; N: 'BN_generate_prime'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_prime                               ; N: 'BN_is_prime'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_prime_fasttest                      ; N: 'BN_is_prime_fasttest'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_generate_prime_ex                      ; N: 'BN_generate_prime_ex'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_prime_ex                            ; N: 'BN_is_prime_ex'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_is_prime_fasttest_ex                   ; N: 'BN_is_prime_fasttest_ex'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_X931_generate_Xpq                      ; N: 'BN_X931_generate_Xpq'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_X931_derive_prime_ex                   ; N: 'BN_X931_derive_prime_ex'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_X931_generate_prime_ex                 ; N: 'BN_X931_generate_prime_ex'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_MONT_CTX_new                           ; N: 'BN_MONT_CTX_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_mul_montgomery                     ; N: 'BN_mod_mul_montgomery'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_to_montgomery                          ; N: 'BN_to_montgomery'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_from_montgomery                        ; N: 'BN_from_montgomery'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_MONT_CTX_free                          ; N: 'BN_MONT_CTX_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_MONT_CTX_set                           ; N: 'BN_MONT_CTX_set'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_MONT_CTX_copy                          ; N: 'BN_MONT_CTX_copy'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_MONT_CTX_set_locked                    ; N: 'BN_MONT_CTX_set_locked'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_new                           ; N: 'BN_BLINDING_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_free                          ; N: 'BN_BLINDING_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_update                        ; N: 'BN_BLINDING_update'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_convert                       ; N: 'BN_BLINDING_convert'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_invert                        ; N: 'BN_BLINDING_invert'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_convert_ex                    ; N: 'BN_BLINDING_convert_ex'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_invert_ex                     ; N: 'BN_BLINDING_invert_ex'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_is_current_thread             ; N: 'BN_BLINDING_is_current_thread'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_set_current_thread            ; N: 'BN_BLINDING_set_current_thread'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_lock                          ; N: 'BN_BLINDING_lock'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_unlock                        ; N: 'BN_BLINDING_unlock'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_get_flags                     ; N: 'BN_BLINDING_get_flags'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_set_flags                     ; N: 'BN_BLINDING_set_flags'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_BLINDING_create_param                  ; N: 'BN_BLINDING_create_param'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_set_params                             ; N: 'BN_set_params'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_params                             ; N: 'BN_get_params'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_RECP_CTX_new                           ; N: 'BN_RECP_CTX_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_RECP_CTX_free                          ; N: 'BN_RECP_CTX_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_RECP_CTX_set                           ; N: 'BN_RECP_CTX_set'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_mul_reciprocal                     ; N: 'BN_mod_mul_reciprocal'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_mod_exp_recp                           ; N: 'BN_mod_exp_recp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_div_recp                               ; N: 'BN_div_recp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_add                               ; N: 'BN_GF2m_add'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod                               ; N: 'BN_GF2m_mod'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_mul                           ; N: 'BN_GF2m_mod_mul'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_sqr                           ; N: 'BN_GF2m_mod_sqr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_inv                           ; N: 'BN_GF2m_mod_inv'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_div                           ; N: 'BN_GF2m_mod_div'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_exp                           ; N: 'BN_GF2m_mod_exp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_sqrt                          ; N: 'BN_GF2m_mod_sqrt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_solve_quad                    ; N: 'BN_GF2m_mod_solve_quad'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_arr                           ; N: 'BN_GF2m_mod_arr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_mul_arr                       ; N: 'BN_GF2m_mod_mul_arr'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_sqr_arr                       ; N: 'BN_GF2m_mod_sqr_arr'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_inv_arr                       ; N: 'BN_GF2m_mod_inv_arr'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_div_arr                       ; N: 'BN_GF2m_mod_div_arr'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_exp_arr                       ; N: 'BN_GF2m_mod_exp_arr'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_sqrt_arr                      ; N: 'BN_GF2m_mod_sqrt_arr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_mod_solve_quad_arr                ; N: 'BN_GF2m_mod_solve_quad_arr'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_poly2arr                          ; N: 'BN_GF2m_poly2arr'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_GF2m_arr2poly                          ; N: 'BN_GF2m_arr2poly'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_nist_mod_192                           ; N: 'BN_nist_mod_192'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_nist_mod_224                           ; N: 'BN_nist_mod_224'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_nist_mod_256                           ; N: 'BN_nist_mod_256'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_nist_mod_384                           ; N: 'BN_nist_mod_384'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_nist_mod_521                           ; N: 'BN_nist_mod_521'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get0_nist_prime_192                    ; N: 'BN_get0_nist_prime_192'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get0_nist_prime_224                    ; N: 'BN_get0_nist_prime_224'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get0_nist_prime_256                    ; N: 'BN_get0_nist_prime_256'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get0_nist_prime_384                    ; N: 'BN_get0_nist_prime_384'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get0_nist_prime_521                    ; N: 'BN_get0_nist_prime_521'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@BN_nist_mod_func                          ; N: 'BN_nist_mod_func'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_generate_dsa_nonce                     ; N: 'BN_generate_dsa_nonce'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc2409_prime_768                  ; N: 'BN_get_rfc2409_prime_768'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc2409_prime_1024                 ; N: 'BN_get_rfc2409_prime_1024'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc3526_prime_1536                 ; N: 'BN_get_rfc3526_prime_1536'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc3526_prime_2048                 ; N: 'BN_get_rfc3526_prime_2048'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc3526_prime_3072                 ; N: 'BN_get_rfc3526_prime_3072'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc3526_prime_4096                 ; N: 'BN_get_rfc3526_prime_4096'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc3526_prime_6144                 ; N: 'BN_get_rfc3526_prime_6144'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_get_rfc3526_prime_8192                 ; N: 'BN_get_rfc3526_prime_8192'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_bntest_rand                            ; N: 'BN_bntest_rand'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_SEQUENCE_ANY                     ; N: 'd2i_ASN1_SEQUENCE_ANY'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_SEQUENCE_ANY                     ; N: 'i2d_ASN1_SEQUENCE_ANY'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SEQUENCE_ANY_it                      ; N: 'ASN1_SEQUENCE_ANY_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_SET_ANY                          ; N: 'd2i_ASN1_SET_ANY'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_SET_ANY                          ; N: 'i2d_ASN1_SET_ANY'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SET_ANY_it                           ; N: 'ASN1_SET_ANY_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_new                             ; N: 'ASN1_TYPE_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_free                            ; N: 'ASN1_TYPE_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_TYPE                             ; N: 'd2i_ASN1_TYPE'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_TYPE                             ; N: 'i2d_ASN1_TYPE'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ANY_it                               ; N: 'ASN1_ANY_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_get                             ; N: 'ASN1_TYPE_get'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_set                             ; N: 'ASN1_TYPE_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_set1                            ; N: 'ASN1_TYPE_set1'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_cmp                             ; N: 'ASN1_TYPE_cmp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_pack_sequence                   ; N: 'ASN1_TYPE_pack_sequence'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_unpack_sequence                 ; N: 'ASN1_TYPE_unpack_sequence'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OBJECT_new                           ; N: 'ASN1_OBJECT_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OBJECT_free                          ; N: 'ASN1_OBJECT_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_OBJECT                           ; N: 'i2d_ASN1_OBJECT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_OBJECT                           ; N: 'd2i_ASN1_OBJECT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OBJECT_it                            ; N: 'ASN1_OBJECT_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_new                           ; N: 'ASN1_STRING_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_free                          ; N: 'ASN1_STRING_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_clear_free                    ; N: 'ASN1_STRING_clear_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_copy                          ; N: 'ASN1_STRING_copy'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_dup                           ; N: 'ASN1_STRING_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_type_new                      ; N: 'ASN1_STRING_type_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_cmp                           ; N: 'ASN1_STRING_cmp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_set                           ; N: 'ASN1_STRING_set'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_set0                          ; N: 'ASN1_STRING_set0'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_length                        ; N: 'ASN1_STRING_length'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_length_set                    ; N: 'ASN1_STRING_length_set'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_type                          ; N: 'ASN1_STRING_type'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_data                          ; N: 'ASN1_STRING_data'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_get0_data                     ; N: 'ASN1_STRING_get0_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_new                       ; N: 'ASN1_BIT_STRING_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_free                      ; N: 'ASN1_BIT_STRING_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_BIT_STRING                       ; N: 'd2i_ASN1_BIT_STRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_BIT_STRING                       ; N: 'i2d_ASN1_BIT_STRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_it                        ; N: 'ASN1_BIT_STRING_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_set                       ; N: 'ASN1_BIT_STRING_set'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_set_bit                   ; N: 'ASN1_BIT_STRING_set_bit'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_get_bit                   ; N: 'ASN1_BIT_STRING_get_bit'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_check                     ; N: 'ASN1_BIT_STRING_check'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_name_print                ; N: 'ASN1_BIT_STRING_name_print'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_num_asc                   ; N: 'ASN1_BIT_STRING_num_asc'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BIT_STRING_set_asc                   ; N: 'ASN1_BIT_STRING_set_asc'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_new                          ; N: 'ASN1_INTEGER_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_free                         ; N: 'ASN1_INTEGER_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_INTEGER                          ; N: 'd2i_ASN1_INTEGER'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_INTEGER                          ; N: 'i2d_ASN1_INTEGER'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_it                           ; N: 'ASN1_INTEGER_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_UINTEGER                         ; N: 'd2i_ASN1_UINTEGER'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_dup                          ; N: 'ASN1_INTEGER_dup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_cmp                          ; N: 'ASN1_INTEGER_cmp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_new                       ; N: 'ASN1_ENUMERATED_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_free                      ; N: 'ASN1_ENUMERATED_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_ENUMERATED                       ; N: 'd2i_ASN1_ENUMERATED'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_ENUMERATED                       ; N: 'i2d_ASN1_ENUMERATED'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_it                        ; N: 'ASN1_ENUMERATED_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_check                        ; N: 'ASN1_UTCTIME_check'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_set                          ; N: 'ASN1_UTCTIME_set'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_adj                          ; N: 'ASN1_UTCTIME_adj'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_set_string                   ; N: 'ASN1_UTCTIME_set_string'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_cmp_time_t                   ; N: 'ASN1_UTCTIME_cmp_time_t'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_check                ; N: 'ASN1_GENERALIZEDTIME_check'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_set                  ; N: 'ASN1_GENERALIZEDTIME_set'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_adj                  ; N: 'ASN1_GENERALIZEDTIME_adj'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_set_string           ; N: 'ASN1_GENERALIZEDTIME_set_string'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_diff                            ; N: 'ASN1_TIME_diff'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_new                     ; N: 'ASN1_OCTET_STRING_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_free                    ; N: 'ASN1_OCTET_STRING_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_OCTET_STRING                     ; N: 'd2i_ASN1_OCTET_STRING'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_OCTET_STRING                     ; N: 'i2d_ASN1_OCTET_STRING'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_it                      ; N: 'ASN1_OCTET_STRING_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_dup                     ; N: 'ASN1_OCTET_STRING_dup'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_cmp                     ; N: 'ASN1_OCTET_STRING_cmp'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_set                     ; N: 'ASN1_OCTET_STRING_set'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_VISIBLESTRING_new                    ; N: 'ASN1_VISIBLESTRING_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_VISIBLESTRING_free                   ; N: 'ASN1_VISIBLESTRING_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_VISIBLESTRING                    ; N: 'd2i_ASN1_VISIBLESTRING'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_VISIBLESTRING                    ; N: 'i2d_ASN1_VISIBLESTRING'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_VISIBLESTRING_it                     ; N: 'ASN1_VISIBLESTRING_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UNIVERSALSTRING_new                  ; N: 'ASN1_UNIVERSALSTRING_new'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UNIVERSALSTRING_free                 ; N: 'ASN1_UNIVERSALSTRING_free'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_UNIVERSALSTRING                  ; N: 'd2i_ASN1_UNIVERSALSTRING'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_UNIVERSALSTRING                  ; N: 'i2d_ASN1_UNIVERSALSTRING'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UNIVERSALSTRING_it                   ; N: 'ASN1_UNIVERSALSTRING_it'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTF8STRING_new                       ; N: 'ASN1_UTF8STRING_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTF8STRING_free                      ; N: 'ASN1_UTF8STRING_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_UTF8STRING                       ; N: 'd2i_ASN1_UTF8STRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_UTF8STRING                       ; N: 'i2d_ASN1_UTF8STRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTF8STRING_it                        ; N: 'ASN1_UTF8STRING_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_NULL_new                             ; N: 'ASN1_NULL_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_NULL_free                            ; N: 'ASN1_NULL_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_NULL                             ; N: 'd2i_ASN1_NULL'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_NULL                             ; N: 'i2d_ASN1_NULL'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_NULL_it                              ; N: 'ASN1_NULL_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BMPSTRING_new                        ; N: 'ASN1_BMPSTRING_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BMPSTRING_free                       ; N: 'ASN1_BMPSTRING_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_BMPSTRING                        ; N: 'd2i_ASN1_BMPSTRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_BMPSTRING                        ; N: 'i2d_ASN1_BMPSTRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BMPSTRING_it                         ; N: 'ASN1_BMPSTRING_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UTF8_getc                                 ; N: 'UTF8_getc'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UTF8_putc                                 ; N: 'UTF8_putc'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLE_new                        ; N: 'ASN1_PRINTABLE_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLE_free                       ; N: 'ASN1_PRINTABLE_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_PRINTABLE                        ; N: 'd2i_ASN1_PRINTABLE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_PRINTABLE                        ; N: 'i2d_ASN1_PRINTABLE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLE_it                         ; N: 'ASN1_PRINTABLE_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIRECTORYSTRING_new                       ; N: 'DIRECTORYSTRING_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIRECTORYSTRING_free                      ; N: 'DIRECTORYSTRING_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DIRECTORYSTRING                       ; N: 'd2i_DIRECTORYSTRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DIRECTORYSTRING                       ; N: 'i2d_DIRECTORYSTRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIRECTORYSTRING_it                        ; N: 'DIRECTORYSTRING_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DISPLAYTEXT_new                           ; N: 'DISPLAYTEXT_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DISPLAYTEXT_free                          ; N: 'DISPLAYTEXT_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DISPLAYTEXT                           ; N: 'd2i_DISPLAYTEXT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DISPLAYTEXT                           ; N: 'i2d_DISPLAYTEXT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DISPLAYTEXT_it                            ; N: 'DISPLAYTEXT_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLESTRING_new                  ; N: 'ASN1_PRINTABLESTRING_new'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLESTRING_free                 ; N: 'ASN1_PRINTABLESTRING_free'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_PRINTABLESTRING                  ; N: 'd2i_ASN1_PRINTABLESTRING'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_PRINTABLESTRING                  ; N: 'i2d_ASN1_PRINTABLESTRING'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLESTRING_it                   ; N: 'ASN1_PRINTABLESTRING_it'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_T61STRING_new                        ; N: 'ASN1_T61STRING_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_T61STRING_free                       ; N: 'ASN1_T61STRING_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_T61STRING                        ; N: 'd2i_ASN1_T61STRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_T61STRING                        ; N: 'i2d_ASN1_T61STRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_T61STRING_it                         ; N: 'ASN1_T61STRING_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_IA5STRING_new                        ; N: 'ASN1_IA5STRING_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_IA5STRING_free                       ; N: 'ASN1_IA5STRING_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_IA5STRING                        ; N: 'd2i_ASN1_IA5STRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_IA5STRING                        ; N: 'i2d_ASN1_IA5STRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_IA5STRING_it                         ; N: 'ASN1_IA5STRING_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALSTRING_new                    ; N: 'ASN1_GENERALSTRING_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALSTRING_free                   ; N: 'ASN1_GENERALSTRING_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_GENERALSTRING                    ; N: 'd2i_ASN1_GENERALSTRING'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_GENERALSTRING                    ; N: 'i2d_ASN1_GENERALSTRING'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALSTRING_it                     ; N: 'ASN1_GENERALSTRING_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_new                          ; N: 'ASN1_UTCTIME_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_free                         ; N: 'ASN1_UTCTIME_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_UTCTIME                          ; N: 'd2i_ASN1_UTCTIME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_UTCTIME                          ; N: 'i2d_ASN1_UTCTIME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_it                           ; N: 'ASN1_UTCTIME_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_new                  ; N: 'ASN1_GENERALIZEDTIME_new'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_free                 ; N: 'ASN1_GENERALIZEDTIME_free'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_GENERALIZEDTIME                  ; N: 'd2i_ASN1_GENERALIZEDTIME'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_GENERALIZEDTIME                  ; N: 'i2d_ASN1_GENERALIZEDTIME'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_it                   ; N: 'ASN1_GENERALIZEDTIME_it'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_new                             ; N: 'ASN1_TIME_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_free                            ; N: 'ASN1_TIME_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASN1_TIME                             ; N: 'd2i_ASN1_TIME'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_TIME                             ; N: 'i2d_ASN1_TIME'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_it                              ; N: 'ASN1_TIME_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OCTET_STRING_NDEF_it                 ; N: 'ASN1_OCTET_STRING_NDEF_it'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_set                             ; N: 'ASN1_TIME_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_adj                             ; N: 'ASN1_TIME_adj'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_check                           ; N: 'ASN1_TIME_check'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_to_generalizedtime              ; N: 'ASN1_TIME_to_generalizedtime'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_set_string                      ; N: 'ASN1_TIME_set_string'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_set_string_X509                 ; N: 'ASN1_TIME_set_string_X509'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_to_tm                           ; N: 'ASN1_TIME_to_tm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_normalize                       ; N: 'ASN1_TIME_normalize'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_cmp_time_t                      ; N: 'ASN1_TIME_cmp_time_t'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_compare                         ; N: 'ASN1_TIME_compare'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2a_ASN1_INTEGER                          ; N: 'i2a_ASN1_INTEGER'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2i_ASN1_INTEGER                          ; N: 'a2i_ASN1_INTEGER'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2a_ASN1_ENUMERATED                       ; N: 'i2a_ASN1_ENUMERATED'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2i_ASN1_ENUMERATED                       ; N: 'a2i_ASN1_ENUMERATED'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2a_ASN1_OBJECT                           ; N: 'i2a_ASN1_OBJECT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2i_ASN1_STRING                           ; N: 'a2i_ASN1_STRING'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2a_ASN1_STRING                           ; N: 'i2a_ASN1_STRING'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2t_ASN1_OBJECT                           ; N: 'i2t_ASN1_OBJECT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2d_ASN1_OBJECT                           ; N: 'a2d_ASN1_OBJECT'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_OBJECT_create                        ; N: 'ASN1_OBJECT_create'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_get_int64                    ; N: 'ASN1_INTEGER_get_int64'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_set_int64                    ; N: 'ASN1_INTEGER_set_int64'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_get_uint64                   ; N: 'ASN1_INTEGER_get_uint64'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_set_uint64                   ; N: 'ASN1_INTEGER_set_uint64'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_set                          ; N: 'ASN1_INTEGER_set'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_get                          ; N: 'ASN1_INTEGER_get'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_to_ASN1_INTEGER                        ; N: 'BN_to_ASN1_INTEGER'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_INTEGER_to_BN                        ; N: 'ASN1_INTEGER_to_BN'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_get_int64                 ; N: 'ASN1_ENUMERATED_get_int64'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_set_int64                 ; N: 'ASN1_ENUMERATED_set_int64'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_set                       ; N: 'ASN1_ENUMERATED_set'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_get                       ; N: 'ASN1_ENUMERATED_get'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BN_to_ASN1_ENUMERATED                     ; N: 'BN_to_ASN1_ENUMERATED'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ENUMERATED_to_BN                     ; N: 'ASN1_ENUMERATED_to_BN'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PRINTABLE_type                       ; N: 'ASN1_PRINTABLE_type'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_tag2bit                              ; N: 'ASN1_tag2bit'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_get_object                           ; N: 'ASN1_get_object'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_check_infinite_end                   ; N: 'ASN1_check_infinite_end'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_const_check_infinite_end             ; N: 'ASN1_const_check_infinite_end'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_put_object                           ; N: 'ASN1_put_object'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_put_eoc                              ; N: 'ASN1_put_eoc'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_object_size                          ; N: 'ASN1_object_size'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_dup                                  ; N: 'ASN1_dup'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_dup                             ; N: 'ASN1_item_dup'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_d2i_fp                               ; N: 'ASN1_d2i_fp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_d2i_fp                          ; N: 'ASN1_item_d2i_fp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_i2d_fp                               ; N: 'ASN1_i2d_fp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_i2d_fp                          ; N: 'ASN1_item_i2d_fp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_print_ex_fp                   ; N: 'ASN1_STRING_print_ex_fp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_to_UTF8                       ; N: 'ASN1_STRING_to_UTF8'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_d2i_bio                              ; N: 'ASN1_d2i_bio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_d2i_bio                         ; N: 'ASN1_item_d2i_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_i2d_bio                              ; N: 'ASN1_i2d_bio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_i2d_bio                         ; N: 'ASN1_item_i2d_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UTCTIME_print                        ; N: 'ASN1_UTCTIME_print'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_GENERALIZEDTIME_print                ; N: 'ASN1_GENERALIZEDTIME_print'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TIME_print                           ; N: 'ASN1_TIME_print'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_print                         ; N: 'ASN1_STRING_print'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_print_ex                      ; N: 'ASN1_STRING_print_ex'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_buf_print                            ; N: 'ASN1_buf_print'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_bn_print                             ; N: 'ASN1_bn_print'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_parse                                ; N: 'ASN1_parse'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_parse_dump                           ; N: 'ASN1_parse_dump'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_tag2str                              ; N: 'ASN1_tag2str'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_UNIVERSALSTRING_to_string            ; N: 'ASN1_UNIVERSALSTRING_to_string'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_set_octetstring                 ; N: 'ASN1_TYPE_set_octetstring'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_get_octetstring                 ; N: 'ASN1_TYPE_get_octetstring'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_set_int_octetstring             ; N: 'ASN1_TYPE_set_int_octetstring'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TYPE_get_int_octetstring             ; N: 'ASN1_TYPE_get_int_octetstring'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_unpack                          ; N: 'ASN1_item_unpack'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_pack                            ; N: 'ASN1_item_pack'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_set_default_mask              ; N: 'ASN1_STRING_set_default_mask'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_set_default_mask_asc          ; N: 'ASN1_STRING_set_default_mask_asc'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_get_default_mask              ; N: 'ASN1_STRING_get_default_mask'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_mbstring_copy                        ; N: 'ASN1_mbstring_copy'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_mbstring_ncopy                       ; N: 'ASN1_mbstring_ncopy'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_set_by_NID                    ; N: 'ASN1_STRING_set_by_NID'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_TABLE_get                     ; N: 'ASN1_STRING_TABLE_get'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_TABLE_add                     ; N: 'ASN1_STRING_TABLE_add'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_STRING_TABLE_cleanup                 ; N: 'ASN1_STRING_TABLE_cleanup'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_new                             ; N: 'ASN1_item_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_free                            ; N: 'ASN1_item_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_d2i                             ; N: 'ASN1_item_d2i'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_i2d                             ; N: 'ASN1_item_i2d'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_ndef_i2d                        ; N: 'ASN1_item_ndef_i2d'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_add_oid_module                       ; N: 'ASN1_add_oid_module'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_add_stable_module                    ; N: 'ASN1_add_stable_module'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_generate_nconf                       ; N: 'ASN1_generate_nconf'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_generate_v3                          ; N: 'ASN1_generate_v3'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_str2mask                             ; N: 'ASN1_str2mask'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_print                           ; N: 'ASN1_item_print'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_new                             ; N: 'ASN1_PCTX_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_free                            ; N: 'ASN1_PCTX_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_get_flags                       ; N: 'ASN1_PCTX_get_flags'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_set_flags                       ; N: 'ASN1_PCTX_set_flags'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_get_nm_flags                    ; N: 'ASN1_PCTX_get_nm_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_set_nm_flags                    ; N: 'ASN1_PCTX_set_nm_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_get_cert_flags                  ; N: 'ASN1_PCTX_get_cert_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_set_cert_flags                  ; N: 'ASN1_PCTX_set_cert_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_get_oid_flags                   ; N: 'ASN1_PCTX_get_oid_flags'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_set_oid_flags                   ; N: 'ASN1_PCTX_set_oid_flags'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_get_str_flags                   ; N: 'ASN1_PCTX_get_str_flags'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_PCTX_set_str_flags                   ; N: 'ASN1_PCTX_set_str_flags'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_new                             ; N: 'ASN1_SCTX_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_free                            ; N: 'ASN1_SCTX_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_get_item                        ; N: 'ASN1_SCTX_get_item'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_get_template                    ; N: 'ASN1_SCTX_get_template'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_get_flags                       ; N: 'ASN1_SCTX_get_flags'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_set_app_data                    ; N: 'ASN1_SCTX_set_app_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SCTX_get_app_data                    ; N: 'ASN1_SCTX_get_app_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_asn1                                ; N: 'BIO_f_asn1'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_NDEF                              ; N: 'BIO_new_NDEF'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASN1_bio_stream                       ; N: 'i2d_ASN1_bio_stream'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_ASN1_stream                 ; N: 'PEM_write_bio_ASN1_stream'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_write_ASN1                          ; N: 'SMIME_write_ASN1'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_read_ASN1                           ; N: 'SMIME_read_ASN1'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_crlf_copy                           ; N: 'SMIME_crlf_copy'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_text                                ; N: 'SMIME_text'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ITEM_lookup                          ; N: 'ASN1_ITEM_lookup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_ITEM_get                             ; N: 'ASN1_ITEM_get'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_BOOLEAN_it                           ; N: 'ASN1_BOOLEAN_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_TBOOLEAN_it                          ; N: 'ASN1_TBOOLEAN_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_FBOOLEAN_it                          ; N: 'ASN1_FBOOLEAN_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_SEQUENCE_it                          ; N: 'ASN1_SEQUENCE_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CBIGNUM_it                                ; N: 'CBIGNUM_it'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIGNUM_it                                 ; N: 'BIGNUM_it'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@INT32_it                                  ; N: 'INT32_it'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ZINT32_it                                 ; N: 'ZINT32_it'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UINT32_it                                 ; N: 'UINT32_it'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ZUINT32_it                                ; N: 'ZUINT32_it'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@INT64_it                                  ; N: 'INT64_it'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ZINT64_it                                 ; N: 'ZINT64_it'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UINT64_it                                 ; N: 'UINT64_it'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ZUINT64_it                                ; N: 'ZUINT64_it'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@LONG_it                                   ; N: 'LONG_it'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ZLONG_it                                  ; N: 'ZLONG_it'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_ex_new                          ; N: 'ASN1_item_ex_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_ex_free                         ; N: 'ASN1_item_ex_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_ex_d2i                          ; N: 'ASN1_item_ex_d2i'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_ex_i2d                          ; N: 'ASN1_item_ex_i2d'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_ASYNC_strings                    ; N: 'ERR_load_ASYNC_strings'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_init_thread                         ; N: 'ASYNC_init_thread'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_cleanup_thread                      ; N: 'ASYNC_cleanup_thread'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_is_capable                          ; N: 'ASYNC_is_capable'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_start_job                           ; N: 'ASYNC_start_job'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_pause_job                           ; N: 'ASYNC_pause_job'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_get_current_job                     ; N: 'ASYNC_get_current_job'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_get_wait_ctx                        ; N: 'ASYNC_get_wait_ctx'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_block_pause                         ; N: 'ASYNC_block_pause'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASYNC_unblock_pause                       ; N: 'ASYNC_unblock_pause'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_set_key                                ; N: 'BF_set_key'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_encrypt                                ; N: 'BF_encrypt'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_decrypt                                ; N: 'BF_decrypt'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_ecb_encrypt                            ; N: 'BF_ecb_encrypt'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_cbc_encrypt                            ; N: 'BF_cbc_encrypt'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_cfb64_encrypt                          ; N: 'BF_cfb64_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_ofb64_encrypt                          ; N: 'BF_ofb64_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BF_options                                ; N: 'BF_options'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_BUF_strings                      ; N: 'ERR_load_BUF_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BUF_MEM_new                               ; N: 'BUF_MEM_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BUF_MEM_new_ex                            ; N: 'BUF_MEM_new_ex'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BUF_MEM_free                              ; N: 'BUF_MEM_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BUF_MEM_grow                              ; N: 'BUF_MEM_grow'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BUF_MEM_grow_clean                        ; N: 'BUF_MEM_grow_clean'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BUF_reverse                               ; N: 'BUF_reverse'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_set_key                          ; N: 'Camellia_set_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_encrypt                          ; N: 'Camellia_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_decrypt                          ; N: 'Camellia_decrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_ecb_encrypt                      ; N: 'Camellia_ecb_encrypt'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_cbc_encrypt                      ; N: 'Camellia_cbc_encrypt'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_cfb128_encrypt                   ; N: 'Camellia_cfb128_encrypt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_cfb1_encrypt                     ; N: 'Camellia_cfb1_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_cfb8_encrypt                     ; N: 'Camellia_cfb8_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_ofb128_encrypt                   ; N: 'Camellia_ofb128_encrypt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@Camellia_ctr128_encrypt                   ; N: 'Camellia_ctr128_encrypt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_set_key                              ; N: 'CAST_set_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_ecb_encrypt                          ; N: 'CAST_ecb_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_encrypt                              ; N: 'CAST_encrypt'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_decrypt                              ; N: 'CAST_decrypt'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_cbc_encrypt                          ; N: 'CAST_cbc_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_cfb64_encrypt                        ; N: 'CAST_cfb64_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CAST_ofb64_encrypt                        ; N: 'CAST_ofb64_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_EVP_strings                      ; N: 'ERR_load_EVP_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_OBJ_strings                      ; N: 'ERR_load_OBJ_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_init                             ; N: 'OBJ_NAME_init'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_new_index                        ; N: 'OBJ_NAME_new_index'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_get                              ; N: 'OBJ_NAME_get'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_add                              ; N: 'OBJ_NAME_add'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_remove                           ; N: 'OBJ_NAME_remove'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_cleanup                          ; N: 'OBJ_NAME_cleanup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_do_all                           ; N: 'OBJ_NAME_do_all'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_NAME_do_all_sorted                    ; N: 'OBJ_NAME_do_all_sorted'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_dup                                   ; N: 'OBJ_dup'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_nid2obj                               ; N: 'OBJ_nid2obj'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_nid2ln                                ; N: 'OBJ_nid2ln'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_nid2sn                                ; N: 'OBJ_nid2sn'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_obj2nid                               ; N: 'OBJ_obj2nid'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_txt2obj                               ; N: 'OBJ_txt2obj'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_obj2txt                               ; N: 'OBJ_obj2txt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_txt2nid                               ; N: 'OBJ_txt2nid'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_ln2nid                                ; N: 'OBJ_ln2nid'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_sn2nid                                ; N: 'OBJ_sn2nid'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_cmp                                   ; N: 'OBJ_cmp'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_bsearch_                              ; N: 'OBJ_bsearch_'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_bsearch_ex_                           ; N: 'OBJ_bsearch_ex_'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_new_nid                               ; N: 'OBJ_new_nid'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_add_object                            ; N: 'OBJ_add_object'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_create                                ; N: 'OBJ_create'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_create_objects                        ; N: 'OBJ_create_objects'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_length                                ; N: 'OBJ_length'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_get0_data                             ; N: 'OBJ_get0_data'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_find_sigid_algs                       ; N: 'OBJ_find_sigid_algs'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_find_sigid_by_algs                    ; N: 'OBJ_find_sigid_by_algs'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_add_sigid                             ; N: 'OBJ_add_sigid'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OBJ_sigid_free                            ; N: 'OBJ_sigid_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_new                           ; N: 'EVP_MD_meth_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_dup                           ; N: 'EVP_MD_meth_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_free                          ; N: 'EVP_MD_meth_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_input_blocksize           ; N: 'EVP_MD_meth_set_input_blocksize'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_result_size               ; N: 'EVP_MD_meth_set_result_size'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_app_datasize              ; N: 'EVP_MD_meth_set_app_datasize'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_flags                     ; N: 'EVP_MD_meth_set_flags'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_init                      ; N: 'EVP_MD_meth_set_init'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_update                    ; N: 'EVP_MD_meth_set_update'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_final                     ; N: 'EVP_MD_meth_set_final'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_copy                      ; N: 'EVP_MD_meth_set_copy'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_cleanup                   ; N: 'EVP_MD_meth_set_cleanup'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_set_ctrl                      ; N: 'EVP_MD_meth_set_ctrl'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_input_blocksize           ; N: 'EVP_MD_meth_get_input_blocksize'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_result_size               ; N: 'EVP_MD_meth_get_result_size'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_app_datasize              ; N: 'EVP_MD_meth_get_app_datasize'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_flags                     ; N: 'EVP_MD_meth_get_flags'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_init                      ; N: 'EVP_MD_meth_get_init'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_update                    ; N: 'EVP_MD_meth_get_update'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_final                     ; N: 'EVP_MD_meth_get_final'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_copy                      ; N: 'EVP_MD_meth_get_copy'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_cleanup                   ; N: 'EVP_MD_meth_get_cleanup'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_meth_get_ctrl                      ; N: 'EVP_MD_meth_get_ctrl'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_new                       ; N: 'EVP_CIPHER_meth_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_dup                       ; N: 'EVP_CIPHER_meth_dup'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_free                      ; N: 'EVP_CIPHER_meth_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_iv_length             ; N: 'EVP_CIPHER_meth_set_iv_length'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_flags                 ; N: 'EVP_CIPHER_meth_set_flags'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_impl_ctx_size         ; N: 'EVP_CIPHER_meth_set_impl_ctx_size'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_init                  ; N: 'EVP_CIPHER_meth_set_init'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_do_cipher             ; N: 'EVP_CIPHER_meth_set_do_cipher'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_cleanup               ; N: 'EVP_CIPHER_meth_set_cleanup'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_set_asn1_params       ; N: 'EVP_CIPHER_meth_set_set_asn1_params'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_get_asn1_params       ; N: 'EVP_CIPHER_meth_set_get_asn1_params'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_set_ctrl                  ; N: 'EVP_CIPHER_meth_set_ctrl'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_get_init                  ; N: 'EVP_CIPHER_meth_get_init'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_get_do_cipher             ; N: 'EVP_CIPHER_meth_get_do_cipher'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_get_cleanup               ; N: 'EVP_CIPHER_meth_get_cleanup'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_get_set_asn1_params       ; N: 'EVP_CIPHER_meth_get_set_asn1_params'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_get_get_asn1_params       ; N: 'EVP_CIPHER_meth_get_get_asn1_params'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_meth_get_ctrl                  ; N: 'EVP_CIPHER_meth_get_ctrl'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_type                               ; N: 'EVP_MD_type'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_pkey_type                          ; N: 'EVP_MD_pkey_type'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_size                               ; N: 'EVP_MD_size'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_block_size                         ; N: 'EVP_MD_block_size'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_flags                              ; N: 'EVP_MD_flags'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_md                             ; N: 'EVP_MD_CTX_md'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_update_fn                      ; N: 'EVP_MD_CTX_update_fn'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_set_update_fn                  ; N: 'EVP_MD_CTX_set_update_fn'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_pkey_ctx                       ; N: 'EVP_MD_CTX_pkey_ctx'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_set_pkey_ctx                   ; N: 'EVP_MD_CTX_set_pkey_ctx'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_md_data                        ; N: 'EVP_MD_CTX_md_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_nid                            ; N: 'EVP_CIPHER_nid'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_block_size                     ; N: 'EVP_CIPHER_block_size'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_impl_ctx_size                  ; N: 'EVP_CIPHER_impl_ctx_size'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_key_length                     ; N: 'EVP_CIPHER_key_length'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_iv_length                      ; N: 'EVP_CIPHER_iv_length'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_flags                          ; N: 'EVP_CIPHER_flags'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_cipher                     ; N: 'EVP_CIPHER_CTX_cipher'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_encrypting                 ; N: 'EVP_CIPHER_CTX_encrypting'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_nid                        ; N: 'EVP_CIPHER_CTX_nid'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_block_size                 ; N: 'EVP_CIPHER_CTX_block_size'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_key_length                 ; N: 'EVP_CIPHER_CTX_key_length'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_iv_length                  ; N: 'EVP_CIPHER_CTX_iv_length'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_iv                         ; N: 'EVP_CIPHER_CTX_iv'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_original_iv                ; N: 'EVP_CIPHER_CTX_original_iv'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_iv_noconst                 ; N: 'EVP_CIPHER_CTX_iv_noconst'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_buf_noconst                ; N: 'EVP_CIPHER_CTX_buf_noconst'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_num                        ; N: 'EVP_CIPHER_CTX_num'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_set_num                    ; N: 'EVP_CIPHER_CTX_set_num'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_copy                       ; N: 'EVP_CIPHER_CTX_copy'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_get_app_data               ; N: 'EVP_CIPHER_CTX_get_app_data'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_set_app_data               ; N: 'EVP_CIPHER_CTX_set_app_data'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_get_cipher_data            ; N: 'EVP_CIPHER_CTX_get_cipher_data'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_set_cipher_data            ; N: 'EVP_CIPHER_CTX_set_cipher_data'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_Cipher                                ; N: 'EVP_Cipher'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_ctrl                           ; N: 'EVP_MD_CTX_ctrl'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_new                            ; N: 'EVP_MD_CTX_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_create                         ; N: 'EVP_MD_CTX_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_reset                          ; N: 'EVP_MD_CTX_reset'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_free                           ; N: 'EVP_MD_CTX_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_destroy                        ; N: 'EVP_MD_CTX_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_copy_ex                        ; N: 'EVP_MD_CTX_copy_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_set_flags                      ; N: 'EVP_MD_CTX_set_flags'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_clear_flags                    ; N: 'EVP_MD_CTX_clear_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_test_flags                     ; N: 'EVP_MD_CTX_test_flags'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestInit_ex                         ; N: 'EVP_DigestInit_ex'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestUpdate                          ; N: 'EVP_DigestUpdate'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestFinal_ex                        ; N: 'EVP_DigestFinal_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_Digest                                ; N: 'EVP_Digest'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_CTX_copy                           ; N: 'EVP_MD_CTX_copy'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestInit                            ; N: 'EVP_DigestInit'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestFinal                           ; N: 'EVP_DigestFinal'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestFinalXOF                        ; N: 'EVP_DigestFinalXOF'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_read_pw_string                        ; N: 'EVP_read_pw_string'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_read_pw_string_min                    ; N: 'EVP_read_pw_string_min'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_set_pw_prompt                         ; N: 'EVP_set_pw_prompt'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_get_pw_prompt                         ; N: 'EVP_get_pw_prompt'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_BytesToKey                            ; N: 'EVP_BytesToKey'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_set_flags                  ; N: 'EVP_CIPHER_CTX_set_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_clear_flags                ; N: 'EVP_CIPHER_CTX_clear_flags'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_test_flags                 ; N: 'EVP_CIPHER_CTX_test_flags'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncryptInit                           ; N: 'EVP_EncryptInit'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncryptInit_ex                        ; N: 'EVP_EncryptInit_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncryptUpdate                         ; N: 'EVP_EncryptUpdate'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncryptFinal_ex                       ; N: 'EVP_EncryptFinal_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncryptFinal                          ; N: 'EVP_EncryptFinal'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecryptInit                           ; N: 'EVP_DecryptInit'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecryptInit_ex                        ; N: 'EVP_DecryptInit_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecryptUpdate                         ; N: 'EVP_DecryptUpdate'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecryptFinal                          ; N: 'EVP_DecryptFinal'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecryptFinal_ex                       ; N: 'EVP_DecryptFinal_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CipherInit                            ; N: 'EVP_CipherInit'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CipherInit_ex                         ; N: 'EVP_CipherInit_ex'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CipherUpdate                          ; N: 'EVP_CipherUpdate'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CipherFinal                           ; N: 'EVP_CipherFinal'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CipherFinal_ex                        ; N: 'EVP_CipherFinal_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_SignFinal                             ; N: 'EVP_SignFinal'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestSign                            ; N: 'EVP_DigestSign'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_VerifyFinal                           ; N: 'EVP_VerifyFinal'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestVerify                          ; N: 'EVP_DigestVerify'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestSignInit                        ; N: 'EVP_DigestSignInit'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestSignFinal                       ; N: 'EVP_DigestSignFinal'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestVerifyInit                      ; N: 'EVP_DigestVerifyInit'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DigestVerifyFinal                     ; N: 'EVP_DigestVerifyFinal'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_OpenInit                              ; N: 'EVP_OpenInit'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_OpenFinal                             ; N: 'EVP_OpenFinal'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_SealInit                              ; N: 'EVP_SealInit'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_SealFinal                             ; N: 'EVP_SealFinal'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_ENCODE_CTX_new                        ; N: 'EVP_ENCODE_CTX_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_ENCODE_CTX_free                       ; N: 'EVP_ENCODE_CTX_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_ENCODE_CTX_copy                       ; N: 'EVP_ENCODE_CTX_copy'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_ENCODE_CTX_num                        ; N: 'EVP_ENCODE_CTX_num'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncodeInit                            ; N: 'EVP_EncodeInit'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncodeUpdate                          ; N: 'EVP_EncodeUpdate'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncodeFinal                           ; N: 'EVP_EncodeFinal'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_EncodeBlock                           ; N: 'EVP_EncodeBlock'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecodeInit                            ; N: 'EVP_DecodeInit'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecodeUpdate                          ; N: 'EVP_DecodeUpdate'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecodeFinal                           ; N: 'EVP_DecodeFinal'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_DecodeBlock                           ; N: 'EVP_DecodeBlock'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_new                        ; N: 'EVP_CIPHER_CTX_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_reset                      ; N: 'EVP_CIPHER_CTX_reset'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_free                       ; N: 'EVP_CIPHER_CTX_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_set_key_length             ; N: 'EVP_CIPHER_CTX_set_key_length'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_set_padding                ; N: 'EVP_CIPHER_CTX_set_padding'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_ctrl                       ; N: 'EVP_CIPHER_CTX_ctrl'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_CTX_rand_key                   ; N: 'EVP_CIPHER_CTX_rand_key'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_md                                  ; N: 'BIO_f_md'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_base64                              ; N: 'BIO_f_base64'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_cipher                              ; N: 'BIO_f_cipher'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_reliable                            ; N: 'BIO_f_reliable'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_set_cipher                            ; N: 'BIO_set_cipher'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_md_null                               ; N: 'EVP_md_null'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_md4                                   ; N: 'EVP_md4'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_md5                                   ; N: 'EVP_md5'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_md5_sha1                              ; N: 'EVP_md5_sha1'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_blake2b512                            ; N: 'EVP_blake2b512'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_blake2s256                            ; N: 'EVP_blake2s256'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha1                                  ; N: 'EVP_sha1'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha224                                ; N: 'EVP_sha224'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha256                                ; N: 'EVP_sha256'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha384                                ; N: 'EVP_sha384'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha512                                ; N: 'EVP_sha512'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha512_224                            ; N: 'EVP_sha512_224'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha512_256                            ; N: 'EVP_sha512_256'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha3_224                              ; N: 'EVP_sha3_224'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha3_256                              ; N: 'EVP_sha3_256'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha3_384                              ; N: 'EVP_sha3_384'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sha3_512                              ; N: 'EVP_sha3_512'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_shake128                              ; N: 'EVP_shake128'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_shake256                              ; N: 'EVP_shake256'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_mdc2                                  ; N: 'EVP_mdc2'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_ripemd160                             ; N: 'EVP_ripemd160'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_whirlpool                             ; N: 'EVP_whirlpool'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm3                                   ; N: 'EVP_sm3'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_enc_null                              ; N: 'EVP_enc_null'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ecb                               ; N: 'EVP_des_ecb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede                               ; N: 'EVP_des_ede'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3                              ; N: 'EVP_des_ede3'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede_ecb                           ; N: 'EVP_des_ede_ecb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_ecb                          ; N: 'EVP_des_ede3_ecb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_cfb64                             ; N: 'EVP_des_cfb64'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_cfb                               ; N: 'EVP_des_cfb64'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_cfb1                              ; N: 'EVP_des_cfb1'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_cfb8                              ; N: 'EVP_des_cfb8'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede_cfb64                         ; N: 'EVP_des_ede_cfb64'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede_cfb                           ; N: 'EVP_des_ede_cfb64'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_cfb64                        ; N: 'EVP_des_ede3_cfb64'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_cfb                          ; N: 'EVP_des_ede3_cfb64'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_cfb1                         ; N: 'EVP_des_ede3_cfb1'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_cfb8                         ; N: 'EVP_des_ede3_cfb8'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ofb                               ; N: 'EVP_des_ofb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede_ofb                           ; N: 'EVP_des_ede_ofb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_ofb                          ; N: 'EVP_des_ede3_ofb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_cbc                               ; N: 'EVP_des_cbc'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede_cbc                           ; N: 'EVP_des_ede_cbc'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_cbc                          ; N: 'EVP_des_ede3_cbc'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_desx_cbc                              ; N: 'EVP_desx_cbc'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_des_ede3_wrap                         ; N: 'EVP_des_ede3_wrap'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc4                                   ; N: 'EVP_rc4'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc4_40                                ; N: 'EVP_rc4_40'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc4_hmac_md5                          ; N: 'EVP_rc4_hmac_md5'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_idea_ecb                              ; N: 'EVP_idea_ecb'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_idea_cfb64                            ; N: 'EVP_idea_cfb64'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_idea_cfb                              ; N: 'EVP_idea_cfb64'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_idea_ofb                              ; N: 'EVP_idea_ofb'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_idea_cbc                              ; N: 'EVP_idea_cbc'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_ecb                               ; N: 'EVP_rc2_ecb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_cbc                               ; N: 'EVP_rc2_cbc'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_40_cbc                            ; N: 'EVP_rc2_40_cbc'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_64_cbc                            ; N: 'EVP_rc2_64_cbc'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_cfb64                             ; N: 'EVP_rc2_cfb64'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_cfb                               ; N: 'EVP_rc2_cfb64'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_rc2_ofb                               ; N: 'EVP_rc2_ofb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_bf_ecb                                ; N: 'EVP_bf_ecb'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_bf_cbc                                ; N: 'EVP_bf_cbc'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_bf_cfb64                              ; N: 'EVP_bf_cfb64'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_bf_cfb                                ; N: 'EVP_bf_cfb64'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_bf_ofb                                ; N: 'EVP_bf_ofb'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_cast5_ecb                             ; N: 'EVP_cast5_ecb'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_cast5_cbc                             ; N: 'EVP_cast5_cbc'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_cast5_cfb64                           ; N: 'EVP_cast5_cfb64'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_cast5_cfb                             ; N: 'EVP_cast5_cfb64'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_cast5_ofb                             ; N: 'EVP_cast5_ofb'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_ecb                           ; N: 'EVP_aes_128_ecb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cbc                           ; N: 'EVP_aes_128_cbc'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cfb1                          ; N: 'EVP_aes_128_cfb1'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cfb8                          ; N: 'EVP_aes_128_cfb8'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cfb128                        ; N: 'EVP_aes_128_cfb128'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cfb                           ; N: 'EVP_aes_128_cfb128'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_ofb                           ; N: 'EVP_aes_128_ofb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_ctr                           ; N: 'EVP_aes_128_ctr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_ccm                           ; N: 'EVP_aes_128_ccm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_gcm                           ; N: 'EVP_aes_128_gcm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_xts                           ; N: 'EVP_aes_128_xts'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_wrap                          ; N: 'EVP_aes_128_wrap'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_wrap_pad                      ; N: 'EVP_aes_128_wrap_pad'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_ocb                           ; N: 'EVP_aes_128_ocb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_ecb                           ; N: 'EVP_aes_192_ecb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_cbc                           ; N: 'EVP_aes_192_cbc'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_cfb1                          ; N: 'EVP_aes_192_cfb1'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_cfb8                          ; N: 'EVP_aes_192_cfb8'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_cfb128                        ; N: 'EVP_aes_192_cfb128'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_cfb                           ; N: 'EVP_aes_192_cfb128'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_ofb                           ; N: 'EVP_aes_192_ofb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_ctr                           ; N: 'EVP_aes_192_ctr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_ccm                           ; N: 'EVP_aes_192_ccm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_gcm                           ; N: 'EVP_aes_192_gcm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_wrap                          ; N: 'EVP_aes_192_wrap'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_wrap_pad                      ; N: 'EVP_aes_192_wrap_pad'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_192_ocb                           ; N: 'EVP_aes_192_ocb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_ecb                           ; N: 'EVP_aes_256_ecb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cbc                           ; N: 'EVP_aes_256_cbc'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cfb1                          ; N: 'EVP_aes_256_cfb1'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cfb8                          ; N: 'EVP_aes_256_cfb8'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cfb128                        ; N: 'EVP_aes_256_cfb128'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cfb                           ; N: 'EVP_aes_256_cfb128'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_ofb                           ; N: 'EVP_aes_256_ofb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_ctr                           ; N: 'EVP_aes_256_ctr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_ccm                           ; N: 'EVP_aes_256_ccm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_gcm                           ; N: 'EVP_aes_256_gcm'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_xts                           ; N: 'EVP_aes_256_xts'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_wrap                          ; N: 'EVP_aes_256_wrap'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_wrap_pad                      ; N: 'EVP_aes_256_wrap_pad'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_ocb                           ; N: 'EVP_aes_256_ocb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cbc_hmac_sha1                 ; N: 'EVP_aes_128_cbc_hmac_sha1'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cbc_hmac_sha1                 ; N: 'EVP_aes_256_cbc_hmac_sha1'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_128_cbc_hmac_sha256               ; N: 'EVP_aes_128_cbc_hmac_sha256'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aes_256_cbc_hmac_sha256               ; N: 'EVP_aes_256_cbc_hmac_sha256'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_ecb                          ; N: 'EVP_aria_128_ecb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_cbc                          ; N: 'EVP_aria_128_cbc'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_cfb1                         ; N: 'EVP_aria_128_cfb1'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_cfb8                         ; N: 'EVP_aria_128_cfb8'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_cfb128                       ; N: 'EVP_aria_128_cfb128'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_cfb                          ; N: 'EVP_aria_128_cfb128'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_ctr                          ; N: 'EVP_aria_128_ctr'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_ofb                          ; N: 'EVP_aria_128_ofb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_gcm                          ; N: 'EVP_aria_128_gcm'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_128_ccm                          ; N: 'EVP_aria_128_ccm'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_ecb                          ; N: 'EVP_aria_192_ecb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_cbc                          ; N: 'EVP_aria_192_cbc'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_cfb1                         ; N: 'EVP_aria_192_cfb1'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_cfb8                         ; N: 'EVP_aria_192_cfb8'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_cfb128                       ; N: 'EVP_aria_192_cfb128'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_cfb                          ; N: 'EVP_aria_192_cfb128'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_ctr                          ; N: 'EVP_aria_192_ctr'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_ofb                          ; N: 'EVP_aria_192_ofb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_gcm                          ; N: 'EVP_aria_192_gcm'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_192_ccm                          ; N: 'EVP_aria_192_ccm'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_ecb                          ; N: 'EVP_aria_256_ecb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_cbc                          ; N: 'EVP_aria_256_cbc'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_cfb1                         ; N: 'EVP_aria_256_cfb1'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_cfb8                         ; N: 'EVP_aria_256_cfb8'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_cfb128                       ; N: 'EVP_aria_256_cfb128'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_cfb                          ; N: 'EVP_aria_256_cfb128'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_ctr                          ; N: 'EVP_aria_256_ctr'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_ofb                          ; N: 'EVP_aria_256_ofb'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_gcm                          ; N: 'EVP_aria_256_gcm'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_aria_256_ccm                          ; N: 'EVP_aria_256_ccm'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_ecb                      ; N: 'EVP_camellia_128_ecb'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_cbc                      ; N: 'EVP_camellia_128_cbc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_cfb1                     ; N: 'EVP_camellia_128_cfb1'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_cfb8                     ; N: 'EVP_camellia_128_cfb8'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_cfb128                   ; N: 'EVP_camellia_128_cfb128'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_cfb                      ; N: 'EVP_camellia_128_cfb128'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_ofb                      ; N: 'EVP_camellia_128_ofb'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_128_ctr                      ; N: 'EVP_camellia_128_ctr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_ecb                      ; N: 'EVP_camellia_192_ecb'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_cbc                      ; N: 'EVP_camellia_192_cbc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_cfb1                     ; N: 'EVP_camellia_192_cfb1'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_cfb8                     ; N: 'EVP_camellia_192_cfb8'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_cfb128                   ; N: 'EVP_camellia_192_cfb128'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_cfb                      ; N: 'EVP_camellia_192_cfb128'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_ofb                      ; N: 'EVP_camellia_192_ofb'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_192_ctr                      ; N: 'EVP_camellia_192_ctr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_ecb                      ; N: 'EVP_camellia_256_ecb'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_cbc                      ; N: 'EVP_camellia_256_cbc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_cfb1                     ; N: 'EVP_camellia_256_cfb1'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_cfb8                     ; N: 'EVP_camellia_256_cfb8'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_cfb128                   ; N: 'EVP_camellia_256_cfb128'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_cfb                      ; N: 'EVP_camellia_256_cfb128'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_ofb                      ; N: 'EVP_camellia_256_ofb'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_camellia_256_ctr                      ; N: 'EVP_camellia_256_ctr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_chacha20                              ; N: 'EVP_chacha20'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_chacha20_poly1305                     ; N: 'EVP_chacha20_poly1305'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_seed_ecb                              ; N: 'EVP_seed_ecb'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_seed_cbc                              ; N: 'EVP_seed_cbc'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_seed_cfb128                           ; N: 'EVP_seed_cfb128'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_seed_cfb                              ; N: 'EVP_seed_cfb128'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_seed_ofb                              ; N: 'EVP_seed_ofb'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm4_ecb                               ; N: 'EVP_sm4_ecb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm4_cbc                               ; N: 'EVP_sm4_cbc'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm4_cfb128                            ; N: 'EVP_sm4_cfb128'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm4_cfb                               ; N: 'EVP_sm4_cfb128'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm4_ofb                               ; N: 'EVP_sm4_ofb'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_sm4_ctr                               ; N: 'EVP_sm4_ctr'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_add_cipher                            ; N: 'EVP_add_cipher'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_add_digest                            ; N: 'EVP_add_digest'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_get_cipherbyname                      ; N: 'EVP_get_cipherbyname'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_get_digestbyname                      ; N: 'EVP_get_digestbyname'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_do_all                         ; N: 'EVP_CIPHER_do_all'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_do_all_sorted                  ; N: 'EVP_CIPHER_do_all_sorted'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_do_all                             ; N: 'EVP_MD_do_all'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_MD_do_all_sorted                      ; N: 'EVP_MD_do_all_sorted'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_decrypt_old                      ; N: 'EVP_PKEY_decrypt_old'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_encrypt_old                      ; N: 'EVP_PKEY_encrypt_old'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_type                             ; N: 'EVP_PKEY_type'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_id                               ; N: 'EVP_PKEY_id'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_base_id                          ; N: 'EVP_PKEY_base_id'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_1101ZZ),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_base_id                          ; N: 'EVP_PKEY_get_base_id'                      ; MI: OPENSSL_VER_3000; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_bits                             ; N: 'EVP_PKEY_bits'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_security_bits                    ; N: 'EVP_PKEY_security_bits'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_size                             ; N: 'EVP_PKEY_size'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set_type                         ; N: 'EVP_PKEY_set_type'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set_type_str                     ; N: 'EVP_PKEY_set_type_str'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set_alias_type                   ; N: 'EVP_PKEY_set_alias_type'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set1_engine                      ; N: 'EVP_PKEY_set1_engine'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_engine                      ; N: 'EVP_PKEY_get0_engine'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_assign                           ; N: 'EVP_PKEY_assign'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0                             ; N: 'EVP_PKEY_get0'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_hmac                        ; N: 'EVP_PKEY_get0_hmac'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_poly1305                    ; N: 'EVP_PKEY_get0_poly1305'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_siphash                     ; N: 'EVP_PKEY_get0_siphash'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set1_RSA                         ; N: 'EVP_PKEY_set1_RSA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_RSA                         ; N: 'EVP_PKEY_get0_RSA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get1_RSA                         ; N: 'EVP_PKEY_get1_RSA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set1_DSA                         ; N: 'EVP_PKEY_set1_DSA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_DSA                         ; N: 'EVP_PKEY_get0_DSA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get1_DSA                         ; N: 'EVP_PKEY_get1_DSA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set1_DH                          ; N: 'EVP_PKEY_set1_DH'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_DH                          ; N: 'EVP_PKEY_get0_DH'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get1_DH                          ; N: 'EVP_PKEY_get1_DH'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set1_EC_KEY                      ; N: 'EVP_PKEY_set1_EC_KEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_EC_KEY                      ; N: 'EVP_PKEY_get0_EC_KEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get1_EC_KEY                      ; N: 'EVP_PKEY_get1_EC_KEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_new                              ; N: 'EVP_PKEY_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_up_ref                           ; N: 'EVP_PKEY_up_ref'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_free                             ; N: 'EVP_PKEY_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PublicKey                             ; N: 'd2i_PublicKey'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PublicKey                             ; N: 'i2d_PublicKey'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PrivateKey                            ; N: 'd2i_PrivateKey'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_AutoPrivateKey                        ; N: 'd2i_AutoPrivateKey'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PrivateKey                            ; N: 'i2d_PrivateKey'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_copy_parameters                  ; N: 'EVP_PKEY_copy_parameters'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_missing_parameters               ; N: 'EVP_PKEY_missing_parameters'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_save_parameters                  ; N: 'EVP_PKEY_save_parameters'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_cmp_parameters                   ; N: 'EVP_PKEY_cmp_parameters'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_cmp                              ; N: 'EVP_PKEY_cmp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_print_public                     ; N: 'EVP_PKEY_print_public'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_print_private                    ; N: 'EVP_PKEY_print_private'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_print_params                     ; N: 'EVP_PKEY_print_params'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_default_digest_nid           ; N: 'EVP_PKEY_get_default_digest_nid'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_set1_tls_encodedpoint            ; N: 'EVP_PKEY_set1_tls_encodedpoint'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get1_tls_encodedpoint            ; N: 'EVP_PKEY_get1_tls_encodedpoint'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_type                           ; N: 'EVP_CIPHER_type'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_param_to_asn1                  ; N: 'EVP_CIPHER_param_to_asn1'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_asn1_to_param                  ; N: 'EVP_CIPHER_asn1_to_param'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_set_asn1_iv                    ; N: 'EVP_CIPHER_set_asn1_iv'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_CIPHER_get_asn1_iv                    ; N: 'EVP_CIPHER_get_asn1_iv'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_PBE_keyivgen                        ; N: 'PKCS5_PBE_keyivgen'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_PBKDF2_HMAC_SHA1                    ; N: 'PKCS5_PBKDF2_HMAC_SHA1'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_PBKDF2_HMAC                         ; N: 'PKCS5_PBKDF2_HMAC'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_v2_PBE_keyivgen                     ; N: 'PKCS5_v2_PBE_keyivgen'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_scrypt                            ; N: 'EVP_PBE_scrypt'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_v2_scrypt_keyivgen                  ; N: 'PKCS5_v2_scrypt_keyivgen'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_PBE_add                             ; N: 'PKCS5_PBE_add'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_CipherInit                        ; N: 'EVP_PBE_CipherInit'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_alg_add_type                      ; N: 'EVP_PBE_alg_add_type'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_alg_add                           ; N: 'EVP_PBE_alg_add'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_find                              ; N: 'EVP_PBE_find'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_cleanup                           ; N: 'EVP_PBE_cleanup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PBE_get                               ; N: 'EVP_PBE_get'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_get_count                   ; N: 'EVP_PKEY_asn1_get_count'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_get0                        ; N: 'EVP_PKEY_asn1_get0'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_find                        ; N: 'EVP_PKEY_asn1_find'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_find_str                    ; N: 'EVP_PKEY_asn1_find_str'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_add0                        ; N: 'EVP_PKEY_asn1_add0'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_add_alias                   ; N: 'EVP_PKEY_asn1_add_alias'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_get0_info                   ; N: 'EVP_PKEY_asn1_get0_info'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get0_asn1                        ; N: 'EVP_PKEY_get0_asn1'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_new                         ; N: 'EVP_PKEY_asn1_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_copy                        ; N: 'EVP_PKEY_asn1_copy'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_free                        ; N: 'EVP_PKEY_asn1_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_public                  ; N: 'EVP_PKEY_asn1_set_public'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_private                 ; N: 'EVP_PKEY_asn1_set_private'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_param                   ; N: 'EVP_PKEY_asn1_set_param'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_free                    ; N: 'EVP_PKEY_asn1_set_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_ctrl                    ; N: 'EVP_PKEY_asn1_set_ctrl'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_item                    ; N: 'EVP_PKEY_asn1_set_item'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_siginf                  ; N: 'EVP_PKEY_asn1_set_siginf'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_check                   ; N: 'EVP_PKEY_asn1_set_check'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_public_check            ; N: 'EVP_PKEY_asn1_set_public_check'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_param_check             ; N: 'EVP_PKEY_asn1_set_param_check'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_set_priv_key            ; N: 'EVP_PKEY_asn1_set_set_priv_key'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_set_pub_key             ; N: 'EVP_PKEY_asn1_set_set_pub_key'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_get_priv_key            ; N: 'EVP_PKEY_asn1_set_get_priv_key'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_get_pub_key             ; N: 'EVP_PKEY_asn1_set_get_pub_key'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_asn1_set_security_bits           ; N: 'EVP_PKEY_asn1_set_security_bits'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_find                        ; N: 'EVP_PKEY_meth_find'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_new                         ; N: 'EVP_PKEY_meth_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get0_info                   ; N: 'EVP_PKEY_meth_get0_info'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_copy                        ; N: 'EVP_PKEY_meth_copy'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_free                        ; N: 'EVP_PKEY_meth_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_add0                        ; N: 'EVP_PKEY_meth_add0'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_remove                      ; N: 'EVP_PKEY_meth_remove'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_count                   ; N: 'EVP_PKEY_meth_get_count'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get0                        ; N: 'EVP_PKEY_meth_get0'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_new                          ; N: 'EVP_PKEY_CTX_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_new_id                       ; N: 'EVP_PKEY_CTX_new_id'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_dup                          ; N: 'EVP_PKEY_CTX_dup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_free                         ; N: 'EVP_PKEY_CTX_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_ctrl                         ; N: 'EVP_PKEY_CTX_ctrl'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_ctrl_str                     ; N: 'EVP_PKEY_CTX_ctrl_str'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_ctrl_uint64                  ; N: 'EVP_PKEY_CTX_ctrl_uint64'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_str2ctrl                     ; N: 'EVP_PKEY_CTX_str2ctrl'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_hex2ctrl                     ; N: 'EVP_PKEY_CTX_hex2ctrl'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_md                           ; N: 'EVP_PKEY_CTX_md'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get_operation                ; N: 'EVP_PKEY_CTX_get_operation'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_set0_keygen_info             ; N: 'EVP_PKEY_CTX_set0_keygen_info'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_new_mac_key                      ; N: 'EVP_PKEY_new_mac_key'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_new_raw_private_key              ; N: 'EVP_PKEY_new_raw_private_key'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_new_raw_public_key               ; N: 'EVP_PKEY_new_raw_public_key'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_raw_private_key              ; N: 'EVP_PKEY_get_raw_private_key'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_raw_public_key               ; N: 'EVP_PKEY_get_raw_public_key'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_new_CMAC_key                     ; N: 'EVP_PKEY_new_CMAC_key'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_set_data                     ; N: 'EVP_PKEY_CTX_set_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get_data                     ; N: 'EVP_PKEY_CTX_get_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get0_pkey                    ; N: 'EVP_PKEY_CTX_get0_pkey'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get0_peerkey                 ; N: 'EVP_PKEY_CTX_get0_peerkey'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_set_app_data                 ; N: 'EVP_PKEY_CTX_set_app_data'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get_app_data                 ; N: 'EVP_PKEY_CTX_get_app_data'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_sign_init                        ; N: 'EVP_PKEY_sign_init'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_sign                             ; N: 'EVP_PKEY_sign'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_verify_init                      ; N: 'EVP_PKEY_verify_init'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_verify                           ; N: 'EVP_PKEY_verify'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_verify_recover_init              ; N: 'EVP_PKEY_verify_recover_init'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_verify_recover                   ; N: 'EVP_PKEY_verify_recover'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_encrypt_init                     ; N: 'EVP_PKEY_encrypt_init'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_encrypt                          ; N: 'EVP_PKEY_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_decrypt_init                     ; N: 'EVP_PKEY_decrypt_init'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_decrypt                          ; N: 'EVP_PKEY_decrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_derive_init                      ; N: 'EVP_PKEY_derive_init'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_derive_set_peer                  ; N: 'EVP_PKEY_derive_set_peer'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_derive                           ; N: 'EVP_PKEY_derive'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_paramgen_init                    ; N: 'EVP_PKEY_paramgen_init'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_paramgen                         ; N: 'EVP_PKEY_paramgen'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_keygen_init                      ; N: 'EVP_PKEY_keygen_init'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_keygen                           ; N: 'EVP_PKEY_keygen'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_check                            ; N: 'EVP_PKEY_check'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_public_check                     ; N: 'EVP_PKEY_public_check'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_param_check                      ; N: 'EVP_PKEY_param_check'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_set_cb                       ; N: 'EVP_PKEY_CTX_set_cb'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get_cb                       ; N: 'EVP_PKEY_CTX_get_cb'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_CTX_get_keygen_info              ; N: 'EVP_PKEY_CTX_get_keygen_info'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_init                    ; N: 'EVP_PKEY_meth_set_init'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_copy                    ; N: 'EVP_PKEY_meth_set_copy'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_cleanup                 ; N: 'EVP_PKEY_meth_set_cleanup'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_paramgen                ; N: 'EVP_PKEY_meth_set_paramgen'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_keygen                  ; N: 'EVP_PKEY_meth_set_keygen'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_sign                    ; N: 'EVP_PKEY_meth_set_sign'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_verify                  ; N: 'EVP_PKEY_meth_set_verify'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_verify_recover          ; N: 'EVP_PKEY_meth_set_verify_recover'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_signctx                 ; N: 'EVP_PKEY_meth_set_signctx'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_verifyctx               ; N: 'EVP_PKEY_meth_set_verifyctx'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_encrypt                 ; N: 'EVP_PKEY_meth_set_encrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_decrypt                 ; N: 'EVP_PKEY_meth_set_decrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_derive                  ; N: 'EVP_PKEY_meth_set_derive'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_ctrl                    ; N: 'EVP_PKEY_meth_set_ctrl'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_digestsign              ; N: 'EVP_PKEY_meth_set_digestsign'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_digestverify            ; N: 'EVP_PKEY_meth_set_digestverify'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_check                   ; N: 'EVP_PKEY_meth_set_check'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_public_check            ; N: 'EVP_PKEY_meth_set_public_check'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_param_check             ; N: 'EVP_PKEY_meth_set_param_check'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_set_digest_custom           ; N: 'EVP_PKEY_meth_set_digest_custom'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_init                    ; N: 'EVP_PKEY_meth_get_init'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_copy                    ; N: 'EVP_PKEY_meth_get_copy'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_cleanup                 ; N: 'EVP_PKEY_meth_get_cleanup'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_paramgen                ; N: 'EVP_PKEY_meth_get_paramgen'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_keygen                  ; N: 'EVP_PKEY_meth_get_keygen'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_sign                    ; N: 'EVP_PKEY_meth_get_sign'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_verify                  ; N: 'EVP_PKEY_meth_get_verify'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_verify_recover          ; N: 'EVP_PKEY_meth_get_verify_recover'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_signctx                 ; N: 'EVP_PKEY_meth_get_signctx'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_verifyctx               ; N: 'EVP_PKEY_meth_get_verifyctx'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_encrypt                 ; N: 'EVP_PKEY_meth_get_encrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_decrypt                 ; N: 'EVP_PKEY_meth_get_decrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_derive                  ; N: 'EVP_PKEY_meth_get_derive'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_ctrl                    ; N: 'EVP_PKEY_meth_get_ctrl'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_digestsign              ; N: 'EVP_PKEY_meth_get_digestsign'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_digestverify            ; N: 'EVP_PKEY_meth_get_digestverify'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_check                   ; N: 'EVP_PKEY_meth_get_check'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_public_check            ; N: 'EVP_PKEY_meth_get_public_check'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_param_check             ; N: 'EVP_PKEY_meth_get_param_check'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_meth_get_digest_custom           ; N: 'EVP_PKEY_meth_get_digest_custom'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_add_alg_module                        ; N: 'EVP_add_alg_module'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_CTX_new                              ; N: 'CMAC_CTX_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_CTX_cleanup                          ; N: 'CMAC_CTX_cleanup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_CTX_free                             ; N: 'CMAC_CTX_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_CTX_get0_cipher_ctx                  ; N: 'CMAC_CTX_get0_cipher_ctx'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_CTX_copy                             ; N: 'CMAC_CTX_copy'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_Init                                 ; N: 'CMAC_Init'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_Update                               ; N: 'CMAC_Update'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_Final                                ; N: 'CMAC_Final'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMAC_resume                               ; N: 'CMAC_resume'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_EC_strings                       ; N: 'ERR_load_EC_strings'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GFp_simple_method                      ; N: 'EC_GFp_simple_method'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GFp_mont_method                        ; N: 'EC_GFp_mont_method'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GFp_nist_method                        ; N: 'EC_GFp_nist_method'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GF2m_simple_method                     ; N: 'EC_GF2m_simple_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_new                              ; N: 'EC_GROUP_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_free                             ; N: 'EC_GROUP_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_clear_free                       ; N: 'EC_GROUP_clear_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_copy                             ; N: 'EC_GROUP_copy'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_dup                              ; N: 'EC_GROUP_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_method_of                        ; N: 'EC_GROUP_method_of'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_METHOD_get_field_type                  ; N: 'EC_METHOD_get_field_type'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_generator                    ; N: 'EC_GROUP_set_generator'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get0_generator                   ; N: 'EC_GROUP_get0_generator'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_mont_data                    ; N: 'EC_GROUP_get_mont_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_order                        ; N: 'EC_GROUP_get_order'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get0_order                       ; N: 'EC_GROUP_get0_order'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_order_bits                       ; N: 'EC_GROUP_order_bits'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_cofactor                     ; N: 'EC_GROUP_get_cofactor'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get0_cofactor                    ; N: 'EC_GROUP_get0_cofactor'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_curve_name                   ; N: 'EC_GROUP_set_curve_name'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_curve_name                   ; N: 'EC_GROUP_get_curve_name'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_asn1_flag                    ; N: 'EC_GROUP_set_asn1_flag'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_asn1_flag                    ; N: 'EC_GROUP_get_asn1_flag'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_point_conversion_form        ; N: 'EC_GROUP_set_point_conversion_form'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_point_conversion_form        ; N: 'EC_GROUP_get_point_conversion_form'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get0_seed                        ; N: 'EC_GROUP_get0_seed'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_seed_len                     ; N: 'EC_GROUP_get_seed_len'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_seed                         ; N: 'EC_GROUP_set_seed'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_curve                        ; N: 'EC_GROUP_set_curve'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_curve                        ; N: 'EC_GROUP_get_curve'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_curve_GFp                    ; N: 'EC_GROUP_set_curve_GFp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_curve_GFp                    ; N: 'EC_GROUP_get_curve_GFp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_set_curve_GF2m                   ; N: 'EC_GROUP_set_curve_GF2m'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_curve_GF2m                   ; N: 'EC_GROUP_get_curve_GF2m'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_degree                       ; N: 'EC_GROUP_get_degree'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_check                            ; N: 'EC_GROUP_check'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_check_discriminant               ; N: 'EC_GROUP_check_discriminant'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_cmp                              ; N: 'EC_GROUP_cmp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_new_curve_GFp                    ; N: 'EC_GROUP_new_curve_GFp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_new_curve_GF2m                   ; N: 'EC_GROUP_new_curve_GF2m'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_new_by_curve_name                ; N: 'EC_GROUP_new_by_curve_name'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_new_from_ecparameters            ; N: 'EC_GROUP_new_from_ecparameters'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_ecparameters                 ; N: 'EC_GROUP_get_ecparameters'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_new_from_ecpkparameters          ; N: 'EC_GROUP_new_from_ecpkparameters'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_ecpkparameters               ; N: 'EC_GROUP_get_ecpkparameters'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_get_builtin_curves                     ; N: 'EC_get_builtin_curves'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_curve_nid2nist                         ; N: 'EC_curve_nid2nist'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_curve_nist2nid                         ; N: 'EC_curve_nist2nid'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_new                              ; N: 'EC_POINT_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_free                             ; N: 'EC_POINT_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_clear_free                       ; N: 'EC_POINT_clear_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_copy                             ; N: 'EC_POINT_copy'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_dup                              ; N: 'EC_POINT_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_method_of                        ; N: 'EC_POINT_method_of'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_to_infinity                  ; N: 'EC_POINT_set_to_infinity'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_Jprojective_coordinates_GFp  ; N: 'EC_POINT_set_Jprojective_coordinates_GFp'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_get_Jprojective_coordinates_GFp  ; N: 'EC_POINT_get_Jprojective_coordinates_GFp'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_affine_coordinates           ; N: 'EC_POINT_set_affine_coordinates'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_get_affine_coordinates           ; N: 'EC_POINT_get_affine_coordinates'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_affine_coordinates_GFp       ; N: 'EC_POINT_set_affine_coordinates_GFp'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_get_affine_coordinates_GFp       ; N: 'EC_POINT_get_affine_coordinates_GFp'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_compressed_coordinates       ; N: 'EC_POINT_set_compressed_coordinates'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_compressed_coordinates_GFp   ; N: 'EC_POINT_set_compressed_coordinates_GFp'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_affine_coordinates_GF2m      ; N: 'EC_POINT_set_affine_coordinates_GF2m'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_get_affine_coordinates_GF2m      ; N: 'EC_POINT_get_affine_coordinates_GF2m'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_set_compressed_coordinates_GF2m  ; N: 'EC_POINT_set_compressed_coordinates_GF2m'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_point2oct                        ; N: 'EC_POINT_point2oct'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_oct2point                        ; N: 'EC_POINT_oct2point'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_point2buf                        ; N: 'EC_POINT_point2buf'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_point2bn                         ; N: 'EC_POINT_point2bn'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_bn2point                         ; N: 'EC_POINT_bn2point'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_point2hex                        ; N: 'EC_POINT_point2hex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_hex2point                        ; N: 'EC_POINT_hex2point'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_add                              ; N: 'EC_POINT_add'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_dbl                              ; N: 'EC_POINT_dbl'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_invert                           ; N: 'EC_POINT_invert'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_is_at_infinity                   ; N: 'EC_POINT_is_at_infinity'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_is_on_curve                      ; N: 'EC_POINT_is_on_curve'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_cmp                              ; N: 'EC_POINT_cmp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_make_affine                      ; N: 'EC_POINT_make_affine'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINTs_make_affine                     ; N: 'EC_POINTs_make_affine'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINTs_mul                             ; N: 'EC_POINTs_mul'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_POINT_mul                              ; N: 'EC_POINT_mul'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_precompute_mult                  ; N: 'EC_GROUP_precompute_mult'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_have_precompute_mult             ; N: 'EC_GROUP_have_precompute_mult'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPKPARAMETERS_it                         ; N: 'ECPKPARAMETERS_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPKPARAMETERS_new                        ; N: 'ECPKPARAMETERS_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPKPARAMETERS_free                       ; N: 'ECPKPARAMETERS_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPARAMETERS_it                           ; N: 'ECPARAMETERS_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPARAMETERS_new                          ; N: 'ECPARAMETERS_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPARAMETERS_free                         ; N: 'ECPARAMETERS_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_basis_type                   ; N: 'EC_GROUP_get_basis_type'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_trinomial_basis              ; N: 'EC_GROUP_get_trinomial_basis'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_GROUP_get_pentanomial_basis            ; N: 'EC_GROUP_get_pentanomial_basis'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ECPKParameters                        ; N: 'd2i_ECPKParameters'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ECPKParameters                        ; N: 'i2d_ECPKParameters'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPKParameters_print                      ; N: 'ECPKParameters_print'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECPKParameters_print_fp                   ; N: 'ECPKParameters_print_fp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_new                                ; N: 'EC_KEY_new'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get_flags                          ; N: 'EC_KEY_get_flags'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_flags                          ; N: 'EC_KEY_set_flags'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_clear_flags                        ; N: 'EC_KEY_clear_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_new_by_curve_name                  ; N: 'EC_KEY_new_by_curve_name'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_free                               ; N: 'EC_KEY_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_copy                               ; N: 'EC_KEY_copy'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_dup                                ; N: 'EC_KEY_dup'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_up_ref                             ; N: 'EC_KEY_up_ref'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get0_engine                        ; N: 'EC_KEY_get0_engine'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get0_group                         ; N: 'EC_KEY_get0_group'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_group                          ; N: 'EC_KEY_set_group'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get0_private_key                   ; N: 'EC_KEY_get0_private_key'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_private_key                    ; N: 'EC_KEY_set_private_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get0_public_key                    ; N: 'EC_KEY_get0_public_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_public_key                     ; N: 'EC_KEY_set_public_key'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get_enc_flags                      ; N: 'EC_KEY_get_enc_flags'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_enc_flags                      ; N: 'EC_KEY_set_enc_flags'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get_conv_form                      ; N: 'EC_KEY_get_conv_form'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_conv_form                      ; N: 'EC_KEY_set_conv_form'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_ex_data                        ; N: 'EC_KEY_set_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get_ex_data                        ; N: 'EC_KEY_get_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_asn1_flag                      ; N: 'EC_KEY_set_asn1_flag'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_precompute_mult                    ; N: 'EC_KEY_precompute_mult'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_generate_key                       ; N: 'EC_KEY_generate_key'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_check_key                          ; N: 'EC_KEY_check_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_can_sign                           ; N: 'EC_KEY_can_sign'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_public_key_affine_coordinates  ; N: 'EC_KEY_set_public_key_affine_coordinates'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_key2buf                            ; N: 'EC_KEY_key2buf'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_oct2key                            ; N: 'EC_KEY_oct2key'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_oct2priv                           ; N: 'EC_KEY_oct2priv'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_priv2oct                           ; N: 'EC_KEY_priv2oct'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_priv2buf                           ; N: 'EC_KEY_priv2buf'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ECPrivateKey                          ; N: 'd2i_ECPrivateKey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ECPrivateKey                          ; N: 'i2d_ECPrivateKey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ECParameters                          ; N: 'd2i_ECParameters'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ECParameters                          ; N: 'i2d_ECParameters'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@o2i_ECPublicKey                           ; N: 'o2i_ECPublicKey'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2o_ECPublicKey                           ; N: 'i2o_ECPublicKey'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECParameters_print                        ; N: 'ECParameters_print'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_print                              ; N: 'EC_KEY_print'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECParameters_print_fp                     ; N: 'ECParameters_print_fp'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_print_fp                           ; N: 'EC_KEY_print_fp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_OpenSSL                            ; N: 'EC_KEY_OpenSSL'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get_default_method                 ; N: 'EC_KEY_get_default_method'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_default_method                 ; N: 'EC_KEY_set_default_method'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_get_method                         ; N: 'EC_KEY_get_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_set_method                         ; N: 'EC_KEY_set_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_new_method                         ; N: 'EC_KEY_new_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDH_KDF_X9_62                            ; N: 'ECDH_KDF_X9_62'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDH_compute_key                          ; N: 'ECDH_compute_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_SIG_new                             ; N: 'ECDSA_SIG_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_SIG_free                            ; N: 'ECDSA_SIG_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ECDSA_SIG                             ; N: 'i2d_ECDSA_SIG'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ECDSA_SIG                             ; N: 'd2i_ECDSA_SIG'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_SIG_get0                            ; N: 'ECDSA_SIG_get0'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_SIG_get0_r                          ; N: 'ECDSA_SIG_get0_r'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_SIG_get0_s                          ; N: 'ECDSA_SIG_get0_s'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_SIG_set0                            ; N: 'ECDSA_SIG_set0'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_do_sign                             ; N: 'ECDSA_do_sign'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_do_sign_ex                          ; N: 'ECDSA_do_sign_ex'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_do_verify                           ; N: 'ECDSA_do_verify'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_sign_setup                          ; N: 'ECDSA_sign_setup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_sign                                ; N: 'ECDSA_sign'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_sign_ex                             ; N: 'ECDSA_sign_ex'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_verify                              ; N: 'ECDSA_verify'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ECDSA_size                                ; N: 'ECDSA_size'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_new                         ; N: 'EC_KEY_METHOD_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_free                        ; N: 'EC_KEY_METHOD_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_set_init                    ; N: 'EC_KEY_METHOD_set_init'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_set_keygen                  ; N: 'EC_KEY_METHOD_set_keygen'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_set_compute_key             ; N: 'EC_KEY_METHOD_set_compute_key'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_set_sign                    ; N: 'EC_KEY_METHOD_set_sign'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_set_verify                  ; N: 'EC_KEY_METHOD_set_verify'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_get_init                    ; N: 'EC_KEY_METHOD_get_init'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_get_keygen                  ; N: 'EC_KEY_METHOD_get_keygen'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_get_compute_key             ; N: 'EC_KEY_METHOD_get_compute_key'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_get_sign                    ; N: 'EC_KEY_METHOD_get_sign'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EC_KEY_METHOD_get_verify                  ; N: 'EC_KEY_METHOD_get_verify'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_RSA_strings                      ; N: 'ERR_load_RSA_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_new                                   ; N: 'RSA_new'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_new_method                            ; N: 'RSA_new_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_bits                                  ; N: 'RSA_bits'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_size                                  ; N: 'RSA_size'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_security_bits                         ; N: 'RSA_security_bits'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set0_key                              ; N: 'RSA_set0_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set0_factors                          ; N: 'RSA_set0_factors'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set0_crt_params                       ; N: 'RSA_set0_crt_params'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set0_multi_prime_params               ; N: 'RSA_set0_multi_prime_params'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_key                              ; N: 'RSA_get0_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_factors                          ; N: 'RSA_get0_factors'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get_multi_prime_extra_count           ; N: 'RSA_get_multi_prime_extra_count'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_multi_prime_factors              ; N: 'RSA_get0_multi_prime_factors'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_crt_params                       ; N: 'RSA_get0_crt_params'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_multi_prime_crt_params           ; N: 'RSA_get0_multi_prime_crt_params'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_n                                ; N: 'RSA_get0_n'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_e                                ; N: 'RSA_get0_e'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_d                                ; N: 'RSA_get0_d'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_p                                ; N: 'RSA_get0_p'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_q                                ; N: 'RSA_get0_q'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_dmp1                             ; N: 'RSA_get0_dmp1'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_dmq1                             ; N: 'RSA_get0_dmq1'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_iqmp                             ; N: 'RSA_get0_iqmp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_pss_params                       ; N: 'RSA_get0_pss_params'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_clear_flags                           ; N: 'RSA_clear_flags'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_test_flags                            ; N: 'RSA_test_flags'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set_flags                             ; N: 'RSA_set_flags'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get_version                           ; N: 'RSA_get_version'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get0_engine                           ; N: 'RSA_get0_engine'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_generate_key                          ; N: 'RSA_generate_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_generate_key_ex                       ; N: 'RSA_generate_key_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_generate_multi_prime_key              ; N: 'RSA_generate_multi_prime_key'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_X931_derive_ex                        ; N: 'RSA_X931_derive_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_X931_generate_key_ex                  ; N: 'RSA_X931_generate_key_ex'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_check_key                             ; N: 'RSA_check_key'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_check_key_ex                          ; N: 'RSA_check_key_ex'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_public_encrypt                        ; N: 'RSA_public_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_private_encrypt                       ; N: 'RSA_private_encrypt'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_public_decrypt                        ; N: 'RSA_public_decrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_private_decrypt                       ; N: 'RSA_private_decrypt'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_free                                  ; N: 'RSA_free'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_up_ref                                ; N: 'RSA_up_ref'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_flags                                 ; N: 'RSA_flags'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set_default_method                    ; N: 'RSA_set_default_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get_default_method                    ; N: 'RSA_get_default_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_null_method                           ; N: 'RSA_null_method'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get_method                            ; N: 'RSA_get_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set_method                            ; N: 'RSA_set_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_PKCS1_OpenSSL                         ; N: 'RSA_PKCS1_OpenSSL'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_pkey_ctx_ctrl                         ; N: 'RSA_pkey_ctx_ctrl'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSAPublicKey                          ; N: 'd2i_RSAPublicKey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSAPublicKey                          ; N: 'i2d_RSAPublicKey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSAPublicKey_it                           ; N: 'RSAPublicKey_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSAPrivateKey                         ; N: 'd2i_RSAPrivateKey'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSAPrivateKey                         ; N: 'i2d_RSAPrivateKey'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSAPrivateKey_it                          ; N: 'RSAPrivateKey_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_PSS_PARAMS_new                        ; N: 'RSA_PSS_PARAMS_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_PSS_PARAMS_free                       ; N: 'RSA_PSS_PARAMS_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSA_PSS_PARAMS                        ; N: 'd2i_RSA_PSS_PARAMS'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSA_PSS_PARAMS                        ; N: 'i2d_RSA_PSS_PARAMS'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_PSS_PARAMS_it                         ; N: 'RSA_PSS_PARAMS_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_OAEP_PARAMS_new                       ; N: 'RSA_OAEP_PARAMS_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_OAEP_PARAMS_free                      ; N: 'RSA_OAEP_PARAMS_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSA_OAEP_PARAMS                       ; N: 'd2i_RSA_OAEP_PARAMS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSA_OAEP_PARAMS                       ; N: 'i2d_RSA_OAEP_PARAMS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_OAEP_PARAMS_it                        ; N: 'RSA_OAEP_PARAMS_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_print_fp                              ; N: 'RSA_print_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_print                                 ; N: 'RSA_print'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_sign                                  ; N: 'RSA_sign'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_verify                                ; N: 'RSA_verify'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_sign_ASN1_OCTET_STRING                ; N: 'RSA_sign_ASN1_OCTET_STRING'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_verify_ASN1_OCTET_STRING              ; N: 'RSA_verify_ASN1_OCTET_STRING'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_blinding_on                           ; N: 'RSA_blinding_on'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_blinding_off                          ; N: 'RSA_blinding_off'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_setup_blinding                        ; N: 'RSA_setup_blinding'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_PKCS1_type_1              ; N: 'RSA_padding_add_PKCS1_type_1'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_PKCS1_type_1            ; N: 'RSA_padding_check_PKCS1_type_1'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_PKCS1_type_2              ; N: 'RSA_padding_add_PKCS1_type_2'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_PKCS1_type_2            ; N: 'RSA_padding_check_PKCS1_type_2'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS1_MGF1                                ; N: 'PKCS1_MGF1'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_PKCS1_OAEP                ; N: 'RSA_padding_add_PKCS1_OAEP'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_PKCS1_OAEP              ; N: 'RSA_padding_check_PKCS1_OAEP'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_PKCS1_OAEP_mgf1           ; N: 'RSA_padding_add_PKCS1_OAEP_mgf1'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_PKCS1_OAEP_mgf1         ; N: 'RSA_padding_check_PKCS1_OAEP_mgf1'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_SSLv23                    ; N: 'RSA_padding_add_SSLv23'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_SSLv23                  ; N: 'RSA_padding_check_SSLv23'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_none                      ; N: 'RSA_padding_add_none'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_none                    ; N: 'RSA_padding_check_none'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_X931                      ; N: 'RSA_padding_add_X931'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_check_X931                    ; N: 'RSA_padding_check_X931'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_X931_hash_id                          ; N: 'RSA_X931_hash_id'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_verify_PKCS1_PSS                      ; N: 'RSA_verify_PKCS1_PSS'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_PKCS1_PSS                 ; N: 'RSA_padding_add_PKCS1_PSS'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_verify_PKCS1_PSS_mgf1                 ; N: 'RSA_verify_PKCS1_PSS_mgf1'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_padding_add_PKCS1_PSS_mgf1            ; N: 'RSA_padding_add_PKCS1_PSS_mgf1'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_set_ex_data                           ; N: 'RSA_set_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_get_ex_data                           ; N: 'RSA_get_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSAPublicKey_dup                          ; N: 'RSAPublicKey_dup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSAPrivateKey_dup                         ; N: 'RSAPrivateKey_dup'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_new                              ; N: 'RSA_meth_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_free                             ; N: 'RSA_meth_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_dup                              ; N: 'RSA_meth_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get0_name                        ; N: 'RSA_meth_get0_name'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set1_name                        ; N: 'RSA_meth_set1_name'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_flags                        ; N: 'RSA_meth_get_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_flags                        ; N: 'RSA_meth_set_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get0_app_data                    ; N: 'RSA_meth_get0_app_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set0_app_data                    ; N: 'RSA_meth_set0_app_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_pub_enc                      ; N: 'RSA_meth_get_pub_enc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_pub_enc                      ; N: 'RSA_meth_set_pub_enc'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_pub_dec                      ; N: 'RSA_meth_get_pub_dec'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_pub_dec                      ; N: 'RSA_meth_set_pub_dec'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_priv_enc                     ; N: 'RSA_meth_get_priv_enc'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_priv_enc                     ; N: 'RSA_meth_set_priv_enc'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_priv_dec                     ; N: 'RSA_meth_get_priv_dec'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_priv_dec                     ; N: 'RSA_meth_set_priv_dec'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_mod_exp                      ; N: 'RSA_meth_get_mod_exp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_mod_exp                      ; N: 'RSA_meth_set_mod_exp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_bn_mod_exp                   ; N: 'RSA_meth_get_bn_mod_exp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_bn_mod_exp                   ; N: 'RSA_meth_set_bn_mod_exp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_init                         ; N: 'RSA_meth_get_init'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_init                         ; N: 'RSA_meth_set_init'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_finish                       ; N: 'RSA_meth_get_finish'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_finish                       ; N: 'RSA_meth_set_finish'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_sign                         ; N: 'RSA_meth_get_sign'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_sign                         ; N: 'RSA_meth_set_sign'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_verify                       ; N: 'RSA_meth_get_verify'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_verify                       ; N: 'RSA_meth_set_verify'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_keygen                       ; N: 'RSA_meth_get_keygen'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_keygen                       ; N: 'RSA_meth_set_keygen'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_get_multi_prime_keygen           ; N: 'RSA_meth_get_multi_prime_keygen'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RSA_meth_set_multi_prime_keygen           ; N: 'RSA_meth_set_multi_prime_keygen'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_DH_strings                       ; N: 'ERR_load_DH_strings'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DHparams_it                               ; N: 'DHparams_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DHparams_dup                              ; N: 'DHparams_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_OpenSSL                                ; N: 'DH_OpenSSL'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set_default_method                     ; N: 'DH_set_default_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_default_method                     ; N: 'DH_get_default_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set_method                             ; N: 'DH_set_method'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_new_method                             ; N: 'DH_new_method'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_new                                    ; N: 'DH_new'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_free                                   ; N: 'DH_free'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_up_ref                                 ; N: 'DH_up_ref'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_bits                                   ; N: 'DH_bits'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_size                                   ; N: 'DH_size'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_security_bits                          ; N: 'DH_security_bits'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set_ex_data                            ; N: 'DH_set_ex_data'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_ex_data                            ; N: 'DH_get_ex_data'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_generate_parameters                    ; N: 'DH_generate_parameters'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_generate_parameters_ex                 ; N: 'DH_generate_parameters_ex'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_check_params_ex                        ; N: 'DH_check_params_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_check_ex                               ; N: 'DH_check_ex'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_check_pub_key_ex                       ; N: 'DH_check_pub_key_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_check_params                           ; N: 'DH_check_params'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_check                                  ; N: 'DH_check'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_check_pub_key                          ; N: 'DH_check_pub_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_generate_key                           ; N: 'DH_generate_key'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_compute_key                            ; N: 'DH_compute_key'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_compute_key_padded                     ; N: 'DH_compute_key_padded'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DHparams                              ; N: 'd2i_DHparams'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DHparams                              ; N: 'i2d_DHparams'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DHxparams                             ; N: 'd2i_DHxparams'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DHxparams                             ; N: 'i2d_DHxparams'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DHparams_print_fp                         ; N: 'DHparams_print_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DHparams_print                            ; N: 'DHparams_print'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_1024_160                           ; N: 'DH_get_1024_160'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_2048_224                           ; N: 'DH_get_2048_224'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_2048_256                           ; N: 'DH_get_2048_256'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_new_by_nid                             ; N: 'DH_new_by_nid'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_nid                                ; N: 'DH_get_nid'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_KDF_X9_42                              ; N: 'DH_KDF_X9_42'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_pqg                               ; N: 'DH_get0_pqg'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set0_pqg                               ; N: 'DH_set0_pqg'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_key                               ; N: 'DH_get0_key'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set0_key                               ; N: 'DH_set0_key'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_p                                 ; N: 'DH_get0_p'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_q                                 ; N: 'DH_get0_q'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_g                                 ; N: 'DH_get0_g'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_priv_key                          ; N: 'DH_get0_priv_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_pub_key                           ; N: 'DH_get0_pub_key'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_clear_flags                            ; N: 'DH_clear_flags'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_test_flags                             ; N: 'DH_test_flags'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set_flags                              ; N: 'DH_set_flags'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get0_engine                            ; N: 'DH_get0_engine'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_get_length                             ; N: 'DH_get_length'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_set_length                             ; N: 'DH_set_length'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_new                               ; N: 'DH_meth_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_free                              ; N: 'DH_meth_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_dup                               ; N: 'DH_meth_dup'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get0_name                         ; N: 'DH_meth_get0_name'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set1_name                         ; N: 'DH_meth_set1_name'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_flags                         ; N: 'DH_meth_get_flags'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_flags                         ; N: 'DH_meth_set_flags'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get0_app_data                     ; N: 'DH_meth_get0_app_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set0_app_data                     ; N: 'DH_meth_set0_app_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_generate_key                  ; N: 'DH_meth_get_generate_key'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_generate_key                  ; N: 'DH_meth_set_generate_key'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_compute_key                   ; N: 'DH_meth_get_compute_key'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_compute_key                   ; N: 'DH_meth_set_compute_key'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_bn_mod_exp                    ; N: 'DH_meth_get_bn_mod_exp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_bn_mod_exp                    ; N: 'DH_meth_set_bn_mod_exp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_init                          ; N: 'DH_meth_get_init'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_init                          ; N: 'DH_meth_set_init'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_finish                        ; N: 'DH_meth_get_finish'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_finish                        ; N: 'DH_meth_set_finish'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_get_generate_params               ; N: 'DH_meth_get_generate_params'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DH_meth_set_generate_params               ; N: 'DH_meth_set_generate_params'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_DSA_strings                      ; N: 'ERR_load_DSA_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSAparams_dup                             ; N: 'DSAparams_dup'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_SIG_new                               ; N: 'DSA_SIG_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_SIG_free                              ; N: 'DSA_SIG_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSA_SIG                               ; N: 'i2d_DSA_SIG'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSA_SIG                               ; N: 'd2i_DSA_SIG'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_SIG_get0                              ; N: 'DSA_SIG_get0'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_SIG_set0                              ; N: 'DSA_SIG_set0'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_do_sign                               ; N: 'DSA_do_sign'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_do_verify                             ; N: 'DSA_do_verify'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_OpenSSL                               ; N: 'DSA_OpenSSL'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_set_default_method                    ; N: 'DSA_set_default_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get_default_method                    ; N: 'DSA_get_default_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_set_method                            ; N: 'DSA_set_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get_method                            ; N: 'DSA_get_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_new                                   ; N: 'DSA_new'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_new_method                            ; N: 'DSA_new_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_free                                  ; N: 'DSA_free'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_up_ref                                ; N: 'DSA_up_ref'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_size                                  ; N: 'DSA_size'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_bits                                  ; N: 'DSA_bits'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_security_bits                         ; N: 'DSA_security_bits'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_sign_setup                            ; N: 'DSA_sign_setup'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_sign                                  ; N: 'DSA_sign'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_verify                                ; N: 'DSA_verify'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_set_ex_data                           ; N: 'DSA_set_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get_ex_data                           ; N: 'DSA_get_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSAPublicKey                          ; N: 'd2i_DSAPublicKey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSAPrivateKey                         ; N: 'd2i_DSAPrivateKey'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSAparams                             ; N: 'd2i_DSAparams'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_generate_parameters                   ; N: 'DSA_generate_parameters'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_generate_parameters_ex                ; N: 'DSA_generate_parameters_ex'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_generate_key                          ; N: 'DSA_generate_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSAPublicKey                          ; N: 'i2d_DSAPublicKey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSAPrivateKey                         ; N: 'i2d_DSAPrivateKey'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSAparams                             ; N: 'i2d_DSAparams'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSAparams_print                           ; N: 'DSAparams_print'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_print                                 ; N: 'DSA_print'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSAparams_print_fp                        ; N: 'DSAparams_print_fp'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_print_fp                              ; N: 'DSA_print_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_dup_DH                                ; N: 'DSA_dup_DH'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_pqg                              ; N: 'DSA_get0_pqg'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_set0_pqg                              ; N: 'DSA_set0_pqg'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_key                              ; N: 'DSA_get0_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_set0_key                              ; N: 'DSA_set0_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_p                                ; N: 'DSA_get0_p'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_q                                ; N: 'DSA_get0_q'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_g                                ; N: 'DSA_get0_g'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_pub_key                          ; N: 'DSA_get0_pub_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_priv_key                         ; N: 'DSA_get0_priv_key'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_clear_flags                           ; N: 'DSA_clear_flags'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_test_flags                            ; N: 'DSA_test_flags'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_set_flags                             ; N: 'DSA_set_flags'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_get0_engine                           ; N: 'DSA_get0_engine'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_new                              ; N: 'DSA_meth_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_free                             ; N: 'DSA_meth_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_dup                              ; N: 'DSA_meth_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get0_name                        ; N: 'DSA_meth_get0_name'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set1_name                        ; N: 'DSA_meth_set1_name'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_flags                        ; N: 'DSA_meth_get_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_flags                        ; N: 'DSA_meth_set_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get0_app_data                    ; N: 'DSA_meth_get0_app_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set0_app_data                    ; N: 'DSA_meth_set0_app_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_sign                         ; N: 'DSA_meth_get_sign'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_sign                         ; N: 'DSA_meth_set_sign'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_sign_setup                   ; N: 'DSA_meth_get_sign_setup'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_sign_setup                   ; N: 'DSA_meth_set_sign_setup'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_verify                       ; N: 'DSA_meth_get_verify'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_verify                       ; N: 'DSA_meth_set_verify'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_mod_exp                      ; N: 'DSA_meth_get_mod_exp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_mod_exp                      ; N: 'DSA_meth_set_mod_exp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_bn_mod_exp                   ; N: 'DSA_meth_get_bn_mod_exp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_bn_mod_exp                   ; N: 'DSA_meth_set_bn_mod_exp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_init                         ; N: 'DSA_meth_get_init'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_init                         ; N: 'DSA_meth_set_init'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_finish                       ; N: 'DSA_meth_get_finish'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_finish                       ; N: 'DSA_meth_set_finish'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_paramgen                     ; N: 'DSA_meth_get_paramgen'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_paramgen                     ; N: 'DSA_meth_set_paramgen'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_get_keygen                       ; N: 'DSA_meth_get_keygen'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DSA_meth_set_keygen                       ; N: 'DSA_meth_set_keygen'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA1_Init                                 ; N: 'SHA1_Init'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA1_Update                               ; N: 'SHA1_Update'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA1_Final                                ; N: 'SHA1_Final'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA1                                      ; N: 'SHA1'                                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA1_Transform                            ; N: 'SHA1_Transform'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA224_Init                               ; N: 'SHA224_Init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA224_Update                             ; N: 'SHA224_Update'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA224_Final                              ; N: 'SHA224_Final'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA224                                    ; N: 'SHA224'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA256_Init                               ; N: 'SHA256_Init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA256_Update                             ; N: 'SHA256_Update'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA256_Final                              ; N: 'SHA256_Final'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA256                                    ; N: 'SHA256'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA256_Transform                          ; N: 'SHA256_Transform'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA384_Init                               ; N: 'SHA384_Init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA384_Update                             ; N: 'SHA384_Update'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA384_Final                              ; N: 'SHA384_Final'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA384                                    ; N: 'SHA384'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA512_Init                               ; N: 'SHA512_Init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA512_Update                             ; N: 'SHA512_Update'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA512_Final                              ; N: 'SHA512_Final'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA512                                    ; N: 'SHA512'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SHA512_Transform                          ; N: 'SHA512_Transform'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_X509_strings                     ; N: 'ERR_load_X509_strings'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_error                          ; N: 'OPENSSL_LH_error'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_new                            ; N: 'OPENSSL_LH_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_free                           ; N: 'OPENSSL_LH_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_insert                         ; N: 'OPENSSL_LH_insert'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_delete                         ; N: 'OPENSSL_LH_delete'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_retrieve                       ; N: 'OPENSSL_LH_retrieve'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_doall                          ; N: 'OPENSSL_LH_doall'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_doall_arg                      ; N: 'OPENSSL_LH_doall_arg'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_strhash                        ; N: 'OPENSSL_LH_strhash'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_num_items                      ; N: 'OPENSSL_LH_num_items'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_get_down_load                  ; N: 'OPENSSL_LH_get_down_load'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_set_down_load                  ; N: 'OPENSSL_LH_set_down_load'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_stats                          ; N: 'OPENSSL_LH_stats'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_node_stats                     ; N: 'OPENSSL_LH_node_stats'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_node_usage_stats               ; N: 'OPENSSL_LH_node_usage_stats'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_stats_bio                      ; N: 'OPENSSL_LH_stats_bio'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_node_stats_bio                 ; N: 'OPENSSL_LH_node_stats_bio'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_LH_node_usage_stats_bio           ; N: 'OPENSSL_LH_node_usage_stats_bio'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_depth                      ; N: 'X509_STORE_set_depth'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_depth                  ; N: 'X509_STORE_CTX_set_depth'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_idx_by_subject                ; N: 'X509_OBJECT_idx_by_subject'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_retrieve_by_subject           ; N: 'X509_OBJECT_retrieve_by_subject'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_retrieve_match                ; N: 'X509_OBJECT_retrieve_match'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_up_ref_count                  ; N: 'X509_OBJECT_up_ref_count'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_new                           ; N: 'X509_OBJECT_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_free                          ; N: 'X509_OBJECT_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_get_type                      ; N: 'X509_OBJECT_get_type'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_get0_X509                     ; N: 'X509_OBJECT_get0_X509'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_set1_X509                     ; N: 'X509_OBJECT_set1_X509'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_get0_X509_CRL                 ; N: 'X509_OBJECT_get0_X509_CRL'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_OBJECT_set1_X509_CRL                 ; N: 'X509_OBJECT_set1_X509_CRL'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_new                            ; N: 'X509_STORE_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_free                           ; N: 'X509_STORE_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_lock                           ; N: 'X509_STORE_lock'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_unlock                         ; N: 'X509_STORE_unlock'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_up_ref                         ; N: 'X509_STORE_up_ref'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get0_objects                   ; N: 'X509_STORE_get0_objects'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get1_certs                 ; N: 'X509_STORE_CTX_get1_certs'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get1_certs                     ; N: 'X509_STORE_CTX_get1_certs'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get1_cert                      ; N: 'X509_STORE_CTX_get1_certs'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get1_crls                  ; N: 'X509_STORE_CTX_get1_crls'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get1_crls                      ; N: 'X509_STORE_CTX_get1_crls'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get1_crl                       ; N: 'X509_STORE_CTX_get1_crls'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_flags                      ; N: 'X509_STORE_set_flags'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_purpose                    ; N: 'X509_STORE_set_purpose'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_trust                      ; N: 'X509_STORE_set_trust'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set1_param                     ; N: 'X509_STORE_set1_param'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get0_param                     ; N: 'X509_STORE_get0_param'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_verify                     ; N: 'X509_STORE_set_verify'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_verify                 ; N: 'X509_STORE_CTX_set_verify'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_verify                     ; N: 'X509_STORE_get_verify'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_verify_cb                  ; N: 'X509_STORE_set_verify_cb'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_verify_cb                  ; N: 'X509_STORE_get_verify_cb'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_get_issuer                 ; N: 'X509_STORE_set_get_issuer'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_get_issuer                 ; N: 'X509_STORE_get_get_issuer'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_check_issued               ; N: 'X509_STORE_set_check_issued'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_check_issued               ; N: 'X509_STORE_get_check_issued'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_check_revocation           ; N: 'X509_STORE_set_check_revocation'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_check_revocation           ; N: 'X509_STORE_get_check_revocation'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_get_crl                    ; N: 'X509_STORE_set_get_crl'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_get_crl                    ; N: 'X509_STORE_get_get_crl'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_check_crl                  ; N: 'X509_STORE_set_check_crl'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_check_crl                  ; N: 'X509_STORE_get_check_crl'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_cert_crl                   ; N: 'X509_STORE_set_cert_crl'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_cert_crl                   ; N: 'X509_STORE_get_cert_crl'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_check_policy               ; N: 'X509_STORE_set_check_policy'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_check_policy               ; N: 'X509_STORE_get_check_policy'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_lookup_certs               ; N: 'X509_STORE_set_lookup_certs'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_lookup_certs               ; N: 'X509_STORE_get_lookup_certs'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_lookup_crls                ; N: 'X509_STORE_set_lookup_crls'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_lookup_crls                ; N: 'X509_STORE_get_lookup_crls'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_cleanup                    ; N: 'X509_STORE_set_cleanup'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_cleanup                    ; N: 'X509_STORE_get_cleanup'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_ex_data                    ; N: 'X509_STORE_set_ex_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_ex_data                    ; N: 'X509_STORE_get_ex_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_new                        ; N: 'X509_STORE_CTX_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get1_issuer                ; N: 'X509_STORE_CTX_get1_issuer'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_free                       ; N: 'X509_STORE_CTX_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_init                       ; N: 'X509_STORE_CTX_init'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set0_trusted_stack         ; N: 'X509_STORE_CTX_set0_trusted_stack'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_trusted_stack              ; N: 'X509_STORE_CTX_set0_trusted_stack'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_cleanup                    ; N: 'X509_STORE_CTX_cleanup'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_store                 ; N: 'X509_STORE_CTX_get0_store'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_cert                  ; N: 'X509_STORE_CTX_get0_cert'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_untrusted             ; N: 'X509_STORE_CTX_get0_untrusted'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set0_untrusted             ; N: 'X509_STORE_CTX_set0_untrusted'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_chain                  ; N: 'X509_STORE_CTX_set0_untrusted'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_verify_cb              ; N: 'X509_STORE_CTX_set_verify_cb'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_verify_cb              ; N: 'X509_STORE_CTX_get_verify_cb'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_verify                 ; N: 'X509_STORE_CTX_get_verify'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_get_issuer             ; N: 'X509_STORE_CTX_get_get_issuer'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_check_issued           ; N: 'X509_STORE_CTX_get_check_issued'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_check_revocation       ; N: 'X509_STORE_CTX_get_check_revocation'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_get_crl                ; N: 'X509_STORE_CTX_get_get_crl'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_check_crl              ; N: 'X509_STORE_CTX_get_check_crl'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_cert_crl               ; N: 'X509_STORE_CTX_get_cert_crl'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_check_policy           ; N: 'X509_STORE_CTX_get_check_policy'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_lookup_certs           ; N: 'X509_STORE_CTX_get_lookup_certs'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_lookup_crls            ; N: 'X509_STORE_CTX_get_lookup_crls'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_cleanup                ; N: 'X509_STORE_CTX_get_cleanup'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_add_lookup                     ; N: 'X509_STORE_add_lookup'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_hash_dir                      ; N: 'X509_LOOKUP_hash_dir'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_file                          ; N: 'X509_LOOKUP_file'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_new                      ; N: 'X509_LOOKUP_meth_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_free                     ; N: 'X509_LOOKUP_meth_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_new_item             ; N: 'X509_LOOKUP_meth_set_new_item'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_new_item             ; N: 'X509_LOOKUP_meth_get_new_item'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_free                 ; N: 'X509_LOOKUP_meth_set_free'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_free                 ; N: 'X509_LOOKUP_meth_get_free'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_init                 ; N: 'X509_LOOKUP_meth_set_init'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_init                 ; N: 'X509_LOOKUP_meth_get_init'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_shutdown             ; N: 'X509_LOOKUP_meth_set_shutdown'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_shutdown             ; N: 'X509_LOOKUP_meth_get_shutdown'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_ctrl                 ; N: 'X509_LOOKUP_meth_set_ctrl'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_ctrl                 ; N: 'X509_LOOKUP_meth_get_ctrl'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_get_by_subject       ; N: 'X509_LOOKUP_meth_set_get_by_subject'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_get_by_subject       ; N: 'X509_LOOKUP_meth_get_get_by_subject'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_get_by_issuer_serial ; N: 'X509_LOOKUP_meth_set_get_by_issuer_serial' ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_get_by_issuer_serial ; N: 'X509_LOOKUP_meth_get_get_by_issuer_serial' ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_get_by_fingerprint   ; N: 'X509_LOOKUP_meth_set_get_by_fingerprint'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_get_by_fingerprint   ; N: 'X509_LOOKUP_meth_get_get_by_fingerprint'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_set_get_by_alias         ; N: 'X509_LOOKUP_meth_set_get_by_alias'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_meth_get_get_by_alias         ; N: 'X509_LOOKUP_meth_get_get_by_alias'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_add_cert                       ; N: 'X509_STORE_add_cert'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_add_crl                        ; N: 'X509_STORE_add_crl'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_by_subject             ; N: 'X509_STORE_CTX_get_by_subject'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_get_by_subject                 ; N: 'X509_STORE_CTX_get_by_subject'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_obj_by_subject         ; N: 'X509_STORE_CTX_get_obj_by_subject'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_ctrl                          ; N: 'X509_LOOKUP_ctrl'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_load_cert_file                       ; N: 'X509_load_cert_file'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_load_crl_file                        ; N: 'X509_load_crl_file'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_load_cert_crl_file                   ; N: 'X509_load_cert_crl_file'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_new                           ; N: 'X509_LOOKUP_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_free                          ; N: 'X509_LOOKUP_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_init                          ; N: 'X509_LOOKUP_init'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_by_subject                    ; N: 'X509_LOOKUP_by_subject'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_by_issuer_serial              ; N: 'X509_LOOKUP_by_issuer_serial'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_by_fingerprint                ; N: 'X509_LOOKUP_by_fingerprint'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_by_alias                      ; N: 'X509_LOOKUP_by_alias'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_set_method_data               ; N: 'X509_LOOKUP_set_method_data'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_get_method_data               ; N: 'X509_LOOKUP_get_method_data'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_get_store                     ; N: 'X509_LOOKUP_get_store'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_LOOKUP_shutdown                      ; N: 'X509_LOOKUP_shutdown'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_load_locations                 ; N: 'X509_STORE_load_locations'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_set_default_paths              ; N: 'X509_STORE_set_default_paths'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_ex_data                ; N: 'X509_STORE_CTX_set_ex_data'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_ex_data                ; N: 'X509_STORE_CTX_get_ex_data'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_error                  ; N: 'X509_STORE_CTX_get_error'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_error                  ; N: 'X509_STORE_CTX_set_error'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_error_depth            ; N: 'X509_STORE_CTX_get_error_depth'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_error_depth            ; N: 'X509_STORE_CTX_set_error_depth'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_current_cert           ; N: 'X509_STORE_CTX_get_current_cert'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_current_cert           ; N: 'X509_STORE_CTX_set_current_cert'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_current_issuer        ; N: 'X509_STORE_CTX_get0_current_issuer'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_current_crl           ; N: 'X509_STORE_CTX_get0_current_crl'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_parent_ctx            ; N: 'X509_STORE_CTX_get0_parent_ctx'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_chain                 ; N: 'X509_STORE_CTX_get0_chain'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_chain                  ; N: 'X509_STORE_CTX_get0_chain'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get1_chain                 ; N: 'X509_STORE_CTX_get1_chain'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_cert                   ; N: 'X509_STORE_CTX_set_cert'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set0_verified_chain        ; N: 'X509_STORE_CTX_set0_verified_chain'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set0_crls                  ; N: 'X509_STORE_CTX_set0_crls'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_purpose                ; N: 'X509_STORE_CTX_set_purpose'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_trust                  ; N: 'X509_STORE_CTX_set_trust'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_purpose_inherit            ; N: 'X509_STORE_CTX_purpose_inherit'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_flags                  ; N: 'X509_STORE_CTX_set_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_time                   ; N: 'X509_STORE_CTX_set_time'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_policy_tree           ; N: 'X509_STORE_CTX_get0_policy_tree'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_explicit_policy        ; N: 'X509_STORE_CTX_get_explicit_policy'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get_num_untrusted          ; N: 'X509_STORE_CTX_get_num_untrusted'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_get0_param                 ; N: 'X509_STORE_CTX_get0_param'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set0_param                 ; N: 'X509_STORE_CTX_set0_param'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set_default                ; N: 'X509_STORE_CTX_set_default'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_STORE_CTX_set0_dane                  ; N: 'X509_STORE_CTX_set0_dane'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_new                     ; N: 'X509_VERIFY_PARAM_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_free                    ; N: 'X509_VERIFY_PARAM_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_inherit                 ; N: 'X509_VERIFY_PARAM_inherit'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1                    ; N: 'X509_VERIFY_PARAM_set1'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1_name               ; N: 'X509_VERIFY_PARAM_set1_name'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_flags               ; N: 'X509_VERIFY_PARAM_set_flags'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_clear_flags             ; N: 'X509_VERIFY_PARAM_clear_flags'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_flags               ; N: 'X509_VERIFY_PARAM_get_flags'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_purpose             ; N: 'X509_VERIFY_PARAM_set_purpose'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_trust               ; N: 'X509_VERIFY_PARAM_set_trust'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_depth               ; N: 'X509_VERIFY_PARAM_set_depth'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_auth_level          ; N: 'X509_VERIFY_PARAM_set_auth_level'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_time                ; N: 'X509_VERIFY_PARAM_get_time'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_time                ; N: 'X509_VERIFY_PARAM_set_time'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_add0_policy             ; N: 'X509_VERIFY_PARAM_add0_policy'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1_policies           ; N: 'X509_VERIFY_PARAM_set1_policies'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_inh_flags           ; N: 'X509_VERIFY_PARAM_set_inh_flags'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_inh_flags           ; N: 'X509_VERIFY_PARAM_get_inh_flags'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1_host               ; N: 'X509_VERIFY_PARAM_set1_host'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_add1_host               ; N: 'X509_VERIFY_PARAM_add1_host'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set_hostflags           ; N: 'X509_VERIFY_PARAM_set_hostflags'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_hostflags           ; N: 'X509_VERIFY_PARAM_get_hostflags'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get0_peername           ; N: 'X509_VERIFY_PARAM_get0_peername'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_move_peername           ; N: 'X509_VERIFY_PARAM_move_peername'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1_email              ; N: 'X509_VERIFY_PARAM_set1_email'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1_ip                 ; N: 'X509_VERIFY_PARAM_set1_ip'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_set1_ip_asc             ; N: 'X509_VERIFY_PARAM_set1_ip_asc'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_depth               ; N: 'X509_VERIFY_PARAM_get_depth'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_auth_level          ; N: 'X509_VERIFY_PARAM_get_auth_level'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get0_name               ; N: 'X509_VERIFY_PARAM_get0_name'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_add0_table              ; N: 'X509_VERIFY_PARAM_add0_table'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get_count               ; N: 'X509_VERIFY_PARAM_get_count'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_get0                    ; N: 'X509_VERIFY_PARAM_get0'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_lookup                  ; N: 'X509_VERIFY_PARAM_lookup'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VERIFY_PARAM_table_cleanup           ; N: 'X509_VERIFY_PARAM_table_cleanup'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_check                         ; N: 'X509_policy_check'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_tree_free                     ; N: 'X509_policy_tree_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_tree_level_count              ; N: 'X509_policy_tree_level_count'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_tree_get0_level               ; N: 'X509_policy_tree_get0_level'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_tree_get0_policies            ; N: 'X509_policy_tree_get0_policies'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_tree_get0_user_policies       ; N: 'X509_policy_tree_get0_user_policies'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_level_node_count              ; N: 'X509_policy_level_node_count'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_level_get0_node               ; N: 'X509_policy_level_get0_node'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_node_get0_policy              ; N: 'X509_policy_node_get0_policy'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_node_get0_qualifiers          ; N: 'X509_policy_node_get0_qualifiers'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_policy_node_get0_parent              ; N: 'X509_policy_node_get0_parent'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_PKCS7_strings                    ; N: 'ERR_load_PKCS7_strings'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ISSUER_AND_SERIAL_new               ; N: 'PKCS7_ISSUER_AND_SERIAL_new'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ISSUER_AND_SERIAL_free              ; N: 'PKCS7_ISSUER_AND_SERIAL_free'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_ISSUER_AND_SERIAL               ; N: 'd2i_PKCS7_ISSUER_AND_SERIAL'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_ISSUER_AND_SERIAL               ; N: 'i2d_PKCS7_ISSUER_AND_SERIAL'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ISSUER_AND_SERIAL_it                ; N: 'PKCS7_ISSUER_AND_SERIAL_it'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ISSUER_AND_SERIAL_digest            ; N: 'PKCS7_ISSUER_AND_SERIAL_digest'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_fp                              ; N: 'd2i_PKCS7_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_fp                              ; N: 'i2d_PKCS7_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_dup                                 ; N: 'PKCS7_dup'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_bio                             ; N: 'd2i_PKCS7_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_bio                             ; N: 'i2d_PKCS7_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_bio_stream                      ; N: 'i2d_PKCS7_bio_stream'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PKCS7_stream                ; N: 'PEM_write_bio_PKCS7_stream'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNER_INFO_new                     ; N: 'PKCS7_SIGNER_INFO_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNER_INFO_free                    ; N: 'PKCS7_SIGNER_INFO_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_SIGNER_INFO                     ; N: 'd2i_PKCS7_SIGNER_INFO'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_SIGNER_INFO                     ; N: 'i2d_PKCS7_SIGNER_INFO'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNER_INFO_it                      ; N: 'PKCS7_SIGNER_INFO_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_RECIP_INFO_new                      ; N: 'PKCS7_RECIP_INFO_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_RECIP_INFO_free                     ; N: 'PKCS7_RECIP_INFO_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_RECIP_INFO                      ; N: 'd2i_PKCS7_RECIP_INFO'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_RECIP_INFO                      ; N: 'i2d_PKCS7_RECIP_INFO'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_RECIP_INFO_it                       ; N: 'PKCS7_RECIP_INFO_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNED_new                          ; N: 'PKCS7_SIGNED_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNED_free                         ; N: 'PKCS7_SIGNED_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_SIGNED                          ; N: 'd2i_PKCS7_SIGNED'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_SIGNED                          ; N: 'i2d_PKCS7_SIGNED'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNED_it                           ; N: 'PKCS7_SIGNED_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENC_CONTENT_new                     ; N: 'PKCS7_ENC_CONTENT_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENC_CONTENT_free                    ; N: 'PKCS7_ENC_CONTENT_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_ENC_CONTENT                     ; N: 'd2i_PKCS7_ENC_CONTENT'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_ENC_CONTENT                     ; N: 'i2d_PKCS7_ENC_CONTENT'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENC_CONTENT_it                      ; N: 'PKCS7_ENC_CONTENT_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENVELOPE_new                        ; N: 'PKCS7_ENVELOPE_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENVELOPE_free                       ; N: 'PKCS7_ENVELOPE_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_ENVELOPE                        ; N: 'd2i_PKCS7_ENVELOPE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_ENVELOPE                        ; N: 'i2d_PKCS7_ENVELOPE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENVELOPE_it                         ; N: 'PKCS7_ENVELOPE_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGN_ENVELOPE_new                   ; N: 'PKCS7_SIGN_ENVELOPE_new'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGN_ENVELOPE_free                  ; N: 'PKCS7_SIGN_ENVELOPE_free'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_SIGN_ENVELOPE                   ; N: 'd2i_PKCS7_SIGN_ENVELOPE'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_SIGN_ENVELOPE                   ; N: 'i2d_PKCS7_SIGN_ENVELOPE'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGN_ENVELOPE_it                    ; N: 'PKCS7_SIGN_ENVELOPE_it'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_DIGEST_new                          ; N: 'PKCS7_DIGEST_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_DIGEST_free                         ; N: 'PKCS7_DIGEST_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_DIGEST                          ; N: 'd2i_PKCS7_DIGEST'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_DIGEST                          ; N: 'i2d_PKCS7_DIGEST'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_DIGEST_it                           ; N: 'PKCS7_DIGEST_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENCRYPT_new                         ; N: 'PKCS7_ENCRYPT_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENCRYPT_free                        ; N: 'PKCS7_ENCRYPT_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7_ENCRYPT                         ; N: 'd2i_PKCS7_ENCRYPT'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_ENCRYPT                         ; N: 'i2d_PKCS7_ENCRYPT'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ENCRYPT_it                          ; N: 'PKCS7_ENCRYPT_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_new                                 ; N: 'PKCS7_new'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_free                                ; N: 'PKCS7_free'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS7                                 ; N: 'd2i_PKCS7'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7                                 ; N: 'i2d_PKCS7'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_it                                  ; N: 'PKCS7_it'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ATTR_SIGN_it                        ; N: 'PKCS7_ATTR_SIGN_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ATTR_VERIFY_it                      ; N: 'PKCS7_ATTR_VERIFY_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS7_NDEF                            ; N: 'i2d_PKCS7_NDEF'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_print_ctx                           ; N: 'PKCS7_print_ctx'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_ctrl                                ; N: 'PKCS7_ctrl'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set_type                            ; N: 'PKCS7_set_type'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set0_type_other                     ; N: 'PKCS7_set0_type_other'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set_content                         ; N: 'PKCS7_set_content'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNER_INFO_set                     ; N: 'PKCS7_SIGNER_INFO_set'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNER_INFO_sign                    ; N: 'PKCS7_SIGNER_INFO_sign'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_signer                          ; N: 'PKCS7_add_signer'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_certificate                     ; N: 'PKCS7_add_certificate'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_crl                             ; N: 'PKCS7_add_crl'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_content_new                         ; N: 'PKCS7_content_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_dataVerify                          ; N: 'PKCS7_dataVerify'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_signatureVerify                     ; N: 'PKCS7_signatureVerify'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_dataInit                            ; N: 'PKCS7_dataInit'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_dataFinal                           ; N: 'PKCS7_dataFinal'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_dataDecode                          ; N: 'PKCS7_dataDecode'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_signature                       ; N: 'PKCS7_add_signature'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_cert_from_signer_info               ; N: 'PKCS7_cert_from_signer_info'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set_digest                          ; N: 'PKCS7_set_digest'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_get_signer_info                     ; N: 'PKCS7_get_signer_info'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_recipient                       ; N: 'PKCS7_add_recipient'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_SIGNER_INFO_get0_algs               ; N: 'PKCS7_SIGNER_INFO_get0_algs'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_RECIP_INFO_get0_alg                 ; N: 'PKCS7_RECIP_INFO_get0_alg'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_recipient_info                  ; N: 'PKCS7_add_recipient_info'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_RECIP_INFO_set                      ; N: 'PKCS7_RECIP_INFO_set'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set_cipher                          ; N: 'PKCS7_set_cipher'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_stream                              ; N: 'PKCS7_stream'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_get_issuer_and_serial               ; N: 'PKCS7_get_issuer_and_serial'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_digest_from_attributes              ; N: 'PKCS7_digest_from_attributes'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_signed_attribute                ; N: 'PKCS7_add_signed_attribute'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_attribute                       ; N: 'PKCS7_add_attribute'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_get_attribute                       ; N: 'PKCS7_get_attribute'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_get_signed_attribute                ; N: 'PKCS7_get_signed_attribute'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set_signed_attributes               ; N: 'PKCS7_set_signed_attributes'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_set_attributes                      ; N: 'PKCS7_set_attributes'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_sign                                ; N: 'PKCS7_sign'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_sign_add_signer                     ; N: 'PKCS7_sign_add_signer'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_final                               ; N: 'PKCS7_final'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_verify                              ; N: 'PKCS7_verify'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_get0_signers                        ; N: 'PKCS7_get0_signers'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_encrypt                             ; N: 'PKCS7_encrypt'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_decrypt                             ; N: 'PKCS7_decrypt'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_attrib_smimecap                 ; N: 'PKCS7_add_attrib_smimecap'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_get_smimecap                        ; N: 'PKCS7_get_smimecap'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_simple_smimecap                     ; N: 'PKCS7_simple_smimecap'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add_attrib_content_type             ; N: 'PKCS7_add_attrib_content_type'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add0_attrib_signing_time            ; N: 'PKCS7_add0_attrib_signing_time'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_add1_attrib_digest                  ; N: 'PKCS7_add1_attrib_digest'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_write_PKCS7                         ; N: 'SMIME_write_PKCS7'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_read_PKCS7                          ; N: 'SMIME_read_PKCS7'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_PKCS7                             ; N: 'BIO_new_PKCS7'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set_default_method               ; N: 'X509_CRL_set_default_method'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_METHOD_new                       ; N: 'X509_CRL_METHOD_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_METHOD_free                      ; N: 'X509_CRL_METHOD_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set_meth_data                    ; N: 'X509_CRL_set_meth_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_meth_data                    ; N: 'X509_CRL_get_meth_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_verify_cert_error_string             ; N: 'X509_verify_cert_error_string'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_verify                               ; N: 'X509_verify'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_verify                           ; N: 'X509_REQ_verify'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_verify                           ; N: 'X509_CRL_verify'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_verify                      ; N: 'NETSCAPE_SPKI_verify'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_b64_decode                  ; N: 'NETSCAPE_SPKI_b64_decode'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_b64_encode                  ; N: 'NETSCAPE_SPKI_b64_encode'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_get_pubkey                  ; N: 'NETSCAPE_SPKI_get_pubkey'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_set_pubkey                  ; N: 'NETSCAPE_SPKI_set_pubkey'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_print                       ; N: 'NETSCAPE_SPKI_print'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_signature_dump                       ; N: 'X509_signature_dump'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_signature_print                      ; N: 'X509_signature_print'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_sign                                 ; N: 'X509_sign'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_sign_ctx                             ; N: 'X509_sign_ctx'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_http_nbio                            ; N: 'X509_http_nbio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_sign                             ; N: 'X509_REQ_sign'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_sign_ctx                         ; N: 'X509_REQ_sign_ctx'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_sign                             ; N: 'X509_CRL_sign'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_sign_ctx                         ; N: 'X509_CRL_sign_ctx'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_http_nbio                        ; N: 'X509_CRL_http_nbio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_sign                        ; N: 'NETSCAPE_SPKI_sign'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_pubkey_digest                        ; N: 'X509_pubkey_digest'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_digest                               ; N: 'X509_digest'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_digest                           ; N: 'X509_CRL_digest'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_digest                           ; N: 'X509_REQ_digest'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_digest                          ; N: 'X509_NAME_digest'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_fp                               ; N: 'd2i_X509_fp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_fp                               ; N: 'i2d_X509_fp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_CRL_fp                           ; N: 'd2i_X509_CRL_fp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_CRL_fp                           ; N: 'i2d_X509_CRL_fp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_REQ_fp                           ; N: 'd2i_X509_REQ_fp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_REQ_fp                           ; N: 'i2d_X509_REQ_fp'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSAPrivateKey_fp                      ; N: 'd2i_RSAPrivateKey_fp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSAPrivateKey_fp                      ; N: 'i2d_RSAPrivateKey_fp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSAPublicKey_fp                       ; N: 'd2i_RSAPublicKey_fp'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSAPublicKey_fp                       ; N: 'i2d_RSAPublicKey_fp'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSA_PUBKEY_fp                         ; N: 'd2i_RSA_PUBKEY_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSA_PUBKEY_fp                         ; N: 'i2d_RSA_PUBKEY_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSA_PUBKEY_fp                         ; N: 'd2i_DSA_PUBKEY_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSA_PUBKEY_fp                         ; N: 'i2d_DSA_PUBKEY_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSAPrivateKey_fp                      ; N: 'd2i_DSAPrivateKey_fp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSAPrivateKey_fp                      ; N: 'i2d_DSAPrivateKey_fp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_EC_PUBKEY_fp                          ; N: 'd2i_EC_PUBKEY_fp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_EC_PUBKEY_fp                          ; N: 'i2d_EC_PUBKEY_fp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ECPrivateKey_fp                       ; N: 'd2i_ECPrivateKey_fp'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ECPrivateKey_fp                       ; N: 'i2d_ECPrivateKey_fp'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8_fp                              ; N: 'd2i_PKCS8_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8_fp                              ; N: 'i2d_PKCS8_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8_PRIV_KEY_INFO_fp                ; N: 'd2i_PKCS8_PRIV_KEY_INFO_fp'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8_PRIV_KEY_INFO_fp                ; N: 'i2d_PKCS8_PRIV_KEY_INFO_fp'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8PrivateKeyInfo_fp                ; N: 'i2d_PKCS8PrivateKeyInfo_fp'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PrivateKey_fp                         ; N: 'i2d_PrivateKey_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PrivateKey_fp                         ; N: 'd2i_PrivateKey_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PUBKEY_fp                             ; N: 'i2d_PUBKEY_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PUBKEY_fp                             ; N: 'd2i_PUBKEY_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_bio                              ; N: 'd2i_X509_bio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_bio                              ; N: 'i2d_X509_bio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_CRL_bio                          ; N: 'd2i_X509_CRL_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_CRL_bio                          ; N: 'i2d_X509_CRL_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_REQ_bio                          ; N: 'd2i_X509_REQ_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_REQ_bio                          ; N: 'i2d_X509_REQ_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSAPrivateKey_bio                     ; N: 'd2i_RSAPrivateKey_bio'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSAPrivateKey_bio                     ; N: 'i2d_RSAPrivateKey_bio'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSAPublicKey_bio                      ; N: 'd2i_RSAPublicKey_bio'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSAPublicKey_bio                      ; N: 'i2d_RSAPublicKey_bio'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSA_PUBKEY_bio                        ; N: 'd2i_RSA_PUBKEY_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSA_PUBKEY_bio                        ; N: 'i2d_RSA_PUBKEY_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSA_PUBKEY_bio                        ; N: 'd2i_DSA_PUBKEY_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSA_PUBKEY_bio                        ; N: 'i2d_DSA_PUBKEY_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSAPrivateKey_bio                     ; N: 'd2i_DSAPrivateKey_bio'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSAPrivateKey_bio                     ; N: 'i2d_DSAPrivateKey_bio'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_EC_PUBKEY_bio                         ; N: 'd2i_EC_PUBKEY_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_EC_PUBKEY_bio                         ; N: 'i2d_EC_PUBKEY_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ECPrivateKey_bio                      ; N: 'd2i_ECPrivateKey_bio'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ECPrivateKey_bio                      ; N: 'i2d_ECPrivateKey_bio'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8_bio                             ; N: 'd2i_PKCS8_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8_bio                             ; N: 'i2d_PKCS8_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8_PRIV_KEY_INFO_bio               ; N: 'd2i_PKCS8_PRIV_KEY_INFO_bio'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8_PRIV_KEY_INFO_bio               ; N: 'i2d_PKCS8_PRIV_KEY_INFO_bio'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8PrivateKeyInfo_bio               ; N: 'i2d_PKCS8PrivateKeyInfo_bio'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PrivateKey_bio                        ; N: 'i2d_PrivateKey_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PrivateKey_bio                        ; N: 'd2i_PrivateKey_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PUBKEY_bio                            ; N: 'i2d_PUBKEY_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PUBKEY_bio                            ; N: 'd2i_PUBKEY_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_dup                                  ; N: 'X509_dup'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_dup                        ; N: 'X509_ATTRIBUTE_dup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_dup                        ; N: 'X509_EXTENSION_dup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_dup                              ; N: 'X509_CRL_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_dup                          ; N: 'X509_REVOKED_dup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_dup                              ; N: 'X509_REQ_dup'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_dup                            ; N: 'X509_ALGOR_dup'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_set0                           ; N: 'X509_ALGOR_set0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_get0                           ; N: 'X509_ALGOR_get0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_set_md                         ; N: 'X509_ALGOR_set_md'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_cmp                            ; N: 'X509_ALGOR_cmp'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_dup                             ; N: 'X509_NAME_dup'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_dup                       ; N: 'X509_NAME_ENTRY_dup'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_cmp_time                             ; N: 'X509_cmp_time'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_cmp_current_time                     ; N: 'X509_cmp_current_time'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_time_adj                             ; N: 'X509_time_adj'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_time_adj_ex                          ; N: 'X509_time_adj_ex'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_gmtime_adj                           ; N: 'X509_gmtime_adj'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_default_cert_area                ; N: 'X509_get_default_cert_area'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_default_cert_dir                 ; N: 'X509_get_default_cert_dir'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_default_cert_file                ; N: 'X509_get_default_cert_file'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_default_cert_dir_env             ; N: 'X509_get_default_cert_dir_env'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_default_cert_file_env            ; N: 'X509_get_default_cert_file_env'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_default_private_dir              ; N: 'X509_get_default_private_dir'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_to_X509_REQ                          ; N: 'X509_to_X509_REQ'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_to_X509                          ; N: 'X509_REQ_to_X509'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_new                            ; N: 'X509_ALGOR_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_free                           ; N: 'X509_ALGOR_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_ALGOR                            ; N: 'd2i_X509_ALGOR'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_ALGOR                            ; N: 'i2d_X509_ALGOR'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGOR_it                             ; N: 'X509_ALGOR_it'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_ALGORS                           ; N: 'd2i_X509_ALGORS'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_ALGORS                           ; N: 'i2d_X509_ALGORS'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ALGORS_it                            ; N: 'X509_ALGORS_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VAL_new                              ; N: 'X509_VAL_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VAL_free                             ; N: 'X509_VAL_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_VAL                              ; N: 'd2i_X509_VAL'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_VAL                              ; N: 'i2d_X509_VAL'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_VAL_it                               ; N: 'X509_VAL_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_new                           ; N: 'X509_PUBKEY_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_free                          ; N: 'X509_PUBKEY_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_PUBKEY                           ; N: 'd2i_X509_PUBKEY'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_PUBKEY                           ; N: 'i2d_X509_PUBKEY'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_it                            ; N: 'X509_PUBKEY_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_set                           ; N: 'X509_PUBKEY_set'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_get0                          ; N: 'X509_PUBKEY_get0'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_get                           ; N: 'X509_PUBKEY_get'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_pubkey_parameters                ; N: 'X509_get_pubkey_parameters'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_pathlen                          ; N: 'X509_get_pathlen'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PUBKEY                                ; N: 'i2d_PUBKEY'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PUBKEY                                ; N: 'd2i_PUBKEY'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_RSA_PUBKEY                            ; N: 'i2d_RSA_PUBKEY'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_RSA_PUBKEY                            ; N: 'd2i_RSA_PUBKEY'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DSA_PUBKEY                            ; N: 'i2d_DSA_PUBKEY'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DSA_PUBKEY                            ; N: 'd2i_DSA_PUBKEY'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_EC_PUBKEY                             ; N: 'i2d_EC_PUBKEY'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_EC_PUBKEY                             ; N: 'd2i_EC_PUBKEY'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_new                              ; N: 'X509_SIG_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_free                             ; N: 'X509_SIG_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_SIG                              ; N: 'd2i_X509_SIG'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_SIG                              ; N: 'i2d_X509_SIG'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_it                               ; N: 'X509_SIG_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_get0                             ; N: 'X509_SIG_get0'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_getm                             ; N: 'X509_SIG_getm'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_INFO_new                         ; N: 'X509_REQ_INFO_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_INFO_free                        ; N: 'X509_REQ_INFO_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_REQ_INFO                         ; N: 'd2i_X509_REQ_INFO'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_REQ_INFO                         ; N: 'i2d_X509_REQ_INFO'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_INFO_it                          ; N: 'X509_REQ_INFO_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_new                              ; N: 'X509_REQ_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_free                             ; N: 'X509_REQ_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_REQ                              ; N: 'd2i_X509_REQ'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_REQ                              ; N: 'i2d_X509_REQ'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_it                               ; N: 'X509_REQ_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_new                        ; N: 'X509_ATTRIBUTE_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_free                       ; N: 'X509_ATTRIBUTE_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_ATTRIBUTE                        ; N: 'd2i_X509_ATTRIBUTE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_ATTRIBUTE                        ; N: 'i2d_X509_ATTRIBUTE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_it                         ; N: 'X509_ATTRIBUTE_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_create                     ; N: 'X509_ATTRIBUTE_create'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_new                        ; N: 'X509_EXTENSION_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_free                       ; N: 'X509_EXTENSION_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_EXTENSION                        ; N: 'd2i_X509_EXTENSION'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_EXTENSION                        ; N: 'i2d_X509_EXTENSION'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_it                         ; N: 'X509_EXTENSION_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_EXTENSIONS                       ; N: 'd2i_X509_EXTENSIONS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_EXTENSIONS                       ; N: 'i2d_X509_EXTENSIONS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSIONS_it                        ; N: 'X509_EXTENSIONS_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_new                       ; N: 'X509_NAME_ENTRY_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_free                      ; N: 'X509_NAME_ENTRY_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_NAME_ENTRY                       ; N: 'd2i_X509_NAME_ENTRY'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_NAME_ENTRY                       ; N: 'i2d_X509_NAME_ENTRY'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_it                        ; N: 'X509_NAME_ENTRY_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_new                             ; N: 'X509_NAME_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_free                            ; N: 'X509_NAME_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_NAME                             ; N: 'd2i_X509_NAME'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_NAME                             ; N: 'i2d_X509_NAME'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_it                              ; N: 'X509_NAME_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_set                             ; N: 'X509_NAME_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CINF_new                             ; N: 'X509_CINF_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CINF_free                            ; N: 'X509_CINF_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_CINF                             ; N: 'd2i_X509_CINF'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_CINF                             ; N: 'i2d_X509_CINF'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CINF_it                              ; N: 'X509_CINF_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_new                                  ; N: 'X509_new'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_free                                 ; N: 'X509_free'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509                                  ; N: 'd2i_X509'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509                                  ; N: 'i2d_X509'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_it                                   ; N: 'X509_it'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CERT_AUX_new                         ; N: 'X509_CERT_AUX_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CERT_AUX_free                        ; N: 'X509_CERT_AUX_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_CERT_AUX                         ; N: 'd2i_X509_CERT_AUX'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_CERT_AUX                         ; N: 'i2d_X509_CERT_AUX'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CERT_AUX_it                          ; N: 'X509_CERT_AUX_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_ex_data                          ; N: 'X509_set_ex_data'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ex_data                          ; N: 'X509_get_ex_data'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_AUX                              ; N: 'i2d_X509_AUX'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_AUX                              ; N: 'd2i_X509_AUX'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_re_X509_tbs                           ; N: 'i2d_re_X509_tbs'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_INFO_get                         ; N: 'X509_SIG_INFO_get'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_SIG_INFO_set                         ; N: 'X509_SIG_INFO_set'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_signature_info                   ; N: 'X509_get_signature_info'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_signature                       ; N: 'X509_get0_signature'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_signature_nid                    ; N: 'X509_get_signature_nid'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_trusted                              ; N: 'X509_trusted'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_alias_set1                           ; N: 'X509_alias_set1'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_keyid_set1                           ; N: 'X509_keyid_set1'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_alias_get0                           ; N: 'X509_alias_get0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_keyid_get0                           ; N: 'X509_keyid_get0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_set_default                    ; N: 'X509_TRUST_set_default'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_set                            ; N: 'X509_TRUST_set'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_add1_trust_object                    ; N: 'X509_add1_trust_object'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_add1_reject_object                   ; N: 'X509_add1_reject_object'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_trust_clear                          ; N: 'X509_trust_clear'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_reject_clear                         ; N: 'X509_reject_clear'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_trust_objects                   ; N: 'X509_get0_trust_objects'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_reject_objects                  ; N: 'X509_get0_reject_objects'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_new                          ; N: 'X509_REVOKED_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_free                         ; N: 'X509_REVOKED_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_REVOKED                          ; N: 'd2i_X509_REVOKED'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_REVOKED                          ; N: 'i2d_X509_REVOKED'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_it                           ; N: 'X509_REVOKED_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_INFO_new                         ; N: 'X509_CRL_INFO_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_INFO_free                        ; N: 'X509_CRL_INFO_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_CRL_INFO                         ; N: 'd2i_X509_CRL_INFO'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_CRL_INFO                         ; N: 'i2d_X509_CRL_INFO'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_INFO_it                          ; N: 'X509_CRL_INFO_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_new                              ; N: 'X509_CRL_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_free                             ; N: 'X509_CRL_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_X509_CRL                              ; N: 'd2i_X509_CRL'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_X509_CRL                              ; N: 'i2d_X509_CRL'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_it                               ; N: 'X509_CRL_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_add0_revoked                     ; N: 'X509_CRL_add0_revoked'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get0_by_serial                   ; N: 'X509_CRL_get0_by_serial'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get0_by_cert                     ; N: 'X509_CRL_get0_by_cert'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PKEY_new                             ; N: 'X509_PKEY_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PKEY_free                            ; N: 'X509_PKEY_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_new                         ; N: 'NETSCAPE_SPKI_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_free                        ; N: 'NETSCAPE_SPKI_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_NETSCAPE_SPKI                         ; N: 'd2i_NETSCAPE_SPKI'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_NETSCAPE_SPKI                         ; N: 'i2d_NETSCAPE_SPKI'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKI_it                          ; N: 'NETSCAPE_SPKI_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKAC_new                        ; N: 'NETSCAPE_SPKAC_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKAC_free                       ; N: 'NETSCAPE_SPKAC_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_NETSCAPE_SPKAC                        ; N: 'd2i_NETSCAPE_SPKAC'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_NETSCAPE_SPKAC                        ; N: 'i2d_NETSCAPE_SPKAC'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_SPKAC_it                         ; N: 'NETSCAPE_SPKAC_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_CERT_SEQUENCE_new                ; N: 'NETSCAPE_CERT_SEQUENCE_new'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_CERT_SEQUENCE_free               ; N: 'NETSCAPE_CERT_SEQUENCE_free'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_NETSCAPE_CERT_SEQUENCE                ; N: 'd2i_NETSCAPE_CERT_SEQUENCE'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_NETSCAPE_CERT_SEQUENCE                ; N: 'i2d_NETSCAPE_CERT_SEQUENCE'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NETSCAPE_CERT_SEQUENCE_it                 ; N: 'NETSCAPE_CERT_SEQUENCE_it'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_INFO_new                             ; N: 'X509_INFO_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_INFO_free                            ; N: 'X509_INFO_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_oneline                         ; N: 'X509_NAME_oneline'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_verify                               ; N: 'ASN1_verify'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_digest                               ; N: 'ASN1_digest'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_sign                                 ; N: 'ASN1_sign'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_digest                          ; N: 'ASN1_item_digest'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_verify                          ; N: 'ASN1_item_verify'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_sign                            ; N: 'ASN1_item_sign'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASN1_item_sign_ctx                        ; N: 'ASN1_item_sign_ctx'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_version                          ; N: 'X509_get_version'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_version                          ; N: 'X509_set_version'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_serialNumber                     ; N: 'X509_set_serialNumber'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_serialNumber                     ; N: 'X509_get_serialNumber'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_serialNumber                    ; N: 'X509_get0_serialNumber'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_issuer_name                      ; N: 'X509_set_issuer_name'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_issuer_name                      ; N: 'X509_get_issuer_name'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_subject_name                     ; N: 'X509_set_subject_name'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_subject_name                     ; N: 'X509_get_subject_name'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_notBefore                       ; N: 'X509_get0_notBefore'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_getm_notBefore                       ; N: 'X509_getm_notBefore'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_notBefore                        ; N: 'X509_getm_notBefore'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set1_notBefore                       ; N: 'X509_set1_notBefore'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_notBefore                        ; N: 'X509_set1_notBefore'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_notAfter                        ; N: 'X509_get0_notAfter'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_getm_notAfter                        ; N: 'X509_getm_notAfter'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_notAfter                         ; N: 'X509_getm_notAfter'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set1_notAfter                        ; N: 'X509_set1_notAfter'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_notAfter                         ; N: 'X509_set1_notAfter'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_pubkey                           ; N: 'X509_set_pubkey'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_up_ref                               ; N: 'X509_up_ref'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_signature_type                   ; N: 'X509_get_signature_type'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_X509_PUBKEY                      ; N: 'X509_get_X509_PUBKEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_extensions                      ; N: 'X509_get0_extensions'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_uids                            ; N: 'X509_get0_uids'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_tbs_sigalg                      ; N: 'X509_get0_tbs_sigalg'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_pubkey                          ; N: 'X509_get0_pubkey'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_pubkey                           ; N: 'X509_get_pubkey'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_pubkey_bitstr                   ; N: 'X509_get0_pubkey_bitstr'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_certificate_type                     ; N: 'X509_certificate_type'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_version                      ; N: 'X509_REQ_get_version'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_set_version                      ; N: 'X509_REQ_set_version'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_subject_name                 ; N: 'X509_REQ_get_subject_name'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_set_subject_name                 ; N: 'X509_REQ_set_subject_name'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get0_signature                   ; N: 'X509_REQ_get0_signature'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_signature_nid                ; N: 'X509_REQ_get_signature_nid'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_re_X509_REQ_tbs                       ; N: 'i2d_re_X509_REQ_tbs'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_set_pubkey                       ; N: 'X509_REQ_set_pubkey'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_pubkey                       ; N: 'X509_REQ_get_pubkey'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get0_pubkey                      ; N: 'X509_REQ_get0_pubkey'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_X509_PUBKEY                  ; N: 'X509_REQ_get_X509_PUBKEY'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_extension_nid                    ; N: 'X509_REQ_extension_nid'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_extension_nids               ; N: 'X509_REQ_get_extension_nids'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_set_extension_nids               ; N: 'X509_REQ_set_extension_nids'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_extensions                   ; N: 'X509_REQ_get_extensions'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_add_extensions_nid               ; N: 'X509_REQ_add_extensions_nid'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_add_extensions                   ; N: 'X509_REQ_add_extensions'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_attr_count                   ; N: 'X509_REQ_get_attr_count'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_attr_by_NID                  ; N: 'X509_REQ_get_attr_by_NID'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_attr_by_OBJ                  ; N: 'X509_REQ_get_attr_by_OBJ'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get_attr                         ; N: 'X509_REQ_get_attr'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_delete_attr                      ; N: 'X509_REQ_delete_attr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_add1_attr                        ; N: 'X509_REQ_add1_attr'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_add1_attr_by_OBJ                 ; N: 'X509_REQ_add1_attr_by_OBJ'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_add1_attr_by_NID                 ; N: 'X509_REQ_add1_attr_by_NID'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_add1_attr_by_txt                 ; N: 'X509_REQ_add1_attr_by_txt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set_version                      ; N: 'X509_CRL_set_version'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set_issuer_name                  ; N: 'X509_CRL_set_issuer_name'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set1_lastUpdate                  ; N: 'X509_CRL_set1_lastUpdate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set_lastUpdate                   ; N: 'X509_CRL_set1_lastUpdate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set1_nextUpdate                  ; N: 'X509_CRL_set1_nextUpdate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_set_nextUpdate                   ; N: 'X509_CRL_set1_nextUpdate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_sort                             ; N: 'X509_CRL_sort'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_up_ref                           ; N: 'X509_CRL_up_ref'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_version                      ; N: 'X509_CRL_get_version'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get0_lastUpdate                  ; N: 'X509_CRL_get0_lastUpdate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get0_nextUpdate                  ; N: 'X509_CRL_get0_nextUpdate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_lastUpdate                   ; N: 'X509_CRL_get_lastUpdate'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_nextUpdate                   ; N: 'X509_CRL_get_nextUpdate'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_issuer                       ; N: 'X509_CRL_get_issuer'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get0_extensions                  ; N: 'X509_CRL_get0_extensions'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_REVOKED                      ; N: 'X509_CRL_get_REVOKED'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get0_signature                   ; N: 'X509_CRL_get0_signature'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_signature_nid                ; N: 'X509_CRL_get_signature_nid'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_re_X509_CRL_tbs                       ; N: 'i2d_re_X509_CRL_tbs'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get0_serialNumber            ; N: 'X509_REVOKED_get0_serialNumber'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_set_serialNumber             ; N: 'X509_REVOKED_set_serialNumber'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get0_revocationDate          ; N: 'X509_REVOKED_get0_revocationDate'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_set_revocationDate           ; N: 'X509_REVOKED_set_revocationDate'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get0_extensions              ; N: 'X509_REVOKED_get0_extensions'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_diff                             ; N: 'X509_CRL_diff'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_check_private_key                ; N: 'X509_REQ_check_private_key'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_private_key                    ; N: 'X509_check_private_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_chain_check_suiteb                   ; N: 'X509_chain_check_suiteb'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_check_suiteb                     ; N: 'X509_CRL_check_suiteb'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_chain_up_ref                         ; N: 'X509_chain_up_ref'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_issuer_and_serial_cmp                ; N: 'X509_issuer_and_serial_cmp'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_issuer_and_serial_hash               ; N: 'X509_issuer_and_serial_hash'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_issuer_name_cmp                      ; N: 'X509_issuer_name_cmp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_issuer_name_hash                     ; N: 'X509_issuer_name_hash'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_subject_name_cmp                     ; N: 'X509_subject_name_cmp'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_subject_name_hash                    ; N: 'X509_subject_name_hash'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_issuer_name_hash_old                 ; N: 'X509_issuer_name_hash_old'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_subject_name_hash_old                ; N: 'X509_subject_name_hash_old'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_cmp                                  ; N: 'X509_cmp'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_cmp                             ; N: 'X509_NAME_cmp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_hash                            ; N: 'X509_NAME_hash'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_hash_old                        ; N: 'X509_NAME_hash_old'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_cmp                              ; N: 'X509_CRL_cmp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_match                            ; N: 'X509_CRL_match'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_aux_print                            ; N: 'X509_aux_print'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_print_ex_fp                          ; N: 'X509_print_ex_fp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_print_fp                             ; N: 'X509_print_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_print_fp                         ; N: 'X509_CRL_print_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_print_fp                         ; N: 'X509_REQ_print_fp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_print_ex_fp                     ; N: 'X509_NAME_print_ex_fp'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_print                           ; N: 'X509_NAME_print'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_print_ex                        ; N: 'X509_NAME_print_ex'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_print_ex                             ; N: 'X509_print_ex'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_print                                ; N: 'X509_print'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ocspid_print                         ; N: 'X509_ocspid_print'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_print_ex                         ; N: 'X509_CRL_print_ex'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_print                            ; N: 'X509_CRL_print'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_print_ex                         ; N: 'X509_REQ_print_ex'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_print                            ; N: 'X509_REQ_print'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_entry_count                     ; N: 'X509_NAME_entry_count'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_get_text_by_NID                 ; N: 'X509_NAME_get_text_by_NID'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_get_text_by_OBJ                 ; N: 'X509_NAME_get_text_by_OBJ'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_get_index_by_NID                ; N: 'X509_NAME_get_index_by_NID'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_get_index_by_OBJ                ; N: 'X509_NAME_get_index_by_OBJ'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_get_entry                       ; N: 'X509_NAME_get_entry'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_delete_entry                    ; N: 'X509_NAME_delete_entry'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_add_entry                       ; N: 'X509_NAME_add_entry'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_add_entry_by_OBJ                ; N: 'X509_NAME_add_entry_by_OBJ'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_add_entry_by_NID                ; N: 'X509_NAME_add_entry_by_NID'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_create_by_txt             ; N: 'X509_NAME_ENTRY_create_by_txt'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_create_by_NID             ; N: 'X509_NAME_ENTRY_create_by_NID'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_add_entry_by_txt                ; N: 'X509_NAME_add_entry_by_txt'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_create_by_OBJ             ; N: 'X509_NAME_ENTRY_create_by_OBJ'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_set_object                ; N: 'X509_NAME_ENTRY_set_object'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_set_data                  ; N: 'X509_NAME_ENTRY_set_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_get_object                ; N: 'X509_NAME_ENTRY_get_object'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_get_data                  ; N: 'X509_NAME_ENTRY_get_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_ENTRY_set                       ; N: 'X509_NAME_ENTRY_set'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_NAME_get0_der                        ; N: 'X509_NAME_get0_der'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_get_ext_count                      ; N: 'X509v3_get_ext_count'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_get_ext_by_NID                     ; N: 'X509v3_get_ext_by_NID'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_get_ext_by_OBJ                     ; N: 'X509v3_get_ext_by_OBJ'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_get_ext_by_critical                ; N: 'X509v3_get_ext_by_critical'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_get_ext                            ; N: 'X509v3_get_ext'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_delete_ext                         ; N: 'X509v3_delete_ext'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_add_ext                            ; N: 'X509v3_add_ext'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ext_count                        ; N: 'X509_get_ext_count'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ext_by_NID                       ; N: 'X509_get_ext_by_NID'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ext_by_OBJ                       ; N: 'X509_get_ext_by_OBJ'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ext_by_critical                  ; N: 'X509_get_ext_by_critical'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ext                              ; N: 'X509_get_ext'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_delete_ext                           ; N: 'X509_delete_ext'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_add_ext                              ; N: 'X509_add_ext'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_ext_d2i                          ; N: 'X509_get_ext_d2i'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_add1_ext_i2d                         ; N: 'X509_add1_ext_i2d'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_ext_count                    ; N: 'X509_CRL_get_ext_count'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_ext_by_NID                   ; N: 'X509_CRL_get_ext_by_NID'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_ext_by_OBJ                   ; N: 'X509_CRL_get_ext_by_OBJ'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_ext_by_critical              ; N: 'X509_CRL_get_ext_by_critical'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_ext                          ; N: 'X509_CRL_get_ext'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_delete_ext                       ; N: 'X509_CRL_delete_ext'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_add_ext                          ; N: 'X509_CRL_add_ext'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_get_ext_d2i                      ; N: 'X509_CRL_get_ext_d2i'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_CRL_add1_ext_i2d                     ; N: 'X509_CRL_add1_ext_i2d'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get_ext_count                ; N: 'X509_REVOKED_get_ext_count'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get_ext_by_NID               ; N: 'X509_REVOKED_get_ext_by_NID'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get_ext_by_OBJ               ; N: 'X509_REVOKED_get_ext_by_OBJ'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get_ext_by_critical          ; N: 'X509_REVOKED_get_ext_by_critical'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get_ext                      ; N: 'X509_REVOKED_get_ext'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_delete_ext                   ; N: 'X509_REVOKED_delete_ext'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_add_ext                      ; N: 'X509_REVOKED_add_ext'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_get_ext_d2i                  ; N: 'X509_REVOKED_get_ext_d2i'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REVOKED_add1_ext_i2d                 ; N: 'X509_REVOKED_add1_ext_i2d'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_create_by_NID              ; N: 'X509_EXTENSION_create_by_NID'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_create_by_OBJ              ; N: 'X509_EXTENSION_create_by_OBJ'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_set_object                 ; N: 'X509_EXTENSION_set_object'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_set_critical               ; N: 'X509_EXTENSION_set_critical'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_set_data                   ; N: 'X509_EXTENSION_set_data'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_get_object                 ; N: 'X509_EXTENSION_get_object'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_get_data                   ; N: 'X509_EXTENSION_get_data'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_EXTENSION_get_critical               ; N: 'X509_EXTENSION_get_critical'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_get_attr_count                     ; N: 'X509at_get_attr_count'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_get_attr_by_NID                    ; N: 'X509at_get_attr_by_NID'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_get_attr_by_OBJ                    ; N: 'X509at_get_attr_by_OBJ'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_get_attr                           ; N: 'X509at_get_attr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_delete_attr                        ; N: 'X509at_delete_attr'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_add1_attr                          ; N: 'X509at_add1_attr'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_add1_attr_by_OBJ                   ; N: 'X509at_add1_attr_by_OBJ'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_add1_attr_by_NID                   ; N: 'X509at_add1_attr_by_NID'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_add1_attr_by_txt                   ; N: 'X509at_add1_attr_by_txt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509at_get0_data_by_OBJ                   ; N: 'X509at_get0_data_by_OBJ'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_create_by_NID              ; N: 'X509_ATTRIBUTE_create_by_NID'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_create_by_OBJ              ; N: 'X509_ATTRIBUTE_create_by_OBJ'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_create_by_txt              ; N: 'X509_ATTRIBUTE_create_by_txt'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_set1_object                ; N: 'X509_ATTRIBUTE_set1_object'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_set1_data                  ; N: 'X509_ATTRIBUTE_set1_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_get0_data                  ; N: 'X509_ATTRIBUTE_get0_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_count                      ; N: 'X509_ATTRIBUTE_count'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_get0_object                ; N: 'X509_ATTRIBUTE_get0_object'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_ATTRIBUTE_get0_type                  ; N: 'X509_ATTRIBUTE_get0_type'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_attr_count                   ; N: 'EVP_PKEY_get_attr_count'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_attr_by_NID                  ; N: 'EVP_PKEY_get_attr_by_NID'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_attr_by_OBJ                  ; N: 'EVP_PKEY_get_attr_by_OBJ'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_get_attr                         ; N: 'EVP_PKEY_get_attr'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_delete_attr                      ; N: 'EVP_PKEY_delete_attr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_add1_attr                        ; N: 'EVP_PKEY_add1_attr'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_add1_attr_by_OBJ                 ; N: 'EVP_PKEY_add1_attr_by_OBJ'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_add1_attr_by_NID                 ; N: 'EVP_PKEY_add1_attr_by_NID'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY_add1_attr_by_txt                 ; N: 'EVP_PKEY_add1_attr_by_txt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_verify_cert                          ; N: 'X509_verify_cert'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_find_by_issuer_and_serial            ; N: 'X509_find_by_issuer_and_serial'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_find_by_subject                      ; N: 'X509_find_by_subject'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBEPARAM_new                              ; N: 'PBEPARAM_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBEPARAM_free                             ; N: 'PBEPARAM_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PBEPARAM                              ; N: 'd2i_PBEPARAM'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PBEPARAM                              ; N: 'i2d_PBEPARAM'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBEPARAM_it                               ; N: 'PBEPARAM_it'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBE2PARAM_new                             ; N: 'PBE2PARAM_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBE2PARAM_free                            ; N: 'PBE2PARAM_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PBE2PARAM                             ; N: 'd2i_PBE2PARAM'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PBE2PARAM                             ; N: 'i2d_PBE2PARAM'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBE2PARAM_it                              ; N: 'PBE2PARAM_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBKDF2PARAM_new                           ; N: 'PBKDF2PARAM_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBKDF2PARAM_free                          ; N: 'PBKDF2PARAM_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PBKDF2PARAM                           ; N: 'd2i_PBKDF2PARAM'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PBKDF2PARAM                           ; N: 'i2d_PBKDF2PARAM'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PBKDF2PARAM_it                            ; N: 'PBKDF2PARAM_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCRYPT_PARAMS_new                         ; N: 'SCRYPT_PARAMS_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCRYPT_PARAMS_free                        ; N: 'SCRYPT_PARAMS_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_SCRYPT_PARAMS                         ; N: 'd2i_SCRYPT_PARAMS'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_SCRYPT_PARAMS                         ; N: 'i2d_SCRYPT_PARAMS'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCRYPT_PARAMS_it                          ; N: 'SCRYPT_PARAMS_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_pbe_set0_algor                      ; N: 'PKCS5_pbe_set0_algor'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_pbe_set                             ; N: 'PKCS5_pbe_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_pbe2_set                            ; N: 'PKCS5_pbe2_set'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_pbe2_set_iv                         ; N: 'PKCS5_pbe2_set_iv'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_pbe2_set_scrypt                     ; N: 'PKCS5_pbe2_set_scrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS5_pbkdf2_set                          ; N: 'PKCS5_pbkdf2_set'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_PRIV_KEY_INFO_new                   ; N: 'PKCS8_PRIV_KEY_INFO_new'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_PRIV_KEY_INFO_free                  ; N: 'PKCS8_PRIV_KEY_INFO_free'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8_PRIV_KEY_INFO                   ; N: 'd2i_PKCS8_PRIV_KEY_INFO'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8_PRIV_KEY_INFO                   ; N: 'i2d_PKCS8_PRIV_KEY_INFO'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_PRIV_KEY_INFO_it                    ; N: 'PKCS8_PRIV_KEY_INFO_it'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKCS82PKEY                            ; N: 'EVP_PKCS82PKEY'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EVP_PKEY2PKCS8                            ; N: 'EVP_PKEY2PKCS8'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_pkey_set0                           ; N: 'PKCS8_pkey_set0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_pkey_get0                           ; N: 'PKCS8_pkey_get0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_pkey_get0_attrs                     ; N: 'PKCS8_pkey_get0_attrs'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_pkey_add1_attr_by_NID               ; N: 'PKCS8_pkey_add1_attr_by_NID'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_set0_param                    ; N: 'X509_PUBKEY_set0_param'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PUBKEY_get0_param                    ; N: 'X509_PUBKEY_get0_param'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_trust                          ; N: 'X509_check_trust'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_get_count                      ; N: 'X509_TRUST_get_count'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_get0                           ; N: 'X509_TRUST_get0'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_get_by_id                      ; N: 'X509_TRUST_get_by_id'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_add                            ; N: 'X509_TRUST_add'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_cleanup                        ; N: 'X509_TRUST_cleanup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_get_flags                      ; N: 'X509_TRUST_get_flags'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_get0_name                      ; N: 'X509_TRUST_get0_name'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_TRUST_get_trust                      ; N: 'X509_TRUST_get_trust'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_CONF_strings                     ; N: 'ERR_load_CONF_strings'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_set_default_method                   ; N: 'CONF_set_default_method'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_set_nconf                            ; N: 'CONF_set_nconf'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_load                                 ; N: 'CONF_load'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_load_fp                              ; N: 'CONF_load_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_load_bio                             ; N: 'CONF_load_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_get_section                          ; N: 'CONF_get_section'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_get_string                           ; N: 'CONF_get_string'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_get_number                           ; N: 'CONF_get_number'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_free                                 ; N: 'CONF_free'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_dump_fp                              ; N: 'CONF_dump_fp'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_dump_bio                             ; N: 'CONF_dump_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_config                            ; N: 'OPENSSL_config'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_new                                 ; N: 'NCONF_new'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_default                             ; N: 'NCONF_default'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_WIN32                               ; N: 'NCONF_WIN32'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_free                                ; N: 'NCONF_free'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_free_data                           ; N: 'NCONF_free_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_load                                ; N: 'NCONF_load'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_load_fp                             ; N: 'NCONF_load_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_load_bio                            ; N: 'NCONF_load_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_get_section                         ; N: 'NCONF_get_section'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_get_string                          ; N: 'NCONF_get_string'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_get_number_e                        ; N: 'NCONF_get_number_e'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_dump_fp                             ; N: 'NCONF_dump_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NCONF_dump_bio                            ; N: 'NCONF_dump_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_modules_load                         ; N: 'CONF_modules_load'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_modules_load_file                    ; N: 'CONF_modules_load_file'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_modules_unload                       ; N: 'CONF_modules_unload'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_modules_finish                       ; N: 'CONF_modules_finish'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_module_add                           ; N: 'CONF_module_add'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_get_name                     ; N: 'CONF_imodule_get_name'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_get_value                    ; N: 'CONF_imodule_get_value'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_get_usr_data                 ; N: 'CONF_imodule_get_usr_data'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_set_usr_data                 ; N: 'CONF_imodule_set_usr_data'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_get_module                   ; N: 'CONF_imodule_get_module'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_get_flags                    ; N: 'CONF_imodule_get_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_imodule_set_flags                    ; N: 'CONF_imodule_set_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_module_get_usr_data                  ; N: 'CONF_module_get_usr_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_module_set_usr_data                  ; N: 'CONF_module_set_usr_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_get1_default_config_file             ; N: 'CONF_get1_default_config_file'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CONF_parse_list                           ; N: 'CONF_parse_list'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_load_builtin_modules              ; N: 'OPENSSL_load_builtin_modules'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_X509V3_strings                   ; N: 'ERR_load_X509V3_strings'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROXY_POLICY_new                          ; N: 'PROXY_POLICY_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROXY_POLICY_free                         ; N: 'PROXY_POLICY_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PROXY_POLICY                          ; N: 'd2i_PROXY_POLICY'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PROXY_POLICY                          ; N: 'i2d_PROXY_POLICY'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROXY_POLICY_it                           ; N: 'PROXY_POLICY_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROXY_CERT_INFO_EXTENSION_new             ; N: 'PROXY_CERT_INFO_EXTENSION_new'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROXY_CERT_INFO_EXTENSION_free            ; N: 'PROXY_CERT_INFO_EXTENSION_free'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PROXY_CERT_INFO_EXTENSION             ; N: 'd2i_PROXY_CERT_INFO_EXTENSION'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PROXY_CERT_INFO_EXTENSION             ; N: 'i2d_PROXY_CERT_INFO_EXTENSION'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROXY_CERT_INFO_EXTENSION_it              ; N: 'PROXY_CERT_INFO_EXTENSION_it'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BASIC_CONSTRAINTS_new                     ; N: 'BASIC_CONSTRAINTS_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BASIC_CONSTRAINTS_free                    ; N: 'BASIC_CONSTRAINTS_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_BASIC_CONSTRAINTS                     ; N: 'd2i_BASIC_CONSTRAINTS'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_BASIC_CONSTRAINTS                     ; N: 'i2d_BASIC_CONSTRAINTS'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BASIC_CONSTRAINTS_it                      ; N: 'BASIC_CONSTRAINTS_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_new                                 ; N: 'SXNET_new'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_free                                ; N: 'SXNET_free'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_SXNET                                 ; N: 'd2i_SXNET'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_SXNET                                 ; N: 'i2d_SXNET'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_it                                  ; N: 'SXNET_it'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNETID_new                               ; N: 'SXNETID_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNETID_free                              ; N: 'SXNETID_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_SXNETID                               ; N: 'd2i_SXNETID'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_SXNETID                               ; N: 'i2d_SXNETID'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNETID_it                                ; N: 'SXNETID_it'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_add_id_asc                          ; N: 'SXNET_add_id_asc'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_add_id_ulong                        ; N: 'SXNET_add_id_ulong'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_add_id_INTEGER                      ; N: 'SXNET_add_id_INTEGER'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_get_id_asc                          ; N: 'SXNET_get_id_asc'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_get_id_ulong                        ; N: 'SXNET_get_id_ulong'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SXNET_get_id_INTEGER                      ; N: 'SXNET_get_id_INTEGER'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AUTHORITY_KEYID_new                       ; N: 'AUTHORITY_KEYID_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AUTHORITY_KEYID_free                      ; N: 'AUTHORITY_KEYID_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_AUTHORITY_KEYID                       ; N: 'd2i_AUTHORITY_KEYID'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_AUTHORITY_KEYID                       ; N: 'i2d_AUTHORITY_KEYID'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AUTHORITY_KEYID_it                        ; N: 'AUTHORITY_KEYID_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKEY_USAGE_PERIOD_new                     ; N: 'PKEY_USAGE_PERIOD_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKEY_USAGE_PERIOD_free                    ; N: 'PKEY_USAGE_PERIOD_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKEY_USAGE_PERIOD                     ; N: 'd2i_PKEY_USAGE_PERIOD'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKEY_USAGE_PERIOD                     ; N: 'i2d_PKEY_USAGE_PERIOD'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKEY_USAGE_PERIOD_it                      ; N: 'PKEY_USAGE_PERIOD_it'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_new                          ; N: 'GENERAL_NAME_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_free                         ; N: 'GENERAL_NAME_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_GENERAL_NAME                          ; N: 'd2i_GENERAL_NAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_GENERAL_NAME                          ; N: 'i2d_GENERAL_NAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_it                           ; N: 'GENERAL_NAME_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_dup                          ; N: 'GENERAL_NAME_dup'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_cmp                          ; N: 'GENERAL_NAME_cmp'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@v2i_ASN1_BIT_STRING                       ; N: 'v2i_ASN1_BIT_STRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2v_ASN1_BIT_STRING                       ; N: 'i2v_ASN1_BIT_STRING'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2s_ASN1_IA5STRING                        ; N: 'i2s_ASN1_IA5STRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@s2i_ASN1_IA5STRING                        ; N: 's2i_ASN1_IA5STRING'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2v_GENERAL_NAME                          ; N: 'i2v_GENERAL_NAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_print                        ; N: 'GENERAL_NAME_print'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAMES_new                         ; N: 'GENERAL_NAMES_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAMES_free                        ; N: 'GENERAL_NAMES_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_GENERAL_NAMES                         ; N: 'd2i_GENERAL_NAMES'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_GENERAL_NAMES                         ; N: 'i2d_GENERAL_NAMES'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAMES_it                          ; N: 'GENERAL_NAMES_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2v_GENERAL_NAMES                         ; N: 'i2v_GENERAL_NAMES'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@v2i_GENERAL_NAMES                         ; N: 'v2i_GENERAL_NAMES'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OTHERNAME_new                             ; N: 'OTHERNAME_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OTHERNAME_free                            ; N: 'OTHERNAME_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OTHERNAME                             ; N: 'd2i_OTHERNAME'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OTHERNAME                             ; N: 'i2d_OTHERNAME'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OTHERNAME_it                              ; N: 'OTHERNAME_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EDIPARTYNAME_new                          ; N: 'EDIPARTYNAME_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EDIPARTYNAME_free                         ; N: 'EDIPARTYNAME_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_EDIPARTYNAME                          ; N: 'd2i_EDIPARTYNAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_EDIPARTYNAME                          ; N: 'i2d_EDIPARTYNAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EDIPARTYNAME_it                           ; N: 'EDIPARTYNAME_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OTHERNAME_cmp                             ; N: 'OTHERNAME_cmp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_set0_value                   ; N: 'GENERAL_NAME_set0_value'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_get0_value                   ; N: 'GENERAL_NAME_get0_value'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_set0_othername               ; N: 'GENERAL_NAME_set0_othername'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_NAME_get0_otherName               ; N: 'GENERAL_NAME_get0_otherName'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2s_ASN1_OCTET_STRING                     ; N: 'i2s_ASN1_OCTET_STRING'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@s2i_ASN1_OCTET_STRING                     ; N: 's2i_ASN1_OCTET_STRING'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EXTENDED_KEY_USAGE_new                    ; N: 'EXTENDED_KEY_USAGE_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EXTENDED_KEY_USAGE_free                   ; N: 'EXTENDED_KEY_USAGE_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_EXTENDED_KEY_USAGE                    ; N: 'd2i_EXTENDED_KEY_USAGE'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_EXTENDED_KEY_USAGE                    ; N: 'i2d_EXTENDED_KEY_USAGE'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@EXTENDED_KEY_USAGE_it                     ; N: 'EXTENDED_KEY_USAGE_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2a_ACCESS_DESCRIPTION                    ; N: 'i2a_ACCESS_DESCRIPTION'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLS_FEATURE_new                           ; N: 'TLS_FEATURE_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLS_FEATURE_free                          ; N: 'TLS_FEATURE_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CERTIFICATEPOLICIES_new                   ; N: 'CERTIFICATEPOLICIES_new'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CERTIFICATEPOLICIES_free                  ; N: 'CERTIFICATEPOLICIES_free'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_CERTIFICATEPOLICIES                   ; N: 'd2i_CERTIFICATEPOLICIES'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_CERTIFICATEPOLICIES                   ; N: 'i2d_CERTIFICATEPOLICIES'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CERTIFICATEPOLICIES_it                    ; N: 'CERTIFICATEPOLICIES_it'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICYINFO_new                            ; N: 'POLICYINFO_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICYINFO_free                           ; N: 'POLICYINFO_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_POLICYINFO                            ; N: 'd2i_POLICYINFO'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_POLICYINFO                            ; N: 'i2d_POLICYINFO'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICYINFO_it                             ; N: 'POLICYINFO_it'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICYQUALINFO_new                        ; N: 'POLICYQUALINFO_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICYQUALINFO_free                       ; N: 'POLICYQUALINFO_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_POLICYQUALINFO                        ; N: 'd2i_POLICYQUALINFO'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_POLICYQUALINFO                        ; N: 'i2d_POLICYQUALINFO'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICYQUALINFO_it                         ; N: 'POLICYQUALINFO_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@USERNOTICE_new                            ; N: 'USERNOTICE_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@USERNOTICE_free                           ; N: 'USERNOTICE_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_USERNOTICE                            ; N: 'd2i_USERNOTICE'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_USERNOTICE                            ; N: 'i2d_USERNOTICE'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@USERNOTICE_it                             ; N: 'USERNOTICE_it'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NOTICEREF_new                             ; N: 'NOTICEREF_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NOTICEREF_free                            ; N: 'NOTICEREF_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_NOTICEREF                             ; N: 'd2i_NOTICEREF'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_NOTICEREF                             ; N: 'i2d_NOTICEREF'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NOTICEREF_it                              ; N: 'NOTICEREF_it'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRL_DIST_POINTS_new                       ; N: 'CRL_DIST_POINTS_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRL_DIST_POINTS_free                      ; N: 'CRL_DIST_POINTS_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_CRL_DIST_POINTS                       ; N: 'd2i_CRL_DIST_POINTS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_CRL_DIST_POINTS                       ; N: 'i2d_CRL_DIST_POINTS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRL_DIST_POINTS_it                        ; N: 'CRL_DIST_POINTS_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_new                            ; N: 'DIST_POINT_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_free                           ; N: 'DIST_POINT_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DIST_POINT                            ; N: 'd2i_DIST_POINT'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DIST_POINT                            ; N: 'i2d_DIST_POINT'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_it                             ; N: 'DIST_POINT_it'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_NAME_new                       ; N: 'DIST_POINT_NAME_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_NAME_free                      ; N: 'DIST_POINT_NAME_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_DIST_POINT_NAME                       ; N: 'd2i_DIST_POINT_NAME'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_DIST_POINT_NAME                       ; N: 'i2d_DIST_POINT_NAME'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_NAME_it                        ; N: 'DIST_POINT_NAME_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ISSUING_DIST_POINT_new                    ; N: 'ISSUING_DIST_POINT_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ISSUING_DIST_POINT_free                   ; N: 'ISSUING_DIST_POINT_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ISSUING_DIST_POINT                    ; N: 'd2i_ISSUING_DIST_POINT'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ISSUING_DIST_POINT                    ; N: 'i2d_ISSUING_DIST_POINT'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ISSUING_DIST_POINT_it                     ; N: 'ISSUING_DIST_POINT_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DIST_POINT_set_dpname                     ; N: 'DIST_POINT_set_dpname'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAME_CONSTRAINTS_check                    ; N: 'NAME_CONSTRAINTS_check'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAME_CONSTRAINTS_check_CN                 ; N: 'NAME_CONSTRAINTS_check_CN'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ACCESS_DESCRIPTION_new                    ; N: 'ACCESS_DESCRIPTION_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ACCESS_DESCRIPTION_free                   ; N: 'ACCESS_DESCRIPTION_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ACCESS_DESCRIPTION                    ; N: 'd2i_ACCESS_DESCRIPTION'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ACCESS_DESCRIPTION                    ; N: 'i2d_ACCESS_DESCRIPTION'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ACCESS_DESCRIPTION_it                     ; N: 'ACCESS_DESCRIPTION_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AUTHORITY_INFO_ACCESS_new                 ; N: 'AUTHORITY_INFO_ACCESS_new'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AUTHORITY_INFO_ACCESS_free                ; N: 'AUTHORITY_INFO_ACCESS_free'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_AUTHORITY_INFO_ACCESS                 ; N: 'd2i_AUTHORITY_INFO_ACCESS'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_AUTHORITY_INFO_ACCESS                 ; N: 'i2d_AUTHORITY_INFO_ACCESS'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@AUTHORITY_INFO_ACCESS_it                  ; N: 'AUTHORITY_INFO_ACCESS_it'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_MAPPING_it                         ; N: 'POLICY_MAPPING_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_MAPPING_new                        ; N: 'POLICY_MAPPING_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_MAPPING_free                       ; N: 'POLICY_MAPPING_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_MAPPINGS_it                        ; N: 'POLICY_MAPPINGS_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_SUBTREE_it                        ; N: 'GENERAL_SUBTREE_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_SUBTREE_new                       ; N: 'GENERAL_SUBTREE_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@GENERAL_SUBTREE_free                      ; N: 'GENERAL_SUBTREE_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAME_CONSTRAINTS_it                       ; N: 'NAME_CONSTRAINTS_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAME_CONSTRAINTS_new                      ; N: 'NAME_CONSTRAINTS_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAME_CONSTRAINTS_free                     ; N: 'NAME_CONSTRAINTS_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_CONSTRAINTS_new                    ; N: 'POLICY_CONSTRAINTS_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_CONSTRAINTS_free                   ; N: 'POLICY_CONSTRAINTS_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@POLICY_CONSTRAINTS_it                     ; N: 'POLICY_CONSTRAINTS_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2i_GENERAL_NAME                          ; N: 'a2i_GENERAL_NAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@v2i_GENERAL_NAME                          ; N: 'v2i_GENERAL_NAME'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@v2i_GENERAL_NAME_ex                       ; N: 'v2i_GENERAL_NAME_ex'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_conf_free                          ; N: 'X509V3_conf_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_nconf_nid                      ; N: 'X509V3_EXT_nconf_nid'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_nconf                          ; N: 'X509V3_EXT_nconf'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_add_nconf_sk                   ; N: 'X509V3_EXT_add_nconf_sk'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_add_nconf                      ; N: 'X509V3_EXT_add_nconf'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_REQ_add_nconf                  ; N: 'X509V3_EXT_REQ_add_nconf'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_CRL_add_nconf                  ; N: 'X509V3_EXT_CRL_add_nconf'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_conf_nid                       ; N: 'X509V3_EXT_conf_nid'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_conf                           ; N: 'X509V3_EXT_conf'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_add_conf                       ; N: 'X509V3_EXT_add_conf'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_REQ_add_conf                   ; N: 'X509V3_EXT_REQ_add_conf'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_CRL_add_conf                   ; N: 'X509V3_EXT_CRL_add_conf'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add_value_bool_nf                  ; N: 'X509V3_add_value_bool_nf'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_get_value_bool                     ; N: 'X509V3_get_value_bool'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_get_value_int                      ; N: 'X509V3_get_value_int'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_set_nconf                          ; N: 'X509V3_set_nconf'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_set_conf_lhash                     ; N: 'X509V3_set_conf_lhash'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_get_string                         ; N: 'X509V3_get_string'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_get_section                        ; N: 'X509V3_get_section'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_string_free                        ; N: 'X509V3_string_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_section_free                       ; N: 'X509V3_section_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_set_ctx                            ; N: 'X509V3_set_ctx'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add_value                          ; N: 'X509V3_add_value'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add_value_uchar                    ; N: 'X509V3_add_value_uchar'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add_value_bool                     ; N: 'X509V3_add_value_bool'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add_value_int                      ; N: 'X509V3_add_value_int'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2s_ASN1_INTEGER                          ; N: 'i2s_ASN1_INTEGER'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@s2i_ASN1_INTEGER                          ; N: 's2i_ASN1_INTEGER'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2s_ASN1_ENUMERATED                       ; N: 'i2s_ASN1_ENUMERATED'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2s_ASN1_ENUMERATED_TABLE                 ; N: 'i2s_ASN1_ENUMERATED_TABLE'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_add                            ; N: 'X509V3_EXT_add'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_add_list                       ; N: 'X509V3_EXT_add_list'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_add_alias                      ; N: 'X509V3_EXT_add_alias'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_cleanup                        ; N: 'X509V3_EXT_cleanup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_get                            ; N: 'X509V3_EXT_get'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_get_nid                        ; N: 'X509V3_EXT_get_nid'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add_standard_extensions            ; N: 'X509V3_add_standard_extensions'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_parse_list                         ; N: 'X509V3_parse_list'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_d2i                            ; N: 'X509V3_EXT_d2i'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_get_d2i                            ; N: 'X509V3_get_d2i'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_i2d                            ; N: 'X509V3_EXT_i2d'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_add1_i2d                           ; N: 'X509V3_add1_i2d'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_val_prn                        ; N: 'X509V3_EXT_val_prn'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_print                          ; N: 'X509V3_EXT_print'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_EXT_print_fp                       ; N: 'X509V3_EXT_print_fp'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_extensions_print                   ; N: 'X509V3_extensions_print'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_ca                             ; N: 'X509_check_ca'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_purpose                        ; N: 'X509_check_purpose'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_supported_extension                  ; N: 'X509_supported_extension'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_set                          ; N: 'X509_PURPOSE_set'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_issued                         ; N: 'X509_check_issued'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_akid                           ; N: 'X509_check_akid'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_proxy_flag                       ; N: 'X509_set_proxy_flag'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_set_proxy_pathlen                    ; N: 'X509_set_proxy_pathlen'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_proxy_pathlen                    ; N: 'X509_get_proxy_pathlen'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_extension_flags                  ; N: 'X509_get_extension_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_key_usage                        ; N: 'X509_get_key_usage'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get_extended_key_usage               ; N: 'X509_get_extended_key_usage'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_subject_key_id                  ; N: 'X509_get0_subject_key_id'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_authority_key_id                ; N: 'X509_get0_authority_key_id'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_authority_issuer                ; N: 'X509_get0_authority_issuer'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get0_authority_serial                ; N: 'X509_get0_authority_serial'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get_count                    ; N: 'X509_PURPOSE_get_count'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get0                         ; N: 'X509_PURPOSE_get0'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get_by_sname                 ; N: 'X509_PURPOSE_get_by_sname'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get_by_id                    ; N: 'X509_PURPOSE_get_by_id'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_add                          ; N: 'X509_PURPOSE_add'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get0_name                    ; N: 'X509_PURPOSE_get0_name'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get0_sname                   ; N: 'X509_PURPOSE_get0_sname'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get_trust                    ; N: 'X509_PURPOSE_get_trust'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_cleanup                      ; N: 'X509_PURPOSE_cleanup'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_PURPOSE_get_id                       ; N: 'X509_PURPOSE_get_id'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get1_email                           ; N: 'X509_get1_email'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_REQ_get1_email                       ; N: 'X509_REQ_get1_email'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_email_free                           ; N: 'X509_email_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_get1_ocsp                            ; N: 'X509_get1_ocsp'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_host                           ; N: 'X509_check_host'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_email                          ; N: 'X509_check_email'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_ip                             ; N: 'X509_check_ip'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_check_ip_asc                         ; N: 'X509_check_ip_asc'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2i_IPADDRESS                             ; N: 'a2i_IPADDRESS'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@a2i_IPADDRESS_NC                          ; N: 'a2i_IPADDRESS_NC'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509V3_NAME_from_section                  ; N: 'X509V3_NAME_from_section'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509_POLICY_NODE_print                    ; N: 'X509_POLICY_NODE_print'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASRange_new                               ; N: 'ASRange_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASRange_free                              ; N: 'ASRange_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASRange                               ; N: 'd2i_ASRange'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASRange                               ; N: 'i2d_ASRange'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASRange_it                                ; N: 'ASRange_it'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdOrRange_new                           ; N: 'ASIdOrRange_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdOrRange_free                          ; N: 'ASIdOrRange_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASIdOrRange                           ; N: 'd2i_ASIdOrRange'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASIdOrRange                           ; N: 'i2d_ASIdOrRange'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdOrRange_it                            ; N: 'ASIdOrRange_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdentifierChoice_new                    ; N: 'ASIdentifierChoice_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdentifierChoice_free                   ; N: 'ASIdentifierChoice_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASIdentifierChoice                    ; N: 'd2i_ASIdentifierChoice'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASIdentifierChoice                    ; N: 'i2d_ASIdentifierChoice'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdentifierChoice_it                     ; N: 'ASIdentifierChoice_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdentifiers_new                         ; N: 'ASIdentifiers_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdentifiers_free                        ; N: 'ASIdentifiers_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ASIdentifiers                         ; N: 'd2i_ASIdentifiers'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ASIdentifiers                         ; N: 'i2d_ASIdentifiers'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ASIdentifiers_it                          ; N: 'ASIdentifiers_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressRange_new                        ; N: 'IPAddressRange_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressRange_free                       ; N: 'IPAddressRange_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_IPAddressRange                        ; N: 'd2i_IPAddressRange'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_IPAddressRange                        ; N: 'i2d_IPAddressRange'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressRange_it                         ; N: 'IPAddressRange_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressOrRange_new                      ; N: 'IPAddressOrRange_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressOrRange_free                     ; N: 'IPAddressOrRange_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_IPAddressOrRange                      ; N: 'd2i_IPAddressOrRange'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_IPAddressOrRange                      ; N: 'i2d_IPAddressOrRange'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressOrRange_it                       ; N: 'IPAddressOrRange_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressChoice_new                       ; N: 'IPAddressChoice_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressChoice_free                      ; N: 'IPAddressChoice_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_IPAddressChoice                       ; N: 'd2i_IPAddressChoice'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_IPAddressChoice                       ; N: 'i2d_IPAddressChoice'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressChoice_it                        ; N: 'IPAddressChoice_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressFamily_new                       ; N: 'IPAddressFamily_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressFamily_free                      ; N: 'IPAddressFamily_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_IPAddressFamily                       ; N: 'd2i_IPAddressFamily'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_IPAddressFamily                       ; N: 'i2d_IPAddressFamily'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IPAddressFamily_it                        ; N: 'IPAddressFamily_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_add_inherit                   ; N: 'X509v3_asid_add_inherit'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_add_id_or_range               ; N: 'X509v3_asid_add_id_or_range'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_add_inherit                   ; N: 'X509v3_addr_add_inherit'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_add_prefix                    ; N: 'X509v3_addr_add_prefix'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_add_range                     ; N: 'X509v3_addr_add_range'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_get_afi                       ; N: 'X509v3_addr_get_afi'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_get_range                     ; N: 'X509v3_addr_get_range'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_is_canonical                  ; N: 'X509v3_asid_is_canonical'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_is_canonical                  ; N: 'X509v3_addr_is_canonical'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_canonize                      ; N: 'X509v3_asid_canonize'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_canonize                      ; N: 'X509v3_addr_canonize'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_inherits                      ; N: 'X509v3_asid_inherits'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_inherits                      ; N: 'X509v3_addr_inherits'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_subset                        ; N: 'X509v3_asid_subset'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_subset                        ; N: 'X509v3_addr_subset'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_validate_path                 ; N: 'X509v3_asid_validate_path'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_validate_path                 ; N: 'X509v3_addr_validate_path'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_asid_validate_resource_set         ; N: 'X509v3_asid_validate_resource_set'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@X509v3_addr_validate_resource_set         ; N: 'X509v3_addr_validate_resource_set'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_new                      ; N: 'NAMING_AUTHORITY_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_free                     ; N: 'NAMING_AUTHORITY_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_NAMING_AUTHORITY                      ; N: 'd2i_NAMING_AUTHORITY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_NAMING_AUTHORITY                      ; N: 'i2d_NAMING_AUTHORITY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_it                       ; N: 'NAMING_AUTHORITY_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_new                       ; N: 'PROFESSION_INFO_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_free                      ; N: 'PROFESSION_INFO_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PROFESSION_INFO                       ; N: 'd2i_PROFESSION_INFO'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PROFESSION_INFO                       ; N: 'i2d_PROFESSION_INFO'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_it                        ; N: 'PROFESSION_INFO_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_new                            ; N: 'ADMISSIONS_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_free                           ; N: 'ADMISSIONS_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ADMISSIONS                            ; N: 'd2i_ADMISSIONS'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ADMISSIONS                            ; N: 'i2d_ADMISSIONS'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_it                             ; N: 'ADMISSIONS_it'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_new                      ; N: 'ADMISSION_SYNTAX_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_free                     ; N: 'ADMISSION_SYNTAX_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ADMISSION_SYNTAX                      ; N: 'd2i_ADMISSION_SYNTAX'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ADMISSION_SYNTAX                      ; N: 'i2d_ADMISSION_SYNTAX'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_it                       ; N: 'ADMISSION_SYNTAX_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_get0_authorityId         ; N: 'NAMING_AUTHORITY_get0_authorityId'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_get0_authorityURL        ; N: 'NAMING_AUTHORITY_get0_authorityURL'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_get0_authorityText       ; N: 'NAMING_AUTHORITY_get0_authorityText'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_set0_authorityId         ; N: 'NAMING_AUTHORITY_set0_authorityId'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_set0_authorityURL        ; N: 'NAMING_AUTHORITY_set0_authorityURL'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@NAMING_AUTHORITY_set0_authorityText       ; N: 'NAMING_AUTHORITY_set0_authorityText'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_get0_admissionAuthority  ; N: 'ADMISSION_SYNTAX_get0_admissionAuthority'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_set0_admissionAuthority  ; N: 'ADMISSION_SYNTAX_set0_admissionAuthority'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_get0_contentsOfAdmissions; N: 'ADMISSION_SYNTAX_get0_contentsOfAdmissions'; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSION_SYNTAX_set0_contentsOfAdmissions; N: 'ADMISSION_SYNTAX_set0_contentsOfAdmissions'; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_get0_admissionAuthority        ; N: 'ADMISSIONS_get0_admissionAuthority'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_set0_admissionAuthority        ; N: 'ADMISSIONS_set0_admissionAuthority'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_get0_namingAuthority           ; N: 'ADMISSIONS_get0_namingAuthority'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_set0_namingAuthority           ; N: 'ADMISSIONS_set0_namingAuthority'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_get0_professionInfos           ; N: 'ADMISSIONS_get0_professionInfos'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ADMISSIONS_set0_professionInfos           ; N: 'ADMISSIONS_set0_professionInfos'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_get0_addProfessionInfo    ; N: 'PROFESSION_INFO_get0_addProfessionInfo'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_set0_addProfessionInfo    ; N: 'PROFESSION_INFO_set0_addProfessionInfo'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_get0_namingAuthority      ; N: 'PROFESSION_INFO_get0_namingAuthority'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_set0_namingAuthority      ; N: 'PROFESSION_INFO_set0_namingAuthority'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_get0_professionItems      ; N: 'PROFESSION_INFO_get0_professionItems'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_set0_professionItems      ; N: 'PROFESSION_INFO_set0_professionItems'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_get0_professionOIDs       ; N: 'PROFESSION_INFO_get0_professionOIDs'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_set0_professionOIDs       ; N: 'PROFESSION_INFO_set0_professionOIDs'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_get0_registrationNumber   ; N: 'PROFESSION_INFO_get0_registrationNumber'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PROFESSION_INFO_set0_registrationNumber   ; N: 'PROFESSION_INFO_set0_registrationNumber'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_CMS_strings                      ; N: 'ERR_load_CMS_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ContentInfo_new                       ; N: 'CMS_ContentInfo_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ContentInfo_free                      ; N: 'CMS_ContentInfo_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_CMS_ContentInfo                       ; N: 'd2i_CMS_ContentInfo'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_CMS_ContentInfo                       ; N: 'i2d_CMS_ContentInfo'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ContentInfo_it                        ; N: 'CMS_ContentInfo_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ReceiptRequest_new                    ; N: 'CMS_ReceiptRequest_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ReceiptRequest_free                   ; N: 'CMS_ReceiptRequest_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_CMS_ReceiptRequest                    ; N: 'd2i_CMS_ReceiptRequest'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_CMS_ReceiptRequest                    ; N: 'i2d_CMS_ReceiptRequest'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ReceiptRequest_it                     ; N: 'CMS_ReceiptRequest_it'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ContentInfo_print_ctx                 ; N: 'CMS_ContentInfo_print_ctx'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get0_type                             ; N: 'CMS_get0_type'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_dataInit                              ; N: 'CMS_dataInit'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_dataFinal                             ; N: 'CMS_dataFinal'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get0_content                          ; N: 'CMS_get0_content'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_is_detached                           ; N: 'CMS_is_detached'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_set_detached                          ; N: 'CMS_set_detached'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_stream                                ; N: 'CMS_stream'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_CMS_bio                               ; N: 'd2i_CMS_bio'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_CMS_bio                               ; N: 'i2d_CMS_bio'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_CMS                               ; N: 'BIO_new_CMS'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_CMS_bio_stream                        ; N: 'i2d_CMS_bio_stream'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_CMS_stream                  ; N: 'PEM_write_bio_CMS_stream'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_read_CMS                            ; N: 'SMIME_read_CMS'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SMIME_write_CMS                           ; N: 'SMIME_write_CMS'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_final                                 ; N: 'CMS_final'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_sign                                  ; N: 'CMS_sign'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_sign_receipt                          ; N: 'CMS_sign_receipt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_data                                  ; N: 'CMS_data'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_data_create                           ; N: 'CMS_data_create'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_digest_verify                         ; N: 'CMS_digest_verify'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_digest_create                         ; N: 'CMS_digest_create'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_EncryptedData_decrypt                 ; N: 'CMS_EncryptedData_decrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_EncryptedData_encrypt                 ; N: 'CMS_EncryptedData_encrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_EncryptedData_set1_key                ; N: 'CMS_EncryptedData_set1_key'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_verify                                ; N: 'CMS_verify'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_verify_receipt                        ; N: 'CMS_verify_receipt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get0_signers                          ; N: 'CMS_get0_signers'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_encrypt                               ; N: 'CMS_encrypt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_decrypt                               ; N: 'CMS_decrypt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_decrypt_set1_pkey                     ; N: 'CMS_decrypt_set1_pkey'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_decrypt_set1_key                      ; N: 'CMS_decrypt_set1_key'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_decrypt_set1_password                 ; N: 'CMS_decrypt_set1_password'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get0_RecipientInfos                   ; N: 'CMS_get0_RecipientInfos'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_type                    ; N: 'CMS_RecipientInfo_type'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_get0_pkey_ctx           ; N: 'CMS_RecipientInfo_get0_pkey_ctx'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_EnvelopedData_create                  ; N: 'CMS_EnvelopedData_create'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add1_recipient_cert                   ; N: 'CMS_add1_recipient_cert'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_set0_pkey               ; N: 'CMS_RecipientInfo_set0_pkey'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_ktri_cert_cmp           ; N: 'CMS_RecipientInfo_ktri_cert_cmp'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_ktri_get0_algs          ; N: 'CMS_RecipientInfo_ktri_get0_algs'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_ktri_get0_signer_id     ; N: 'CMS_RecipientInfo_ktri_get0_signer_id'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add0_recipient_key                    ; N: 'CMS_add0_recipient_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kekri_get0_id           ; N: 'CMS_RecipientInfo_kekri_get0_id'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_set0_key                ; N: 'CMS_RecipientInfo_set0_key'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kekri_id_cmp            ; N: 'CMS_RecipientInfo_kekri_id_cmp'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_set0_password           ; N: 'CMS_RecipientInfo_set0_password'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add0_recipient_password               ; N: 'CMS_add0_recipient_password'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_decrypt                 ; N: 'CMS_RecipientInfo_decrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_encrypt                 ; N: 'CMS_RecipientInfo_encrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_uncompress                            ; N: 'CMS_uncompress'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_compress                              ; N: 'CMS_compress'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_set1_eContentType                     ; N: 'CMS_set1_eContentType'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get0_eContentType                     ; N: 'CMS_get0_eContentType'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add0_CertificateChoices               ; N: 'CMS_add0_CertificateChoices'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add0_cert                             ; N: 'CMS_add0_cert'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add1_cert                             ; N: 'CMS_add1_cert'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get1_certs                            ; N: 'CMS_get1_certs'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add0_RevocationInfoChoice             ; N: 'CMS_add0_RevocationInfoChoice'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add0_crl                              ; N: 'CMS_add0_crl'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add1_crl                              ; N: 'CMS_add1_crl'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get1_crls                             ; N: 'CMS_get1_crls'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignedData_init                       ; N: 'CMS_SignedData_init'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add1_signer                           ; N: 'CMS_add1_signer'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_get0_pkey_ctx              ; N: 'CMS_SignerInfo_get0_pkey_ctx'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_get0_md_ctx                ; N: 'CMS_SignerInfo_get0_md_ctx'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get0_SignerInfos                      ; N: 'CMS_get0_SignerInfos'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_set1_signer_cert           ; N: 'CMS_SignerInfo_set1_signer_cert'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_get0_signer_id             ; N: 'CMS_SignerInfo_get0_signer_id'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_cert_cmp                   ; N: 'CMS_SignerInfo_cert_cmp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_set1_signers_certs                    ; N: 'CMS_set1_signers_certs'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_get0_algs                  ; N: 'CMS_SignerInfo_get0_algs'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_get0_signature             ; N: 'CMS_SignerInfo_get0_signature'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_sign                       ; N: 'CMS_SignerInfo_sign'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_verify                     ; N: 'CMS_SignerInfo_verify'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SignerInfo_verify_content             ; N: 'CMS_SignerInfo_verify_content'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add_smimecap                          ; N: 'CMS_add_smimecap'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add_simple_smimecap                   ; N: 'CMS_add_simple_smimecap'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add_standard_smimecap                 ; N: 'CMS_add_standard_smimecap'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_get_attr_count                 ; N: 'CMS_signed_get_attr_count'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_get_attr_by_NID                ; N: 'CMS_signed_get_attr_by_NID'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_get_attr_by_OBJ                ; N: 'CMS_signed_get_attr_by_OBJ'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_get_attr                       ; N: 'CMS_signed_get_attr'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_delete_attr                    ; N: 'CMS_signed_delete_attr'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_add1_attr                      ; N: 'CMS_signed_add1_attr'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_add1_attr_by_OBJ               ; N: 'CMS_signed_add1_attr_by_OBJ'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_add1_attr_by_NID               ; N: 'CMS_signed_add1_attr_by_NID'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_add1_attr_by_txt               ; N: 'CMS_signed_add1_attr_by_txt'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_signed_get0_data_by_OBJ               ; N: 'CMS_signed_get0_data_by_OBJ'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_get_attr_count               ; N: 'CMS_unsigned_get_attr_count'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_get_attr_by_NID              ; N: 'CMS_unsigned_get_attr_by_NID'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_get_attr_by_OBJ              ; N: 'CMS_unsigned_get_attr_by_OBJ'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_get_attr                     ; N: 'CMS_unsigned_get_attr'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_delete_attr                  ; N: 'CMS_unsigned_delete_attr'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_add1_attr                    ; N: 'CMS_unsigned_add1_attr'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_add1_attr_by_OBJ             ; N: 'CMS_unsigned_add1_attr_by_OBJ'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_add1_attr_by_NID             ; N: 'CMS_unsigned_add1_attr_by_NID'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_add1_attr_by_txt             ; N: 'CMS_unsigned_add1_attr_by_txt'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_unsigned_get0_data_by_OBJ             ; N: 'CMS_unsigned_get0_data_by_OBJ'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_get1_ReceiptRequest                   ; N: 'CMS_get1_ReceiptRequest'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ReceiptRequest_create0                ; N: 'CMS_ReceiptRequest_create0'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_add1_ReceiptRequest                   ; N: 'CMS_add1_ReceiptRequest'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_ReceiptRequest_get0_values            ; N: 'CMS_ReceiptRequest_get0_values'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_get0_alg           ; N: 'CMS_RecipientInfo_kari_get0_alg'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_get0_reks          ; N: 'CMS_RecipientInfo_kari_get0_reks'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_get0_orig_id       ; N: 'CMS_RecipientInfo_kari_get0_orig_id'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_orig_id_cmp        ; N: 'CMS_RecipientInfo_kari_orig_id_cmp'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientEncryptedKey_get0_id         ; N: 'CMS_RecipientEncryptedKey_get0_id'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientEncryptedKey_cert_cmp        ; N: 'CMS_RecipientEncryptedKey_cert_cmp'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_set0_pkey          ; N: 'CMS_RecipientInfo_kari_set0_pkey'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_get0_ctx           ; N: 'CMS_RecipientInfo_kari_get0_ctx'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_RecipientInfo_kari_decrypt            ; N: 'CMS_RecipientInfo_kari_decrypt'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CMS_SharedInfo_encode                     ; N: 'CMS_SharedInfo_encode'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_COMP_strings                     ; N: 'ERR_load_COMP_strings'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_CTX_new                              ; N: 'COMP_CTX_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_CTX_get_method                       ; N: 'COMP_CTX_get_method'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_CTX_get_type                         ; N: 'COMP_CTX_get_type'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_get_type                             ; N: 'COMP_get_type'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_get_name                             ; N: 'COMP_get_name'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_CTX_free                             ; N: 'COMP_CTX_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_compress_block                       ; N: 'COMP_compress_block'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_expand_block                         ; N: 'COMP_expand_block'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@COMP_zlib                                 ; N: 'COMP_zlib'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_new_section                         ; N: '_CONF_new_section'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_get_section                         ; N: '_CONF_get_section'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_get_section_values                  ; N: '_CONF_get_section_values'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_add_string                          ; N: '_CONF_add_string'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_get_string                          ; N: '_CONF_get_string'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_get_number                          ; N: '_CONF_get_number'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_new_data                            ; N: '_CONF_new_data'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_CONF_free_data                           ; N: '_CONF_free_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_CT_strings                       ; N: 'ERR_load_CT_strings'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_new                    ; N: 'CT_POLICY_EVAL_CTX_new'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_free                   ; N: 'CT_POLICY_EVAL_CTX_free'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_get0_cert              ; N: 'CT_POLICY_EVAL_CTX_get0_cert'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_set1_cert              ; N: 'CT_POLICY_EVAL_CTX_set1_cert'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_get0_issuer            ; N: 'CT_POLICY_EVAL_CTX_get0_issuer'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_set1_issuer            ; N: 'CT_POLICY_EVAL_CTX_set1_issuer'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_get0_log_store         ; N: 'CT_POLICY_EVAL_CTX_get0_log_store'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE ; N: 'CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE' ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_get_time               ; N: 'CT_POLICY_EVAL_CTX_get_time'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CT_POLICY_EVAL_CTX_set_time               ; N: 'CT_POLICY_EVAL_CTX_set_time'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_new                                   ; N: 'SCT_new'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_new_from_base64                       ; N: 'SCT_new_from_base64'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_free                                  ; N: 'SCT_free'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_LIST_free                             ; N: 'SCT_LIST_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get_version                           ; N: 'SCT_get_version'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set_version                           ; N: 'SCT_set_version'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get_log_entry_type                    ; N: 'SCT_get_log_entry_type'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set_log_entry_type                    ; N: 'SCT_set_log_entry_type'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get0_log_id                           ; N: 'SCT_get0_log_id'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set0_log_id                           ; N: 'SCT_set0_log_id'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set1_log_id                           ; N: 'SCT_set1_log_id'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get_timestamp                         ; N: 'SCT_get_timestamp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set_timestamp                         ; N: 'SCT_set_timestamp'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get_signature_nid                     ; N: 'SCT_get_signature_nid'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set_signature_nid                     ; N: 'SCT_set_signature_nid'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get0_extensions                       ; N: 'SCT_get0_extensions'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set0_extensions                       ; N: 'SCT_set0_extensions'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set1_extensions                       ; N: 'SCT_set1_extensions'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get0_signature                        ; N: 'SCT_get0_signature'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set0_signature                        ; N: 'SCT_set0_signature'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set1_signature                        ; N: 'SCT_set1_signature'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get_source                            ; N: 'SCT_get_source'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_set_source                            ; N: 'SCT_set_source'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_validation_status_string              ; N: 'SCT_validation_status_string'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_print                                 ; N: 'SCT_print'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_LIST_print                            ; N: 'SCT_LIST_print'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_get_validation_status                 ; N: 'SCT_get_validation_status'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_validate                              ; N: 'SCT_validate'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SCT_LIST_validate                         ; N: 'SCT_LIST_validate'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2o_SCT_LIST                              ; N: 'i2o_SCT_LIST'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@o2i_SCT_LIST                              ; N: 'o2i_SCT_LIST'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_SCT_LIST                              ; N: 'i2d_SCT_LIST'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_SCT_LIST                              ; N: 'd2i_SCT_LIST'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2o_SCT                                   ; N: 'i2o_SCT'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@o2i_SCT                                   ; N: 'o2i_SCT'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_new                                 ; N: 'CTLOG_new'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_new_from_base64                     ; N: 'CTLOG_new_from_base64'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_free                                ; N: 'CTLOG_free'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_get0_name                           ; N: 'CTLOG_get0_name'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_get0_log_id                         ; N: 'CTLOG_get0_log_id'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_get0_public_key                     ; N: 'CTLOG_get0_public_key'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_STORE_new                           ; N: 'CTLOG_STORE_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_STORE_free                          ; N: 'CTLOG_STORE_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_STORE_get0_log_by_id                ; N: 'CTLOG_STORE_get0_log_by_id'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_STORE_load_file                     ; N: 'CTLOG_STORE_load_file'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CTLOG_STORE_load_default_file             ; N: 'CTLOG_STORE_load_default_file'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_shadow_DES_check_key                     ; N: '_shadow_DES_check_key'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_options                               ; N: 'DES_options'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ecb3_encrypt                          ; N: 'DES_ecb3_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_cbc_cksum                             ; N: 'DES_cbc_cksum'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_cbc_encrypt                           ; N: 'DES_cbc_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ncbc_encrypt                          ; N: 'DES_ncbc_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_xcbc_encrypt                          ; N: 'DES_xcbc_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_cfb_encrypt                           ; N: 'DES_cfb_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ecb_encrypt                           ; N: 'DES_ecb_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_encrypt1                              ; N: 'DES_encrypt1'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_encrypt2                              ; N: 'DES_encrypt2'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_encrypt3                              ; N: 'DES_encrypt3'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_decrypt3                              ; N: 'DES_decrypt3'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ede3_cbc_encrypt                      ; N: 'DES_ede3_cbc_encrypt'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ede3_cfb64_encrypt                    ; N: 'DES_ede3_cfb64_encrypt'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ede3_cfb_encrypt                      ; N: 'DES_ede3_cfb_encrypt'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ede3_ofb64_encrypt                    ; N: 'DES_ede3_ofb64_encrypt'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_fcrypt                                ; N: 'DES_fcrypt'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_crypt                                 ; N: 'DES_crypt'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ofb_encrypt                           ; N: 'DES_ofb_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_pcbc_encrypt                          ; N: 'DES_pcbc_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_quad_cksum                            ; N: 'DES_quad_cksum'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_random_key                            ; N: 'DES_random_key'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_set_odd_parity                        ; N: 'DES_set_odd_parity'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_fixup_key_parity                      ; N: 'DES_set_odd_parity'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_check_key_parity                      ; N: 'DES_check_key_parity'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_is_weak_key                           ; N: 'DES_is_weak_key'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_set_key                               ; N: 'DES_set_key'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_key_sched                             ; N: 'DES_key_sched'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_set_key_checked                       ; N: 'DES_set_key_checked'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_set_key_unchecked                     ; N: 'DES_set_key_unchecked'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_string_to_key                         ; N: 'DES_string_to_key'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_string_to_2keys                       ; N: 'DES_string_to_2keys'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_cfb64_encrypt                         ; N: 'DES_cfb64_encrypt'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DES_ofb64_encrypt                         ; N: 'DES_ofb64_encrypt'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_openssl_ebcdic2ascii                     ; N: '_openssl_ebcdic2ascii'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@_openssl_ascii2ebcdic                     ; N: '_openssl_ascii2ebcdic'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_RAND_strings                     ; N: 'ERR_load_RAND_strings'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_set_rand_method                      ; N: 'RAND_set_rand_method'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_get_rand_method                      ; N: 'RAND_get_rand_method'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_set_rand_engine                      ; N: 'RAND_set_rand_engine'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_OpenSSL                              ; N: 'RAND_OpenSSL'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_bytes                                ; N: 'RAND_bytes'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_priv_bytes                           ; N: 'RAND_priv_bytes'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_pseudo_bytes                         ; N: 'RAND_pseudo_bytes'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_seed                                 ; N: 'RAND_seed'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_keep_random_devices_open             ; N: 'RAND_keep_random_devices_open'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_add                                  ; N: 'RAND_add'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_load_file                            ; N: 'RAND_load_file'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_write_file                           ; N: 'RAND_write_file'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_file_name                            ; N: 'RAND_file_name'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_status                               ; N: 'RAND_status'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_poll                                 ; N: 'RAND_poll'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_PEM_strings                      ; N: 'ERR_load_PEM_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_get_EVP_CIPHER_INFO                   ; N: 'PEM_get_EVP_CIPHER_INFO'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_do_header                             ; N: 'PEM_do_header'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio                              ; N: 'PEM_read_bio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_ex                           ; N: 'PEM_read_bio_ex'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_bytes_read_bio_secmem                 ; N: 'PEM_bytes_read_bio_secmem'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio                             ; N: 'PEM_write_bio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_bytes_read_bio                        ; N: 'PEM_bytes_read_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_ASN1_read_bio                         ; N: 'PEM_ASN1_read_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_ASN1_write_bio                        ; N: 'PEM_ASN1_write_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_X509_INFO_read_bio                    ; N: 'PEM_X509_INFO_read_bio'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_X509_INFO_write_bio                   ; N: 'PEM_X509_INFO_write_bio'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read                                  ; N: 'PEM_read'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write                                 ; N: 'PEM_write'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_ASN1_read                             ; N: 'PEM_ASN1_read'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_ASN1_write                            ; N: 'PEM_ASN1_write'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_X509_INFO_read                        ; N: 'PEM_X509_INFO_read'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_SignInit                              ; N: 'PEM_SignInit'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_SignUpdate                            ; N: 'PEM_SignUpdate'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_SignFinal                             ; N: 'PEM_SignFinal'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_def_callback                          ; N: 'PEM_def_callback'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_proc_type                             ; N: 'PEM_proc_type'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_dek_info                              ; N: 'PEM_dek_info'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_X509                         ; N: 'PEM_read_bio_X509'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_X509                             ; N: 'PEM_read_X509'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_X509                        ; N: 'PEM_write_bio_X509'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_X509                            ; N: 'PEM_write_X509'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_X509_AUX                     ; N: 'PEM_read_bio_X509_AUX'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_X509_AUX                         ; N: 'PEM_read_X509_AUX'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_X509_AUX                    ; N: 'PEM_write_bio_X509_AUX'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_X509_AUX                        ; N: 'PEM_write_X509_AUX'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_X509_REQ                     ; N: 'PEM_read_bio_X509_REQ'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_X509_REQ                         ; N: 'PEM_read_X509_REQ'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_X509_REQ                    ; N: 'PEM_write_bio_X509_REQ'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_X509_REQ                        ; N: 'PEM_write_X509_REQ'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_X509_REQ_NEW                ; N: 'PEM_write_bio_X509_REQ_NEW'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_X509_REQ_NEW                    ; N: 'PEM_write_X509_REQ_NEW'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_X509_CRL                     ; N: 'PEM_read_bio_X509_CRL'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_X509_CRL                         ; N: 'PEM_read_X509_CRL'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_X509_CRL                    ; N: 'PEM_write_bio_X509_CRL'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_X509_CRL                        ; N: 'PEM_write_X509_CRL'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_PKCS7                        ; N: 'PEM_read_bio_PKCS7'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_PKCS7                            ; N: 'PEM_read_PKCS7'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PKCS7                       ; N: 'PEM_write_bio_PKCS7'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PKCS7                           ; N: 'PEM_write_PKCS7'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_NETSCAPE_CERT_SEQUENCE       ; N: 'PEM_read_bio_NETSCAPE_CERT_SEQUENCE'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_NETSCAPE_CERT_SEQUENCE           ; N: 'PEM_read_NETSCAPE_CERT_SEQUENCE'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_NETSCAPE_CERT_SEQUENCE      ; N: 'PEM_write_bio_NETSCAPE_CERT_SEQUENCE'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_NETSCAPE_CERT_SEQUENCE          ; N: 'PEM_write_NETSCAPE_CERT_SEQUENCE'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_PKCS8                        ; N: 'PEM_read_bio_PKCS8'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_PKCS8                            ; N: 'PEM_read_PKCS8'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PKCS8                       ; N: 'PEM_write_bio_PKCS8'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PKCS8                           ; N: 'PEM_write_PKCS8'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_PKCS8_PRIV_KEY_INFO          ; N: 'PEM_read_bio_PKCS8_PRIV_KEY_INFO'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_PKCS8_PRIV_KEY_INFO              ; N: 'PEM_read_PKCS8_PRIV_KEY_INFO'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PKCS8_PRIV_KEY_INFO         ; N: 'PEM_write_bio_PKCS8_PRIV_KEY_INFO'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PKCS8_PRIV_KEY_INFO             ; N: 'PEM_write_PKCS8_PRIV_KEY_INFO'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_RSAPrivateKey                ; N: 'PEM_read_bio_RSAPrivateKey'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_RSAPrivateKey                    ; N: 'PEM_read_RSAPrivateKey'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_RSAPrivateKey               ; N: 'PEM_write_bio_RSAPrivateKey'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_RSAPrivateKey                   ; N: 'PEM_write_RSAPrivateKey'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_RSAPublicKey                 ; N: 'PEM_read_bio_RSAPublicKey'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_RSAPublicKey                     ; N: 'PEM_read_RSAPublicKey'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_RSAPublicKey                ; N: 'PEM_write_bio_RSAPublicKey'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_RSAPublicKey                    ; N: 'PEM_write_RSAPublicKey'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_RSA_PUBKEY                   ; N: 'PEM_read_bio_RSA_PUBKEY'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_RSA_PUBKEY                       ; N: 'PEM_read_RSA_PUBKEY'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_RSA_PUBKEY                  ; N: 'PEM_write_bio_RSA_PUBKEY'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_RSA_PUBKEY                      ; N: 'PEM_write_RSA_PUBKEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_DSAPrivateKey                ; N: 'PEM_read_bio_DSAPrivateKey'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_DSAPrivateKey                    ; N: 'PEM_read_DSAPrivateKey'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_DSAPrivateKey               ; N: 'PEM_write_bio_DSAPrivateKey'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_DSAPrivateKey                   ; N: 'PEM_write_DSAPrivateKey'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_DSA_PUBKEY                   ; N: 'PEM_read_bio_DSA_PUBKEY'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_DSA_PUBKEY                       ; N: 'PEM_read_DSA_PUBKEY'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_DSA_PUBKEY                  ; N: 'PEM_write_bio_DSA_PUBKEY'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_DSA_PUBKEY                      ; N: 'PEM_write_DSA_PUBKEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_DSAparams                    ; N: 'PEM_read_bio_DSAparams'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_DSAparams                        ; N: 'PEM_read_DSAparams'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_DSAparams                   ; N: 'PEM_write_bio_DSAparams'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_DSAparams                       ; N: 'PEM_write_DSAparams'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_ECPKParameters               ; N: 'PEM_read_bio_ECPKParameters'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_ECPKParameters                   ; N: 'PEM_read_ECPKParameters'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_ECPKParameters              ; N: 'PEM_write_bio_ECPKParameters'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_ECPKParameters                  ; N: 'PEM_write_ECPKParameters'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_ECPrivateKey                 ; N: 'PEM_read_bio_ECPrivateKey'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_ECPrivateKey                     ; N: 'PEM_read_ECPrivateKey'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_ECPrivateKey                ; N: 'PEM_write_bio_ECPrivateKey'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_ECPrivateKey                    ; N: 'PEM_write_ECPrivateKey'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_EC_PUBKEY                    ; N: 'PEM_read_bio_EC_PUBKEY'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_EC_PUBKEY                        ; N: 'PEM_read_EC_PUBKEY'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_EC_PUBKEY                   ; N: 'PEM_write_bio_EC_PUBKEY'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_EC_PUBKEY                       ; N: 'PEM_write_EC_PUBKEY'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_DHparams                     ; N: 'PEM_read_bio_DHparams'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_DHparams                         ; N: 'PEM_read_DHparams'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_DHparams                    ; N: 'PEM_write_bio_DHparams'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_DHparams                        ; N: 'PEM_write_DHparams'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_DHxparams                   ; N: 'PEM_write_bio_DHxparams'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_DHxparams                       ; N: 'PEM_write_DHxparams'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_PrivateKey                   ; N: 'PEM_read_bio_PrivateKey'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_PrivateKey                       ; N: 'PEM_read_PrivateKey'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PrivateKey                  ; N: 'PEM_write_bio_PrivateKey'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PrivateKey                      ; N: 'PEM_write_PrivateKey'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_PUBKEY                       ; N: 'PEM_read_bio_PUBKEY'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_PUBKEY                           ; N: 'PEM_read_PUBKEY'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PUBKEY                      ; N: 'PEM_write_bio_PUBKEY'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PUBKEY                          ; N: 'PEM_write_PUBKEY'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PrivateKey_traditional      ; N: 'PEM_write_bio_PrivateKey_traditional'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PKCS8PrivateKey_nid         ; N: 'PEM_write_bio_PKCS8PrivateKey_nid'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_PKCS8PrivateKey             ; N: 'PEM_write_bio_PKCS8PrivateKey'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8PrivateKey_bio                   ; N: 'i2d_PKCS8PrivateKey_bio'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8PrivateKey_nid_bio               ; N: 'i2d_PKCS8PrivateKey_nid_bio'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8PrivateKey_bio                   ; N: 'd2i_PKCS8PrivateKey_bio'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8PrivateKey_fp                    ; N: 'i2d_PKCS8PrivateKey_fp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS8PrivateKey_nid_fp                ; N: 'i2d_PKCS8PrivateKey_nid_fp'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PKCS8PrivateKey_nid             ; N: 'PEM_write_PKCS8PrivateKey_nid'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS8PrivateKey_fp                    ; N: 'd2i_PKCS8PrivateKey_fp'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_PKCS8PrivateKey                 ; N: 'PEM_write_PKCS8PrivateKey'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_Parameters                   ; N: 'PEM_read_bio_Parameters'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_Parameters                  ; N: 'PEM_write_bio_Parameters'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@b2i_PrivateKey                            ; N: 'b2i_PrivateKey'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@b2i_PublicKey                             ; N: 'b2i_PublicKey'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@b2i_PrivateKey_bio                        ; N: 'b2i_PrivateKey_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@b2i_PublicKey_bio                         ; N: 'b2i_PublicKey_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2b_PrivateKey_bio                        ; N: 'i2b_PrivateKey_bio'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2b_PublicKey_bio                         ; N: 'i2b_PublicKey_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@b2i_PVK_bio                               ; N: 'b2i_PVK_bio'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2b_PVK_bio                               ; N: 'i2b_PVK_bio'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_UI_strings                       ; N: 'ERR_load_UI_strings'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_new                                    ; N: 'UI_new'                                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_new_method                             ; N: 'UI_new_method'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_free                                   ; N: 'UI_free'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_add_input_string                       ; N: 'UI_add_input_string'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_dup_input_string                       ; N: 'UI_dup_input_string'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_add_verify_string                      ; N: 'UI_add_verify_string'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_dup_verify_string                      ; N: 'UI_dup_verify_string'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_add_input_boolean                      ; N: 'UI_add_input_boolean'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_dup_input_boolean                      ; N: 'UI_dup_input_boolean'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_add_info_string                        ; N: 'UI_add_info_string'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_dup_info_string                        ; N: 'UI_dup_info_string'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_add_error_string                       ; N: 'UI_add_error_string'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_dup_error_string                       ; N: 'UI_dup_error_string'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_construct_prompt                       ; N: 'UI_construct_prompt'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_add_user_data                          ; N: 'UI_add_user_data'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_dup_user_data                          ; N: 'UI_dup_user_data'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get0_user_data                         ; N: 'UI_get0_user_data'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get0_result                            ; N: 'UI_get0_result'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_result_length                      ; N: 'UI_get_result_length'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_process                                ; N: 'UI_process'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_ctrl                                   ; N: 'UI_ctrl'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_set_ex_data                            ; N: 'UI_set_ex_data'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_ex_data                            ; N: 'UI_get_ex_data'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_set_default_method                     ; N: 'UI_set_default_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_default_method                     ; N: 'UI_get_default_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_method                             ; N: 'UI_get_method'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_set_method                             ; N: 'UI_set_method'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_OpenSSL                                ; N: 'UI_OpenSSL'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_null                                   ; N: 'UI_null'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_create_method                          ; N: 'UI_create_method'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_destroy_method                         ; N: 'UI_destroy_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_opener                      ; N: 'UI_method_set_opener'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_writer                      ; N: 'UI_method_set_writer'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_flusher                     ; N: 'UI_method_set_flusher'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_reader                      ; N: 'UI_method_set_reader'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_closer                      ; N: 'UI_method_set_closer'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_data_duplicator             ; N: 'UI_method_set_data_duplicator'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_prompt_constructor          ; N: 'UI_method_set_prompt_constructor'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_set_ex_data                     ; N: 'UI_method_set_ex_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_opener                      ; N: 'UI_method_get_opener'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_writer                      ; N: 'UI_method_get_writer'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_flusher                     ; N: 'UI_method_get_flusher'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_reader                      ; N: 'UI_method_get_reader'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_closer                      ; N: 'UI_method_get_closer'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_prompt_constructor          ; N: 'UI_method_get_prompt_constructor'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_data_duplicator             ; N: 'UI_method_get_data_duplicator'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_data_destructor             ; N: 'UI_method_get_data_destructor'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_method_get_ex_data                     ; N: 'UI_method_get_ex_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_string_type                        ; N: 'UI_get_string_type'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_input_flags                        ; N: 'UI_get_input_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get0_output_string                     ; N: 'UI_get0_output_string'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get0_action_string                     ; N: 'UI_get0_action_string'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get0_result_string                     ; N: 'UI_get0_result_string'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_result_string_length               ; N: 'UI_get_result_string_length'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get0_test_string                       ; N: 'UI_get0_test_string'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_result_minsize                     ; N: 'UI_get_result_minsize'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_get_result_maxsize                     ; N: 'UI_get_result_maxsize'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_set_result                             ; N: 'UI_set_result'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_set_result_ex                          ; N: 'UI_set_result_ex'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_UTIL_read_pw_string                    ; N: 'UI_UTIL_read_pw_string'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_UTIL_read_pw                           ; N: 'UI_UTIL_read_pw'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@UI_UTIL_wrap_read_pem_callback            ; N: 'UI_UTIL_wrap_read_pem_callback'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_put_error                             ; N: 'ERR_put_error'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_set_error_data                        ; N: 'ERR_set_error_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_get_error                             ; N: 'ERR_get_error'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_get_error_line                        ; N: 'ERR_get_error_line'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_get_error_line_data                   ; N: 'ERR_get_error_line_data'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_peek_error                            ; N: 'ERR_peek_error'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_peek_error_line                       ; N: 'ERR_peek_error_line'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_peek_error_line_data                  ; N: 'ERR_peek_error_line_data'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_peek_last_error                       ; N: 'ERR_peek_last_error'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_peek_last_error_line                  ; N: 'ERR_peek_last_error_line'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_peek_last_error_line_data             ; N: 'ERR_peek_last_error_line_data'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_clear_error                           ; N: 'ERR_clear_error'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_error_string                          ; N: 'ERR_error_string'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_error_string_n                        ; N: 'ERR_error_string_n'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_lib_error_string                      ; N: 'ERR_lib_error_string'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_func_error_string                     ; N: 'ERR_func_error_string'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_reason_error_string                   ; N: 'ERR_reason_error_string'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_print_errors_cb                       ; N: 'ERR_print_errors_cb'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_print_errors_fp                       ; N: 'ERR_print_errors_fp'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_print_errors                          ; N: 'ERR_print_errors'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_add_error_data                        ; N: 'ERR_add_error_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_add_error_vdata                       ; N: 'ERR_add_error_vdata'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_strings                          ; N: 'ERR_load_strings'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_strings_const                    ; N: 'ERR_load_strings_const'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_unload_strings                        ; N: 'ERR_unload_strings'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_ERR_strings                      ; N: 'ERR_load_ERR_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_remove_thread_state                   ; N: 'ERR_remove_thread_state'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_remove_state                          ; N: 'ERR_remove_state'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_get_state                             ; N: 'ERR_get_state'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_get_next_error_library                ; N: 'ERR_get_next_error_library'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_set_mark                              ; N: 'ERR_set_mark'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_pop_to_mark                           ; N: 'ERR_pop_to_mark'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_clear_last_mark                       ; N: 'ERR_clear_last_mark'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_ENGINE_strings                   ; N: 'ERR_load_ENGINE_strings'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_first                          ; N: 'ENGINE_get_first'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_last                           ; N: 'ENGINE_get_last'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_next                           ; N: 'ENGINE_get_next'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_prev                           ; N: 'ENGINE_get_prev'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_add                                ; N: 'ENGINE_add'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_remove                             ; N: 'ENGINE_remove'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_by_id                              ; N: 'ENGINE_by_id'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_load_builtin_engines               ; N: 'ENGINE_load_builtin_engines'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_table_flags                    ; N: 'ENGINE_get_table_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_table_flags                    ; N: 'ENGINE_set_table_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_RSA                       ; N: 'ENGINE_register_RSA'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_RSA                     ; N: 'ENGINE_unregister_RSA'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_RSA                   ; N: 'ENGINE_register_all_RSA'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_DSA                       ; N: 'ENGINE_register_DSA'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_DSA                     ; N: 'ENGINE_unregister_DSA'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_DSA                   ; N: 'ENGINE_register_all_DSA'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_EC                        ; N: 'ENGINE_register_EC'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_EC                      ; N: 'ENGINE_unregister_EC'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_EC                    ; N: 'ENGINE_register_all_EC'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_DH                        ; N: 'ENGINE_register_DH'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_DH                      ; N: 'ENGINE_unregister_DH'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_DH                    ; N: 'ENGINE_register_all_DH'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_RAND                      ; N: 'ENGINE_register_RAND'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_RAND                    ; N: 'ENGINE_unregister_RAND'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_RAND                  ; N: 'ENGINE_register_all_RAND'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_ciphers                   ; N: 'ENGINE_register_ciphers'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_ciphers                 ; N: 'ENGINE_unregister_ciphers'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_ciphers               ; N: 'ENGINE_register_all_ciphers'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_digests                   ; N: 'ENGINE_register_digests'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_digests                 ; N: 'ENGINE_unregister_digests'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_digests               ; N: 'ENGINE_register_all_digests'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_pkey_meths                ; N: 'ENGINE_register_pkey_meths'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_pkey_meths              ; N: 'ENGINE_unregister_pkey_meths'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_pkey_meths            ; N: 'ENGINE_register_all_pkey_meths'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_pkey_asn1_meths           ; N: 'ENGINE_register_pkey_asn1_meths'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_unregister_pkey_asn1_meths         ; N: 'ENGINE_unregister_pkey_asn1_meths'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_pkey_asn1_meths       ; N: 'ENGINE_register_all_pkey_asn1_meths'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_complete                  ; N: 'ENGINE_register_complete'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_register_all_complete              ; N: 'ENGINE_register_all_complete'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_ctrl                               ; N: 'ENGINE_ctrl'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_cmd_is_executable                  ; N: 'ENGINE_cmd_is_executable'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_ctrl_cmd                           ; N: 'ENGINE_ctrl_cmd'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_ctrl_cmd_string                    ; N: 'ENGINE_ctrl_cmd_string'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_new                                ; N: 'ENGINE_new'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_free                               ; N: 'ENGINE_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_up_ref                             ; N: 'ENGINE_up_ref'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_id                             ; N: 'ENGINE_set_id'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_name                           ; N: 'ENGINE_set_name'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_RSA                            ; N: 'ENGINE_set_RSA'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_DSA                            ; N: 'ENGINE_set_DSA'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_EC                             ; N: 'ENGINE_set_EC'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_DH                             ; N: 'ENGINE_set_DH'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_RAND                           ; N: 'ENGINE_set_RAND'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_destroy_function               ; N: 'ENGINE_set_destroy_function'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_init_function                  ; N: 'ENGINE_set_init_function'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_finish_function                ; N: 'ENGINE_set_finish_function'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_ctrl_function                  ; N: 'ENGINE_set_ctrl_function'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_load_privkey_function          ; N: 'ENGINE_set_load_privkey_function'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_load_pubkey_function           ; N: 'ENGINE_set_load_pubkey_function'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_load_ssl_client_cert_function  ; N: 'ENGINE_set_load_ssl_client_cert_function'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_ciphers                        ; N: 'ENGINE_set_ciphers'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_digests                        ; N: 'ENGINE_set_digests'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_pkey_meths                     ; N: 'ENGINE_set_pkey_meths'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_pkey_asn1_meths                ; N: 'ENGINE_set_pkey_asn1_meths'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_flags                          ; N: 'ENGINE_set_flags'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_cmd_defns                      ; N: 'ENGINE_set_cmd_defns'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_ex_data                        ; N: 'ENGINE_set_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_ex_data                        ; N: 'ENGINE_get_ex_data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_id                             ; N: 'ENGINE_get_id'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_name                           ; N: 'ENGINE_get_name'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_RSA                            ; N: 'ENGINE_get_RSA'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_DSA                            ; N: 'ENGINE_get_DSA'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_EC                             ; N: 'ENGINE_get_EC'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_DH                             ; N: 'ENGINE_get_DH'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_RAND                           ; N: 'ENGINE_get_RAND'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_destroy_function               ; N: 'ENGINE_get_destroy_function'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_init_function                  ; N: 'ENGINE_get_init_function'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_finish_function                ; N: 'ENGINE_get_finish_function'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_ctrl_function                  ; N: 'ENGINE_get_ctrl_function'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_load_privkey_function          ; N: 'ENGINE_get_load_privkey_function'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_load_pubkey_function           ; N: 'ENGINE_get_load_pubkey_function'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_ssl_client_cert_function       ; N: 'ENGINE_get_ssl_client_cert_function'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_ciphers                        ; N: 'ENGINE_get_ciphers'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_digests                        ; N: 'ENGINE_get_digests'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_meths                     ; N: 'ENGINE_get_pkey_meths'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_asn1_meths                ; N: 'ENGINE_get_pkey_asn1_meths'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_cipher                         ; N: 'ENGINE_get_cipher'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_digest                         ; N: 'ENGINE_get_digest'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_meth                      ; N: 'ENGINE_get_pkey_meth'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_asn1_meth                 ; N: 'ENGINE_get_pkey_asn1_meth'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_asn1_meth_str             ; N: 'ENGINE_get_pkey_asn1_meth_str'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_pkey_asn1_find_str                 ; N: 'ENGINE_pkey_asn1_find_str'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_cmd_defns                      ; N: 'ENGINE_get_cmd_defns'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_flags                          ; N: 'ENGINE_get_flags'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_init                               ; N: 'ENGINE_init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_finish                             ; N: 'ENGINE_finish'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_load_private_key                   ; N: 'ENGINE_load_private_key'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_load_public_key                    ; N: 'ENGINE_load_public_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_load_ssl_client_cert               ; N: 'ENGINE_load_ssl_client_cert'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_default_RSA                    ; N: 'ENGINE_get_default_RSA'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_default_DSA                    ; N: 'ENGINE_get_default_DSA'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_default_EC                     ; N: 'ENGINE_get_default_EC'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_default_DH                     ; N: 'ENGINE_get_default_DH'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_default_RAND                   ; N: 'ENGINE_get_default_RAND'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_cipher_engine                  ; N: 'ENGINE_get_cipher_engine'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_digest_engine                  ; N: 'ENGINE_get_digest_engine'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_meth_engine               ; N: 'ENGINE_get_pkey_meth_engine'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_pkey_asn1_meth_engine          ; N: 'ENGINE_get_pkey_asn1_meth_engine'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_RSA                    ; N: 'ENGINE_set_default_RSA'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_string                 ; N: 'ENGINE_set_default_string'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_DSA                    ; N: 'ENGINE_set_default_DSA'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_EC                     ; N: 'ENGINE_set_default_EC'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_DH                     ; N: 'ENGINE_set_default_DH'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_RAND                   ; N: 'ENGINE_set_default_RAND'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_ciphers                ; N: 'ENGINE_set_default_ciphers'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_digests                ; N: 'ENGINE_set_default_digests'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_pkey_meths             ; N: 'ENGINE_set_default_pkey_meths'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default_pkey_asn1_meths        ; N: 'ENGINE_set_default_pkey_asn1_meths'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_set_default                        ; N: 'ENGINE_set_default'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_add_conf_module                    ; N: 'ENGINE_add_conf_module'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ENGINE_get_static_state                   ; N: 'ENGINE_get_static_state'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_size                                 ; N: 'HMAC_size'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_CTX_new                              ; N: 'HMAC_CTX_new'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_CTX_reset                            ; N: 'HMAC_CTX_reset'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_CTX_free                             ; N: 'HMAC_CTX_free'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_Init                                 ; N: 'HMAC_Init'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_Init_ex                              ; N: 'HMAC_Init_ex'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_Update                               ; N: 'HMAC_Update'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_Final                                ; N: 'HMAC_Final'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC                                      ; N: 'HMAC'                                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_CTX_copy                             ; N: 'HMAC_CTX_copy'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_CTX_set_flags                        ; N: 'HMAC_CTX_set_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@HMAC_CTX_get_md                           ; N: 'HMAC_CTX_get_md'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_options                              ; N: 'IDEA_options'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_ecb_encrypt                          ; N: 'IDEA_ecb_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_set_encrypt_key                      ; N: 'IDEA_set_encrypt_key'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_set_decrypt_key                      ; N: 'IDEA_set_decrypt_key'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_cbc_encrypt                          ; N: 'IDEA_cbc_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_cfb64_encrypt                        ; N: 'IDEA_cfb64_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_ofb64_encrypt                        ; N: 'IDEA_ofb64_encrypt'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@IDEA_encrypt                              ; N: 'IDEA_encrypt'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_KDF_strings                      ; N: 'ERR_load_KDF_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD4_Init                                  ; N: 'MD4_Init'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD4_Update                                ; N: 'MD4_Update'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD4_Final                                 ; N: 'MD4_Final'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD4                                       ; N: 'MD4'                                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD4_Transform                             ; N: 'MD4_Transform'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD5_Init                                  ; N: 'MD5_Init'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD5_Update                                ; N: 'MD5_Update'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD5_Final                                 ; N: 'MD5_Final'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD5                                       ; N: 'MD5'                                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MD5_Transform                             ; N: 'MD5_Transform'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MDC2_Init                                 ; N: 'MDC2_Init'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MDC2_Update                               ; N: 'MDC2_Update'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MDC2_Final                                ; N: 'MDC2_Final'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@MDC2                                      ; N: 'MDC2'                                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cbc128_encrypt                     ; N: 'CRYPTO_cbc128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cbc128_decrypt                     ; N: 'CRYPTO_cbc128_decrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ctr128_encrypt                     ; N: 'CRYPTO_ctr128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ctr128_encrypt_ctr32               ; N: 'CRYPTO_ctr128_encrypt_ctr32'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ofb128_encrypt                     ; N: 'CRYPTO_ofb128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cfb128_encrypt                     ; N: 'CRYPTO_cfb128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cfb128_8_encrypt                   ; N: 'CRYPTO_cfb128_8_encrypt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cfb128_1_encrypt                   ; N: 'CRYPTO_cfb128_1_encrypt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cts128_encrypt_block               ; N: 'CRYPTO_cts128_encrypt_block'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cts128_encrypt                     ; N: 'CRYPTO_cts128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cts128_decrypt_block               ; N: 'CRYPTO_cts128_decrypt_block'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_cts128_decrypt                     ; N: 'CRYPTO_cts128_decrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_nistcts128_encrypt_block           ; N: 'CRYPTO_nistcts128_encrypt_block'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_nistcts128_encrypt                 ; N: 'CRYPTO_nistcts128_encrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_nistcts128_decrypt_block           ; N: 'CRYPTO_nistcts128_decrypt_block'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_nistcts128_decrypt                 ; N: 'CRYPTO_nistcts128_decrypt'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_new                         ; N: 'CRYPTO_gcm128_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_init                        ; N: 'CRYPTO_gcm128_init'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_setiv                       ; N: 'CRYPTO_gcm128_setiv'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_aad                         ; N: 'CRYPTO_gcm128_aad'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_encrypt                     ; N: 'CRYPTO_gcm128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_decrypt                     ; N: 'CRYPTO_gcm128_decrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_encrypt_ctr32               ; N: 'CRYPTO_gcm128_encrypt_ctr32'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_decrypt_ctr32               ; N: 'CRYPTO_gcm128_decrypt_ctr32'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_finish                      ; N: 'CRYPTO_gcm128_finish'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_tag                         ; N: 'CRYPTO_gcm128_tag'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_gcm128_release                     ; N: 'CRYPTO_gcm128_release'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_init                        ; N: 'CRYPTO_ccm128_init'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_setiv                       ; N: 'CRYPTO_ccm128_setiv'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_aad                         ; N: 'CRYPTO_ccm128_aad'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_encrypt                     ; N: 'CRYPTO_ccm128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_decrypt                     ; N: 'CRYPTO_ccm128_decrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_encrypt_ccm64               ; N: 'CRYPTO_ccm128_encrypt_ccm64'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_decrypt_ccm64               ; N: 'CRYPTO_ccm128_decrypt_ccm64'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ccm128_tag                         ; N: 'CRYPTO_ccm128_tag'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_xts128_encrypt                     ; N: 'CRYPTO_xts128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_128_wrap                           ; N: 'CRYPTO_128_wrap'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_128_unwrap                         ; N: 'CRYPTO_128_unwrap'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_128_wrap_pad                       ; N: 'CRYPTO_128_wrap_pad'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_128_unwrap_pad                     ; N: 'CRYPTO_128_unwrap_pad'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_new                         ; N: 'CRYPTO_ocb128_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_init                        ; N: 'CRYPTO_ocb128_init'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_copy_ctx                    ; N: 'CRYPTO_ocb128_copy_ctx'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_setiv                       ; N: 'CRYPTO_ocb128_setiv'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_aad                         ; N: 'CRYPTO_ocb128_aad'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_encrypt                     ; N: 'CRYPTO_ocb128_encrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_decrypt                     ; N: 'CRYPTO_ocb128_decrypt'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_finish                      ; N: 'CRYPTO_ocb128_finish'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_tag                         ; N: 'CRYPTO_ocb128_tag'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@CRYPTO_ocb128_cleanup                     ; N: 'CRYPTO_ocb128_cleanup'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_OCSP_strings                     ; N: 'ERR_load_OCSP_strings'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTID_dup                           ; N: 'OCSP_CERTID_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_sendreq_bio                          ; N: 'OCSP_sendreq_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_sendreq_new                          ; N: 'OCSP_sendreq_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_nbio                         ; N: 'OCSP_REQ_CTX_nbio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_sendreq_nbio                         ; N: 'OCSP_sendreq_nbio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_new                          ; N: 'OCSP_REQ_CTX_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_free                         ; N: 'OCSP_REQ_CTX_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_set_max_response_length              ; N: 'OCSP_set_max_response_length'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_i2d                          ; N: 'OCSP_REQ_CTX_i2d'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_nbio_d2i                     ; N: 'OCSP_REQ_CTX_nbio_d2i'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_get0_mem_bio                 ; N: 'OCSP_REQ_CTX_get0_mem_bio'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_http                         ; N: 'OCSP_REQ_CTX_http'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_set1_req                     ; N: 'OCSP_REQ_CTX_set1_req'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQ_CTX_add1_header                  ; N: 'OCSP_REQ_CTX_add1_header'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_cert_to_id                           ; N: 'OCSP_cert_to_id'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_cert_id_new                          ; N: 'OCSP_cert_id_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_add0_id                      ; N: 'OCSP_request_add0_id'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_add1_nonce                   ; N: 'OCSP_request_add1_nonce'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_basic_add1_nonce                     ; N: 'OCSP_basic_add1_nonce'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_check_nonce                          ; N: 'OCSP_check_nonce'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_copy_nonce                           ; N: 'OCSP_copy_nonce'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_set1_name                    ; N: 'OCSP_request_set1_name'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_add1_cert                    ; N: 'OCSP_request_add1_cert'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_sign                         ; N: 'OCSP_request_sign'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_response_status                      ; N: 'OCSP_response_status'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_response_get1_basic                  ; N: 'OCSP_response_get1_basic'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_signature                  ; N: 'OCSP_resp_get0_signature'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_tbs_sigalg                 ; N: 'OCSP_resp_get0_tbs_sigalg'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_respdata                   ; N: 'OCSP_resp_get0_respdata'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_signer                     ; N: 'OCSP_resp_get0_signer'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_count                           ; N: 'OCSP_resp_count'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0                            ; N: 'OCSP_resp_get0'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_produced_at                ; N: 'OCSP_resp_get0_produced_at'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_certs                      ; N: 'OCSP_resp_get0_certs'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get0_id                         ; N: 'OCSP_resp_get0_id'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_get1_id                         ; N: 'OCSP_resp_get1_id'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_find                            ; N: 'OCSP_resp_find'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_single_get0_status                   ; N: 'OCSP_single_get0_status'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_resp_find_status                     ; N: 'OCSP_resp_find_status'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_check_validity                       ; N: 'OCSP_check_validity'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_verify                       ; N: 'OCSP_request_verify'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_parse_url                            ; N: 'OCSP_parse_url'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_id_issuer_cmp                        ; N: 'OCSP_id_issuer_cmp'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_id_cmp                               ; N: 'OCSP_id_cmp'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_onereq_count                 ; N: 'OCSP_request_onereq_count'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_onereq_get0                  ; N: 'OCSP_request_onereq_get0'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_onereq_get0_id                       ; N: 'OCSP_onereq_get0_id'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_id_get0_info                         ; N: 'OCSP_id_get0_info'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_request_is_signed                    ; N: 'OCSP_request_is_signed'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_response_create                      ; N: 'OCSP_response_create'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_basic_add1_status                    ; N: 'OCSP_basic_add1_status'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_basic_add1_cert                      ; N: 'OCSP_basic_add1_cert'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_basic_sign                           ; N: 'OCSP_basic_sign'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_basic_sign_ctx                       ; N: 'OCSP_basic_sign_ctx'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPID_set_by_name                   ; N: 'OCSP_RESPID_set_by_name'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPID_set_by_key                    ; N: 'OCSP_RESPID_set_by_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPID_match                         ; N: 'OCSP_RESPID_match'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_crlID_new                            ; N: 'OCSP_crlID_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_accept_responses_new                 ; N: 'OCSP_accept_responses_new'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_archive_cutoff_new                   ; N: 'OCSP_archive_cutoff_new'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_url_svcloc_new                       ; N: 'OCSP_url_svcloc_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_get_ext_count                ; N: 'OCSP_REQUEST_get_ext_count'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_get_ext_by_NID               ; N: 'OCSP_REQUEST_get_ext_by_NID'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_get_ext_by_OBJ               ; N: 'OCSP_REQUEST_get_ext_by_OBJ'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_get_ext_by_critical          ; N: 'OCSP_REQUEST_get_ext_by_critical'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_get_ext                      ; N: 'OCSP_REQUEST_get_ext'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_delete_ext                   ; N: 'OCSP_REQUEST_delete_ext'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_get1_ext_d2i                 ; N: 'OCSP_REQUEST_get1_ext_d2i'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_add1_ext_i2d                 ; N: 'OCSP_REQUEST_add1_ext_i2d'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_add_ext                      ; N: 'OCSP_REQUEST_add_ext'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_get_ext_count                 ; N: 'OCSP_ONEREQ_get_ext_count'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_get_ext_by_NID                ; N: 'OCSP_ONEREQ_get_ext_by_NID'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_get_ext_by_OBJ                ; N: 'OCSP_ONEREQ_get_ext_by_OBJ'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_get_ext_by_critical           ; N: 'OCSP_ONEREQ_get_ext_by_critical'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_get_ext                       ; N: 'OCSP_ONEREQ_get_ext'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_delete_ext                    ; N: 'OCSP_ONEREQ_delete_ext'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_get1_ext_d2i                  ; N: 'OCSP_ONEREQ_get1_ext_d2i'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_add1_ext_i2d                  ; N: 'OCSP_ONEREQ_add1_ext_i2d'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_add_ext                       ; N: 'OCSP_ONEREQ_add_ext'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_get_ext_count              ; N: 'OCSP_BASICRESP_get_ext_count'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_get_ext_by_NID             ; N: 'OCSP_BASICRESP_get_ext_by_NID'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_get_ext_by_OBJ             ; N: 'OCSP_BASICRESP_get_ext_by_OBJ'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_get_ext_by_critical        ; N: 'OCSP_BASICRESP_get_ext_by_critical'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_get_ext                    ; N: 'OCSP_BASICRESP_get_ext'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_delete_ext                 ; N: 'OCSP_BASICRESP_delete_ext'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_get1_ext_d2i               ; N: 'OCSP_BASICRESP_get1_ext_d2i'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_add1_ext_i2d               ; N: 'OCSP_BASICRESP_add1_ext_i2d'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_add_ext                    ; N: 'OCSP_BASICRESP_add_ext'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get_ext_count             ; N: 'OCSP_SINGLERESP_get_ext_count'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get_ext_by_NID            ; N: 'OCSP_SINGLERESP_get_ext_by_NID'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get_ext_by_OBJ            ; N: 'OCSP_SINGLERESP_get_ext_by_OBJ'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get_ext_by_critical       ; N: 'OCSP_SINGLERESP_get_ext_by_critical'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get_ext                   ; N: 'OCSP_SINGLERESP_get_ext'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_delete_ext                ; N: 'OCSP_SINGLERESP_delete_ext'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get1_ext_d2i              ; N: 'OCSP_SINGLERESP_get1_ext_d2i'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_add1_ext_i2d              ; N: 'OCSP_SINGLERESP_add1_ext_i2d'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_add_ext                   ; N: 'OCSP_SINGLERESP_add_ext'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_get0_id                   ; N: 'OCSP_SINGLERESP_get0_id'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_new                       ; N: 'OCSP_SINGLERESP_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_free                      ; N: 'OCSP_SINGLERESP_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_SINGLERESP                       ; N: 'd2i_OCSP_SINGLERESP'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_SINGLERESP                       ; N: 'i2d_OCSP_SINGLERESP'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SINGLERESP_it                        ; N: 'OCSP_SINGLERESP_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTSTATUS_new                       ; N: 'OCSP_CERTSTATUS_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTSTATUS_free                      ; N: 'OCSP_CERTSTATUS_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_CERTSTATUS                       ; N: 'd2i_OCSP_CERTSTATUS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_CERTSTATUS                       ; N: 'i2d_OCSP_CERTSTATUS'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTSTATUS_it                        ; N: 'OCSP_CERTSTATUS_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REVOKEDINFO_new                      ; N: 'OCSP_REVOKEDINFO_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REVOKEDINFO_free                     ; N: 'OCSP_REVOKEDINFO_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_REVOKEDINFO                      ; N: 'd2i_OCSP_REVOKEDINFO'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_REVOKEDINFO                      ; N: 'i2d_OCSP_REVOKEDINFO'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REVOKEDINFO_it                       ; N: 'OCSP_REVOKEDINFO_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_new                        ; N: 'OCSP_BASICRESP_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_free                       ; N: 'OCSP_BASICRESP_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_BASICRESP                        ; N: 'd2i_OCSP_BASICRESP'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_BASICRESP                        ; N: 'i2d_OCSP_BASICRESP'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_BASICRESP_it                         ; N: 'OCSP_BASICRESP_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPDATA_new                         ; N: 'OCSP_RESPDATA_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPDATA_free                        ; N: 'OCSP_RESPDATA_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_RESPDATA                         ; N: 'd2i_OCSP_RESPDATA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_RESPDATA                         ; N: 'i2d_OCSP_RESPDATA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPDATA_it                          ; N: 'OCSP_RESPDATA_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPID_new                           ; N: 'OCSP_RESPID_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPID_free                          ; N: 'OCSP_RESPID_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_RESPID                           ; N: 'd2i_OCSP_RESPID'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_RESPID                           ; N: 'i2d_OCSP_RESPID'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPID_it                            ; N: 'OCSP_RESPID_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPONSE_new                         ; N: 'OCSP_RESPONSE_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPONSE_free                        ; N: 'OCSP_RESPONSE_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_RESPONSE                         ; N: 'd2i_OCSP_RESPONSE'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_RESPONSE                         ; N: 'i2d_OCSP_RESPONSE'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPONSE_it                          ; N: 'OCSP_RESPONSE_it'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPBYTES_new                        ; N: 'OCSP_RESPBYTES_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPBYTES_free                       ; N: 'OCSP_RESPBYTES_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_RESPBYTES                        ; N: 'd2i_OCSP_RESPBYTES'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_RESPBYTES                        ; N: 'i2d_OCSP_RESPBYTES'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPBYTES_it                         ; N: 'OCSP_RESPBYTES_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_new                           ; N: 'OCSP_ONEREQ_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_free                          ; N: 'OCSP_ONEREQ_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_ONEREQ                           ; N: 'd2i_OCSP_ONEREQ'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_ONEREQ                           ; N: 'i2d_OCSP_ONEREQ'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_ONEREQ_it                            ; N: 'OCSP_ONEREQ_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTID_new                           ; N: 'OCSP_CERTID_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTID_free                          ; N: 'OCSP_CERTID_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_CERTID                           ; N: 'd2i_OCSP_CERTID'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_CERTID                           ; N: 'i2d_OCSP_CERTID'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CERTID_it                            ; N: 'OCSP_CERTID_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_new                          ; N: 'OCSP_REQUEST_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_free                         ; N: 'OCSP_REQUEST_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_REQUEST                          ; N: 'd2i_OCSP_REQUEST'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_REQUEST                          ; N: 'i2d_OCSP_REQUEST'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_it                           ; N: 'OCSP_REQUEST_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SIGNATURE_new                        ; N: 'OCSP_SIGNATURE_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SIGNATURE_free                       ; N: 'OCSP_SIGNATURE_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_SIGNATURE                        ; N: 'd2i_OCSP_SIGNATURE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_SIGNATURE                        ; N: 'i2d_OCSP_SIGNATURE'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SIGNATURE_it                         ; N: 'OCSP_SIGNATURE_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQINFO_new                          ; N: 'OCSP_REQINFO_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQINFO_free                         ; N: 'OCSP_REQINFO_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_REQINFO                          ; N: 'd2i_OCSP_REQINFO'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_REQINFO                          ; N: 'i2d_OCSP_REQINFO'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQINFO_it                           ; N: 'OCSP_REQINFO_it'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CRLID_new                            ; N: 'OCSP_CRLID_new'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CRLID_free                           ; N: 'OCSP_CRLID_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_CRLID                            ; N: 'd2i_OCSP_CRLID'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_CRLID                            ; N: 'i2d_OCSP_CRLID'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_CRLID_it                             ; N: 'OCSP_CRLID_it'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SERVICELOC_new                       ; N: 'OCSP_SERVICELOC_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SERVICELOC_free                      ; N: 'OCSP_SERVICELOC_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_OCSP_SERVICELOC                       ; N: 'd2i_OCSP_SERVICELOC'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_OCSP_SERVICELOC                       ; N: 'i2d_OCSP_SERVICELOC'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_SERVICELOC_it                        ; N: 'OCSP_SERVICELOC_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_response_status_str                  ; N: 'OCSP_response_status_str'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_cert_status_str                      ; N: 'OCSP_cert_status_str'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_crl_reason_str                       ; N: 'OCSP_crl_reason_str'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_REQUEST_print                        ; N: 'OCSP_REQUEST_print'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_RESPONSE_print                       ; N: 'OCSP_RESPONSE_print'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OCSP_basic_verify                         ; N: 'OCSP_basic_verify'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_PKCS12_strings                   ; N: 'ERR_load_PKCS12_strings'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_get_attr                           ; N: 'PKCS12_get_attr'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_get_attr                            ; N: 'PKCS8_get_attr'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_mac_present                        ; N: 'PKCS12_mac_present'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_get0_mac                           ; N: 'PKCS12_get0_mac'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get0_attr                  ; N: 'PKCS12_SAFEBAG_get0_attr'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get0_type                  ; N: 'PKCS12_SAFEBAG_get0_type'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get_nid                    ; N: 'PKCS12_SAFEBAG_get_nid'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_bag_type                           ; N: 'PKCS12_SAFEBAG_get_nid'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@M_PKCS12_bag_type                         ; N: 'PKCS12_SAFEBAG_get_nid'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get_bag_nid                ; N: 'PKCS12_SAFEBAG_get_bag_nid'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@M_PKCS12_crl_bag_type                     ; N: 'PKCS12_SAFEBAG_get_bag_nid'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_cert_bag_type                      ; N: 'PKCS12_SAFEBAG_get_bag_nid'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get1_cert                  ; N: 'PKCS12_SAFEBAG_get1_cert'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_certbag2x509                       ; N: 'PKCS12_SAFEBAG_get1_cert'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get1_crl                   ; N: 'PKCS12_SAFEBAG_get1_crl'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_certbag2scrl                       ; N: 'PKCS12_SAFEBAG_get1_crl'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get0_safes                 ; N: 'PKCS12_SAFEBAG_get0_safes'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get0_p8inf                 ; N: 'PKCS12_SAFEBAG_get0_p8inf'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get0_pkcs8                 ; N: 'PKCS12_SAFEBAG_get0_pkcs8'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_create_cert                ; N: 'PKCS12_SAFEBAG_create_cert'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_x5092certbag                       ; N: 'PKCS12_SAFEBAG_create_cert'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_create_crl                 ; N: 'PKCS12_SAFEBAG_create_crl'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_x509crl2certbag                    ; N: 'PKCS12_SAFEBAG_create_crl'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_create0_p8inf              ; N: 'PKCS12_SAFEBAG_create0_p8inf'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_create0_pkcs8              ; N: 'PKCS12_SAFEBAG_create0_pkcs8'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_create_pkcs8_encrypt       ; N: 'PKCS12_SAFEBAG_create_pkcs8_encrypt'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_MAKE_SHKEYBAG                      ; N: 'PKCS12_SAFEBAG_create_pkcs8_encrypt'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_item_pack_safebag                  ; N: 'PKCS12_item_pack_safebag'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_decrypt                             ; N: 'PKCS8_decrypt'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_decrypt_skey                       ; N: 'PKCS12_decrypt_skey'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_encrypt                             ; N: 'PKCS8_encrypt'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_set0_pbe                            ; N: 'PKCS8_set0_pbe'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_pack_p7data                        ; N: 'PKCS12_pack_p7data'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_unpack_p7data                      ; N: 'PKCS12_unpack_p7data'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_pack_p7encdata                     ; N: 'PKCS12_pack_p7encdata'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_unpack_p7encdata                   ; N: 'PKCS12_unpack_p7encdata'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_pack_authsafes                     ; N: 'PKCS12_pack_authsafes'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_unpack_authsafes                   ; N: 'PKCS12_unpack_authsafes'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_localkeyid                     ; N: 'PKCS12_add_localkeyid'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_friendlyname_asc               ; N: 'PKCS12_add_friendlyname_asc'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_friendlyname_utf8              ; N: 'PKCS12_add_friendlyname_utf8'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_friendlyname                   ; N: 'PKCS12_add_friendlyname_utf8'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_CSPName_asc                    ; N: 'PKCS12_add_CSPName_asc'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_friendlyname_uni               ; N: 'PKCS12_add_friendlyname_uni'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS8_add_keyusage                        ; N: 'PKCS8_add_keyusage'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_get_attr_gen                       ; N: 'PKCS12_get_attr_gen'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_get_friendlyname                   ; N: 'PKCS12_get_friendlyname'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_get0_attrs                 ; N: 'PKCS12_SAFEBAG_get0_attrs'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_pbe_crypt                          ; N: 'PKCS12_pbe_crypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_item_decrypt_d2i                   ; N: 'PKCS12_item_decrypt_d2i'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_item_i2d_encrypt                   ; N: 'PKCS12_item_i2d_encrypt'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_init                               ; N: 'PKCS12_init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_key_gen_asc                        ; N: 'PKCS12_key_gen_asc'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_key_gen_uni                        ; N: 'PKCS12_key_gen_uni'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_key_gen_utf8                       ; N: 'PKCS12_key_gen_utf8'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_key_gen                            ; N: 'PKCS12_key_gen_utf8'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_PBE_keyivgen                       ; N: 'PKCS12_PBE_keyivgen'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_gen_mac                            ; N: 'PKCS12_gen_mac'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_verify_mac                         ; N: 'PKCS12_verify_mac'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_set_mac                            ; N: 'PKCS12_set_mac'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_setup_mac                          ; N: 'PKCS12_setup_mac'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_asc2uni                           ; N: 'OPENSSL_asc2uni'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_uni2asc                           ; N: 'OPENSSL_uni2asc'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_utf82uni                          ; N: 'OPENSSL_utf82uni'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_uni2utf8                          ; N: 'OPENSSL_uni2utf8'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_new                                ; N: 'PKCS12_new'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_free                               ; N: 'PKCS12_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS12                                ; N: 'd2i_PKCS12'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS12                                ; N: 'i2d_PKCS12'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_it                                 ; N: 'PKCS12_it'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_MAC_DATA_new                       ; N: 'PKCS12_MAC_DATA_new'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_MAC_DATA_free                      ; N: 'PKCS12_MAC_DATA_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS12_MAC_DATA                       ; N: 'd2i_PKCS12_MAC_DATA'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS12_MAC_DATA                       ; N: 'i2d_PKCS12_MAC_DATA'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_MAC_DATA_it                        ; N: 'PKCS12_MAC_DATA_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_new                        ; N: 'PKCS12_SAFEBAG_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_free                       ; N: 'PKCS12_SAFEBAG_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS12_SAFEBAG                        ; N: 'd2i_PKCS12_SAFEBAG'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS12_SAFEBAG                        ; N: 'i2d_PKCS12_SAFEBAG'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAG_it                         ; N: 'PKCS12_SAFEBAG_it'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_BAGS_new                           ; N: 'PKCS12_BAGS_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_BAGS_free                          ; N: 'PKCS12_BAGS_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS12_BAGS                           ; N: 'd2i_PKCS12_BAGS'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS12_BAGS                           ; N: 'i2d_PKCS12_BAGS'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_BAGS_it                            ; N: 'PKCS12_BAGS_it'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_SAFEBAGS_it                        ; N: 'PKCS12_SAFEBAGS_it'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_AUTHSAFES_it                       ; N: 'PKCS12_AUTHSAFES_it'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_PBE_add                            ; N: 'PKCS12_PBE_add'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_parse                              ; N: 'PKCS12_parse'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_create                             ; N: 'PKCS12_create'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_cert                           ; N: 'PKCS12_add_cert'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_key                            ; N: 'PKCS12_add_key'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_safe                           ; N: 'PKCS12_add_safe'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_add_safes                          ; N: 'PKCS12_add_safes'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS12_bio                            ; N: 'i2d_PKCS12_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_PKCS12_fp                             ; N: 'i2d_PKCS12_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS12_bio                            ; N: 'd2i_PKCS12_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_PKCS12_fp                             ; N: 'd2i_PKCS12_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS12_newpass                            ; N: 'PKCS12_newpass'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_new                             ; N: 'RAND_DRBG_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_secure_new                      ; N: 'RAND_DRBG_secure_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set                             ; N: 'RAND_DRBG_set'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set_defaults                    ; N: 'RAND_DRBG_set_defaults'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_instantiate                     ; N: 'RAND_DRBG_instantiate'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_uninstantiate                   ; N: 'RAND_DRBG_uninstantiate'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_free                            ; N: 'RAND_DRBG_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_reseed                          ; N: 'RAND_DRBG_reseed'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_generate                        ; N: 'RAND_DRBG_generate'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_bytes                           ; N: 'RAND_DRBG_bytes'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set_reseed_interval             ; N: 'RAND_DRBG_set_reseed_interval'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set_reseed_time_interval        ; N: 'RAND_DRBG_set_reseed_time_interval'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set_reseed_defaults             ; N: 'RAND_DRBG_set_reseed_defaults'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_get0_master                     ; N: 'RAND_DRBG_get0_master'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_get0_public                     ; N: 'RAND_DRBG_get0_public'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_get0_private                    ; N: 'RAND_DRBG_get0_private'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set_ex_data                     ; N: 'RAND_DRBG_set_ex_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_get_ex_data                     ; N: 'RAND_DRBG_get_ex_data'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RAND_DRBG_set_callbacks                   ; N: 'RAND_DRBG_set_callbacks'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_set_key                               ; N: 'RC2_set_key'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_ecb_encrypt                           ; N: 'RC2_ecb_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_encrypt                               ; N: 'RC2_encrypt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_decrypt                               ; N: 'RC2_decrypt'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_cbc_encrypt                           ; N: 'RC2_cbc_encrypt'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_cfb64_encrypt                         ; N: 'RC2_cfb64_encrypt'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC2_ofb64_encrypt                         ; N: 'RC2_ofb64_encrypt'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC4_options                               ; N: 'RC4_options'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC4_set_key                               ; N: 'RC4_set_key'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RC4                                       ; N: 'RC4'                                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RIPEMD160_Init                            ; N: 'RIPEMD160_Init'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RIPEMD160_Update                          ; N: 'RIPEMD160_Update'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RIPEMD160_Final                           ; N: 'RIPEMD160_Final'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RIPEMD160                                 ; N: 'RIPEMD160'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@RIPEMD160_Transform                       ; N: 'RIPEMD160_Transform'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_set_key                              ; N: 'SEED_set_key'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_encrypt                              ; N: 'SEED_encrypt'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_decrypt                              ; N: 'SEED_decrypt'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_ecb_encrypt                          ; N: 'SEED_ecb_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_cbc_encrypt                          ; N: 'SEED_cbc_encrypt'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_cfb128_encrypt                       ; N: 'SEED_cfb128_encrypt'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SEED_ofb128_encrypt                       ; N: 'SEED_ofb128_encrypt'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_user_pwd_free                         ; N: 'SRP_user_pwd_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_VBASE_new                             ; N: 'SRP_VBASE_new'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_VBASE_free                            ; N: 'SRP_VBASE_free'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_VBASE_init                            ; N: 'SRP_VBASE_init'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_VBASE_get_by_user                     ; N: 'SRP_VBASE_get_by_user'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_VBASE_get1_by_user                    ; N: 'SRP_VBASE_get1_by_user'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_create_verifier                       ; N: 'SRP_create_verifier'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_create_verifier_BN                    ; N: 'SRP_create_verifier_BN'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_check_known_gN_param                  ; N: 'SRP_check_known_gN_param'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_get_default_gN                        ; N: 'SRP_get_default_gN'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_server_key                       ; N: 'SRP_Calc_server_key'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_B                                ; N: 'SRP_Calc_B'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Verify_A_mod_N                        ; N: 'SRP_Verify_A_mod_N'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_u                                ; N: 'SRP_Calc_u'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_x                                ; N: 'SRP_Calc_x'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_A                                ; N: 'SRP_Calc_A'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_client_key                       ; N: 'SRP_Calc_client_key'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Verify_B_mod_N                        ; N: 'SRP_Verify_B_mod_N'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_listen                             ; N: 'DTLSv1_listen'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLS_set_timer_cb                         ; N: 'DTLS_set_timer_cb'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_OSSL_STORE_strings               ; N: 'ERR_load_OSSL_STORE_strings'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_open                           ; N: 'OSSL_STORE_open'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_ctrl                           ; N: 'OSSL_STORE_ctrl'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_vctrl                          ; N: 'OSSL_STORE_vctrl'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_load                           ; N: 'OSSL_STORE_load'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_eof                            ; N: 'OSSL_STORE_eof'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_error                          ; N: 'OSSL_STORE_error'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_close                          ; N: 'OSSL_STORE_close'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_new_NAME                  ; N: 'OSSL_STORE_INFO_new_NAME'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_set0_NAME_description     ; N: 'OSSL_STORE_INFO_set0_NAME_description'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_new_PARAMS                ; N: 'OSSL_STORE_INFO_new_PARAMS'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_new_PKEY                  ; N: 'OSSL_STORE_INFO_new_PKEY'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_new_CERT                  ; N: 'OSSL_STORE_INFO_new_CERT'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_new_CRL                   ; N: 'OSSL_STORE_INFO_new_CRL'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get_type                  ; N: 'OSSL_STORE_INFO_get_type'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get0_NAME                 ; N: 'OSSL_STORE_INFO_get0_NAME'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get1_NAME                 ; N: 'OSSL_STORE_INFO_get1_NAME'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get0_NAME_description     ; N: 'OSSL_STORE_INFO_get0_NAME_description'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get1_NAME_description     ; N: 'OSSL_STORE_INFO_get1_NAME_description'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get0_PARAMS               ; N: 'OSSL_STORE_INFO_get0_PARAMS'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get1_PARAMS               ; N: 'OSSL_STORE_INFO_get1_PARAMS'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get0_PKEY                 ; N: 'OSSL_STORE_INFO_get0_PKEY'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get1_PKEY                 ; N: 'OSSL_STORE_INFO_get1_PKEY'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get0_CERT                 ; N: 'OSSL_STORE_INFO_get0_CERT'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get1_CERT                 ; N: 'OSSL_STORE_INFO_get1_CERT'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get0_CRL                  ; N: 'OSSL_STORE_INFO_get0_CRL'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_get1_CRL                  ; N: 'OSSL_STORE_INFO_get1_CRL'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_type_string               ; N: 'OSSL_STORE_INFO_type_string'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_INFO_free                      ; N: 'OSSL_STORE_INFO_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_supports_search                ; N: 'OSSL_STORE_supports_search'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_by_name                 ; N: 'OSSL_STORE_SEARCH_by_name'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_by_issuer_serial        ; N: 'OSSL_STORE_SEARCH_by_issuer_serial'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_by_key_fingerprint      ; N: 'OSSL_STORE_SEARCH_by_key_fingerprint'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_by_alias                ; N: 'OSSL_STORE_SEARCH_by_alias'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_free                    ; N: 'OSSL_STORE_SEARCH_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_get_type                ; N: 'OSSL_STORE_SEARCH_get_type'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_get0_name               ; N: 'OSSL_STORE_SEARCH_get0_name'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_get0_serial             ; N: 'OSSL_STORE_SEARCH_get0_serial'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_get0_bytes              ; N: 'OSSL_STORE_SEARCH_get0_bytes'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_get0_string             ; N: 'OSSL_STORE_SEARCH_get0_string'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_SEARCH_get0_digest             ; N: 'OSSL_STORE_SEARCH_get0_digest'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_expect                         ; N: 'OSSL_STORE_expect'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_find                           ; N: 'OSSL_STORE_find'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_new                     ; N: 'OSSL_STORE_LOADER_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_get0_engine             ; N: 'OSSL_STORE_LOADER_get0_engine'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_get0_scheme             ; N: 'OSSL_STORE_LOADER_get0_scheme'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_open                ; N: 'OSSL_STORE_LOADER_set_open'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_ctrl                ; N: 'OSSL_STORE_LOADER_set_ctrl'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_expect              ; N: 'OSSL_STORE_LOADER_set_expect'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_find                ; N: 'OSSL_STORE_LOADER_set_find'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_load                ; N: 'OSSL_STORE_LOADER_set_load'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_eof                 ; N: 'OSSL_STORE_LOADER_set_eof'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_error               ; N: 'OSSL_STORE_LOADER_set_error'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_set_close               ; N: 'OSSL_STORE_LOADER_set_close'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_LOADER_free                    ; N: 'OSSL_STORE_LOADER_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_register_loader                ; N: 'OSSL_STORE_register_loader'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_unregister_loader              ; N: 'OSSL_STORE_unregister_loader'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OSSL_STORE_do_all_loaders                 ; N: 'OSSL_STORE_do_all_loaders'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_TS_strings                       ; N: 'ERR_load_TS_strings'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_new                                ; N: 'TS_REQ_new'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_free                               ; N: 'TS_REQ_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_REQ                                ; N: 'i2d_TS_REQ'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_REQ                                ; N: 'd2i_TS_REQ'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_dup                                ; N: 'TS_REQ_dup'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_REQ_fp                             ; N: 'd2i_TS_REQ_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_REQ_fp                             ; N: 'i2d_TS_REQ_fp'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_REQ_bio                            ; N: 'd2i_TS_REQ_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_REQ_bio                            ; N: 'i2d_TS_REQ_bio'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_new                        ; N: 'TS_MSG_IMPRINT_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_free                       ; N: 'TS_MSG_IMPRINT_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_MSG_IMPRINT                        ; N: 'i2d_TS_MSG_IMPRINT'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_MSG_IMPRINT                        ; N: 'd2i_TS_MSG_IMPRINT'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_dup                        ; N: 'TS_MSG_IMPRINT_dup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_MSG_IMPRINT_fp                     ; N: 'd2i_TS_MSG_IMPRINT_fp'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_MSG_IMPRINT_fp                     ; N: 'i2d_TS_MSG_IMPRINT_fp'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_MSG_IMPRINT_bio                    ; N: 'd2i_TS_MSG_IMPRINT_bio'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_MSG_IMPRINT_bio                    ; N: 'i2d_TS_MSG_IMPRINT_bio'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_new                               ; N: 'TS_RESP_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_free                              ; N: 'TS_RESP_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_RESP                               ; N: 'i2d_TS_RESP'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_RESP                               ; N: 'd2i_TS_RESP'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PKCS7_to_TS_TST_INFO                      ; N: 'PKCS7_to_TS_TST_INFO'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_dup                               ; N: 'TS_RESP_dup'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_RESP_fp                            ; N: 'd2i_TS_RESP_fp'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_RESP_fp                            ; N: 'i2d_TS_RESP_fp'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_RESP_bio                           ; N: 'd2i_TS_RESP_bio'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_RESP_bio                           ; N: 'i2d_TS_RESP_bio'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_new                        ; N: 'TS_STATUS_INFO_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_free                       ; N: 'TS_STATUS_INFO_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_STATUS_INFO                        ; N: 'i2d_TS_STATUS_INFO'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_STATUS_INFO                        ; N: 'd2i_TS_STATUS_INFO'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_dup                        ; N: 'TS_STATUS_INFO_dup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_new                           ; N: 'TS_TST_INFO_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_free                          ; N: 'TS_TST_INFO_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_TST_INFO                           ; N: 'i2d_TS_TST_INFO'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_TST_INFO                           ; N: 'd2i_TS_TST_INFO'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_dup                           ; N: 'TS_TST_INFO_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_TST_INFO_fp                        ; N: 'd2i_TS_TST_INFO_fp'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_TST_INFO_fp                        ; N: 'i2d_TS_TST_INFO_fp'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_TST_INFO_bio                       ; N: 'd2i_TS_TST_INFO_bio'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_TST_INFO_bio                       ; N: 'i2d_TS_TST_INFO_bio'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_new                           ; N: 'TS_ACCURACY_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_free                          ; N: 'TS_ACCURACY_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_TS_ACCURACY                           ; N: 'i2d_TS_ACCURACY'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_TS_ACCURACY                           ; N: 'd2i_TS_ACCURACY'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_dup                           ; N: 'TS_ACCURACY_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_ISSUER_SERIAL_new                     ; N: 'ESS_ISSUER_SERIAL_new'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_ISSUER_SERIAL_free                    ; N: 'ESS_ISSUER_SERIAL_free'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ESS_ISSUER_SERIAL                     ; N: 'i2d_ESS_ISSUER_SERIAL'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ESS_ISSUER_SERIAL                     ; N: 'd2i_ESS_ISSUER_SERIAL'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_ISSUER_SERIAL_dup                     ; N: 'ESS_ISSUER_SERIAL_dup'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_CERT_ID_new                           ; N: 'ESS_CERT_ID_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_CERT_ID_free                          ; N: 'ESS_CERT_ID_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ESS_CERT_ID                           ; N: 'i2d_ESS_CERT_ID'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ESS_CERT_ID                           ; N: 'd2i_ESS_CERT_ID'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_CERT_ID_dup                           ; N: 'ESS_CERT_ID_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_SIGNING_CERT_new                      ; N: 'ESS_SIGNING_CERT_new'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_SIGNING_CERT_free                     ; N: 'ESS_SIGNING_CERT_free'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ESS_SIGNING_CERT                      ; N: 'i2d_ESS_SIGNING_CERT'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ESS_SIGNING_CERT                      ; N: 'd2i_ESS_SIGNING_CERT'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_SIGNING_CERT_dup                      ; N: 'ESS_SIGNING_CERT_dup'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_CERT_ID_V2_new                        ; N: 'ESS_CERT_ID_V2_new'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_CERT_ID_V2_free                       ; N: 'ESS_CERT_ID_V2_free'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ESS_CERT_ID_V2                        ; N: 'i2d_ESS_CERT_ID_V2'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ESS_CERT_ID_V2                        ; N: 'd2i_ESS_CERT_ID_V2'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_CERT_ID_V2_dup                        ; N: 'ESS_CERT_ID_V2_dup'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_SIGNING_CERT_V2_new                   ; N: 'ESS_SIGNING_CERT_V2_new'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_SIGNING_CERT_V2_free                  ; N: 'ESS_SIGNING_CERT_V2_free'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_ESS_SIGNING_CERT_V2                   ; N: 'i2d_ESS_SIGNING_CERT_V2'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_ESS_SIGNING_CERT_V2                   ; N: 'd2i_ESS_SIGNING_CERT_V2'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ESS_SIGNING_CERT_V2_dup                   ; N: 'ESS_SIGNING_CERT_V2_dup'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_set_version                        ; N: 'TS_REQ_set_version'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_version                        ; N: 'TS_REQ_get_version'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_set_status                 ; N: 'TS_STATUS_INFO_set_status'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_get0_status                ; N: 'TS_STATUS_INFO_get0_status'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_get0_text                  ; N: 'TS_STATUS_INFO_get0_text'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_get0_failure_info          ; N: 'TS_STATUS_INFO_get0_failure_info'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_set_msg_imprint                    ; N: 'TS_REQ_set_msg_imprint'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_msg_imprint                    ; N: 'TS_REQ_get_msg_imprint'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_set_algo                   ; N: 'TS_MSG_IMPRINT_set_algo'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_get_algo                   ; N: 'TS_MSG_IMPRINT_get_algo'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_set_msg                    ; N: 'TS_MSG_IMPRINT_set_msg'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_get_msg                    ; N: 'TS_MSG_IMPRINT_get_msg'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_set_policy_id                      ; N: 'TS_REQ_set_policy_id'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_policy_id                      ; N: 'TS_REQ_get_policy_id'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_set_nonce                          ; N: 'TS_REQ_set_nonce'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_nonce                          ; N: 'TS_REQ_get_nonce'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_set_cert_req                       ; N: 'TS_REQ_set_cert_req'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_cert_req                       ; N: 'TS_REQ_get_cert_req'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_exts                           ; N: 'TS_REQ_get_exts'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_ext_free                           ; N: 'TS_REQ_ext_free'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_ext_count                      ; N: 'TS_REQ_get_ext_count'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_ext_by_NID                     ; N: 'TS_REQ_get_ext_by_NID'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_ext_by_OBJ                     ; N: 'TS_REQ_get_ext_by_OBJ'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_ext_by_critical                ; N: 'TS_REQ_get_ext_by_critical'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_ext                            ; N: 'TS_REQ_get_ext'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_delete_ext                         ; N: 'TS_REQ_delete_ext'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_add_ext                            ; N: 'TS_REQ_add_ext'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_get_ext_d2i                        ; N: 'TS_REQ_get_ext_d2i'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_print_bio                          ; N: 'TS_REQ_print_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_set_status_info                   ; N: 'TS_RESP_set_status_info'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_get_status_info                   ; N: 'TS_RESP_get_status_info'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_set_tst_info                      ; N: 'TS_RESP_set_tst_info'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_get_token                         ; N: 'TS_RESP_get_token'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_get_tst_info                      ; N: 'TS_RESP_get_tst_info'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_version                   ; N: 'TS_TST_INFO_set_version'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_version                   ; N: 'TS_TST_INFO_get_version'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_policy_id                 ; N: 'TS_TST_INFO_set_policy_id'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_policy_id                 ; N: 'TS_TST_INFO_get_policy_id'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_msg_imprint               ; N: 'TS_TST_INFO_set_msg_imprint'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_msg_imprint               ; N: 'TS_TST_INFO_get_msg_imprint'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_serial                    ; N: 'TS_TST_INFO_set_serial'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_serial                    ; N: 'TS_TST_INFO_get_serial'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_time                      ; N: 'TS_TST_INFO_set_time'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_time                      ; N: 'TS_TST_INFO_get_time'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_accuracy                  ; N: 'TS_TST_INFO_set_accuracy'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_accuracy                  ; N: 'TS_TST_INFO_get_accuracy'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_set_seconds                   ; N: 'TS_ACCURACY_set_seconds'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_get_seconds                   ; N: 'TS_ACCURACY_get_seconds'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_set_millis                    ; N: 'TS_ACCURACY_set_millis'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_get_millis                    ; N: 'TS_ACCURACY_get_millis'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_set_micros                    ; N: 'TS_ACCURACY_set_micros'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ACCURACY_get_micros                    ; N: 'TS_ACCURACY_get_micros'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_ordering                  ; N: 'TS_TST_INFO_set_ordering'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ordering                  ; N: 'TS_TST_INFO_get_ordering'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_nonce                     ; N: 'TS_TST_INFO_set_nonce'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_nonce                     ; N: 'TS_TST_INFO_get_nonce'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_set_tsa                       ; N: 'TS_TST_INFO_set_tsa'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_tsa                       ; N: 'TS_TST_INFO_get_tsa'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_exts                      ; N: 'TS_TST_INFO_get_exts'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_ext_free                      ; N: 'TS_TST_INFO_ext_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ext_count                 ; N: 'TS_TST_INFO_get_ext_count'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ext_by_NID                ; N: 'TS_TST_INFO_get_ext_by_NID'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ext_by_OBJ                ; N: 'TS_TST_INFO_get_ext_by_OBJ'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ext_by_critical           ; N: 'TS_TST_INFO_get_ext_by_critical'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ext                       ; N: 'TS_TST_INFO_get_ext'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_delete_ext                    ; N: 'TS_TST_INFO_delete_ext'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_add_ext                       ; N: 'TS_TST_INFO_add_ext'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_get_ext_d2i                   ; N: 'TS_TST_INFO_get_ext_d2i'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_new                           ; N: 'TS_RESP_CTX_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_free                          ; N: 'TS_RESP_CTX_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_signer_cert               ; N: 'TS_RESP_CTX_set_signer_cert'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_signer_key                ; N: 'TS_RESP_CTX_set_signer_key'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_signer_digest             ; N: 'TS_RESP_CTX_set_signer_digest'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_ess_cert_id_digest        ; N: 'TS_RESP_CTX_set_ess_cert_id_digest'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_def_policy                ; N: 'TS_RESP_CTX_set_def_policy'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_certs                     ; N: 'TS_RESP_CTX_set_certs'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_add_policy                    ; N: 'TS_RESP_CTX_add_policy'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_add_md                        ; N: 'TS_RESP_CTX_add_md'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_accuracy                  ; N: 'TS_RESP_CTX_set_accuracy'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_clock_precision_digits    ; N: 'TS_RESP_CTX_set_clock_precision_digits'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_add_flags                     ; N: 'TS_RESP_CTX_add_flags'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_serial_cb                 ; N: 'TS_RESP_CTX_set_serial_cb'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_time_cb                   ; N: 'TS_RESP_CTX_set_time_cb'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_extension_cb              ; N: 'TS_RESP_CTX_set_extension_cb'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_status_info               ; N: 'TS_RESP_CTX_set_status_info'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_set_status_info_cond          ; N: 'TS_RESP_CTX_set_status_info_cond'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_add_failure_info              ; N: 'TS_RESP_CTX_add_failure_info'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_get_request                   ; N: 'TS_RESP_CTX_get_request'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_CTX_get_tst_info                  ; N: 'TS_RESP_CTX_get_tst_info'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_create_response                   ; N: 'TS_RESP_create_response'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_verify_signature                  ; N: 'TS_RESP_verify_signature'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_verify_response                   ; N: 'TS_RESP_verify_response'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_verify_token                      ; N: 'TS_RESP_verify_token'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_new                         ; N: 'TS_VERIFY_CTX_new'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_init                        ; N: 'TS_VERIFY_CTX_init'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_free                        ; N: 'TS_VERIFY_CTX_free'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_cleanup                     ; N: 'TS_VERIFY_CTX_cleanup'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_set_flags                   ; N: 'TS_VERIFY_CTX_set_flags'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_add_flags                   ; N: 'TS_VERIFY_CTX_add_flags'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_set_data                    ; N: 'TS_VERIFY_CTX_set_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_set_imprint                 ; N: 'TS_VERIFY_CTX_set_imprint'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTX_set_store                   ; N: 'TS_VERIFY_CTX_set_store'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_VERIFY_CTS_set_certs                   ; N: 'TS_VERIFY_CTS_set_certs'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_REQ_to_TS_VERIFY_CTX                   ; N: 'TS_REQ_to_TS_VERIFY_CTX'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_RESP_print_bio                         ; N: 'TS_RESP_print_bio'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_STATUS_INFO_print_bio                  ; N: 'TS_STATUS_INFO_print_bio'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_TST_INFO_print_bio                     ; N: 'TS_TST_INFO_print_bio'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ASN1_INTEGER_print_bio                 ; N: 'TS_ASN1_INTEGER_print_bio'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_OBJ_print_bio                          ; N: 'TS_OBJ_print_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_ext_print_bio                          ; N: 'TS_ext_print_bio'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_X509_ALGOR_print_bio                   ; N: 'TS_X509_ALGOR_print_bio'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_MSG_IMPRINT_print_bio                  ; N: 'TS_MSG_IMPRINT_print_bio'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_load_cert                         ; N: 'TS_CONF_load_cert'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_load_certs                        ; N: 'TS_CONF_load_certs'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_load_key                          ; N: 'TS_CONF_load_key'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_get_tsa_section                   ; N: 'TS_CONF_get_tsa_section'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_serial                        ; N: 'TS_CONF_set_serial'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_crypto_device                 ; N: 'TS_CONF_set_crypto_device'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_default_engine                ; N: 'TS_CONF_set_default_engine'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_signer_cert                   ; N: 'TS_CONF_set_signer_cert'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_certs                         ; N: 'TS_CONF_set_certs'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_signer_key                    ; N: 'TS_CONF_set_signer_key'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_signer_digest                 ; N: 'TS_CONF_set_signer_digest'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_def_policy                    ; N: 'TS_CONF_set_def_policy'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_policies                      ; N: 'TS_CONF_set_policies'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_digests                       ; N: 'TS_CONF_set_digests'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_accuracy                      ; N: 'TS_CONF_set_accuracy'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_clock_precision_digits        ; N: 'TS_CONF_set_clock_precision_digits'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_ordering                      ; N: 'TS_CONF_set_ordering'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_tsa_name                      ; N: 'TS_CONF_set_tsa_name'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_ess_cert_id_chain             ; N: 'TS_CONF_set_ess_cert_id_chain'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TS_CONF_set_ess_cert_id_digest            ; N: 'TS_CONF_set_ess_cert_id_digest'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TXT_DB_read                               ; N: 'TXT_DB_read'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TXT_DB_write                              ; N: 'TXT_DB_write'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TXT_DB_create_index                       ; N: 'TXT_DB_create_index'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TXT_DB_free                               ; N: 'TXT_DB_free'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TXT_DB_get_by_index                       ; N: 'TXT_DB_get_by_index'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TXT_DB_insert                             ; N: 'TXT_DB_insert'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@WHIRLPOOL_Init                            ; N: 'WHIRLPOOL_Init'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@WHIRLPOOL_Update                          ; N: 'WHIRLPOOL_Update'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@WHIRLPOOL_BitUpdate                       ; N: 'WHIRLPOOL_BitUpdate'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@WHIRLPOOL_Final                           ; N: 'WHIRLPOOL_Final'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@WHIRLPOOL                                 ; N: 'WHIRLPOOL'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX)
  );

{ Ssl Library }
type
  SSL_CTX_set_cert_verify_callback_cb = function(p1: PX509_STORE_CTX; p2: Pointer): Integer; cdecl;

type
  SSL_CTX_set_cert_cb_cb = function(ssl: PSSL; arg: Pointer): Integer; cdecl;

type
  SSL_CTX_set_srp_client_pwd_callback_cb = function(p1: PSSL; p2: Pointer): PUTF8Char; cdecl;

type
  SSL_CTX_set_srp_verify_param_callback_cb = function(p1: PSSL; p2: Pointer): Integer; cdecl;

type
  SSL_CTX_set_srp_username_callback_cb = function(p1: PSSL; p2: PInteger; p3: Pointer): Integer; cdecl;

type
  SSL_callback_ctrl_ = procedure(); cdecl;

type
  SSL_CTX_callback_ctrl_ = procedure(); cdecl;

type
  SSL_set_info_callback_cb = procedure(ssl: PSSL; vtype: Integer; val: Integer); cdecl;

type
  SSL_CTX_set_tmp_dh_callback_dh = function(ssl: PSSL; is_export: Integer; keylength: Integer): Pdh_st; cdecl;

type
  SSL_set_tmp_dh_callback_dh = function(ssl: PSSL; is_export: Integer; keylength: Integer): Pdh_st; cdecl;

type
  SSL_CTX_set_not_resumable_session_callback_cb = function(ssl: PSSL; is_forward_secure: Integer): Integer; cdecl;

type
  SSL_set_not_resumable_session_callback_cb = function(ssl: PSSL; is_forward_secure: Integer): Integer; cdecl;

type
  SSL_CTX_set_record_padding_callback_cb = function(ssl: PSSL; vtype: Integer; len: NativeUInt; arg: Pointer): UInt64; cdecl;

type
  SSL_set_record_padding_callback_cb = function(ssl: PSSL; vtype: Integer; len: NativeUInt; arg: Pointer): UInt64; cdecl;

type
  SSL_set_security_callback_cb = function(s: PSSL; ctx: PSSL_CTX; op: Integer; bits: Integer; nid: Integer; other: Pointer; ex: Pointer): Integer; cdecl;

type
  SSL_CTX_set_security_callback_cb = function(s: PSSL; ctx: PSSL_CTX; op: Integer; bits: Integer; nid: Integer; other: Pointer; ex: Pointer): Integer; cdecl;

type
  SSL_CTX_set_msg_callback_cb = procedure(write_p: Integer; version: Integer; content_type: Integer; buf: Pointer; len: NativeUInt; ssl: PSSL; arg: Pointer); cdecl;

type
  SSL_set_msg_callback_cb = procedure(write_p: Integer; version: Integer; content_type: Integer; buf: Pointer; len: NativeUInt; ssl: PSSL; arg: Pointer); cdecl;

type
  SSL_CTX_sess_set_new_cb_new_session_cb = function(ssl: Pssl_st; sess: PSSL_SESSION): Integer; cdecl;

type
  SSL_CTX_sess_set_remove_cb_remove_session_cb = procedure(ctx: Pssl_ctx_st; sess: PSSL_SESSION); cdecl;

type
  SSL_CTX_sess_set_get_cb_get_session_cb = function(ssl: Pssl_st; data: PByte; len: Integer; copy: PInteger): Pssl_session_st; cdecl;

type
  SSL_CTX_set_info_callback_cb = procedure(ssl: PSSL; vtype: Integer; val: Integer); cdecl;

type
  SSL_CTX_set_client_cert_cb_client_cert_cb = function(ssl: PSSL; x509: PPX509; pkey: PPEVP_PKEY): Integer; cdecl;

type
  SSL_CTX_set_cookie_generate_cb_app_gen_cookie_cb = function(ssl: PSSL; cookie: PByte; cookie_len: PCardinal): Integer; cdecl;

type
  SSL_CTX_set_cookie_verify_cb_app_verify_cookie_cb = function(ssl: PSSL; cookie: PByte; cookie_len: Cardinal): Integer; cdecl;

type
  SSL_CTX_set_stateless_cookie_generate_cb_gen_stateless_cookie_cb = function(ssl: PSSL; cookie: PByte; cookie_len: PNativeUInt): Integer; cdecl;

type
  SSL_CTX_set_stateless_cookie_verify_cb_verify_stateless_cookie_cb = function(ssl: PSSL; cookie: PByte; cookie_len: NativeUInt): Integer; cdecl;

type
  SSL_set_cert_cb_cb = function(ssl: PSSL; arg: Pointer): Integer; cdecl;

const
  BIO_f_ssl : function(): PBIO_METHOD; cdecl = nil;
  BIO_new_ssl : function(ctx: PSSL_CTX; client: Integer): PBIO; cdecl = nil;
  BIO_new_ssl_connect : function(ctx: PSSL_CTX): PBIO; cdecl = nil;
  BIO_new_buffer_ssl_connect : function(ctx: PSSL_CTX): PBIO; cdecl = nil;
  BIO_ssl_copy_session_id : function(vto: PBIO; from: PBIO): Integer; cdecl = nil;
  BIO_ssl_shutdown : procedure(ssl_bio: PBIO); cdecl = nil;
  DTLSv1_method : function(): PSSL_METHOD; cdecl = nil;
  DTLSv1_server_method : function(): PSSL_METHOD; cdecl = nil;
  DTLSv1_client_method : function(): PSSL_METHOD; cdecl = nil;
  DTLSv1_2_method : function(): PSSL_METHOD; cdecl = nil;
  DTLSv1_2_server_method : function(): PSSL_METHOD; cdecl = nil;
  DTLSv1_2_client_method : function(): PSSL_METHOD; cdecl = nil;
  DTLS_method : function(): PSSL_METHOD; cdecl = nil;
  DTLS_server_method : function(): PSSL_METHOD; cdecl = nil;
  DTLS_client_method : function(): PSSL_METHOD; cdecl = nil;
  DTLS_get_data_mtu : function(s: PSSL): NativeUInt; cdecl = nil;
  ERR_load_SSL_strings : function(): Integer; cdecl = nil;
  OPENSSL_cipher_name : function(rfc_name: PUTF8Char): PUTF8Char; cdecl = nil;
  OPENSSL_init_ssl : function(opts: UInt64; settings: POPENSSL_INIT_SETTINGS): Integer; cdecl = nil;
  PEM_read_bio_SSL_SESSION : function(bp: PBIO; x: PPSSL_SESSION; cb: Ppem_password_cb; u: Pointer): PSSL_SESSION; cdecl = nil;
  PEM_read_SSL_SESSION : function(fp: PPointer; x: PPSSL_SESSION; cb: Ppem_password_cb; u: Pointer): PSSL_SESSION; cdecl = nil;
  PEM_write_bio_SSL_SESSION : function(bp: PBIO; x: PSSL_SESSION): Integer; cdecl = nil;
  PEM_write_SSL_SESSION : function(fp: PPointer; x: PSSL_SESSION): Integer; cdecl = nil;
  SRP_Calc_A_param : function(s: PSSL): Integer; cdecl = nil;
  i2d_SSL_SESSION : function(vin: PSSL_SESSION; pp: PPByte): Integer; cdecl = nil;
  d2i_SSL_SESSION : function(a: PPSSL_SESSION; pp: PPByte; length: Integer): PSSL_SESSION; cdecl = nil;
  SSL_get_peer_certificate : function(s: PSSL): PX509; cdecl = nil;
  SSL_get_peer_cert_chain : function(s: PSSL): Pstack_st_X509; cdecl = nil;
  SSL_CTX_get_verify_mode : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_get_verify_depth : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_get_verify_callback : function(ctx: PSSL_CTX): SSL_verify_cb; cdecl = nil;
  SSL_CTX_set_verify : procedure(ctx: PSSL_CTX; mode: Integer; callback: SSL_verify_cb); cdecl = nil;
  SSL_CTX_set_verify_depth : procedure(ctx: PSSL_CTX; depth: Integer); cdecl = nil;
  SSL_CTX_set_cert_verify_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_set_cert_verify_callback_cb; arg: Pointer); cdecl = nil;
  SSL_CTX_set_cert_cb : procedure(c: PSSL_CTX; cb: SSL_CTX_set_cert_cb_cb; arg: Pointer); cdecl = nil;
  SSL_CTX_use_RSAPrivateKey : function(ctx: PSSL_CTX; rsa: PRSA): Integer; cdecl = nil;
  SSL_CTX_use_RSAPrivateKey_ASN1 : function(ctx: PSSL_CTX; d: PByte; len: Integer): Integer; cdecl = nil;
  SSL_CTX_use_PrivateKey : function(ctx: PSSL_CTX; pkey: PEVP_PKEY): Integer; cdecl = nil;
  SSL_CTX_use_PrivateKey_ASN1 : function(pk: Integer; ctx: PSSL_CTX; d: PByte; len: Integer): Integer; cdecl = nil;
  SSL_CTX_use_certificate : function(ctx: PSSL_CTX; x: PX509): Integer; cdecl = nil;
  SSL_CTX_use_certificate_ASN1 : function(ctx: PSSL_CTX; len: Integer; d: PByte): Integer; cdecl = nil;
  SSL_CTX_use_cert_and_key : function(ctx: PSSL_CTX; x509: PX509; privatekey: PEVP_PKEY; chain: Pstack_st_X509; voverride: Integer): Integer; cdecl = nil;
  SSL_CTX_set_default_passwd_cb : procedure(ctx: PSSL_CTX; cb: Ppem_password_cb); cdecl = nil;
  SSL_CTX_set_default_passwd_cb_userdata : procedure(ctx: PSSL_CTX; u: Pointer); cdecl = nil;
  SSL_CTX_get_default_passwd_cb : function(ctx: PSSL_CTX): Ppem_password_cb; cdecl = nil;
  SSL_CTX_get_default_passwd_cb_userdata : function(ctx: PSSL_CTX): Pointer; cdecl = nil;
  SSL_set_default_passwd_cb : procedure(s: PSSL; cb: Ppem_password_cb); cdecl = nil;
  SSL_set_default_passwd_cb_userdata : procedure(s: PSSL; u: Pointer); cdecl = nil;
  SSL_get_default_passwd_cb : function(s: PSSL): Ppem_password_cb; cdecl = nil;
  SSL_get_default_passwd_cb_userdata : function(s: PSSL): Pointer; cdecl = nil;
  SSL_CTX_check_private_key : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_check_private_key : function(ctx: PSSL): Integer; cdecl = nil;
  SSL_CTX_set_session_id_context : function(ctx: PSSL_CTX; sid_ctx: PByte; sid_ctx_len: Cardinal): Integer; cdecl = nil;
  SSL_new : function(ctx: PSSL_CTX): PSSL; cdecl = nil;
  SSL_up_ref : function(s: PSSL): Integer; cdecl = nil;
  SSL_is_dtls : function(s: PSSL): Integer; cdecl = nil;
  SSL_set_session_id_context : function(ssl: PSSL; sid_ctx: PByte; sid_ctx_len: Cardinal): Integer; cdecl = nil;
  SSL_CTX_set_purpose : function(ctx: PSSL_CTX; purpose: Integer): Integer; cdecl = nil;
  SSL_set_purpose : function(ssl: PSSL; purpose: Integer): Integer; cdecl = nil;
  SSL_CTX_set_trust : function(ctx: PSSL_CTX; trust: Integer): Integer; cdecl = nil;
  SSL_set_trust : function(ssl: PSSL; trust: Integer): Integer; cdecl = nil;
  SSL_set1_host : function(s: PSSL; hostname: PUTF8Char): Integer; cdecl = nil;
  SSL_add1_host : function(s: PSSL; hostname: PUTF8Char): Integer; cdecl = nil;
  SSL_get0_peername : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_set_hostflags : procedure(s: PSSL; flags: Cardinal); cdecl = nil;
  SSL_CTX_dane_enable : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_dane_mtype_set : function(ctx: PSSL_CTX; md: PEVP_MD; mtype: UInt8; ord: UInt8): Integer; cdecl = nil;
  SSL_dane_enable : function(s: PSSL; basedomain: PUTF8Char): Integer; cdecl = nil;
  SSL_dane_tlsa_add : function(s: PSSL; usage: UInt8; selector: UInt8; mtype: UInt8; data: PByte; dlen: NativeUInt): Integer; cdecl = nil;
  SSL_get0_dane_authority : function(s: PSSL; mcert: PPX509; mspki: PPEVP_PKEY): Integer; cdecl = nil;
  SSL_get0_dane_tlsa : function(s: PSSL; usage: PUInt8; selector: PUInt8; mtype: PUInt8; data: PPByte; dlen: PNativeUInt): Integer; cdecl = nil;
  SSL_get0_dane : function(ssl: PSSL): PSSL_DANE; cdecl = nil;
  SSL_CTX_dane_set_flags : function(ctx: PSSL_CTX; flags: Cardinal): Cardinal; cdecl = nil;
  SSL_CTX_dane_clear_flags : function(ctx: PSSL_CTX; flags: Cardinal): Cardinal; cdecl = nil;
  SSL_dane_set_flags : function(ssl: PSSL; flags: Cardinal): Cardinal; cdecl = nil;
  SSL_dane_clear_flags : function(ssl: PSSL; flags: Cardinal): Cardinal; cdecl = nil;
  SSL_CTX_set1_param : function(ctx: PSSL_CTX; vpm: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  SSL_set1_param : function(ssl: PSSL; vpm: PX509_VERIFY_PARAM): Integer; cdecl = nil;
  SSL_CTX_get0_param : function(ctx: PSSL_CTX): PX509_VERIFY_PARAM; cdecl = nil;
  SSL_get0_param : function(ssl: PSSL): PX509_VERIFY_PARAM; cdecl = nil;
  SSL_CTX_set_srp_username : function(ctx: PSSL_CTX; name: PUTF8Char): Integer; cdecl = nil;
  SSL_CTX_set_srp_password : function(ctx: PSSL_CTX; password: PUTF8Char): Integer; cdecl = nil;
  SSL_CTX_set_srp_strength : function(ctx: PSSL_CTX; strength: Integer): Integer; cdecl = nil;
  SSL_CTX_set_srp_client_pwd_callback : function(ctx: PSSL_CTX; cb: SSL_CTX_set_srp_client_pwd_callback_cb): Integer; cdecl = nil;
  SSL_CTX_set_srp_verify_param_callback : function(ctx: PSSL_CTX; cb: SSL_CTX_set_srp_verify_param_callback_cb): Integer; cdecl = nil;
  SSL_CTX_set_srp_username_callback : function(ctx: PSSL_CTX; cb: SSL_CTX_set_srp_username_callback_cb): Integer; cdecl = nil;
  SSL_CTX_set_srp_cb_arg : function(ctx: PSSL_CTX; arg: Pointer): Integer; cdecl = nil;
  SSL_set_srp_server_param : function(s: PSSL; N: PBIGNUM; g: PBIGNUM; sa: PBIGNUM; v: PBIGNUM; info: PUTF8Char): Integer; cdecl = nil;
  SSL_set_srp_server_param_pw : function(s: PSSL; user: PUTF8Char; pass: PUTF8Char; grp: PUTF8Char): Integer; cdecl = nil;
  SSL_get_srp_g : function(s: PSSL): PBIGNUM; cdecl = nil;
  SSL_get_srp_N : function(s: PSSL): PBIGNUM; cdecl = nil;
  SSL_get_srp_username : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_get_srp_userinfo : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_CTX_set_client_hello_cb : procedure(c: PSSL_CTX; cb: SSL_client_hello_cb_fn; arg: Pointer); cdecl = nil;
  SSL_client_hello_isv2 : function(s: PSSL): Integer; cdecl = nil;
  SSL_client_hello_get0_legacy_version : function(s: PSSL): Cardinal; cdecl = nil;
  SSL_client_hello_get0_random : function(s: PSSL; vout: PPByte): NativeUInt; cdecl = nil;
  SSL_client_hello_get0_session_id : function(s: PSSL; vout: PPByte): NativeUInt; cdecl = nil;
  SSL_client_hello_get0_ciphers : function(s: PSSL; vout: PPByte): NativeUInt; cdecl = nil;
  SSL_client_hello_get0_compression_methods : function(s: PSSL; vout: PPByte): NativeUInt; cdecl = nil;
  SSL_client_hello_get1_extensions_present : function(s: PSSL; vout: PPInteger; outlen: PNativeUInt): Integer; cdecl = nil;
  SSL_client_hello_get0_ext : function(s: PSSL; vtype: Cardinal; vout: PPByte; outlen: PNativeUInt): Integer; cdecl = nil;
  SSL_certs_clear : procedure(s: PSSL); cdecl = nil;
  SSL_free : procedure(ssl: PSSL); cdecl = nil;
  SSL_accept : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_stateless : function(s: PSSL): Integer; cdecl = nil;
  SSL_connect : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_read : function(ssl: PSSL; buf: Pointer; num: Integer): Integer; cdecl = nil;
  SSL_read_ex : function(ssl: PSSL; buf: Pointer; num: NativeUInt; readbytes: PNativeUInt): Integer; cdecl = nil;
  SSL_read_early_data : function(s: PSSL; buf: Pointer; num: NativeUInt; readbytes: PNativeUInt): Integer; cdecl = nil;
  SSL_peek : function(ssl: PSSL; buf: Pointer; num: Integer): Integer; cdecl = nil;
  SSL_peek_ex : function(ssl: PSSL; buf: Pointer; num: NativeUInt; readbytes: PNativeUInt): Integer; cdecl = nil;
  SSL_write : function(ssl: PSSL; buf: Pointer; num: Integer): Integer; cdecl = nil;
  SSL_write_ex : function(s: PSSL; buf: Pointer; num: NativeUInt; written: PNativeUInt): Integer; cdecl = nil;
  SSL_write_early_data : function(s: PSSL; buf: Pointer; num: NativeUInt; written: PNativeUInt): Integer; cdecl = nil;
  SSL_ctrl : function(ssl: PSSL; cmd: Integer; larg: Integer; parg: Pointer): Integer; cdecl = nil;
  SSL_callback_ctrl : function(p1: PSSL; p2: Integer; p3: SSL_callback_ctrl_): Integer; cdecl = nil;
  SSL_CTX_ctrl : function(ctx: PSSL_CTX; cmd: Integer; larg: Integer; parg: Pointer): Integer; cdecl = nil;
  SSL_CTX_callback_ctrl : function(p1: PSSL_CTX; p2: Integer; p3: SSL_CTX_callback_ctrl_): Integer; cdecl = nil;
  SSL_get_early_data_status : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_error : function(s: PSSL; ret_code: Integer): Integer; cdecl = nil;
  SSL_get_version : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_CTX_set_ssl_version : function(ctx: PSSL_CTX; meth: PSSL_METHOD): Integer; cdecl = nil;
  SSL_get_ciphers : function(s: PSSL): Pstack_st_SSL_CIPHER; cdecl = nil;
  SSL_CTX_get_ciphers : function(ctx: PSSL_CTX): Pstack_st_SSL_CIPHER; cdecl = nil;
  SSL_get_client_ciphers : function(s: PSSL): Pstack_st_SSL_CIPHER; cdecl = nil;
  SSL_get1_supported_ciphers : function(s: PSSL): Pstack_st_SSL_CIPHER; cdecl = nil;
  SSL_do_handshake : function(s: PSSL): Integer; cdecl = nil;
  SSL_key_update : function(s: PSSL; updatetype: Integer): Integer; cdecl = nil;
  SSL_get_key_update_type : function(s: PSSL): Integer; cdecl = nil;
  SSL_renegotiate : function(s: PSSL): Integer; cdecl = nil;
  SSL_renegotiate_abbreviated : function(s: PSSL): Integer; cdecl = nil;
  SSL_renegotiate_pending : function(s: PSSL): Integer; cdecl = nil;
  SSL_shutdown : function(s: PSSL): Integer; cdecl = nil;
  SSL_verify_client_post_handshake : function(s: PSSL): Integer; cdecl = nil;
  SSL_CTX_set_post_handshake_auth : procedure(ctx: PSSL_CTX; val: Integer); cdecl = nil;
  SSL_set_post_handshake_auth : procedure(s: PSSL; val: Integer); cdecl = nil;
  SSL_CTX_get_ssl_method : function(ctx: PSSL_CTX): PSSL_METHOD; cdecl = nil;
  SSL_get_ssl_method : function(s: PSSL): PSSL_METHOD; cdecl = nil;
  SSL_set_ssl_method : function(s: PSSL; method: PSSL_METHOD): Integer; cdecl = nil;
  SSL_alert_type_string_long : function(value: Integer): PUTF8Char; cdecl = nil;
  SSL_alert_type_string : function(value: Integer): PUTF8Char; cdecl = nil;
  SSL_alert_desc_string_long : function(value: Integer): PUTF8Char; cdecl = nil;
  SSL_alert_desc_string : function(value: Integer): PUTF8Char; cdecl = nil;
  SSL_set0_CA_list : procedure(s: PSSL; name_list: Pstack_st_X509_NAME); cdecl = nil;
  SSL_CTX_set0_CA_list : procedure(ctx: PSSL_CTX; name_list: Pstack_st_X509_NAME); cdecl = nil;
  SSL_get0_CA_list : function(s: PSSL): Pstack_st_X509_NAME; cdecl = nil;
  SSL_CTX_get0_CA_list : function(ctx: PSSL_CTX): Pstack_st_X509_NAME; cdecl = nil;
  SSL_add1_to_CA_list : function(ssl: PSSL; x: PX509): Integer; cdecl = nil;
  SSL_CTX_add1_to_CA_list : function(ctx: PSSL_CTX; x: PX509): Integer; cdecl = nil;
  SSL_get0_peer_CA_list : function(s: PSSL): Pstack_st_X509_NAME; cdecl = nil;
  SSL_set_client_CA_list : procedure(s: PSSL; name_list: Pstack_st_X509_NAME); cdecl = nil;
  SSL_CTX_set_client_CA_list : procedure(ctx: PSSL_CTX; name_list: Pstack_st_X509_NAME); cdecl = nil;
  SSL_get_client_CA_list : function(s: PSSL): Pstack_st_X509_NAME; cdecl = nil;
  SSL_CTX_get_client_CA_list : function(s: PSSL_CTX): Pstack_st_X509_NAME; cdecl = nil;
  SSL_add_client_CA : function(ssl: PSSL; x: PX509): Integer; cdecl = nil;
  SSL_CTX_add_client_CA : function(ctx: PSSL_CTX; x: PX509): Integer; cdecl = nil;
  SSL_set_connect_state : procedure(s: PSSL); cdecl = nil;
  SSL_set_accept_state : procedure(s: PSSL); cdecl = nil;
  SSL_get_default_timeout : function(s: PSSL): Integer; cdecl = nil;
  SSL_CIPHER_description : function(p1: PSSL_CIPHER; buf: PUTF8Char; size: Integer): PUTF8Char; cdecl = nil;
  SSL_dup_CA_list : function(sk: Pstack_st_X509_NAME): Pstack_st_X509_NAME; cdecl = nil;
  SSL_dup : function(ssl: PSSL): PSSL; cdecl = nil;
  SSL_get_certificate : function(ssl: PSSL): PX509; cdecl = nil;
  SSL_get_privatekey : function(ssl: PSSL): Pevp_pkey_st; cdecl = nil;
  SSL_CTX_get0_certificate : function(ctx: PSSL_CTX): PX509; cdecl = nil;
  SSL_CTX_get0_privatekey : function(ctx: PSSL_CTX): PEVP_PKEY; cdecl = nil;
  SSL_CTX_set_quiet_shutdown : procedure(ctx: PSSL_CTX; mode: Integer); cdecl = nil;
  SSL_CTX_get_quiet_shutdown : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_set_quiet_shutdown : procedure(ssl: PSSL; mode: Integer); cdecl = nil;
  SSL_get_quiet_shutdown : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_set_shutdown : procedure(ssl: PSSL; mode: Integer); cdecl = nil;
  SSL_get_shutdown : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_version : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_client_version : function(s: PSSL): Integer; cdecl = nil;
  SSL_CTX_set_default_verify_paths : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_default_verify_dir : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_default_verify_file : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_load_verify_locations : function(ctx: PSSL_CTX; CAfile: PUTF8Char; CApath: PUTF8Char): Integer; cdecl = nil;
  SSL_get_session : function(ssl: PSSL): PSSL_SESSION; cdecl = nil;
  SSL_get0_session : function(ssl: PSSL): PSSL_SESSION; cdecl = nil;
  SSL_get1_session : function(ssl: PSSL): PSSL_SESSION; cdecl = nil;
  SSL_get_SSL_CTX : function(ssl: PSSL): PSSL_CTX; cdecl = nil;
  SSL_set_SSL_CTX : function(ssl: PSSL; ctx: PSSL_CTX): PSSL_CTX; cdecl = nil;
  SSL_set_info_callback : procedure(ssl: PSSL; cb: SSL_set_info_callback_cb); cdecl = nil;
//  SSL_get_info_callback : function(ssl: PSSLvtype: Integerval: Integerssl: PSSL): Integer; cdecl = nil;
  SSL_get_state : function(ssl: PSSL): OSSL_HANDSHAKE_STATE; cdecl = nil;
  SSL_set_verify_result : procedure(ssl: PSSL; v: Integer); cdecl = nil;
  SSL_get_verify_result : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_get0_verified_chain : function(s: PSSL): Pstack_st_X509; cdecl = nil;
  SSL_get_client_random : function(ssl: PSSL; vout: PByte; outlen: NativeUInt): NativeUInt; cdecl = nil;
  SSL_get_server_random : function(ssl: PSSL; vout: PByte; outlen: NativeUInt): NativeUInt; cdecl = nil;
  SSL_SESSION_get_master_key : function(sess: PSSL_SESSION; vout: PByte; outlen: NativeUInt): NativeUInt; cdecl = nil;
  SSL_SESSION_set1_master_key : function(sess: PSSL_SESSION; vin: PByte; len: NativeUInt): Integer; cdecl = nil;
  SSL_SESSION_get_max_fragment_length : function(sess: PSSL_SESSION): UInt8; cdecl = nil;
  SSL_set_ex_data : function(ssl: PSSL; idx: Integer; data: Pointer): Integer; cdecl = nil;
  SSL_get_ex_data : function(ssl: PSSL; idx: Integer): Pointer; cdecl = nil;
  SSL_SESSION_set_ex_data : function(ss: PSSL_SESSION; idx: Integer; data: Pointer): Integer; cdecl = nil;
  SSL_SESSION_get_ex_data : function(ss: PSSL_SESSION; idx: Integer): Pointer; cdecl = nil;
  SSL_CTX_set_ex_data : function(ssl: PSSL_CTX; idx: Integer; data: Pointer): Integer; cdecl = nil;
  SSL_CTX_get_ex_data : function(ssl: PSSL_CTX; idx: Integer): Pointer; cdecl = nil;
  SSL_get_ex_data_X509_STORE_CTX_idx : function(): Integer; cdecl = nil;
  SSL_CTX_set_default_read_buffer_len : procedure(ctx: PSSL_CTX; len: NativeUInt); cdecl = nil;
  SSL_set_default_read_buffer_len : procedure(s: PSSL; len: NativeUInt); cdecl = nil;
  SSL_CTX_set_tmp_dh_callback : procedure(ctx: PSSL_CTX; dh: SSL_CTX_set_tmp_dh_callback_dh); cdecl = nil;
  SSL_set_tmp_dh_callback : procedure(ssl: PSSL; dh: SSL_set_tmp_dh_callback_dh); cdecl = nil;
  SSL_get_current_compression : function(s: PSSL): PCOMP_METHOD; cdecl = nil;
  SSL_get_current_expansion : function(s: PSSL): PCOMP_METHOD; cdecl = nil;
  SSL_COMP_get_name : function(comp: PCOMP_METHOD): PUTF8Char; cdecl = nil;
  SSL_COMP_get0_name : function(comp: PSSL_COMP): PUTF8Char; cdecl = nil;
  SSL_COMP_get_id : function(comp: PSSL_COMP): Integer; cdecl = nil;
  SSL_COMP_get_compression_methods : function(): Pstack_st_SSL_COMP; cdecl = nil;
  SSL_COMP_set0_compression_methods : function(meths: Pstack_st_SSL_COMP): Pstack_st_SSL_COMP; cdecl = nil;
  SSL_COMP_add_compression_method : function(id: Integer; cm: PCOMP_METHOD): Integer; cdecl = nil;
  SSL_CIPHER_find : function(ssl: PSSL; ptr: PByte): PSSL_CIPHER; cdecl = nil;
  SSL_CIPHER_get_cipher_nid : function(c: PSSL_CIPHER): Integer; cdecl = nil;
  SSL_CIPHER_get_digest_nid : function(c: PSSL_CIPHER): Integer; cdecl = nil;
  SSL_bytes_to_cipher_list : function(s: PSSL; bytes: PByte; len: NativeUInt; isv2format: Integer; sk: PPstack_st_SSL_CIPHER; scsvs: PPstack_st_SSL_CIPHER): Integer; cdecl = nil;
  SSL_set_session_ticket_ext : function(s: PSSL; ext_data: Pointer; ext_len: Integer): Integer; cdecl = nil;
  SSL_set_session_ticket_ext_cb : function(s: PSSL; cb: tls_session_ticket_ext_cb_fn; arg: Pointer): Integer; cdecl = nil;
  SSL_set_session_secret_cb : function(s: PSSL; session_secret_cb: tls_session_secret_cb_fn; arg: Pointer): Integer; cdecl = nil;
  SSL_CTX_set_not_resumable_session_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_set_not_resumable_session_callback_cb); cdecl = nil;
  SSL_set_not_resumable_session_callback : procedure(ssl: PSSL; cb: SSL_set_not_resumable_session_callback_cb); cdecl = nil;
  SSL_CTX_set_record_padding_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_set_record_padding_callback_cb); cdecl = nil;
  SSL_CTX_set_record_padding_callback_arg : procedure(ctx: PSSL_CTX; arg: Pointer); cdecl = nil;
  SSL_CTX_get_record_padding_callback_arg : function(ctx: PSSL_CTX): Pointer; cdecl = nil;
  SSL_CTX_set_block_padding : function(ctx: PSSL_CTX; block_size: NativeUInt): Integer; cdecl = nil;
  SSL_set_record_padding_callback : procedure(ssl: PSSL; cb: SSL_set_record_padding_callback_cb); cdecl = nil;
  SSL_set_record_padding_callback_arg : procedure(ssl: PSSL; arg: Pointer); cdecl = nil;
  SSL_get_record_padding_callback_arg : function(ssl: PSSL): Pointer; cdecl = nil;
  SSL_set_block_padding : function(ssl: PSSL; block_size: NativeUInt): Integer; cdecl = nil;
  SSL_set_num_tickets : function(s: PSSL; num_tickets: NativeUInt): Integer; cdecl = nil;
  SSL_get_num_tickets : function(s: PSSL): NativeUInt; cdecl = nil;
  SSL_CTX_set_num_tickets : function(ctx: PSSL_CTX; num_tickets: NativeUInt): Integer; cdecl = nil;
  SSL_CTX_get_num_tickets : function(ctx: PSSL_CTX): NativeUInt; cdecl = nil;
  SSL_session_reused : function(s: PSSL): Integer; cdecl = nil;
  SSL_is_server : function(s: PSSL): Integer; cdecl = nil;
  SSL_CONF_CTX_new : function(): PSSL_CONF_CTX; cdecl = nil;
  SSL_CONF_CTX_finish : function(cctx: PSSL_CONF_CTX): Integer; cdecl = nil;
  SSL_CONF_CTX_free : procedure(cctx: PSSL_CONF_CTX); cdecl = nil;
  SSL_CONF_CTX_set_flags : function(cctx: PSSL_CONF_CTX; flags: Cardinal): Cardinal; cdecl = nil;
  SSL_CONF_CTX_clear_flags : function(cctx: PSSL_CONF_CTX; flags: Cardinal): Cardinal; cdecl = nil;
  SSL_CONF_CTX_set1_prefix : function(cctx: PSSL_CONF_CTX; pre: PUTF8Char): Integer; cdecl = nil;
  SSL_CONF_CTX_set_ssl : procedure(cctx: PSSL_CONF_CTX; ssl: PSSL); cdecl = nil;
  SSL_CONF_CTX_set_ssl_ctx : procedure(cctx: PSSL_CONF_CTX; ctx: PSSL_CTX); cdecl = nil;
  SSL_CONF_cmd : function(cctx: PSSL_CONF_CTX; cmd: PUTF8Char; value: PUTF8Char): Integer; cdecl = nil;
  SSL_CONF_cmd_argv : function(cctx: PSSL_CONF_CTX; pargc: PInteger; pargv: PPPUTF8Char): Integer; cdecl = nil;
  SSL_CONF_cmd_value_type : function(cctx: PSSL_CONF_CTX; cmd: PUTF8Char): Integer; cdecl = nil;
  SSL_add_ssl_module : procedure(); cdecl = nil;
  SSL_config : function(s: PSSL; name: PUTF8Char): Integer; cdecl = nil;
  SSL_CTX_config : function(ctx: PSSL_CTX; name: PUTF8Char): Integer; cdecl = nil;
  SSL_set_ct_validation_callback : function(s: PSSL; callback: ssl_ct_validation_cb; arg: Pointer): Integer; cdecl = nil;
  SSL_CTX_set_ct_validation_callback : function(ctx: PSSL_CTX; callback: ssl_ct_validation_cb; arg: Pointer): Integer; cdecl = nil;
  SSL_enable_ct : function(s: PSSL; validation_mode: Integer): Integer; cdecl = nil;
  SSL_CTX_enable_ct : function(ctx: PSSL_CTX; validation_mode: Integer): Integer; cdecl = nil;
  SSL_ct_is_enabled : function(s: PSSL): Integer; cdecl = nil;
  SSL_CTX_ct_is_enabled : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_get0_peer_scts : function(s: PSSL): Pstack_st_SCT; cdecl = nil;
  SSL_CTX_set_default_ctlog_list_file : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_ctlog_list_file : function(ctx: PSSL_CTX; path: PUTF8Char): Integer; cdecl = nil;
  SSL_CTX_set0_ctlog_store : procedure(ctx: PSSL_CTX; logs: PCTLOG_STORE); cdecl = nil;
  SSL_CTX_get0_ctlog_store : function(ctx: PSSL_CTX): PCTLOG_STORE; cdecl = nil;
  SSL_set_security_level : procedure(s: PSSL; level: Integer); cdecl = nil;
  SSL_get_security_level : function(s: PSSL): Integer; cdecl = nil;
  SSL_set_security_callback : procedure(s: PSSL; cb: SSL_set_security_callback_cb); cdecl = nil;
//  SSL_get_security_callback : function(s: PSSLctx: PSSL_CTXop: Integerbits: Integernid: Integerother: Pointerex: Pointers: PSSL): Integer ; cdecl = nil;
  SSL_set0_security_ex_data : procedure(s: PSSL; ex: Pointer); cdecl = nil;
  SSL_get0_security_ex_data : function(s: PSSL): Pointer; cdecl = nil;
  SSL_CTX_set_security_level : procedure(ctx: PSSL_CTX; level: Integer); cdecl = nil;
  SSL_CTX_get_security_level : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_security_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_set_security_callback_cb); cdecl = nil;
//  SSL_CTX_get_security_callback : function(s: PSSLctx: PSSL_CTXop: Integerbits: Integernid: Integerother: Pointerex: Pointerctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set0_security_ex_data : procedure(ctx: PSSL_CTX; ex: Pointer); cdecl = nil;
  SSL_CTX_get0_security_ex_data : function(ctx: PSSL_CTX): Pointer; cdecl = nil;
  SSL_free_buffers : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_alloc_buffers : function(ssl: PSSL): Integer; cdecl = nil;
  SSL_CTX_set_session_ticket_cb : function(ctx: PSSL_CTX; gen_cb: SSL_CTX_generate_session_ticket_fn; dec_cb: SSL_CTX_decrypt_session_ticket_fn; arg: Pointer): Integer; cdecl = nil;
  SSL_SESSION_set1_ticket_appdata : function(ss: PSSL_SESSION; data: Pointer; len: NativeUInt): Integer; cdecl = nil;
  SSL_SESSION_get0_ticket_appdata : function(ss: PSSL_SESSION; data: PPointer; len: PNativeUInt): Integer; cdecl = nil;
  SSL_CTX_set_allow_early_data_cb : procedure(ctx: PSSL_CTX; cb: SSL_allow_early_data_cb_fn; arg: Pointer); cdecl = nil;
  SSL_set_allow_early_data_cb : procedure(s: PSSL; cb: SSL_allow_early_data_cb_fn; arg: Pointer); cdecl = nil;
  SSL_CTX_set_tlsext_use_srtp : function(ctx: PSSL_CTX; profiles: PUTF8Char): Integer; cdecl = nil;
  SSL_set_tlsext_use_srtp : function(ssl: PSSL; profiles: PUTF8Char): Integer; cdecl = nil;
  SSL_get_srtp_profiles : function(ssl: PSSL): Pstack_st_SRTP_PROTECTION_PROFILE; cdecl = nil;
  SSL_get_selected_srtp_profile : function(s: PSSL): PSRTP_PROTECTION_PROFILE; cdecl = nil;
  SSL_CTX_set_msg_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_set_msg_callback_cb); cdecl = nil;
  SSL_set_msg_callback : procedure(ssl: PSSL; cb: SSL_set_msg_callback_cb); cdecl = nil;
  SSL_SRP_CTX_init : function(s: PSSL): Integer; cdecl = nil;
  SSL_CTX_SRP_CTX_init : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_SRP_CTX_free : function(ctx: PSSL): Integer; cdecl = nil;
  SSL_CTX_SRP_CTX_free : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_srp_server_param_with_username : function(s: PSSL; ad: PInteger): Integer; cdecl = nil;
  SSL_CTX_sessions : function(ctx: PSSL_CTX): Plhash_st_SSL_SESSION; cdecl = nil;
  SSL_CTX_sess_set_new_cb : procedure(ctx: PSSL_CTX; new_session_cb: SSL_CTX_sess_set_new_cb_new_session_cb); cdecl = nil;
//  SSL_CTX_sess_get_new_cb : function(ssl: Pssl_stsess: PSSL_SESSIONctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_sess_set_remove_cb : procedure(ctx: PSSL_CTX; remove_session_cb: SSL_CTX_sess_set_remove_cb_remove_session_cb); cdecl = nil;
//  SSL_CTX_sess_get_remove_cb : function(ctx: Pssl_ctx_stsess: PSSL_SESSIONctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_sess_set_get_cb : procedure(ctx: PSSL_CTX; get_session_cb: SSL_CTX_sess_set_get_cb_get_session_cb); cdecl = nil;
//  SSL_CTX_sess_get_get_cb : function(ssl: Pssl_stdata: PBytelen: Integercopy: PIntegerctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_info_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_set_info_callback_cb); cdecl = nil;
//  SSL_CTX_get_info_callback : function(ssl: PSSLvtype: Integerval: Integerctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_client_cert_cb : procedure(ctx: PSSL_CTX; client_cert_cb: SSL_CTX_set_client_cert_cb_client_cert_cb); cdecl = nil;
//  SSL_CTX_get_client_cert_cb : function(ssl: PSSLx509: PPX509pkey: PPEVP_PKEYctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_set_client_cert_engine : function(ctx: PSSL_CTX; e: PENGINE): Integer; cdecl = nil;
  SSL_CTX_set_cookie_generate_cb : procedure(ctx: PSSL_CTX; app_gen_cookie_cb: SSL_CTX_set_cookie_generate_cb_app_gen_cookie_cb); cdecl = nil;
  SSL_CTX_set_cookie_verify_cb : procedure(ctx: PSSL_CTX; app_verify_cookie_cb: SSL_CTX_set_cookie_verify_cb_app_verify_cookie_cb); cdecl = nil;
  SSL_CTX_set_stateless_cookie_generate_cb : procedure(ctx: PSSL_CTX; gen_stateless_cookie_cb: SSL_CTX_set_stateless_cookie_generate_cb_gen_stateless_cookie_cb); cdecl = nil;
  SSL_CTX_set_stateless_cookie_verify_cb : procedure(ctx: PSSL_CTX; verify_stateless_cookie_cb: SSL_CTX_set_stateless_cookie_verify_cb_verify_stateless_cookie_cb); cdecl = nil;
  SSL_CTX_set_next_protos_advertised_cb : procedure(s: PSSL_CTX; cb: SSL_CTX_npn_advertised_cb_func; arg: Pointer); cdecl = nil;
  SSL_CTX_set_npn_advertised_cb : procedure(s: PSSL_CTX; cb: SSL_CTX_npn_advertised_cb_func; arg: Pointer); cdecl = nil;
  SSL_CTX_set_next_proto_select_cb : procedure(s: PSSL_CTX; cb: SSL_CTX_npn_select_cb_func; arg: Pointer); cdecl = nil;
  SSL_CTX_set_npn_select_cb : procedure(s: PSSL_CTX; cb: SSL_CTX_npn_select_cb_func; arg: Pointer); cdecl = nil;
  SSL_get0_next_proto_negotiated : procedure(s: PSSL; data: PPByte; len: PCardinal); cdecl = nil;
  SSL_get0_npn_negotiated : procedure(s: PSSL; data: PPByte; len: PCardinal); cdecl = nil;
  SSL_select_next_proto : function(vout: PPByte; outlen: PByte; vin: PByte; inlen: Cardinal; client: PByte; client_len: Cardinal): Integer; cdecl = nil;
  SSL_CTX_set_alpn_protos : function(ctx: PSSL_CTX; protos: PByte; protos_len: Cardinal): Integer; cdecl = nil;
  SSL_set_alpn_protos : function(ssl: PSSL; protos: PByte; protos_len: Cardinal): Integer; cdecl = nil;
  SSL_CTX_set_alpn_select_cb : procedure(ctx: PSSL_CTX; cb: SSL_CTX_alpn_select_cb_func; arg: Pointer); cdecl = nil;
  SSL_get0_alpn_selected : procedure(ssl: PSSL; data: PPByte; len: PCardinal); cdecl = nil;
  SSL_CTX_set_psk_client_callback : procedure(ctx: PSSL_CTX; cb: SSL_psk_client_cb_func); cdecl = nil;
  SSL_set_psk_client_callback : procedure(ssl: PSSL; cb: SSL_psk_client_cb_func); cdecl = nil;
  SSL_CTX_set_psk_server_callback : procedure(ctx: PSSL_CTX; cb: SSL_psk_server_cb_func); cdecl = nil;
  SSL_set_psk_server_callback : procedure(ssl: PSSL; cb: SSL_psk_server_cb_func); cdecl = nil;
  SSL_CTX_use_psk_identity_hint : function(ctx: PSSL_CTX; identity_hint: PUTF8Char): Integer; cdecl = nil;
  SSL_use_psk_identity_hint : function(s: PSSL; identity_hint: PUTF8Char): Integer; cdecl = nil;
  SSL_get_psk_identity_hint : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_get_psk_identity : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_set_psk_find_session_callback : procedure(s: PSSL; cb: SSL_psk_find_session_cb_func); cdecl = nil;
  SSL_CTX_set_psk_find_session_callback : procedure(ctx: PSSL_CTX; cb: SSL_psk_find_session_cb_func); cdecl = nil;
  SSL_set_psk_use_session_callback : procedure(s: PSSL; cb: SSL_psk_use_session_cb_func); cdecl = nil;
  SSL_CTX_set_psk_use_session_callback : procedure(ctx: PSSL_CTX; cb: SSL_psk_use_session_cb_func); cdecl = nil;
  SSL_CTX_has_client_custom_ext : function(ctx: PSSL_CTX; ext_type: Cardinal): Integer; cdecl = nil;
  SSL_CTX_add_client_custom_ext : function(ctx: PSSL_CTX; ext_type: Cardinal; add_cb: custom_ext_add_cb; free_cb: custom_ext_free_cb; add_arg: Pointer; parse_cb: custom_ext_parse_cb; parse_arg: Pointer): Integer; cdecl = nil;
  SSL_CTX_add_server_custom_ext : function(ctx: PSSL_CTX; ext_type: Cardinal; add_cb: custom_ext_add_cb; free_cb: custom_ext_free_cb; add_arg: Pointer; parse_cb: custom_ext_parse_cb; parse_arg: Pointer): Integer; cdecl = nil;
  SSL_CTX_add_custom_ext : function(ctx: PSSL_CTX; ext_type: Cardinal; context: Cardinal; add_cb: SSL_custom_ext_add_cb_ex; free_cb: SSL_custom_ext_free_cb_ex; add_arg: Pointer; parse_cb: SSL_custom_ext_parse_cb_ex; parse_arg: Pointer): Integer; cdecl = nil;
  SSL_extension_supported : function(ext_type: Cardinal): Integer; cdecl = nil;
  SSL_CTX_set_keylog_callback : procedure(ctx: PSSL_CTX; cb: SSL_CTX_keylog_cb_func); cdecl = nil;
  SSL_CTX_get_keylog_callback : function(ctx: PSSL_CTX): SSL_CTX_keylog_cb_func; cdecl = nil;
  SSL_CTX_set_max_early_data : function(ctx: PSSL_CTX; max_early_data: UInt32): Integer; cdecl = nil;
  SSL_CTX_get_max_early_data : function(ctx: PSSL_CTX): UInt32; cdecl = nil;
  SSL_set_max_early_data : function(s: PSSL; max_early_data: UInt32): Integer; cdecl = nil;
  SSL_get_max_early_data : function(s: PSSL): UInt32; cdecl = nil;
  SSL_CTX_set_recv_max_early_data : function(ctx: PSSL_CTX; recv_max_early_data: UInt32): Integer; cdecl = nil;
  SSL_CTX_get_recv_max_early_data : function(ctx: PSSL_CTX): UInt32; cdecl = nil;
  SSL_set_recv_max_early_data : function(s: PSSL; recv_max_early_data: UInt32): Integer; cdecl = nil;
  SSL_get_recv_max_early_data : function(s: PSSL): UInt32; cdecl = nil;
  SSL_CTX_set_tlsext_max_fragment_length : function(ctx: PSSL_CTX; mode: UInt8): Integer; cdecl = nil;
  SSL_set_tlsext_max_fragment_length : function(ssl: PSSL; mode: UInt8): Integer; cdecl = nil;
  SSL_get_servername : function(s: PSSL; vtype: Integer): PUTF8Char; cdecl = nil;
  SSL_get_servername_type : function(s: PSSL): Integer; cdecl = nil;
  SSL_export_keying_material : function(s: PSSL; vout: PByte; olen: NativeUInt; vlabel: PUTF8Char; llen: NativeUInt; context: PByte; contextlen: NativeUInt; use_context: Integer): Integer; cdecl = nil;
  SSL_export_keying_material_early : function(s: PSSL; vout: PByte; olen: NativeUInt; vlabel: PUTF8Char; llen: NativeUInt; context: PByte; contextlen: NativeUInt): Integer; cdecl = nil;
  SSL_get_peer_signature_type_nid : function(s: PSSL; pnid: PInteger): Integer; cdecl = nil;
  SSL_get_signature_type_nid : function(s: PSSL; pnid: PInteger): Integer; cdecl = nil;
  SSL_get_sigalgs : function(s: PSSL; idx: Integer; psign: PInteger; phash: PInteger; psignandhash: PInteger; rsig: PByte; rhash: PByte): Integer; cdecl = nil;
  SSL_get_shared_sigalgs : function(s: PSSL; idx: Integer; psign: PInteger; phash: PInteger; psignandhash: PInteger; rsig: PByte; rhash: PByte): Integer; cdecl = nil;
  SSL_check_chain : function(s: PSSL; x: PX509; pk: PEVP_PKEY; chain: Pstack_st_X509): Integer; cdecl = nil;
  SSL_set_debug : procedure(s: PSSL; debug: Integer); cdecl = nil;
  SSL_in_init : function(s: PSSL): Integer; cdecl = nil;
  SSL_in_before : function(s: PSSL): Integer; cdecl = nil;
  SSL_is_init_finished : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_finished : function(s: PSSL; buf: Pointer; count: NativeUInt): NativeUInt; cdecl = nil;
  SSL_get_peer_finished : function(s: PSSL; buf: Pointer; count: NativeUInt): NativeUInt; cdecl = nil;
  SSL_CTX_set_cipher_list : function(p1: PSSL_CTX; str: PUTF8Char): Integer; cdecl = nil;
  SSL_CTX_new : function(meth: PSSL_METHOD): PSSL_CTX; cdecl = nil;
  SSL_CTX_up_ref : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_free : procedure(p1: PSSL_CTX); cdecl = nil;
  SSL_CTX_set_timeout : function(ctx: PSSL_CTX; t: Integer): Integer; cdecl = nil;
  SSL_CTX_get_timeout : function(ctx: PSSL_CTX): Integer; cdecl = nil;
  SSL_CTX_get_cert_store : function(p1: PSSL_CTX): PX509_STORE; cdecl = nil;
  SSL_CTX_set_cert_store : procedure(p1: PSSL_CTX; p2: PX509_STORE); cdecl = nil;
  SSL_CTX_set1_cert_store : procedure(p1: PSSL_CTX; p2: PX509_STORE); cdecl = nil;
  SSL_want : function(s: PSSL): Integer; cdecl = nil;
  SSL_clear : function(s: PSSL): Integer; cdecl = nil;
  SSL_CTX_flush_sessions : procedure(ctx: PSSL_CTX; tm: Integer); cdecl = nil;
  SSL_get_current_cipher : function(s: PSSL): PSSL_CIPHER; cdecl = nil;
  SSL_get_pending_cipher : function(s: PSSL): PSSL_CIPHER; cdecl = nil;
  SSL_CIPHER_get_bits : function(c: PSSL_CIPHER; alg_bits: PInteger): Integer; cdecl = nil;
  SSL_CIPHER_get_version : function(c: PSSL_CIPHER): PUTF8Char; cdecl = nil;
  SSL_CIPHER_get_name : function(c: PSSL_CIPHER): PUTF8Char; cdecl = nil;
  SSL_CIPHER_standard_name : function(c: PSSL_CIPHER): PUTF8Char; cdecl = nil;
  SSL_CIPHER_get_id : function(c: PSSL_CIPHER): UInt32; cdecl = nil;
  SSL_CIPHER_get_protocol_id : function(c: PSSL_CIPHER): UInt16; cdecl = nil;
  SSL_CIPHER_get_kx_nid : function(c: PSSL_CIPHER): Integer; cdecl = nil;
  SSL_CIPHER_get_auth_nid : function(c: PSSL_CIPHER): Integer; cdecl = nil;
  SSL_CIPHER_get_handshake_digest : function(c: PSSL_CIPHER): PEVP_MD; cdecl = nil;
  SSL_CIPHER_is_aead : function(c: PSSL_CIPHER): Integer; cdecl = nil;
  SSL_get_fd : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_rfd : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_wfd : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_cipher_list : function(s: PSSL; n: Integer): PUTF8Char; cdecl = nil;
  SSL_get_shared_ciphers : function(s: PSSL; buf: PUTF8Char; size: Integer): PUTF8Char; cdecl = nil;
  SSL_get_read_ahead : function(s: PSSL): Integer; cdecl = nil;
  SSL_pending : function(s: PSSL): Integer; cdecl = nil;
  SSL_has_pending : function(s: PSSL): Integer; cdecl = nil;
  SSL_set_fd : function(s: PSSL; fd: Integer): Integer; cdecl = nil;
  SSL_set_rfd : function(s: PSSL; fd: Integer): Integer; cdecl = nil;
  SSL_set_wfd : function(s: PSSL; fd: Integer): Integer; cdecl = nil;
  SSL_set0_rbio : procedure(s: PSSL; rbio: PBIO); cdecl = nil;
  SSL_set0_wbio : procedure(s: PSSL; wbio: PBIO); cdecl = nil;
  SSL_set_bio : procedure(s: PSSL; rbio: PBIO; wbio: PBIO); cdecl = nil;
  SSL_get_rbio : function(s: PSSL): PBIO; cdecl = nil;
  SSL_get_wbio : function(s: PSSL): PBIO; cdecl = nil;
  SSL_set_cipher_list : function(s: PSSL; str: PUTF8Char): Integer; cdecl = nil;
  SSL_CTX_set_ciphersuites : function(ctx: PSSL_CTX; str: PUTF8Char): Integer; cdecl = nil;
  SSL_set_ciphersuites : function(s: PSSL; str: PUTF8Char): Integer; cdecl = nil;
  SSL_set_read_ahead : procedure(s: PSSL; yes: Integer); cdecl = nil;
  SSL_get_verify_mode : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_verify_depth : function(s: PSSL): Integer; cdecl = nil;
  SSL_get_verify_callback : function(s: PSSL): SSL_verify_cb; cdecl = nil;
  SSL_set_verify : procedure(s: PSSL; mode: Integer; callback: SSL_verify_cb); cdecl = nil;
  SSL_set_verify_depth : procedure(s: PSSL; depth: Integer); cdecl = nil;
  SSL_set_cert_cb : procedure(s: PSSL; cb: SSL_set_cert_cb_cb; arg: Pointer); cdecl = nil;
  SSL_use_RSAPrivateKey : function(ssl: PSSL; rsa: PRSA): Integer; cdecl = nil;
  SSL_use_RSAPrivateKey_ASN1 : function(ssl: PSSL; d: PByte; len: Integer): Integer; cdecl = nil;
  SSL_use_PrivateKey : function(ssl: PSSL; pkey: PEVP_PKEY): Integer; cdecl = nil;
  SSL_use_PrivateKey_ASN1 : function(pk: Integer; ssl: PSSL; d: PByte; len: Integer): Integer; cdecl = nil;
  SSL_use_certificate : function(ssl: PSSL; x: PX509): Integer; cdecl = nil;
  SSL_use_certificate_ASN1 : function(ssl: PSSL; d: PByte; len: Integer): Integer; cdecl = nil;
  SSL_use_cert_and_key : function(ssl: PSSL; x509: PX509; privatekey: PEVP_PKEY; chain: Pstack_st_X509; voverride: Integer): Integer; cdecl = nil;
  SSL_CTX_use_serverinfo : function(ctx: PSSL_CTX; serverinfo: PByte; serverinfo_length: NativeUInt): Integer; cdecl = nil;
  SSL_CTX_use_serverinfo_ex : function(ctx: PSSL_CTX; version: Cardinal; serverinfo: PByte; serverinfo_length: NativeUInt): Integer; cdecl = nil;
  SSL_CTX_use_serverinfo_file : function(ctx: PSSL_CTX; vfile: PUTF8Char): Integer; cdecl = nil;
  SSL_use_RSAPrivateKey_file : function(ssl: PSSL; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  SSL_use_PrivateKey_file : function(ssl: PSSL; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  SSL_use_certificate_file : function(ssl: PSSL; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  SSL_CTX_use_RSAPrivateKey_file : function(ctx: PSSL_CTX; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  SSL_CTX_use_PrivateKey_file : function(ctx: PSSL_CTX; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  SSL_CTX_use_certificate_file : function(ctx: PSSL_CTX; vfile: PUTF8Char; vtype: Integer): Integer; cdecl = nil;
  SSL_CTX_use_certificate_chain_file : function(ctx: PSSL_CTX; vfile: PUTF8Char): Integer; cdecl = nil;
  SSL_use_certificate_chain_file : function(ssl: PSSL; vfile: PUTF8Char): Integer; cdecl = nil;
  SSL_load_client_CA_file : function(vfile: PUTF8Char): Pstack_st_X509_NAME; cdecl = nil;
  SSL_add_file_cert_subjects_to_stack : function(stackCAs: Pstack_st_X509_NAME; vfile: PUTF8Char): Integer; cdecl = nil;
  SSL_add_dir_cert_subjects_to_stack : function(stackCAs: Pstack_st_X509_NAME; dir: PUTF8Char): Integer; cdecl = nil;
  SSL_state_string : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_rstate_string : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_state_string_long : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_rstate_string_long : function(s: PSSL): PUTF8Char; cdecl = nil;
  SSL_SESSION_get_time : function(s: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_set_time : function(s: PSSL_SESSION; t: Integer): Integer; cdecl = nil;
  SSL_SESSION_get_timeout : function(s: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_set_timeout : function(s: PSSL_SESSION; t: Integer): Integer; cdecl = nil;
  SSL_SESSION_get_protocol_version : function(s: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_set_protocol_version : function(s: PSSL_SESSION; version: Integer): Integer; cdecl = nil;
  SSL_SESSION_get0_hostname : function(s: PSSL_SESSION): PUTF8Char; cdecl = nil;
  SSL_SESSION_set1_hostname : function(s: PSSL_SESSION; hostname: PUTF8Char): Integer; cdecl = nil;
  SSL_SESSION_get0_alpn_selected : procedure(s: PSSL_SESSION; alpn: PPByte; len: PNativeUInt); cdecl = nil;
  SSL_SESSION_set1_alpn_selected : function(s: PSSL_SESSION; alpn: PByte; len: NativeUInt): Integer; cdecl = nil;
  SSL_SESSION_get0_cipher : function(s: PSSL_SESSION): PSSL_CIPHER; cdecl = nil;
  SSL_SESSION_set_cipher : function(s: PSSL_SESSION; cipher: PSSL_CIPHER): Integer; cdecl = nil;
  SSL_SESSION_has_ticket : function(s: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_get_ticket_lifetime_hint : function(s: PSSL_SESSION): Cardinal; cdecl = nil;
  SSL_SESSION_get0_ticket : procedure(s: PSSL_SESSION; tick: PPByte; len: PNativeUInt); cdecl = nil;
  SSL_SESSION_get_max_early_data : function(s: PSSL_SESSION): UInt32; cdecl = nil;
  SSL_SESSION_set_max_early_data : function(s: PSSL_SESSION; max_early_data: UInt32): Integer; cdecl = nil;
  SSL_copy_session_id : function(vto: PSSL; from: PSSL): Integer; cdecl = nil;
  SSL_SESSION_get0_peer : function(s: PSSL_SESSION): PX509; cdecl = nil;
  SSL_SESSION_set1_id_context : function(s: PSSL_SESSION; sid_ctx: PByte; sid_ctx_len: Cardinal): Integer; cdecl = nil;
  SSL_SESSION_set1_id : function(s: PSSL_SESSION; sid: PByte; sid_len: Cardinal): Integer; cdecl = nil;
  SSL_SESSION_is_resumable : function(s: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_new : function(): PSSL_SESSION; cdecl = nil;
  SSL_SESSION_dup : function(src: PSSL_SESSION): PSSL_SESSION; cdecl = nil;
  SSL_SESSION_get_id : function(s: PSSL_SESSION; len: PCardinal): PByte; cdecl = nil;
  SSL_SESSION_get0_id_context : function(s: PSSL_SESSION; len: PCardinal): PByte; cdecl = nil;
  SSL_SESSION_get_compress_id : function(s: PSSL_SESSION): Cardinal; cdecl = nil;
  SSL_SESSION_print_fp : function(fp: PPointer; ses: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_print : function(fp: PBIO; ses: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_print_keylog : function(bp: PBIO; x: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_up_ref : function(ses: PSSL_SESSION): Integer; cdecl = nil;
  SSL_SESSION_free : procedure(ses: PSSL_SESSION); cdecl = nil;
  SSL_set_session : function(vto: PSSL; session: PSSL_SESSION): Integer; cdecl = nil;
  SSL_CTX_add_session : function(ctx: PSSL_CTX; session: PSSL_SESSION): Integer; cdecl = nil;
  SSL_CTX_remove_session : function(ctx: PSSL_CTX; session: PSSL_SESSION): Integer; cdecl = nil;
  SSL_CTX_set_generate_session_id : function(ctx: PSSL_CTX; cb: GEN_SESSION_CB): Integer; cdecl = nil;
  SSL_set_generate_session_id : function(s: PSSL; cb: GEN_SESSION_CB): Integer; cdecl = nil;
  SSL_has_matching_session_id : function(s: PSSL; id: PByte; id_len: Cardinal): Integer; cdecl = nil;
  SSL_CTX_get_options : function(ctx: PSSL_CTX): Cardinal; cdecl = nil;
  SSL_get_options : function(s: PSSL): Cardinal; cdecl = nil;
  SSL_CTX_clear_options : function(ctx: PSSL_CTX; op: Cardinal): Cardinal; cdecl = nil;
  SSL_clear_options : function(s: PSSL; op: Cardinal): Cardinal; cdecl = nil;
  SSL_CTX_set_options : function(ctx: PSSL_CTX; op: Cardinal): Cardinal; cdecl = nil;
  SSL_set_options : function(s: PSSL; op: Cardinal): Cardinal; cdecl = nil;
  TLS_method : function(): PSSL_METHOD; cdecl = nil;
  SSLv23_method : function(): PSSL_METHOD; cdecl = nil;
  TLS_server_method : function(): PSSL_METHOD; cdecl = nil;
  SSLv23_server_method : function(): PSSL_METHOD; cdecl = nil;
  TLS_client_method : function(): PSSL_METHOD; cdecl = nil;
  SSLv23_client_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_server_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_client_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_1_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_1_server_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_1_client_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_2_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_2_server_method : function(): PSSL_METHOD; cdecl = nil;
  TLSv1_2_client_method : function(): PSSL_METHOD; cdecl = nil;

const
  GSSLSSLImports : array[0..488] of TOSSLImports = (
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_f_ssl                                 ; N: 'BIO_f_ssl'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_ssl                               ; N: 'BIO_new_ssl'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_ssl_connect                       ; N: 'BIO_new_ssl_connect'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_new_buffer_ssl_connect                ; N: 'BIO_new_buffer_ssl_connect'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ssl_copy_session_id                   ; N: 'BIO_ssl_copy_session_id'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@BIO_ssl_shutdown                          ; N: 'BIO_ssl_shutdown'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_method                             ; N: 'DTLSv1_method'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_server_method                      ; N: 'DTLSv1_server_method'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_client_method                      ; N: 'DTLSv1_client_method'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_2_method                           ; N: 'DTLSv1_2_method'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_2_server_method                    ; N: 'DTLSv1_2_server_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLSv1_2_client_method                    ; N: 'DTLSv1_2_client_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLS_method                               ; N: 'DTLS_method'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLS_server_method                        ; N: 'DTLS_server_method'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLS_client_method                        ; N: 'DTLS_client_method'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@DTLS_get_data_mtu                         ; N: 'DTLS_get_data_mtu'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@ERR_load_SSL_strings                      ; N: 'ERR_load_SSL_strings'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_cipher_name                       ; N: 'OPENSSL_cipher_name'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@OPENSSL_init_ssl                          ; N: 'OPENSSL_init_ssl'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_bio_SSL_SESSION                  ; N: 'PEM_read_bio_SSL_SESSION'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_read_SSL_SESSION                      ; N: 'PEM_read_SSL_SESSION'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_bio_SSL_SESSION                 ; N: 'PEM_write_bio_SSL_SESSION'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@PEM_write_SSL_SESSION                     ; N: 'PEM_write_SSL_SESSION'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SRP_Calc_A_param                          ; N: 'SRP_Calc_A_param'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@i2d_SSL_SESSION                           ; N: 'i2d_SSL_SESSION'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@d2i_SSL_SESSION                           ; N: 'd2i_SSL_SESSION'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_peer_certificate                  ; N: 'SSL_get_peer_certificate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_peer_cert_chain                   ; N: 'SSL_get_peer_cert_chain'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_verify_mode                   ; N: 'SSL_CTX_get_verify_mode'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_verify_depth                  ; N: 'SSL_CTX_get_verify_depth'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_verify_callback               ; N: 'SSL_CTX_get_verify_callback'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_verify                        ; N: 'SSL_CTX_set_verify'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_verify_depth                  ; N: 'SSL_CTX_set_verify_depth'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_cert_verify_callback          ; N: 'SSL_CTX_set_cert_verify_callback'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_cert_cb                       ; N: 'SSL_CTX_set_cert_cb'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_RSAPrivateKey                 ; N: 'SSL_CTX_use_RSAPrivateKey'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_RSAPrivateKey_ASN1            ; N: 'SSL_CTX_use_RSAPrivateKey_ASN1'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_PrivateKey                    ; N: 'SSL_CTX_use_PrivateKey'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_PrivateKey_ASN1               ; N: 'SSL_CTX_use_PrivateKey_ASN1'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_certificate                   ; N: 'SSL_CTX_use_certificate'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_certificate_ASN1              ; N: 'SSL_CTX_use_certificate_ASN1'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_cert_and_key                  ; N: 'SSL_CTX_use_cert_and_key'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_passwd_cb             ; N: 'SSL_CTX_set_default_passwd_cb'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_passwd_cb_userdata    ; N: 'SSL_CTX_set_default_passwd_cb_userdata'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_default_passwd_cb             ; N: 'SSL_CTX_get_default_passwd_cb'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_default_passwd_cb_userdata    ; N: 'SSL_CTX_get_default_passwd_cb_userdata'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_default_passwd_cb                 ; N: 'SSL_set_default_passwd_cb'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_default_passwd_cb_userdata        ; N: 'SSL_set_default_passwd_cb_userdata'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_default_passwd_cb                 ; N: 'SSL_get_default_passwd_cb'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_default_passwd_cb_userdata        ; N: 'SSL_get_default_passwd_cb_userdata'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_check_private_key                 ; N: 'SSL_CTX_check_private_key'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_check_private_key                     ; N: 'SSL_check_private_key'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_session_id_context            ; N: 'SSL_CTX_set_session_id_context'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_new                                   ; N: 'SSL_new'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_up_ref                                ; N: 'SSL_up_ref'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_is_dtls                               ; N: 'SSL_is_dtls'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_session_id_context                ; N: 'SSL_set_session_id_context'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_purpose                       ; N: 'SSL_CTX_set_purpose'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_purpose                           ; N: 'SSL_set_purpose'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_trust                         ; N: 'SSL_CTX_set_trust'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_trust                             ; N: 'SSL_set_trust'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set1_host                             ; N: 'SSL_set1_host'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_add1_host                             ; N: 'SSL_add1_host'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_peername                         ; N: 'SSL_get0_peername'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_hostflags                         ; N: 'SSL_set_hostflags'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_dane_enable                       ; N: 'SSL_CTX_dane_enable'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_dane_mtype_set                    ; N: 'SSL_CTX_dane_mtype_set'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_dane_enable                           ; N: 'SSL_dane_enable'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_dane_tlsa_add                         ; N: 'SSL_dane_tlsa_add'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_dane_authority                   ; N: 'SSL_get0_dane_authority'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_dane_tlsa                        ; N: 'SSL_get0_dane_tlsa'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_dane                             ; N: 'SSL_get0_dane'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_dane_set_flags                    ; N: 'SSL_CTX_dane_set_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_dane_clear_flags                  ; N: 'SSL_CTX_dane_clear_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_dane_set_flags                        ; N: 'SSL_dane_set_flags'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_dane_clear_flags                      ; N: 'SSL_dane_clear_flags'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set1_param                        ; N: 'SSL_CTX_set1_param'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set1_param                            ; N: 'SSL_set1_param'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get0_param                        ; N: 'SSL_CTX_get0_param'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_param                            ; N: 'SSL_get0_param'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_username                  ; N: 'SSL_CTX_set_srp_username'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_password                  ; N: 'SSL_CTX_set_srp_password'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_strength                  ; N: 'SSL_CTX_set_srp_strength'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_client_pwd_callback       ; N: 'SSL_CTX_set_srp_client_pwd_callback'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_verify_param_callback     ; N: 'SSL_CTX_set_srp_verify_param_callback'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_username_callback         ; N: 'SSL_CTX_set_srp_username_callback'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_srp_cb_arg                    ; N: 'SSL_CTX_set_srp_cb_arg'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_srp_server_param                  ; N: 'SSL_set_srp_server_param'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_srp_server_param_pw               ; N: 'SSL_set_srp_server_param_pw'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_srp_g                             ; N: 'SSL_get_srp_g'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_srp_N                             ; N: 'SSL_get_srp_N'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_srp_username                      ; N: 'SSL_get_srp_username'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_srp_userinfo                      ; N: 'SSL_get_srp_userinfo'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_client_hello_cb               ; N: 'SSL_CTX_set_client_hello_cb'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_isv2                     ; N: 'SSL_client_hello_isv2'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get0_legacy_version      ; N: 'SSL_client_hello_get0_legacy_version'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get0_random              ; N: 'SSL_client_hello_get0_random'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get0_session_id          ; N: 'SSL_client_hello_get0_session_id'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get0_ciphers             ; N: 'SSL_client_hello_get0_ciphers'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get0_compression_methods ; N: 'SSL_client_hello_get0_compression_methods' ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get1_extensions_present  ; N: 'SSL_client_hello_get1_extensions_present'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_hello_get0_ext                 ; N: 'SSL_client_hello_get0_ext'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_certs_clear                           ; N: 'SSL_certs_clear'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_free                                  ; N: 'SSL_free'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_accept                                ; N: 'SSL_accept'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_stateless                             ; N: 'SSL_stateless'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_connect                               ; N: 'SSL_connect'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_read                                  ; N: 'SSL_read'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_read_ex                               ; N: 'SSL_read_ex'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_read_early_data                       ; N: 'SSL_read_early_data'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_peek                                  ; N: 'SSL_peek'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_peek_ex                               ; N: 'SSL_peek_ex'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_write                                 ; N: 'SSL_write'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_write_ex                              ; N: 'SSL_write_ex'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_write_early_data                      ; N: 'SSL_write_early_data'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_ctrl                                  ; N: 'SSL_ctrl'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_callback_ctrl                         ; N: 'SSL_callback_ctrl'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_ctrl                              ; N: 'SSL_CTX_ctrl'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_callback_ctrl                     ; N: 'SSL_CTX_callback_ctrl'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_early_data_status                 ; N: 'SSL_get_early_data_status'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_error                             ; N: 'SSL_get_error'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_version                           ; N: 'SSL_get_version'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_ssl_version                   ; N: 'SSL_CTX_set_ssl_version'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_ciphers                           ; N: 'SSL_get_ciphers'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_ciphers                       ; N: 'SSL_CTX_get_ciphers'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_client_ciphers                    ; N: 'SSL_get_client_ciphers'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get1_supported_ciphers                ; N: 'SSL_get1_supported_ciphers'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_do_handshake                          ; N: 'SSL_do_handshake'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_key_update                            ; N: 'SSL_key_update'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_key_update_type                   ; N: 'SSL_get_key_update_type'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_renegotiate                           ; N: 'SSL_renegotiate'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_renegotiate_abbreviated               ; N: 'SSL_renegotiate_abbreviated'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_renegotiate_pending                   ; N: 'SSL_renegotiate_pending'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_shutdown                              ; N: 'SSL_shutdown'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_verify_client_post_handshake          ; N: 'SSL_verify_client_post_handshake'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_post_handshake_auth           ; N: 'SSL_CTX_set_post_handshake_auth'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_post_handshake_auth               ; N: 'SSL_set_post_handshake_auth'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_ssl_method                    ; N: 'SSL_CTX_get_ssl_method'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_ssl_method                        ; N: 'SSL_get_ssl_method'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_ssl_method                        ; N: 'SSL_set_ssl_method'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_alert_type_string_long                ; N: 'SSL_alert_type_string_long'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_alert_type_string                     ; N: 'SSL_alert_type_string'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_alert_desc_string_long                ; N: 'SSL_alert_desc_string_long'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_alert_desc_string                     ; N: 'SSL_alert_desc_string'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set0_CA_list                          ; N: 'SSL_set0_CA_list'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set0_CA_list                      ; N: 'SSL_CTX_set0_CA_list'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_CA_list                          ; N: 'SSL_get0_CA_list'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get0_CA_list                      ; N: 'SSL_CTX_get0_CA_list'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_add1_to_CA_list                       ; N: 'SSL_add1_to_CA_list'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_add1_to_CA_list                   ; N: 'SSL_CTX_add1_to_CA_list'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_peer_CA_list                     ; N: 'SSL_get0_peer_CA_list'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_client_CA_list                    ; N: 'SSL_set_client_CA_list'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_client_CA_list                ; N: 'SSL_CTX_set_client_CA_list'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_client_CA_list                    ; N: 'SSL_get_client_CA_list'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_client_CA_list                ; N: 'SSL_CTX_get_client_CA_list'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_add_client_CA                         ; N: 'SSL_add_client_CA'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_add_client_CA                     ; N: 'SSL_CTX_add_client_CA'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_connect_state                     ; N: 'SSL_set_connect_state'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_accept_state                      ; N: 'SSL_set_accept_state'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_default_timeout                   ; N: 'SSL_get_default_timeout'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_description                    ; N: 'SSL_CIPHER_description'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_dup_CA_list                           ; N: 'SSL_dup_CA_list'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_dup                                   ; N: 'SSL_dup'                                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_certificate                       ; N: 'SSL_get_certificate'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_privatekey                        ; N: 'SSL_get_privatekey'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get0_certificate                  ; N: 'SSL_CTX_get0_certificate'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get0_privatekey                   ; N: 'SSL_CTX_get0_privatekey'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_quiet_shutdown                ; N: 'SSL_CTX_set_quiet_shutdown'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_quiet_shutdown                ; N: 'SSL_CTX_get_quiet_shutdown'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_quiet_shutdown                    ; N: 'SSL_set_quiet_shutdown'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_quiet_shutdown                    ; N: 'SSL_get_quiet_shutdown'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_shutdown                          ; N: 'SSL_set_shutdown'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_shutdown                          ; N: 'SSL_get_shutdown'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_version                               ; N: 'SSL_version'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_client_version                        ; N: 'SSL_client_version'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_verify_paths          ; N: 'SSL_CTX_set_default_verify_paths'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_verify_dir            ; N: 'SSL_CTX_set_default_verify_dir'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_verify_file           ; N: 'SSL_CTX_set_default_verify_file'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_load_verify_locations             ; N: 'SSL_CTX_load_verify_locations'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_session                           ; N: 'SSL_get_session'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_session                          ; N: 'SSL_get_session'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get1_session                          ; N: 'SSL_get1_session'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_SSL_CTX                           ; N: 'SSL_get_SSL_CTX'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_SSL_CTX                           ; N: 'SSL_set_SSL_CTX'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_info_callback                     ; N: 'SSL_set_info_callback'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_info_callback                     ; N: 'SSL_get_info_callback'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_state                             ; N: 'SSL_get_state'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_verify_result                     ; N: 'SSL_set_verify_result'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_verify_result                     ; N: 'SSL_get_verify_result'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_verified_chain                   ; N: 'SSL_get0_verified_chain'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_client_random                     ; N: 'SSL_get_client_random'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_server_random                     ; N: 'SSL_get_server_random'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_master_key                ; N: 'SSL_SESSION_get_master_key'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set1_master_key               ; N: 'SSL_SESSION_set1_master_key'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_max_fragment_length       ; N: 'SSL_SESSION_get_max_fragment_length'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_ex_data                           ; N: 'SSL_set_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_ex_data                           ; N: 'SSL_get_ex_data'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set_ex_data                   ; N: 'SSL_SESSION_set_ex_data'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_ex_data                   ; N: 'SSL_SESSION_get_ex_data'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_ex_data                       ; N: 'SSL_CTX_set_ex_data'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_ex_data                       ; N: 'SSL_CTX_get_ex_data'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_ex_data_X509_STORE_CTX_idx        ; N: 'SSL_get_ex_data_X509_STORE_CTX_idx'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_read_buffer_len       ; N: 'SSL_CTX_set_default_read_buffer_len'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_default_read_buffer_len           ; N: 'SSL_set_default_read_buffer_len'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_tmp_dh_callback               ; N: 'SSL_CTX_set_tmp_dh_callback'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_tmp_dh_callback                   ; N: 'SSL_set_tmp_dh_callback'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_current_compression               ; N: 'SSL_get_current_compression'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_current_expansion                 ; N: 'SSL_get_current_expansion'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_COMP_get_name                         ; N: 'SSL_COMP_get_name'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_COMP_get0_name                        ; N: 'SSL_COMP_get0_name'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_COMP_get_id                           ; N: 'SSL_COMP_get_id'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_COMP_get_compression_methods          ; N: 'SSL_COMP_get_compression_methods'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_COMP_set0_compression_methods         ; N: 'SSL_COMP_set0_compression_methods'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_COMP_add_compression_method           ; N: 'SSL_COMP_add_compression_method'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_find                           ; N: 'SSL_CIPHER_find'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_cipher_nid                 ; N: 'SSL_CIPHER_get_cipher_nid'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_digest_nid                 ; N: 'SSL_CIPHER_get_digest_nid'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_bytes_to_cipher_list                  ; N: 'SSL_bytes_to_cipher_list'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_session_ticket_ext                ; N: 'SSL_set_session_ticket_ext'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_session_ticket_ext_cb             ; N: 'SSL_set_session_ticket_ext_cb'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_session_secret_cb                 ; N: 'SSL_set_session_secret_cb'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_not_resumable_session_callback; N: 'SSL_CTX_set_not_resumable_session_callback'; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_not_resumable_session_callback    ; N: 'SSL_set_not_resumable_session_callback'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_record_padding_callback       ; N: 'SSL_CTX_set_record_padding_callback'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_record_padding_callback_arg   ; N: 'SSL_CTX_set_record_padding_callback_arg'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_record_padding_callback_arg   ; N: 'SSL_CTX_get_record_padding_callback_arg'   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_block_padding                 ; N: 'SSL_CTX_set_block_padding'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_record_padding_callback           ; N: 'SSL_set_record_padding_callback'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_record_padding_callback_arg       ; N: 'SSL_set_record_padding_callback_arg'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_record_padding_callback_arg       ; N: 'SSL_get_record_padding_callback_arg'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_block_padding                     ; N: 'SSL_set_block_padding'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_num_tickets                       ; N: 'SSL_set_num_tickets'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_num_tickets                       ; N: 'SSL_get_num_tickets'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_num_tickets                   ; N: 'SSL_CTX_set_num_tickets'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_num_tickets                   ; N: 'SSL_CTX_get_num_tickets'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_session_reused                        ; N: 'SSL_session_reused'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_is_server                             ; N: 'SSL_is_server'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_new                          ; N: 'SSL_CONF_CTX_new'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_finish                       ; N: 'SSL_CONF_CTX_finish'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_free                         ; N: 'SSL_CONF_CTX_free'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_set_flags                    ; N: 'SSL_CONF_CTX_set_flags'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_clear_flags                  ; N: 'SSL_CONF_CTX_clear_flags'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_set1_prefix                  ; N: 'SSL_CONF_CTX_set1_prefix'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_set_ssl                      ; N: 'SSL_CONF_CTX_set_ssl'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_CTX_set_ssl_ctx                  ; N: 'SSL_CONF_CTX_set_ssl_ctx'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_cmd                              ; N: 'SSL_CONF_cmd'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_cmd_argv                         ; N: 'SSL_CONF_cmd_argv'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CONF_cmd_value_type                   ; N: 'SSL_CONF_cmd_value_type'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_add_ssl_module                        ; N: 'SSL_add_ssl_module'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_config                                ; N: 'SSL_config'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_config                            ; N: 'SSL_CTX_config'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_ct_validation_callback            ; N: 'SSL_set_ct_validation_callback'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_ct_validation_callback        ; N: 'SSL_CTX_set_ct_validation_callback'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_enable_ct                             ; N: 'SSL_enable_ct'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_enable_ct                         ; N: 'SSL_CTX_enable_ct'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_ct_is_enabled                         ; N: 'SSL_ct_is_enabled'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_ct_is_enabled                     ; N: 'SSL_CTX_ct_is_enabled'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_peer_scts                        ; N: 'SSL_get0_peer_scts'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_default_ctlog_list_file       ; N: 'SSL_CTX_set_default_ctlog_list_file'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_ctlog_list_file               ; N: 'SSL_CTX_set_ctlog_list_file'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set0_ctlog_store                  ; N: 'SSL_CTX_set0_ctlog_store'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get0_ctlog_store                  ; N: 'SSL_CTX_get0_ctlog_store'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_security_level                    ; N: 'SSL_set_security_level'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_security_level                    ; N: 'SSL_get_security_level'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_security_callback                 ; N: 'SSL_set_security_callback'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_security_callback                 ; N: 'SSL_get_security_callback'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set0_security_ex_data                 ; N: 'SSL_set0_security_ex_data'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_security_ex_data                 ; N: 'SSL_get0_security_ex_data'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_security_level                ; N: 'SSL_CTX_set_security_level'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_security_level                ; N: 'SSL_CTX_get_security_level'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_security_callback             ; N: 'SSL_CTX_set_security_callback'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_security_callback             ; N: 'SSL_CTX_get_security_callback'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set0_security_ex_data             ; N: 'SSL_CTX_set0_security_ex_data'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get0_security_ex_data             ; N: 'SSL_CTX_get0_security_ex_data'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_free_buffers                          ; N: 'SSL_free_buffers'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_alloc_buffers                         ; N: 'SSL_alloc_buffers'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_session_ticket_cb             ; N: 'SSL_CTX_set_session_ticket_cb'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set1_ticket_appdata           ; N: 'SSL_SESSION_set1_ticket_appdata'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_ticket_appdata           ; N: 'SSL_SESSION_get0_ticket_appdata'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_allow_early_data_cb           ; N: 'SSL_CTX_set_allow_early_data_cb'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_allow_early_data_cb               ; N: 'SSL_set_allow_early_data_cb'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_tlsext_use_srtp               ; N: 'SSL_CTX_set_tlsext_use_srtp'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_tlsext_use_srtp                   ; N: 'SSL_set_tlsext_use_srtp'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_srtp_profiles                     ; N: 'SSL_get_srtp_profiles'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_selected_srtp_profile             ; N: 'SSL_get_selected_srtp_profile'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_msg_callback                  ; N: 'SSL_CTX_set_msg_callback'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_msg_callback                      ; N: 'SSL_set_msg_callback'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SRP_CTX_init                          ; N: 'SSL_SRP_CTX_init'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_SRP_CTX_init                      ; N: 'SSL_CTX_SRP_CTX_init'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SRP_CTX_free                          ; N: 'SSL_SRP_CTX_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_SRP_CTX_free                      ; N: 'SSL_CTX_SRP_CTX_free'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_srp_server_param_with_username        ; N: 'SSL_srp_server_param_with_username'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sessions                          ; N: 'SSL_CTX_sessions'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sess_set_new_cb                   ; N: 'SSL_CTX_sess_set_new_cb'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sess_get_new_cb                   ; N: 'SSL_CTX_sess_get_new_cb'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sess_set_remove_cb                ; N: 'SSL_CTX_sess_set_remove_cb'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sess_get_remove_cb                ; N: 'SSL_CTX_sess_get_remove_cb'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sess_set_get_cb                   ; N: 'SSL_CTX_sess_set_get_cb'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_sess_get_get_cb                   ; N: 'SSL_CTX_sess_get_get_cb'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_info_callback                 ; N: 'SSL_CTX_set_info_callback'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_info_callback                 ; N: 'SSL_CTX_get_info_callback'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_client_cert_cb                ; N: 'SSL_CTX_set_client_cert_cb'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
  //  (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_client_cert_cb                ; N: 'SSL_CTX_get_client_cert_cb'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_client_cert_engine            ; N: 'SSL_CTX_set_client_cert_engine'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_cookie_generate_cb            ; N: 'SSL_CTX_set_cookie_generate_cb'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_cookie_verify_cb              ; N: 'SSL_CTX_set_cookie_verify_cb'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_stateless_cookie_generate_cb  ; N: 'SSL_CTX_set_stateless_cookie_generate_cb'  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_stateless_cookie_verify_cb    ; N: 'SSL_CTX_set_stateless_cookie_verify_cb'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_next_protos_advertised_cb     ; N: 'SSL_CTX_set_next_protos_advertised_cb'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_npn_advertised_cb             ; N: 'SSL_CTX_set_next_protos_advertised_cb'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_next_proto_select_cb          ; N: 'SSL_CTX_set_next_proto_select_cb'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_npn_select_cb                 ; N: 'SSL_CTX_set_next_proto_select_cb'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_next_proto_negotiated            ; N: 'SSL_get0_next_proto_negotiated'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_npn_negotiated                   ; N: 'SSL_get0_next_proto_negotiated'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_select_next_proto                     ; N: 'SSL_select_next_proto'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_alpn_protos                   ; N: 'SSL_CTX_set_alpn_protos'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_alpn_protos                       ; N: 'SSL_set_alpn_protos'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_alpn_select_cb                ; N: 'SSL_CTX_set_alpn_select_cb'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get0_alpn_selected                    ; N: 'SSL_get0_alpn_selected'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_psk_client_callback           ; N: 'SSL_CTX_set_psk_client_callback'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_psk_client_callback               ; N: 'SSL_set_psk_client_callback'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_psk_server_callback           ; N: 'SSL_CTX_set_psk_server_callback'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_psk_server_callback               ; N: 'SSL_set_psk_server_callback'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_psk_identity_hint             ; N: 'SSL_CTX_use_psk_identity_hint'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_psk_identity_hint                 ; N: 'SSL_use_psk_identity_hint'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_psk_identity_hint                 ; N: 'SSL_get_psk_identity_hint'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_psk_identity                      ; N: 'SSL_get_psk_identity'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_psk_find_session_callback         ; N: 'SSL_set_psk_find_session_callback'         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_psk_find_session_callback     ; N: 'SSL_CTX_set_psk_find_session_callback'     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_psk_use_session_callback          ; N: 'SSL_set_psk_use_session_callback'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_psk_use_session_callback      ; N: 'SSL_CTX_set_psk_use_session_callback'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_has_client_custom_ext             ; N: 'SSL_CTX_has_client_custom_ext'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_add_client_custom_ext             ; N: 'SSL_CTX_add_client_custom_ext'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_add_server_custom_ext             ; N: 'SSL_CTX_add_server_custom_ext'             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_add_custom_ext                    ; N: 'SSL_CTX_add_custom_ext'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_extension_supported                   ; N: 'SSL_extension_supported'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_keylog_callback               ; N: 'SSL_CTX_set_keylog_callback'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_keylog_callback               ; N: 'SSL_CTX_get_keylog_callback'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_max_early_data                ; N: 'SSL_CTX_set_max_early_data'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_max_early_data                ; N: 'SSL_CTX_get_max_early_data'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_max_early_data                    ; N: 'SSL_set_max_early_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_max_early_data                    ; N: 'SSL_get_max_early_data'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_recv_max_early_data           ; N: 'SSL_CTX_set_recv_max_early_data'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_recv_max_early_data           ; N: 'SSL_CTX_get_recv_max_early_data'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_recv_max_early_data               ; N: 'SSL_set_recv_max_early_data'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_recv_max_early_data               ; N: 'SSL_get_recv_max_early_data'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_tlsext_max_fragment_length    ; N: 'SSL_CTX_set_tlsext_max_fragment_length'    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_tlsext_max_fragment_length        ; N: 'SSL_set_tlsext_max_fragment_length'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_servername                        ; N: 'SSL_get_servername'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_servername_type                   ; N: 'SSL_get_servername_type'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_export_keying_material                ; N: 'SSL_export_keying_material'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_export_keying_material_early          ; N: 'SSL_export_keying_material_early'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_peer_signature_type_nid           ; N: 'SSL_get_peer_signature_type_nid'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_signature_type_nid                ; N: 'SSL_get_signature_type_nid'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_sigalgs                           ; N: 'SSL_get_sigalgs'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_shared_sigalgs                    ; N: 'SSL_get_shared_sigalgs'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_check_chain                           ; N: 'SSL_check_chain'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_debug                             ; N: 'SSL_set_debug'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_in_init                               ; N: 'SSL_in_init'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_in_before                             ; N: 'SSL_in_before'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_is_init_finished                      ; N: 'SSL_is_init_finished'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_finished                          ; N: 'SSL_get_finished'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_peer_finished                     ; N: 'SSL_get_peer_finished'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_cipher_list                   ; N: 'SSL_CTX_set_cipher_list'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_new                               ; N: 'SSL_CTX_new'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_up_ref                            ; N: 'SSL_CTX_up_ref'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_free                              ; N: 'SSL_CTX_free'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_timeout                       ; N: 'SSL_CTX_set_timeout'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_timeout                       ; N: 'SSL_CTX_get_timeout'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_cert_store                    ; N: 'SSL_CTX_get_cert_store'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_cert_store                    ; N: 'SSL_CTX_set_cert_store'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set1_cert_store                   ; N: 'SSL_CTX_set1_cert_store'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_want                                  ; N: 'SSL_want'                                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_clear                                 ; N: 'SSL_clear'                                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_flush_sessions                    ; N: 'SSL_CTX_flush_sessions'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_current_cipher                    ; N: 'SSL_get_current_cipher'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_pending_cipher                    ; N: 'SSL_get_pending_cipher'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_bits                       ; N: 'SSL_CIPHER_get_bits'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_version                    ; N: 'SSL_CIPHER_get_version'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_name                       ; N: 'SSL_CIPHER_get_name'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_standard_name                  ; N: 'SSL_CIPHER_standard_name'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_id                         ; N: 'SSL_CIPHER_get_id'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_protocol_id                ; N: 'SSL_CIPHER_get_protocol_id'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_kx_nid                     ; N: 'SSL_CIPHER_get_kx_nid'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_auth_nid                   ; N: 'SSL_CIPHER_get_auth_nid'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_get_handshake_digest           ; N: 'SSL_CIPHER_get_handshake_digest'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CIPHER_is_aead                        ; N: 'SSL_CIPHER_is_aead'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_fd                                ; N: 'SSL_get_fd'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_rfd                               ; N: 'SSL_get_rfd'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_wfd                               ; N: 'SSL_get_wfd'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_cipher_list                       ; N: 'SSL_get_cipher_list'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_shared_ciphers                    ; N: 'SSL_get_shared_ciphers'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_read_ahead                        ; N: 'SSL_get_read_ahead'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_pending                               ; N: 'SSL_pending'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_has_pending                           ; N: 'SSL_has_pending'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_fd                                ; N: 'SSL_set_fd'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_rfd                               ; N: 'SSL_set_rfd'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_wfd                               ; N: 'SSL_set_wfd'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set0_rbio                             ; N: 'SSL_set0_rbio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set0_wbio                             ; N: 'SSL_set0_wbio'                             ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_bio                               ; N: 'SSL_set_bio'                               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_rbio                              ; N: 'SSL_get_rbio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_wbio                              ; N: 'SSL_get_wbio'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_cipher_list                       ; N: 'SSL_set_cipher_list'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_ciphersuites                  ; N: 'SSL_CTX_set_ciphersuites'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_ciphersuites                      ; N: 'SSL_set_ciphersuites'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_read_ahead                        ; N: 'SSL_set_read_ahead'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_verify_mode                       ; N: 'SSL_get_verify_mode'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_verify_depth                      ; N: 'SSL_get_verify_depth'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_verify_callback                   ; N: 'SSL_get_verify_callback'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_verify                            ; N: 'SSL_set_verify'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_verify_depth                      ; N: 'SSL_set_verify_depth'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_cert_cb                           ; N: 'SSL_set_cert_cb'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_RSAPrivateKey                     ; N: 'SSL_use_RSAPrivateKey'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_RSAPrivateKey_ASN1                ; N: 'SSL_use_RSAPrivateKey_ASN1'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_PrivateKey                        ; N: 'SSL_use_PrivateKey'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_PrivateKey_ASN1                   ; N: 'SSL_use_PrivateKey_ASN1'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_certificate                       ; N: 'SSL_use_certificate'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_certificate_ASN1                  ; N: 'SSL_use_certificate_ASN1'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_cert_and_key                      ; N: 'SSL_use_cert_and_key'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_serverinfo                    ; N: 'SSL_CTX_use_serverinfo'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_serverinfo_ex                 ; N: 'SSL_CTX_use_serverinfo_ex'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_serverinfo_file               ; N: 'SSL_CTX_use_serverinfo_file'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_RSAPrivateKey_file                ; N: 'SSL_use_RSAPrivateKey_file'                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_PrivateKey_file                   ; N: 'SSL_use_PrivateKey_file'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_certificate_file                  ; N: 'SSL_use_certificate_file'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_RSAPrivateKey_file            ; N: 'SSL_CTX_use_RSAPrivateKey_file'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_PrivateKey_file               ; N: 'SSL_CTX_use_PrivateKey_file'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_certificate_file              ; N: 'SSL_CTX_use_certificate_file'              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_use_certificate_chain_file        ; N: 'SSL_CTX_use_certificate_chain_file'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_use_certificate_chain_file            ; N: 'SSL_use_certificate_chain_file'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_load_client_CA_file                   ; N: 'SSL_load_client_CA_file'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_add_file_cert_subjects_to_stack       ; N: 'SSL_add_file_cert_subjects_to_stack'       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_add_dir_cert_subjects_to_stack        ; N: 'SSL_add_dir_cert_subjects_to_stack'        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_state_string                          ; N: 'SSL_state_string'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_rstate_string                         ; N: 'SSL_rstate_string'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_state_string_long                     ; N: 'SSL_state_string_long'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_rstate_string_long                    ; N: 'SSL_rstate_string_long'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_time                      ; N: 'SSL_SESSION_get_time'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set_time                      ; N: 'SSL_SESSION_set_time'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_timeout                   ; N: 'SSL_SESSION_get_timeout'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set_timeout                   ; N: 'SSL_SESSION_set_timeout'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_protocol_version          ; N: 'SSL_SESSION_get_protocol_version'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set_protocol_version          ; N: 'SSL_SESSION_set_protocol_version'          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_hostname                 ; N: 'SSL_SESSION_get0_hostname'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set1_hostname                 ; N: 'SSL_SESSION_set1_hostname'                 ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_alpn_selected            ; N: 'SSL_SESSION_get0_alpn_selected'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set1_alpn_selected            ; N: 'SSL_SESSION_set1_alpn_selected'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_cipher                   ; N: 'SSL_SESSION_get0_cipher'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set_cipher                    ; N: 'SSL_SESSION_set_cipher'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_has_ticket                    ; N: 'SSL_SESSION_has_ticket'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_ticket_lifetime_hint      ; N: 'SSL_SESSION_get_ticket_lifetime_hint'      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_ticket                   ; N: 'SSL_SESSION_get0_ticket'                   ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_max_early_data            ; N: 'SSL_SESSION_get_max_early_data'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set_max_early_data            ; N: 'SSL_SESSION_set_max_early_data'            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_copy_session_id                       ; N: 'SSL_copy_session_id'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_peer                     ; N: 'SSL_SESSION_get0_peer'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set1_id_context               ; N: 'SSL_SESSION_set1_id_context'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_set1_id                       ; N: 'SSL_SESSION_set1_id'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_is_resumable                  ; N: 'SSL_SESSION_is_resumable'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_new                           ; N: 'SSL_SESSION_new'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_dup                           ; N: 'SSL_SESSION_dup'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_id                        ; N: 'SSL_SESSION_get_id'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get0_id_context               ; N: 'SSL_SESSION_get0_id_context'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_get_compress_id               ; N: 'SSL_SESSION_get_compress_id'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_print_fp                      ; N: 'SSL_SESSION_print_fp'                      ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_print                         ; N: 'SSL_SESSION_print'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_print_keylog                  ; N: 'SSL_SESSION_print_keylog'                  ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_up_ref                        ; N: 'SSL_SESSION_up_ref'                        ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_SESSION_free                          ; N: 'SSL_SESSION_free'                          ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_session                           ; N: 'SSL_set_session'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_add_session                       ; N: 'SSL_CTX_add_session'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_remove_session                    ; N: 'SSL_CTX_remove_session'                    ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_generate_session_id           ; N: 'SSL_CTX_set_generate_session_id'           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_generate_session_id               ; N: 'SSL_set_generate_session_id'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_has_matching_session_id               ; N: 'SSL_has_matching_session_id'               ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_get_options                       ; N: 'SSL_CTX_get_options'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_get_options                           ; N: 'SSL_get_options'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_clear_options                     ; N: 'SSL_CTX_clear_options'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_clear_options                         ; N: 'SSL_clear_options'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_CTX_set_options                       ; N: 'SSL_CTX_set_options'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSL_set_options                           ; N: 'SSL_set_options'                           ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLS_method                                ; N: 'TLS_method'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSLv23_method                             ; N: 'TLS_method'                                ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLS_server_method                         ; N: 'TLS_server_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSLv23_server_method                      ; N: 'TLS_server_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLS_client_method                         ; N: 'TLS_client_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@SSLv23_client_method                      ; N: 'TLS_client_method'                         ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_method                              ; N: 'TLSv1_method'                              ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_server_method                       ; N: 'TLSv1_server_method'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_client_method                       ; N: 'TLSv1_client_method'                       ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_1_method                            ; N: 'TLSv1_1_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_1_server_method                     ; N: 'TLSv1_1_server_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_1_client_method                     ; N: 'TLSv1_1_client_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_2_method                            ; N: 'TLSv1_2_method'                            ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_2_server_method                     ; N: 'TLSv1_2_server_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX),
    (F: {$IFNDEF FPC}@{$ENDIF}@TLSv1_2_client_method                     ; N: 'TLSv1_2_client_method'                     ; MI: OPENSSL_VER_MIN; MX: OPENSSL_VER_MAX)
  );

type
  PTimeVal = ^TTimeVal;
  timeval = record
    tv_sec: Longint;
    tv_usec: Longint;
  end;
  TTimeVal = timeval;

var
  RESTDW_OPENSSL_VERSION_NUMBER : cardinal = 0;
  RESTDW_OPENSSL_VERSION_MAJOR  : integer = 0;
  RESTDW_CRYPTO_DLL_FileName : string;
  RESTDW_CRYPYO_DLL_Handle : THandle;
  RESTDW_SSL_DLL_FileName : string;
  RESTDW_SSL_DLL_Handle : THandle;

{ LibCrypto Helpers }
function BIO_get_flags(b: PBIO): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function BIO_should_retry(b: PBIO): Boolean; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function BIO_should_read(b: PBIO): Boolean; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function BIO_should_write(b: PBIO): Boolean; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function BIO_should_io_special(b: PBIO): Boolean; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function BIO_retry_type(b: PBIO): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function BIO_get_ssl(b: PBIO; s: PSSL): Integer;
function BIO_pending(b: PBIO): Integer;

function SSL_error(const AErrorCode: Integer): String;
function SSL_is_fatal_error(const AErrorCode: Integer): Boolean;

{ LibSsl Helpers }
function SSL_CTX_set_session_cache_mode(ctx: PSSL_CTX; mode: Integer): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_CTX_add_extra_chain_cert(ctx: PSSL_CTX; cert: PX509): Longword; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_CTX_set_tmp_dh(ctx: PSSL_CTX; dh: Pointer): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_CTX_set_tmp_ecdh(ctx: PSSL_CTX; ecdh: Pointer): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_CTX_set_ecdh_auto(ctx: PSSL_CTX; onoff: Integer): Integer;
function SSL_CTX_set_min_proto_version(ctx: PSSL_CTX; version: Integer): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_CTX_set_max_proto_version(ctx: PSSL_CTX; version: Integer): Integer; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_set_tlsext_host_name(const s: PSSL; const name: String): LongInt; {$IF Defined(FPC) or (CompilerVersion > 21)}inline;{$IFEND}
function SSL_set_mode(s: PSSL; version: Integer): Integer;
function SSL_get_mode(s: PSSL): Integer;

function DTLSv1_get_timeout(s: PSSL; timeval: PTimeVal): LongInt;
procedure DTLSv1_handle_timeout(s: PSSL);

{$IFNDEF RESTDWLAMW}
function LoadCrypto : boolean;
function LoadSSL : boolean;

procedure UnloadCrypto;
{$ENDIF}
procedure UnloadSSL;

function SslGetImports (Handle: THandle; List: array of TOSSLImports): string ;  { V8.35 }

implementation

resourcestring
  eossl_loadlibrary  = 'Failed to load OpenSSL file %s';
  eossl_libnotfound1 = 'Failed libraries not found %s';
  eossl_libnotfound2 = 'Failed libraries not found %s or %s';

{$IFNDEF RESTDWLAMW}
function LoadCrypto : boolean;
var
  Erros : string;
begin
  Result := False;

  if RESTDW_CRYPYO_DLL_Handle > 32 then begin
    Result := True;
    Exit;
  end;

  RESTDW_CRYPTO_DLL_FileName := LIB_CRYPTO_300;
  RESTDW_OPENSSL_VERSION_MAJOR := 3;
  RESTDW_CRYPYO_DLL_Handle := LoadLibrary(PChar(RESTDW_CRYPTO_DLL_FileName));

  if RESTDW_CRYPYO_DLL_Handle <= 32 then begin
    RESTDW_CRYPTO_DLL_FileName := LIB_CRYPTO_110;
    RESTDW_OPENSSL_VERSION_MAJOR := 1;
    RESTDW_CRYPYO_DLL_Handle := LoadLibrary(PChar(RESTDW_CRYPTO_DLL_FileName));
  end;
  Result := RESTDW_CRYPYO_DLL_Handle > 32;

  if Result then begin
    {$IFDEF FPC}
      Pointer(OpenSSL_version_num) := GetProcAddress(RESTDW_CRYPYO_DLL_Handle, 'OpenSSL_version_num');
    {$ELSE}
      OpenSSL_version_num := GetProcAddress(RESTDW_CRYPYO_DLL_Handle, 'OpenSSL_version_num');
    {$ENDIF}
    if @OpenSSL_version_num = nil then begin
      FreeLibrary(RESTDW_CRYPYO_DLL_Handle);
      RESTDW_CRYPYO_DLL_Handle := 0;
      RESTDW_OPENSSL_VERSION_MAJOR := 0;
      raise Exception.Create(Format(eossl_loadlibrary,[RESTDW_CRYPTO_DLL_FileName]));
    end;
    RESTDW_OPENSSL_VERSION_NUMBER := OpenSSL_version_num();
    Erros := SslGetImports(RESTDW_CRYPYO_DLL_Handle, GSSLCryptoImports) ;

    {$IFDEF FPC}
      RESTDW_CRYPTO_DLL_FileName := GetModuleName(RESTDW_CRYPYO_DLL_Handle);
    {$ELSE}
      SetLength(RESTDW_CRYPTO_DLL_FileName, 256);
      SetLength(RESTDW_CRYPTO_DLL_FileName, GetModuleFileName(RESTDW_CRYPYO_DLL_Handle,
                PChar(RESTDW_CRYPTO_DLL_FileName), Length(RESTDW_CRYPTO_DLL_FileName)));
    {$ENDIF}
  end
  else begin
    if LIB_CRYPTO_110 <> LIB_CRYPTO_300 then
      raise Exception.Create(Format(eossl_libnotfound2,[LIB_CRYPTO_110,LIB_CRYPTO_300]))
    else
      raise Exception.Create(Format(eossl_libnotfound1,[LIB_CRYPTO_110]))
  end;
end;

procedure UnloadCrypto;
begin
  if RESTDW_CRYPYO_DLL_Handle > 32 then begin
    FreeLibrary(RESTDW_CRYPYO_DLL_Handle);
    RESTDW_CRYPYO_DLL_Handle := 0;
  end;
end;

function LoadSSL : boolean;
var
  Erros : string;
begin
  Result := False;

  if RESTDW_SSL_DLL_Handle > 32 then begin
    Result := True;
    Exit;
  end;

  if RESTDW_OPENSSL_VERSION_MAJOR = 0 then begin
    RESTDW_SSL_DLL_FileName := LIB_SSL_300;
    RESTDW_SSL_DLL_Handle := LoadLibrary(PChar(RESTDW_SSL_DLL_FileName));
    RESTDW_OPENSSL_VERSION_MAJOR := 3;
    if RESTDW_SSL_DLL_Handle <= 32 then begin
      RESTDW_SSL_DLL_FileName := LIB_SSL_110;
      RESTDW_OPENSSL_VERSION_MAJOR := 1;
      RESTDW_SSL_DLL_Handle := LoadLibrary(PChar(RESTDW_SSL_DLL_FileName));
    end;
  end
  else if RESTDW_OPENSSL_VERSION_MAJOR = 1 then begin
    RESTDW_SSL_DLL_FileName := LIB_SSL_110;
    RESTDW_OPENSSL_VERSION_MAJOR := 1;
    RESTDW_SSL_DLL_Handle := LoadLibrary(PChar(RESTDW_SSL_DLL_FileName));
  end
  else if RESTDW_OPENSSL_VERSION_MAJOR = 3 then begin
    RESTDW_SSL_DLL_FileName := LIB_SSL_300;
    RESTDW_OPENSSL_VERSION_MAJOR := 3;
    RESTDW_SSL_DLL_Handle := LoadLibrary(PChar(RESTDW_SSL_DLL_FileName));
  end;

  Result := RESTDW_SSL_DLL_Handle > 32;

  {$IFDEF FPC}
    RESTDW_SSL_DLL_FileName := GetModuleName(RESTDW_SSL_DLL_Handle);
  {$ELSE}
    SetLength(RESTDW_SSL_DLL_FileName, 256);
    SetLength(RESTDW_SSL_DLL_FileName, GetModuleFileName(RESTDW_SSL_DLL_Handle,
              PChar(RESTDW_SSL_DLL_FileName), Length(RESTDW_SSL_DLL_FileName)));
  {$ENDIF}

  if Result then begin
    Erros := SslGetImports(RESTDW_SSL_DLL_Handle, GSSLSSLImports)
  end
  else begin
    if LIB_SSL_110 <> LIB_SSL_300 then
      raise Exception.Create(Format(eossl_libnotfound2,[LIB_SSL_110,LIB_SSL_300]))
    else
      raise Exception.Create(Format(eossl_libnotfound1,[LIB_SSL_110]))
  end;
end;
{$ENDIF}

procedure UnloadSSL;
begin
  if RESTDW_SSL_DLL_Handle > 32 then begin
    FreeLibrary(RESTDW_SSL_DLL_Handle);
    RESTDW_SSL_DLL_Handle := 0;
  end;
end;

function SslGetImports(Handle: THandle; List: array of TOSSLImports): string;
var
  I: integer ;
begin
  Result := '';
  if (Length (List) = 0) then begin
    Result := 'No import list specified' ;
  end;
  for I := 0 to Length(List) - 1 do begin
    if (RESTDW_OPENSSL_VERSION_NUMBER >= List[I].MI) and
       (RESTDW_OPENSSL_VERSION_NUMBER <= List[I].MX) then begin
      {$IFDEF POSIX}
        List[I].F^ := GetProcAddress (Handle, PChar(string(List[I].N)));
      {$ELSE}
        List[I].F^ := GetProcAddress(Handle, List[I].N);
      {$ENDIF}
      if @List[I].F^ = nil then
        Result := Result + String(List[I].N) + ',' ;
    end;
  end;
end;

function BIO_get_flags(b: PBIO): Integer;
begin
  Result := BIO_test_flags(b, not 0);
end;

function BIO_should_retry(b: PBIO): Boolean;
begin
  Result := ((BIO_get_flags(b) and BIO_FLAGS_SHOULD_RETRY) <> 0);
end;

function BIO_should_read(b: PBIO): Boolean;
begin
  Result := ((BIO_get_flags(b) and BIO_FLAGS_READ) <> 0);
end;

function BIO_should_write(b: PBIO): Boolean;
begin
  Result := ((BIO_get_flags(b) and BIO_FLAGS_WRITE) <> 0);
end;

function BIO_should_io_special(b: PBIO): Boolean;
begin
  Result := ((BIO_get_flags(b) and BIO_FLAGS_IO_SPECIAL) <> 0);
end;

function BIO_retry_type(b: PBIO): Integer;
begin
  Result := (BIO_get_flags(b) and BIO_FLAGS_RWS);
end;

function BIO_get_ssl(b: PBIO; s: PSSL): Integer;
begin
  Result := BIO_ctrl(b, BIO_C_GET_SSL, 0, s);
end;

function BIO_pending(b: PBIO): Integer;
begin
  Result := BIO_ctrl(b, _BIO_CTRL_PENDING, 0, nil);
end;

{$IF (NOT Defined(FPC)) AND (CompilerVersion > 21)}
  function SSL_error(const AErrorCode: Integer): String;
  var
    P: TPtrWrapper;
  begin
    P := TMarshal.AllocMem(1024);
    try
      ERR_error_string_n(AErrorCode, P.ToPointer, 1024);
      Result := TMarshal.ReadStringAsAnsi(P);
    finally
      TMarshal.FreeMem(P);
    end;
  end;
{$ELSE}
  function SSL_error(const AErrorCode: Integer): String;
  var
    P: PAnsiChar;
  begin
    P := AllocMem(1024);
    try
      ERR_error_string_n(AErrorCode, P, 1024);
      Result := P^;
    finally
    end;
  end;
{$IFEND}

function SSL_is_fatal_error(const AErrorCode: Integer): Boolean;
begin
  case AErrorCode of
	SSL_ERROR_NONE,
	SSL_ERROR_WANT_READ,
	SSL_ERROR_WANT_WRITE,
	SSL_ERROR_WANT_CONNECT,
	SSL_ERROR_WANT_ACCEPT: Result := False;
    else
      Result := True;
  end;
end;

function SSL_CTX_set_session_cache_mode(ctx: PSSL_CTX; mode: Integer): Integer;
begin
  Result := SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SESS_CACHE_MODE, mode, nil);
end;

function SSL_CTX_add_extra_chain_cert(ctx: PSSL_CTX; cert: PX509): Longword;
begin
  Result := SSL_CTX_ctrl(ctx, SSL_CTRL_EXTRA_CHAIN_CERT, 0, cert);
end;

function SSL_CTX_set_tmp_dh(ctx: PSSL_CTX; dh: Pointer): Integer;
begin
  Result := SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TMP_DH, 0, dh);
end;

function SSL_CTX_set_tmp_ecdh(ctx: PSSL_CTX; ecdh: Pointer): Integer;
begin
  Result := SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TMP_ECDH, 0, ecdh);
end;

function SSL_CTX_set_ecdh_auto(ctx: PSSL_CTX; onoff: Integer): Integer;
begin
  Result := 1;
end;

function SSL_CTX_set_min_proto_version(ctx: PSSL_CTX; version: Integer): Integer;
begin
  Result := SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, Nil);
end;

function SSL_CTX_set_max_proto_version(ctx: PSSL_CTX; version: Integer): Integer;
begin
  Result := SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, Nil);
end;

function SSL_set_tlsext_host_name(const s: PSSL; const name: String): Longint;
begin
  Result := SSL_ctrl(s, SSL_CTRL_SET_TLSEXT_HOSTNAME, TLSEXT_NAMETYPE_host_name, Pointer(Utf8Encode(name)));
end;

function SSL_set_mode(s: PSSL; version: Integer): Integer;
begin
  Result := SSL_ctrl(s, SSL_CTRL_MODE, version, Nil);
end;

function SSL_get_mode(s: PSSL): Integer;
begin
  Result := SSL_ctrl(s, SSL_CTRL_MODE, 0, Nil);
end;

function DTLSv1_get_timeout(s: PSSL; timeval: PTimeVal): LongInt;
begin
  Result := SSL_ctrl(s, DTLS_CTRL_GET_TIMEOUT, 0, timeval);
end;

procedure DTLSv1_handle_timeout(s: PSSL);
begin
  SSL_ctrl(s, DTLS_CTRL_HANDLE_TIMEOUT, 0, Nil);
end;

end.
